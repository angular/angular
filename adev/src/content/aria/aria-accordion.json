{
  "repo": "angular/components",
  "moduleLabel": "@angular/aria/accordion",
  "moduleName": "@angular/aria/accordion",
  "normalizedModuleName": "angular_aria_accordion",
  "entries": [
    {
      "name": "AccordionPanel",
      "isAbstract": false,
      "entryType": "undecorated_class",
      "members": [
        {
          "name": "value",
          "type": "any",
          "memberType": "property",
          "memberTags": [],
          "description": "A local unique identifier for the panel, used to match with its trigger's value.",
          "jsdocTags": []
        },
        {
          "name": "accordionTrigger",
          "type": "WritableSignal<any>",
          "memberType": "property",
          "memberTags": [
            "readonly"
          ],
          "description": "The parent accordion trigger pattern that controls this panel. This is set by AccordionGroup.",
          "jsdocTags": []
        }
      ],
      "generics": [],
      "description": "Represents the content panel of an accordion item. It is controlled by an\nassociated `AccordionTrigger`.",
      "jsdocTags": [],
      "rawComment": "/**\n * Represents the content panel of an accordion item. It is controlled by an\n * associated `AccordionTrigger`.\n */",
      "implements": [],
      "source": {
        "filePath": "src/aria/accordion/accordion.ts",
        "startLine": 35,
        "endLine": 79
      }
    },
    {
      "name": "AccordionTrigger",
      "isAbstract": false,
      "entryType": "directive",
      "members": [
        {
          "name": "value",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input"
          ],
          "description": "A local unique identifier for the trigger, used to match with its panel's value.",
          "jsdocTags": [],
          "inputAlias": "value",
          "isRequiredInput": true
        },
        {
          "name": "disabled",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input"
          ],
          "description": "Whether the trigger is disabled.",
          "jsdocTags": [],
          "inputAlias": "disabled",
          "isRequiredInput": false
        },
        {
          "name": "hardDisabled",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "readonly"
          ],
          "description": "Whether this trigger is completely inaccessible.\n\nTODO(ok7sai): Consider move this to UI patterns.",
          "jsdocTags": []
        },
        {
          "name": "accordionPanel",
          "type": "WritableSignal<any>",
          "memberType": "property",
          "memberTags": [
            "readonly"
          ],
          "description": "The accordion panel pattern controlled by this trigger. This is set by AccordionGroup.",
          "jsdocTags": []
        }
      ],
      "generics": [],
      "description": "Represents the trigger button for an accordion item. It controls the expansion\nstate of an associated `AccordionPanel`.",
      "jsdocTags": [],
      "rawComment": "/**\n * Represents the trigger button for an accordion item. It controls the expansion\n * state of an associated `AccordionPanel`.\n */",
      "implements": [],
      "isStandalone": true,
      "selector": "[ngAccordionTrigger]",
      "exportAs": [
        "ngAccordionTrigger"
      ],
      "source": {
        "filePath": "src/aria/accordion/accordion.ts",
        "startLine": 85,
        "endLine": 138
      }
    },
    {
      "name": "AccordionGroup",
      "isAbstract": false,
      "entryType": "directive",
      "members": [
        {
          "name": "textDirection",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "readonly"
          ],
          "description": "The text direction (ltr or rtl).",
          "jsdocTags": []
        },
        {
          "name": "disabled",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input"
          ],
          "description": "Whether the entire accordion group is disabled.",
          "jsdocTags": [],
          "inputAlias": "disabled",
          "isRequiredInput": false
        },
        {
          "name": "multiExpandable",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input"
          ],
          "description": "Whether multiple accordion items can be expanded simultaneously.",
          "jsdocTags": [],
          "inputAlias": "multiExpandable",
          "isRequiredInput": false
        },
        {
          "name": "value",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input",
            "output"
          ],
          "description": "The values of the current selected/expanded accordions.",
          "jsdocTags": [],
          "inputAlias": "value",
          "isRequiredInput": false,
          "outputAlias": "valueChange"
        },
        {
          "name": "softDisabled",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input"
          ],
          "description": "Whether to allow disabled items to receive focus.",
          "jsdocTags": [],
          "inputAlias": "softDisabled",
          "isRequiredInput": false
        },
        {
          "name": "wrap",
          "type": "any",
          "memberType": "property",
          "memberTags": [
            "input"
          ],
          "description": "Whether keyboard navigation should wrap around from the last item to the first, and vice-versa.",
          "jsdocTags": [],
          "inputAlias": "wrap",
          "isRequiredInput": false
        }
      ],
      "generics": [],
      "description": "Container for a group of accordion items. It manages the overall state and\ninteractions of the accordion, such as keyboard navigation and expansion mode.",
      "jsdocTags": [],
      "rawComment": "/**\n * Container for a group of accordion items. It manages the overall state and\n * interactions of the accordion, such as keyboard navigation and expansion mode.\n */",
      "implements": [],
      "isStandalone": true,
      "selector": "[ngAccordionGroup]",
      "exportAs": [
        "ngAccordionGroup"
      ],
      "source": {
        "filePath": "src/aria/accordion/accordion.ts",
        "startLine": 144,
        "endLine": 207
      }
    },
    {
      "name": "AccordionContent",
      "isAbstract": false,
      "entryType": "undecorated_class",
      "members": [],
      "generics": [],
      "description": "A structural directive that marks the `ng-template` to be used as the content\nfor a `AccordionPanel`. This content can be lazily loaded.",
      "jsdocTags": [],
      "rawComment": "/**\n * A structural directive that marks the `ng-template` to be used as the content\n * for a `AccordionPanel`. This content can be lazily loaded.\n */",
      "implements": [],
      "source": {
        "filePath": "src/aria/accordion/accordion.ts",
        "startLine": 213,
        "endLine": 217
      }
    }
  ],
  "symbols": [
    [
      "Directive",
      "@angular/core"
    ],
    [
      "input",
      "@angular/core"
    ],
    [
      "ElementRef",
      "@angular/core"
    ],
    [
      "inject",
      "@angular/core"
    ],
    [
      "contentChildren",
      "@angular/core"
    ],
    [
      "afterRenderEffect",
      "@angular/core"
    ],
    [
      "signal",
      "@angular/core"
    ],
    [
      "model",
      "@angular/core"
    ],
    [
      "booleanAttribute",
      "@angular/core"
    ],
    [
      "computed",
      "@angular/core"
    ],
    [
      "WritableSignal",
      "@angular/core"
    ],
    [
      "_IdGenerator",
      "@angular/cdk/a11y"
    ],
    [
      "Directionality",
      "@angular/cdk/bidi"
    ],
    [
      "DeferredContent",
      "@angular/aria/deferred-content"
    ],
    [
      "DeferredContentAware",
      "@angular/aria/deferred-content"
    ],
    [
      "AccordionGroupPattern",
      "@angular/aria/private"
    ],
    [
      "AccordionPanelPattern",
      "@angular/aria/private"
    ],
    [
      "AccordionTriggerPattern",
      "@angular/aria/private"
    ],
    [
      "AccordionPanel",
      "@angular/aria/accordion"
    ],
    [
      "AccordionTrigger",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup",
      "@angular/aria/accordion"
    ],
    [
      "AccordionContent",
      "@angular/aria/accordion"
    ],
    [
      "AccordionPanel",
      "@angular/aria/accordion"
    ],
    [
      "AccordionPanel.value",
      "@angular/aria/accordion"
    ],
    [
      "AccordionPanel.accordionTrigger",
      "@angular/aria/accordion"
    ],
    [
      "AccordionTrigger",
      "@angular/aria/accordion"
    ],
    [
      "AccordionTrigger.value",
      "@angular/aria/accordion"
    ],
    [
      "AccordionTrigger.disabled",
      "@angular/aria/accordion"
    ],
    [
      "AccordionTrigger.hardDisabled",
      "@angular/aria/accordion"
    ],
    [
      "AccordionTrigger.accordionPanel",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup.textDirection",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup.disabled",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup.multiExpandable",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup.value",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup.softDisabled",
      "@angular/aria/accordion"
    ],
    [
      "AccordionGroup.wrap",
      "@angular/aria/accordion"
    ],
    [
      "AccordionContent",
      "@angular/aria/accordion"
    ]
  ]
}