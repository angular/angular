{
  "name": "test",
  "command": "ng test [project]",
  "shortDescription": "Runs unit tests in a project.",
  "longDescriptionRelativePath": "@angular/cli/src/commands/test/long-description.md",
  "longDescription": "Takes the name of the project, as specified in the `projects` section of the `angular.json` workspace configuration file.\nWhen a project name is not supplied, it will execute for all projects.\n",
  "aliases": [
    "t"
  ],
  "deprecated": false,
  "options": [
    {
      "name": "browser-viewport",
      "type": "string",
      "description": "Specifies the browser viewport dimensions for browser-based tests in the format `widthxheight`."
    },
    {
      "name": "browsers",
      "type": "array",
      "description": "Specifies the browsers to use for test execution. When not specified, tests are run in a Node.js environment using jsdom. For both Vitest and Karma, browser names ending with 'Headless' (e.g., 'ChromeHeadless') will enable headless mode."
    },
    {
      "name": "build-target",
      "type": "string",
      "description": "Specifies the build target to use for the unit test build in the format `project:target[:configuration]`. This defaults to the `build` target of the current project with the `development` configuration. You can also pass a comma-separated list of configurations. Example: `project:target:production,staging`."
    },
    {
      "name": "configuration",
      "type": "string",
      "aliases": [
        "c"
      ],
      "description": "One or more named builder configurations as a comma-separated list as specified in the \"configurations\" section in angular.json.\nThe builder uses the named configurations to run the given target.\nFor more information, see https://angular.dev/reference/configs/workspace-config#alternate-build-configurations."
    },
    {
      "name": "coverage",
      "type": "boolean",
      "default": false,
      "description": "Enables coverage reporting for tests."
    },
    {
      "name": "coverage-exclude",
      "type": "array",
      "description": "Specifies glob patterns of files to exclude from the coverage report."
    },
    {
      "name": "coverage-include",
      "type": "array",
      "description": "Specifies glob patterns of files to include in the coverage report."
    },
    {
      "name": "coverage-reporters",
      "type": "array",
      "enum": [
        "cobertura",
        "html",
        "json",
        "json-summary",
        "lcov",
        "lcovonly",
        "text",
        "text-summary"
      ],
      "description": "Specifies the reporters to use for coverage results. Each reporter can be a string representing its name, or a tuple containing the name and an options object. Built-in reporters include 'html', 'lcov', 'lcovonly', 'text', 'text-summary', 'cobertura', 'json', and 'json-summary'."
    },
    {
      "name": "debug",
      "type": "boolean",
      "default": false,
      "description": "Enables debugging mode for tests, allowing the use of the Node Inspector."
    },
    {
      "name": "exclude",
      "type": "array",
      "description": "Specifies glob patterns of files to exclude from testing, relative to the project root."
    },
    {
      "name": "filter",
      "type": "string",
      "description": "Specifies a regular expression pattern to match against test suite and test names. Only tests with a name matching the pattern will be executed. For example, `^App` will run only tests in suites beginning with 'App'."
    },
    {
      "name": "help",
      "type": "boolean",
      "description": "Shows a help message for this command in the console."
    },
    {
      "name": "include",
      "type": "array",
      "default": [
        "**/*.spec.ts",
        "**/*.test.ts"
      ],
      "description": "Specifies glob patterns of files to include for testing, relative to the project root. This option also has special handling for directory paths (includes all test files within) and file paths (includes the corresponding test file if one exists)."
    },
    {
      "name": "list-tests",
      "type": "boolean",
      "default": false,
      "description": "Lists all discovered test files and exits the process without building or executing the tests."
    },
    {
      "name": "output-file",
      "type": "string",
      "description": "Specifies a file path for the test report, applying only to the first reporter. To configure output files for multiple reporters, use the tuple format `['reporter-name', { outputFile: '...' }]` within the `reporters` option. When not provided, output is written to the console."
    },
    {
      "name": "progress",
      "type": "boolean",
      "description": "Shows build progress information in the console. Defaults to the `progress` setting of the specified `buildTarget`."
    },
    {
      "name": "project",
      "type": "string",
      "description": "The name of the project to build. Can be an application or a library.",
      "positional": 0
    },
    {
      "name": "providers-file",
      "type": "string",
      "description": "Specifies the path to a TypeScript file that provides an array of Angular providers for the test environment. The file must contain a default export of the provider array."
    },
    {
      "name": "reporters",
      "type": "array",
      "description": "Specifies the reporters to use during test execution. Each reporter can be a string representing its name, or a tuple containing the name and an options object. Built-in reporters include 'default', 'verbose', 'dots', 'json', 'junit', 'tap', 'tap-flat', and 'html'. You can also provide a path to a custom reporter."
    },
    {
      "name": "runner",
      "type": "string",
      "default": "vitest",
      "enum": [
        "karma",
        "vitest"
      ],
      "description": "Specifies the test runner to use for test execution."
    },
    {
      "name": "setup-files",
      "type": "array",
      "description": "A list of paths to global setup files that are executed before the test files. The application's polyfills and the Angular TestBed are always initialized before these files."
    },
    {
      "name": "ts-config",
      "type": "string",
      "description": "The path to the TypeScript configuration file, relative to the workspace root. Defaults to `tsconfig.spec.json` in the project root if it exists. If not specified and the default does not exist, the `tsConfig` from the specified `buildTarget` will be used."
    },
    {
      "name": "watch",
      "type": "boolean",
      "description": "Enables watch mode, which re-runs tests when source files change. Defaults to `true` in TTY environments and `false` otherwise."
    }
  ]
}