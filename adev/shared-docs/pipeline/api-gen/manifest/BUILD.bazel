load("@npm//@angular/build-tooling/bazel:defaults.bzl", "ts_library")
load("@angular//tools/esm-interop:index.bzl", "nodejs_binary")
load("@npm//@angular/build-tooling/bazel/esbuild:index.bzl", "esbuild_esm_bundle")

package(default_visibility = ["//adev/shared-docs/pipeline/api-gen:__subpackages__"])

esbuild_esm_bundle(
    name = "bin",
    entry_point = ":index.ts",
    external = [
        "@angular/compiler-cli",
    ],
    output = "bin.mjs",
    platform = "node",
    target = "es2022",
    deps = [
        ":generate_api_manifest_lib",
        "@angular//packages/compiler-cli",
    ],
)

ts_library(
    name = "generate_api_manifest_lib",
    srcs = glob(["**/*.ts"]),
    devmode_module = "commonjs",
    tsconfig = "//adev:tsconfig.json",
    deps = [
        "@angular//packages/compiler-cli",
        "@npm//@bazel/runfiles",
        "@npm//@types/node",
    ],
)

# Action binary for the api_gen bazel rule.
nodejs_binary(
    name = "generate_api_manifest",
    data = [
        ":bin",
        "@angular//packages/compiler-cli",
    ],
    entry_point = "bin.mjs",
    # Note: Using the linker here as we need it for ESM. The linker is not
    # super reliably when running concurrently on Windows- but we have existing
    # actions using the linker. An alternative would be to:
    #   - bundle the Angular compiler into a CommonJS bundle
    #   - use the patched resolution- but also patch the ESM imports (similar to how FW does it).
    visibility = ["//visibility:public"],
)

# Expose the sources in the dev-infra NPM package.
filegroup(
    name = "files",
    srcs = glob(["**/*"]),
)
