{"version":3,"file":"devtools_spec.js","sourceRoot":"","sources":["devtools_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Component} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {FrameManager} from './application-services/frame_manager';\nimport {DevToolsComponent} from './devtools.component';\nimport {DevToolsTabsComponent} from './devtools-tabs/devtools-tabs.component';\nimport {MessageBus} from '../../../protocol';\nimport {SETTINGS_MOCK} from './application-services/test-utils/settings_mock';\n\n@Component({\n  selector: 'ng-devtools-tabs',\n  template: '',\n})\nexport class MockNgDevToolsTabs {}\n\ndescribe('DevtoolsComponent', () => {\n  let fixture: ComponentFixture<DevToolsComponent>;\n  let component: DevToolsComponent;\n\n  beforeEach(() => {\n    const mockMessageBus = jasmine.createSpyObj('MessageBus', ['on', 'emit', 'once']);\n\n    TestBed.configureTestingModule({\n      providers: [{provide: MessageBus, useValue: mockMessageBus}, SETTINGS_MOCK],\n    }).overrideComponent(DevToolsComponent, {\n      remove: {imports: [DevToolsTabsComponent], providers: [FrameManager]},\n      add: {\n        imports: [MockNgDevToolsTabs],\n        providers: [{provide: FrameManager, useFactory: () => FrameManager.initialize(123)}],\n      },\n    });\n\n    fixture = TestBed.createComponent(DevToolsComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should render ng devtools tabs when Angular Status is EXISTS and is in dev mode and is supported version', () => {\n    component.angularStatus.set(component.AngularStatus.EXISTS);\n    component.angularIsInDevMode.set(true);\n    component.angularVersion.set('0.0.0');\n    component.ivy.set(true);\n    fixture.detectChanges();\n    expect(fixture.nativeElement.querySelector('ng-devtools-tabs')).toBeTruthy();\n  });\n\n  it('should render Angular Devtools dev mode only support text when Angular Status is EXISTS and is angular is not in dev mode', () => {\n    component.angularStatus.set(component.AngularStatus.EXISTS);\n    component.angularIsInDevMode.set(false);\n    fixture.detectChanges();\n    expect(fixture.nativeElement.querySelector('.devtools').textContent).toContain(\n      'We detected an application built with production configuration. Angular DevTools only supports development builds.',\n    );\n  });\n\n  it('should render version support message when Angular Status is EXISTS and angular version is not supported', () => {\n    component.angularStatus.set(component.AngularStatus.EXISTS);\n    component.angularIsInDevMode.set(true);\n    component.angularVersion.set('1.0.0');\n    fixture.detectChanges();\n    expect(fixture.nativeElement.querySelector('.devtools').textContent).toContain(\n      'Angular Devtools only supports Angular versions 12 and above',\n    );\n  });\n\n  it('should render Angular application not detected when Angular Status is DOES_NOT_EXIST', () => {\n    component.angularStatus.set(component.AngularStatus.DOES_NOT_EXIST);\n    fixture.detectChanges();\n    // expect the text to be \"Angular application not detected\"\n    expect(fixture.nativeElement.querySelector('.not-detected').textContent).toContain(\n      'Angular application not detected',\n    );\n  });\n\n  it('should render loading svg when Angular Status is UNKNOWN', () => {\n    component.angularStatus.set(component.AngularStatus.UNKNOWN);\n    fixture.detectChanges();\n    expect(fixture.nativeElement.querySelector('.loading svg')).toBeTruthy();\n  });\n});\n"]}