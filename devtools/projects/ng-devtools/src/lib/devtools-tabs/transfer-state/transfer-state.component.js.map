{"version":3,"file":"transfer-state.component.js","sourceRoot":"","sources":["transfer-state.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Component,\n  inject,\n  signal,\n  computed,\n  linkedSignal,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {Clipboard} from '@angular/cdk/clipboard';\nimport {MatIcon} from '@angular/material/icon';\nimport {MatTooltip} from '@angular/material/tooltip';\nimport {\n  MatTable,\n  MatHeaderCell,\n  MatCell,\n  MatHeaderRow,\n  MatRow,\n  MatColumnDef,\n  MatHeaderCellDef,\n  MatCellDef,\n  MatHeaderRowDef,\n  MatRowDef,\n} from '@angular/material/table';\nimport {ButtonComponent} from '../../shared/button/button.component';\nimport {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\nimport {formatBytes, getFormattedValue} from '../../shared/utils/formatting';\n\ninterface TransferStateItem {\n  key: string;\n  value: TransferStateValue;\n  type: string;\n  size: string;\n  isExpanded?: boolean;\n  isCopied?: boolean;\n}\n\nexport const LINE_CLAMP_LIMIT = 5;\nexport const COPY_FEEDBACK_TIMEOUT = 2000;\n\n@Component({\n  selector: 'ng-transfer-state',\n  standalone: true,\n  imports: [\n    MatIcon,\n    MatTooltip,\n    MatTable,\n    MatHeaderCell,\n    MatCell,\n    MatHeaderRow,\n    MatRow,\n    MatColumnDef,\n    MatHeaderCellDef,\n    MatCellDef,\n    MatHeaderRowDef,\n    MatRowDef,\n    ButtonComponent,\n  ],\n  templateUrl: './transfer-state.component.html',\n  styleUrls: ['./transfer-state.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TransferStateComponent {\n  private messageBus = inject(MessageBus) as MessageBus<Events>;\n  private clipboard = inject(Clipboard);\n\n  readonly transferStateData = signal<Record<string, TransferStateValue> | null>(null);\n  readonly error = signal<string | null>(null);\n  readonly isLoading = computed(() => !this.transferStateData() && !this.error());\n\n  readonly transferStateItems = linkedSignal<TransferStateItem[]>(() => {\n    const data = this.transferStateData();\n    if (!data) return [];\n\n    return Object.entries(data).map(([key, value]) => ({\n      key,\n      value,\n      type: this.getValueType(value),\n      size: this.getValueSize(value),\n      isExpanded: false,\n      isCopied: false,\n    }));\n  });\n\n  readonly hasData = computed(() => this.transferStateItems().length > 0);\n  readonly getFormattedValue = getFormattedValue;\n\n  readonly totalSize = computed(() => {\n    const items = this.transferStateItems();\n    if (items.length === 0) return '0 B';\n\n    let totalBytes = 0;\n    for (const item of items) {\n      const str = typeof item.value === 'string' ? item.value : JSON.stringify(item.value);\n      totalBytes += new Blob([str]).size;\n    }\n\n    return formatBytes(totalBytes);\n  });\n\n  displayedColumns: string[] = ['key', 'type', 'size', 'value'];\n\n  constructor() {\n    this.loadTransferState();\n  }\n\n  private getValueType(value: TransferStateValue): string {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    return typeof value;\n  }\n\n  getValueSize(value: TransferStateValue): string {\n    const str = JSON.stringify(value);\n    const bytes = new Blob([str]).size;\n    return formatBytes(bytes);\n  }\n\n  private loadTransferState(): void {\n    this.transferStateData.set(null);\n    this.error.set(null);\n\n    try {\n      this.messageBus.emit('getTransferState');\n      this.messageBus.on('transferStateData', (data: Record<string, TransferStateValue> | null) => {\n        this.transferStateData.set(data);\n        if (!data) {\n          this.error.set(\n            'No transfer state found. Make sure you are inspecting a page with Server-Side Rendering (SSR) enabled.',\n          );\n        }\n      });\n    } catch (err) {\n      this.error.set(`Error loading transfer state: ${err}`);\n    }\n  }\n\n  isValueLong(element: HTMLElement, isExpanded: boolean = false): boolean {\n    if (isExpanded) return true;\n\n    return element.scrollHeight > element.clientHeight;\n  }\n\n  toggleExpanded(item: TransferStateItem): void {\n    this.transferStateItems.update((items) =>\n      items.map((i) => (i.key === item.key ? {...i, isExpanded: !i.isExpanded} : i)),\n    );\n  }\n\n  copyToClipboard(item: TransferStateItem): void {\n    try {\n      const textToCopy =\n        typeof item.value === 'string' ? item.value : JSON.stringify(item.value, null, 2);\n\n      this.clipboard.copy(textToCopy);\n\n      this.transferStateItems.update((items) =>\n        items.map((i) => (i.key === item.key ? {...i, isCopied: true} : i)),\n      );\n\n      setTimeout(() => {\n        this.transferStateItems.update((items) =>\n          items.map((i) => (i.key === item.key ? {...i, isCopied: false} : i)),\n        );\n      }, COPY_FEEDBACK_TIMEOUT);\n    } catch (err) {\n      console.error('Failed to copy to clipboard:', err);\n    }\n  }\n}\n"]}