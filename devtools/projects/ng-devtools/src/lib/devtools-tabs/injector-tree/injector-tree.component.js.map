{"version":3,"file":"injector-tree.component.js","sourceRoot":"","sources":["injector-tree.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n  signal,\n  untracked,\n  viewChild,\n} from '@angular/core';\nimport {\n  ComponentExplorerView,\n  DevToolsNode,\n  Events,\n  MessageBus,\n  SerializedInjector,\n  SerializedProviderRecord,\n} from '../../../../../protocol';\n\nimport {TreeD3Node, TreeVisualizerConfig} from '../../shared/tree-visualizer/tree-visualizer';\nimport {TreeVisualizerComponent} from '../../shared/tree-visualizer/tree-visualizer.component';\nimport {InjectorProvidersComponent} from './injector-providers/injector-providers.component';\nimport {\n  d3InjectorTreeLinkModifier,\n  d3InjectorTreeNodeModifier,\n  filterOutAngularInjectors,\n  filterOutInjectorsWithNoProviders,\n  generateEdgeIdsFromNodeIds,\n  getInjectorIdsToRootFromNode,\n  grabInjectorPathsFromDirectiveForest,\n  InjectorTreeD3Node,\n  InjectorTreeNode,\n  InjectorTreeVisualizer,\n  splitInjectorPathsIntoElementAndEnvironmentPaths,\n  transformInjectorResolutionPathsIntoTree,\n} from './injector-tree-fns';\nimport {\n  ResponsiveSplitConfig,\n  ResponsiveSplitDirective,\n} from '../../shared/split/responsive-split.directive';\nimport {SplitAreaDirective} from '../../shared/split/splitArea.directive';\nimport {SplitComponent} from '../../shared/split/split.component';\nimport {Direction} from '../../shared/split/interface';\nimport {DocsRefButtonComponent} from '../../shared/docs-ref-button/docs-ref-button.component';\n\nconst ENV_HIERARCHY_VER_SIZE = 35;\nconst EL_HIERARCHY_VER_SIZE = 65;\nconst HIERARCHY_HOR_SIZE = 50;\n\nconst INIT_SNAP_ZOOM_SCALE = 0.7;\nconst SNAP_ZOOM_SCALE = 0.8;\n\n@Component({\n  selector: 'ng-injector-tree',\n  imports: [\n    SplitComponent,\n    SplitAreaDirective,\n    InjectorProvidersComponent,\n    TreeVisualizerComponent,\n    ResponsiveSplitDirective,\n    DocsRefButtonComponent,\n  ],\n  templateUrl: `./injector-tree.component.html`,\n  styleUrls: ['./injector-tree.component.scss'],\n  host: {\n    '[hidden]': 'hidden()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InjectorTreeComponent {\n  private readonly elementTree = viewChild<InjectorTreeVisualizer>('elementTree');\n  private readonly environmentTree = viewChild<InjectorTreeVisualizer>('environmentTree');\n\n  private readonly messageBus = inject<MessageBus<Events>>(MessageBus);\n\n  protected readonly selectedNode = signal<InjectorTreeD3Node | null>(null);\n  protected readonly injectorProvidersEnabled = signal<boolean>(false);\n  protected readonly injectorProvidersVisible = computed(\n    () => this.injectorProvidersEnabled() && this.selectedNode() && this.providers().length > 0,\n  );\n\n  protected readonly providers = input.required<SerializedProviderRecord[]>();\n  protected readonly componentExplorerView = input.required<ComponentExplorerView | null>();\n  protected readonly hidden = input<boolean>(false);\n\n  protected readonly diDebugAPIsAvailable = computed<boolean>(() => {\n    const view = this.componentExplorerView();\n    return !!(view && view.forest.length && view.forest[0].resolutionPath);\n  });\n\n  private rawDirectiveForest: DevToolsNode[] = [];\n  private elementToEnvironmentPath: Map<string, SerializedInjector[]> = new Map();\n\n  private hideInjectorsWithNoProviders = false;\n  private hideFrameworkInjectors = false;\n\n  protected readonly elementInjectorTree = signal<InjectorTreeNode | null>(null);\n  protected readonly environmentInjectorTree = signal<InjectorTreeNode | null>(null);\n\n  protected readonly responsiveSplitConfig: ResponsiveSplitConfig = {\n    defaultDirection: 'vertical',\n    aspectRatioBreakpoint: 1.5,\n    breakpointDirection: 'horizontal',\n  };\n\n  protected readonly envHierarchySize = signal<number>(0);\n  protected readonly elHierarchySize = signal<number>(0);\n\n  environmentTreeConfig: Partial<TreeVisualizerConfig<InjectorTreeNode>> = {\n    d3NodeModifier: d3InjectorTreeNodeModifier,\n    d3LinkModifier: d3InjectorTreeLinkModifier,\n    arrowDirection: 'child-to-parent',\n  };\n\n  elementTreeConfig: Partial<TreeVisualizerConfig<InjectorTreeNode>> = {\n    nodeSeparation: () => 1,\n    d3NodeModifier: d3InjectorTreeNodeModifier,\n    d3LinkModifier: d3InjectorTreeLinkModifier,\n    arrowDirection: 'child-to-parent',\n  };\n\n  constructor() {\n    afterRenderEffect({\n      write: () => {\n        const view = this.componentExplorerView();\n        if (!this.diDebugAPIsAvailable() || !view || untracked(this.hidden)) {\n          return;\n        }\n\n        this.init();\n        this.rawDirectiveForest = view.forest;\n        untracked(() => this.updateInjectorTreeVisualization(view.forest));\n      },\n    });\n  }\n\n  toggleHideInjectorsWithNoProviders(): void {\n    this.hideInjectorsWithNoProviders = !this.hideInjectorsWithNoProviders;\n    this.refreshVisualizer();\n  }\n\n  toggleHideAngularInjectors(): void {\n    this.hideFrameworkInjectors = !this.hideFrameworkInjectors;\n    this.refreshVisualizer();\n  }\n\n  onTreeRender(tree: InjectorTreeVisualizer, {initial}: {initial: boolean}) {\n    if (initial) {\n      this.snapToRoot(tree);\n    }\n  }\n\n  selectInjectorByNode(node: InjectorTreeD3Node): void {\n    this.selectedNode.set(node);\n    this.injectorProvidersEnabled.set(true);\n    this.highlightPathFromSelectedInjector();\n\n    const selectedNode = this.selectedNode();\n    if (selectedNode) {\n      this.snapToNode(selectedNode);\n      this.getProviders(selectedNode);\n    }\n  }\n\n  onResponsiveSplitDirChange(direction: Direction) {\n    if (direction === 'vertical') {\n      this.envHierarchySize.set(ENV_HIERARCHY_VER_SIZE);\n      this.elHierarchySize.set(EL_HIERARCHY_VER_SIZE);\n    } else {\n      this.envHierarchySize.set(HIERARCHY_HOR_SIZE);\n      this.elHierarchySize.set(HIERARCHY_HOR_SIZE);\n    }\n  }\n\n  private init() {\n    this.messageBus.on('highlightComponent', (id: number) => {\n      const elementTree = this.elementTree();\n      if (!elementTree) {\n        return;\n      }\n      const injectorNode = this.getNodeByComponentId(elementTree, id);\n      if (injectorNode === null) {\n        return;\n      }\n\n      this.selectInjectorByNode(injectorNode);\n    });\n  }\n\n  private refreshVisualizer(): void {\n    this.updateInjectorTreeVisualization(this.rawDirectiveForest);\n\n    if (this.selectedNode()?.data.injector.type === 'environment') {\n      this.snapToRoot(this.environmentTree());\n    }\n\n    if (this.selectedNode()) {\n      this.selectInjectorByNode(this.selectedNode()!);\n    }\n  }\n\n  /**\n   *\n   * Converts the array of resolution paths for every node in the\n   * directive forest into a tree structure that can be rendered by the\n   * injector tree visualizer.\n   *\n   */\n  private updateInjectorTreeVisualization(forestWithInjectorPaths: DevToolsNode[]): void {\n    // At this point we have a forest of directive trees where each node has a resolution path.\n    // We want to convert this nested forest into an array of resolution paths.\n    // Our ultimate goal is to convert this array of resolution paths into a tree structure.\n    // Directive forest -> Array of resolution paths -> Tree of resolution paths\n\n    // First, pick out the resolution paths.\n    let injectorPaths = grabInjectorPathsFromDirectiveForest(forestWithInjectorPaths);\n\n    if (this.hideFrameworkInjectors) {\n      injectorPaths = filterOutAngularInjectors(injectorPaths);\n    }\n\n    if (this.hideInjectorsWithNoProviders) {\n      injectorPaths = filterOutInjectorsWithNoProviders(injectorPaths);\n    }\n\n    // In Angular we have two types of injectors, element injectors and environment injectors.\n    // We want to split the resolution paths into two groups, one for each type of injector.\n    const {elementPaths, environmentPaths, startingElementToEnvironmentPath} =\n      splitInjectorPathsIntoElementAndEnvironmentPaths(injectorPaths);\n    this.elementToEnvironmentPath = startingElementToEnvironmentPath;\n\n    // Here for our 2 groups of resolution paths, we want to convert them into a tree structure.\n    const elementInjectorTree = transformInjectorResolutionPathsIntoTree(elementPaths);\n    const environmentInjectorTree = transformInjectorResolutionPathsIntoTree(environmentPaths);\n\n    this.elementInjectorTree.set(elementInjectorTree);\n    this.environmentInjectorTree.set(environmentInjectorTree);\n\n    this.highlightPathFromSelectedInjector();\n  }\n\n  private snapToRoot(tree: InjectorTreeVisualizer | undefined) {\n    if (!tree) {\n      return;\n    }\n\n    // wait for CD to run before snapping to root so that svg container can change size.\n    setTimeout(() => {\n      if (tree.root().children) {\n        // Selecting the child of the root since the root is hidden.\n        tree.snapToNode(tree.root().children[0], INIT_SNAP_ZOOM_SCALE);\n      }\n    });\n  }\n\n  private snapToNode(node?: InjectorTreeD3Node) {\n    if (!node) {\n      return;\n    }\n\n    // wait for CD to run before snapping to root so that svg container can change size.\n    setTimeout(() => {\n      const {type} = node.data.injector;\n\n      if (type === 'element') {\n        this.elementTree()?.snapToNode(node.data, SNAP_ZOOM_SCALE);\n      } else if (type === 'environment') {\n        this.environmentTree()?.snapToNode(node.data, SNAP_ZOOM_SCALE);\n      }\n    });\n  }\n\n  private reselectSelectedNode(): void {\n    const selectedNode = this.selectedNode();\n    if (!selectedNode) {\n      return;\n    }\n\n    const injector = selectedNode.data.injector;\n    let newNode: TreeD3Node<InjectorTreeNode> | null = null;\n\n    if (injector.type === 'element') {\n      newNode = this.elementTree()?.getNodeById(injector.id) ?? null;\n    } else if (injector.type === 'environment') {\n      newNode = this.environmentTree()?.getNodeById(injector.id) ?? null;\n    }\n\n    if (newNode) {\n      this.selectedNode.set(newNode);\n    } else {\n      this.selectedNode.set(null);\n      this.snapToRoot(this.environmentTree());\n      this.snapToRoot(this.elementTree());\n    }\n  }\n\n  private getNodeByComponentId(\n    tree: InjectorTreeVisualizer,\n    id: number,\n  ): InjectorTreeD3Node | null {\n    const element = tree.svg.querySelector(`.node[data-component-id=\"${id}\"]`);\n    if (element === null) {\n      return null;\n    }\n\n    const injectorId = element.getAttribute('data-id');\n    if (injectorId === null) {\n      return null;\n    }\n\n    return tree.getNodeById(injectorId) ?? null;\n  }\n\n  private highlightPathFromSelectedInjector(): void {\n    const environmentTree = this.environmentTree();\n    const elementTree = this.elementTree();\n    if (!environmentTree || !elementTree) {\n      return;\n    }\n\n    this.unhighlightAllEdges(elementTree);\n    this.unhighlightAllNodes(elementTree);\n    this.unhighlightAllEdges(environmentTree);\n    this.unhighlightAllNodes(environmentTree);\n\n    this.reselectSelectedNode();\n\n    if (this.selectedNode() === null) {\n      return;\n    }\n\n    if (this.selectedNode()!.data.injector.type === 'element') {\n      const idsToRoot = getInjectorIdsToRootFromNode(this.selectedNode()!);\n      idsToRoot.forEach((id) => this.highlightNodeById(elementTree, id));\n      const edgeIds = generateEdgeIdsFromNodeIds(idsToRoot);\n      edgeIds.forEach((edgeId) => this.highlightEdgeById(elementTree, edgeId));\n\n      const environmentPath =\n        this.elementToEnvironmentPath.get(this.selectedNode()!.data.injector.id) ?? [];\n      environmentPath.forEach((injector) => this.highlightNodeById(environmentTree, injector.id));\n      const environmentEdgeIds = generateEdgeIdsFromNodeIds(\n        environmentPath.map((injector) => injector.id),\n      );\n      environmentEdgeIds.forEach((edgeId) => this.highlightEdgeById(environmentTree, edgeId));\n    } else {\n      const idsToRoot = getInjectorIdsToRootFromNode(this.selectedNode()!);\n      idsToRoot.forEach((id) => this.highlightNodeById(environmentTree, id));\n      const edgeIds = generateEdgeIdsFromNodeIds(idsToRoot);\n      edgeIds.forEach((edgeId) => this.highlightEdgeById(environmentTree, edgeId));\n    }\n  }\n\n  private highlightNodeById(tree: InjectorTreeVisualizer, id: string): void {\n    const node = tree.svg.querySelector(`.node[data-id=\"${id}\"]`);\n    if (!node) {\n      return;\n    }\n    if (this.selectedNode()!.data.injector.id === id) {\n      node.classList.add('selected');\n    }\n    node.classList.add('highlighted');\n  }\n\n  private highlightEdgeById(tree: InjectorTreeVisualizer, id: string): void {\n    const edge = tree.svg.querySelector(`.link[data-id=\"${id}\"]`);\n    if (!edge) {\n      return;\n    }\n\n    edge.classList.add('highlighted');\n  }\n\n  private unhighlightAllEdges(tree: InjectorTreeVisualizer): void {\n    const edges = tree.svg.querySelectorAll('.link');\n    for (const edge of edges) {\n      edge.classList.remove('highlighted');\n    }\n  }\n\n  private unhighlightAllNodes(tree: InjectorTreeVisualizer): void {\n    const nodes = tree.svg.querySelectorAll('.node');\n    for (const node of nodes) {\n      node.classList.remove('selected');\n      node.classList.remove('highlighted');\n    }\n  }\n\n  private getProviders(node: InjectorTreeD3Node) {\n    const injector = node.data.injector;\n    this.messageBus.emit('getInjectorProviders', [\n      {\n        id: injector.id,\n        type: injector.type,\n        name: injector.name,\n      },\n    ]);\n  }\n}\n"]}