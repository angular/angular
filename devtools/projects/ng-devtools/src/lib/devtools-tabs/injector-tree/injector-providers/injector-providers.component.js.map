{"version":3,"file":"injector-providers.component.js","sourceRoot":"","sources":["injector-providers.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n  output,\n  signal,\n} from '@angular/core';\nimport {MatIcon} from '@angular/material/icon';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTooltip} from '@angular/material/tooltip';\nimport {\n  Events,\n  MessageBus,\n  SerializedInjector,\n  SerializedProviderRecord,\n} from '../../../../../../protocol';\nimport {ButtonComponent} from '../../../shared/button/button.component';\n\n@Component({\n  selector: 'ng-injector-providers',\n  templateUrl: './injector-providers.component.html',\n  styleUrl: './injector-providers.component.scss',\n  imports: [MatTableModule, MatIcon, MatTooltip, ButtonComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InjectorProvidersComponent {\n  readonly injector = input.required<SerializedInjector>();\n  readonly providers = input<SerializedProviderRecord[]>([]);\n  protected readonly close = output<void>();\n\n  readonly searchToken = signal('');\n  readonly searchType = signal('');\n  readonly visibleProviders = computed(() => {\n    const searchToken = this.searchToken().toLowerCase();\n    const searchType = this.searchType();\n\n    const predicates: ((provider: SerializedProviderRecord) => boolean)[] = [];\n    searchToken &&\n      predicates.push((provider) => provider.token.toLowerCase().includes(searchToken));\n    searchType && predicates.push((provider) => provider.type === searchType);\n\n    return this.providers().filter((provider) =>\n      predicates.every((predicate) => predicate(provider)),\n    );\n  });\n\n  providerTypeToLabel = {\n    type: 'Type',\n    existing: 'useExisting',\n    factory: 'useFactory',\n    class: 'useClass',\n    value: 'useValue',\n  };\n\n  providerTypes = Object.keys(this.providerTypeToLabel);\n\n  messageBus = inject<MessageBus<Events>>(MessageBus);\n\n  select(row: SerializedProviderRecord) {\n    const {id, type, name} = this.injector();\n    this.messageBus.emit('logProvider', [{id, type, name}, row]);\n  }\n\n  get displayedColumns(): string[] {\n    if (this.injector()?.type === 'element') {\n      return ['token', 'type', 'isViewProvider', 'log'];\n    }\n    return ['token', 'type', 'log'];\n  }\n}\n"]}