{"version":3,"file":"injector-tree-fns.js","sourceRoot":"","sources":["injector-tree-fns.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DevToolsNode, SerializedInjector} from '../../../../../protocol';\nimport {\n  SvgD3Link,\n  SvgD3Node,\n  TreeD3Node,\n  TreeNode,\n} from '../../shared/tree-visualizer/tree-visualizer';\nimport {TreeVisualizerComponent} from '../../shared/tree-visualizer/tree-visualizer.component';\n\n// Types\n\nexport interface InjectorPath {\n  node: DevToolsNode;\n  path: SerializedInjector[];\n}\n\nexport type InjectorTreeVisualizer = TreeVisualizerComponent<InjectorTreeNode>;\n\nexport interface InjectorTreeNode extends TreeNode {\n  injector: SerializedInjector;\n  children: InjectorTreeNode[];\n}\n\nexport type InjectorTreeD3Node = TreeD3Node<InjectorTreeNode>;\n\n// Consts\n\nconst ANGULAR_DIRECTIVES = [\n  'NgClass',\n  'NgComponentOutlet',\n  'NgFor',\n  'NgForOf',\n  'NgIf',\n  'NgOptimizedImage',\n  'NgPlural',\n  'NgPluralCase',\n  'NgStyle',\n  'NgSwitch',\n  'NgSwitchCase',\n  'NgSwitchDefault',\n  'NgTemplateOutlet',\n  'AbstractFormGroupDirective',\n  'CheckboxControlValueAccessor',\n  'CheckboxRequiredValidator',\n  'DefaultValueAccessor',\n  'EmailValidator',\n  'FormArrayName',\n  'FormControlDirective',\n  'FormControlName',\n  'FormGroupDirective',\n  'FormGroupName',\n  'MaxLengthValidator',\n  'MaxValidator',\n  'MinLengthValidator',\n  'MinValidator',\n  'NgControlStatus',\n  'NgControlStatusGroup',\n  'NgForm',\n  'NgModel',\n  'NgModelGroup',\n  'NgSelectOption',\n  'NumberValueAccessor',\n  'PatternValidator',\n  'RadioControlValueAccessor',\n  'RangeValueAccessor',\n  'RequiredValidator',\n  'SelectControlValueAccessor',\n  'SelectMultipleControlValueAccessor',\n  'RouterLink',\n  'RouterLinkActive',\n  'RouterLinkWithHref',\n  'RouterOutlet',\n  'UpgradeComponent',\n];\n\nconst IGNORED_ANGULAR_INJECTORS = new Set([\n  'Null Injector',\n  ...ANGULAR_DIRECTIVES,\n  ...ANGULAR_DIRECTIVES.map((directive) => `_${directive}`),\n]);\n\nconst INJECTOR_TYPE_CLASS_MAP = new Map<SerializedInjector['type'], string>([\n  ['imported-module', 'node-imported-module'],\n  ['environment', 'node-environment'],\n  ['element', 'node-element'],\n  ['null', 'node-null'],\n]);\n\n// Functions\n\nexport function getInjectorIdsToRootFromNode(node: InjectorTreeD3Node): string[] {\n  const ids: string[] = [];\n  let currentNode = node;\n\n  while (currentNode) {\n    ids.push(currentNode.data.injector.id);\n    currentNode = currentNode.parent!;\n  }\n\n  return ids;\n}\n\nexport function generateEdgeIdsFromNodeIds(nodeIds: string[]) {\n  const edgeIds: string[] = [];\n\n  for (let i = 0; i < nodeIds.length - 1; i++) {\n    edgeIds.push(`${nodeIds[i]}-to-${nodeIds[i + 1]}`);\n  }\n\n  return edgeIds;\n}\n\nexport function equalInjector(a: SerializedInjector, b: SerializedInjector): boolean {\n  return a.id === b.id;\n}\n\nexport function findExistingPath(\n  path: InjectorTreeNode[],\n  value: SerializedInjector,\n): InjectorTreeNode | null {\n  return path.find((injector) => equalInjector(injector.injector, value)) || null;\n}\n\nexport function transformInjectorResolutionPathsIntoTree(\n  injectorPaths: InjectorPath[],\n): InjectorTreeNode {\n  const injectorTree: InjectorTreeNode[] = [];\n  const injectorIdToNode = new Map<string, DevToolsNode>();\n\n  for (const {path: injectorPath, node} of injectorPaths) {\n    let currentLevel = injectorTree;\n\n    for (const [index, injector] of injectorPath.entries()) {\n      if (injector.type === 'element' && index === injectorPath.length - 1) {\n        injectorIdToNode.set(injector.id, node);\n      }\n      let existingPath = findExistingPath(currentLevel, injector);\n\n      if (existingPath) {\n        currentLevel = existingPath.children;\n        continue;\n      }\n\n      const next: InjectorTreeNode = {\n        label: injector.name || '',\n        injector,\n        children: [],\n      };\n\n      if (injector.providers !== undefined) {\n        const providerText = injector.providers === 1 ? 'Provider' : 'Providers';\n        next.subLabel = `${injector.providers} ${providerText}`;\n      }\n\n      next.injector.node = injectorIdToNode.get(next.injector.id);\n      currentLevel.push(next);\n      currentLevel = next.children;\n    }\n  }\n\n  return {\n    label: '',\n    injector: {name: '', type: 'hidden', id: 'N/A'},\n    children: injectorTree,\n  };\n}\n\nexport function grabInjectorPathsFromDirectiveForest(\n  directiveForest: DevToolsNode[],\n): InjectorPath[] {\n  const injectorPaths: InjectorPath[] = [];\n\n  const grabInjectorPaths = (node: DevToolsNode) => {\n    if (node.resolutionPath) {\n      injectorPaths.push({node, path: node.resolutionPath.slice().reverse()});\n    }\n\n    node.children.forEach((child) => grabInjectorPaths(child));\n  };\n\n  for (const directive of directiveForest) {\n    grabInjectorPaths(directive);\n  }\n\n  return injectorPaths;\n}\n\nexport function splitInjectorPathsIntoElementAndEnvironmentPaths(injectorPaths: InjectorPath[]): {\n  elementPaths: InjectorPath[];\n  environmentPaths: InjectorPath[];\n  startingElementToEnvironmentPath: Map<string, SerializedInjector[]>;\n} {\n  const elementPaths: InjectorPath[] = [];\n  const environmentPaths: InjectorPath[] = [];\n  const startingElementToEnvironmentPath = new Map<string, SerializedInjector[]>();\n\n  injectorPaths.forEach(({node, path}) => {\n    // split the path into two paths,\n    // one for the element injector and one for the environment injector\n    let environmentPath: SerializedInjector[] = [];\n    let elementPath: SerializedInjector[] = [];\n    const firstElementIndex = path.findIndex((injector) => injector.type === 'element');\n    if (firstElementIndex === -1) {\n      environmentPath = path;\n      elementPath = [];\n    } else {\n      environmentPath = path.slice(0, firstElementIndex);\n      elementPath = path.slice(firstElementIndex);\n    }\n\n    elementPaths.push({\n      node,\n      path: elementPath,\n    });\n\n    environmentPaths.push({\n      node,\n      path: environmentPath,\n    });\n\n    if (elementPath[elementPath.length - 1]) {\n      // reverse each path to get the paths starting from the starting element\n      startingElementToEnvironmentPath.set(\n        elementPath[elementPath.length - 1].id,\n        environmentPath.slice().reverse(),\n      );\n    }\n  });\n\n  return {\n    elementPaths: elementPaths.filter(({path}) =>\n      path.every((injector) => injector.type === 'element'),\n    ),\n    environmentPaths,\n    startingElementToEnvironmentPath,\n  };\n}\n\nexport function filterOutInjectorsWithNoProviders(injectorPaths: InjectorPath[]): InjectorPath[] {\n  for (const injectorPath of injectorPaths) {\n    injectorPath.path = injectorPath.path.filter(\n      ({providers}) => providers === undefined || providers > 0,\n    );\n  }\n\n  return injectorPaths;\n}\n\nexport function filterOutAngularInjectors(injectorPaths: InjectorPath[]): InjectorPath[] {\n  return injectorPaths.map(({node, path}) => {\n    return {node, path: path.filter((injector) => !IGNORED_ANGULAR_INJECTORS.has(injector.name))};\n  });\n}\n\nexport function d3InjectorTreeLinkModifier(link: SvgD3Link<InjectorTreeNode>) {\n  link\n    .attr('hidden', (node: InjectorTreeD3Node) => {\n      const parentId = node.parent?.data.injector.id;\n      return parentId === 'N/A' ? 'true' : null;\n    })\n    .attr('data-id', (node: InjectorTreeD3Node) => {\n      const from = node.data.injector.id;\n      const to = node.parent?.data.injector.id;\n\n      if (from && to) {\n        return `${from}-to-${to}`;\n      }\n      return '';\n    });\n}\n\nexport function d3InjectorTreeNodeModifier(d3Node: SvgD3Node<InjectorTreeNode>) {\n  d3Node\n    .attr('class', (node: InjectorTreeD3Node) => {\n      return [d3Node.attr('class'), INJECTOR_TYPE_CLASS_MAP.get(node.data.injector.type) ?? '']\n        .filter((c) => !!c)\n        .join(' ');\n    })\n    .attr('hidden', (node: InjectorTreeD3Node) => (node.data.injector.id === 'N/A' ? 'true' : null))\n    .attr('data-id', (node: InjectorTreeD3Node) => {\n      return node.data.injector.id;\n    })\n    .attr('data-component-id', (node: InjectorTreeD3Node) => {\n      if (node.data.injector.type === 'element') {\n        const injector = node.data.injector;\n        return injector.node?.component?.id ?? -1;\n      }\n      return -1;\n    });\n}\n"]}