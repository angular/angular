{"version":3,"file":"recording-timeline.component.js","sourceRoot":"","sources":["recording-timeline.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  effect,\n  input,\n  linkedSignal,\n  output,\n  signal,\n} from '@angular/core';\nimport {ProfilerFrame} from '../../../../../../protocol';\nimport {Observable} from 'rxjs';\n\nimport {createFilter, Filter, noopFilter} from './filter';\nimport {mergeFrames} from './record-formatter/frame-merger';\nimport {VisualizationMode} from './shared/visualization-mode';\n\nimport {RecordingVisualizerComponent} from './recording-visualizer/recording-visualizer.component';\nimport {FrameSelectorComponent} from './frame-selector/frame-selector.component';\nimport {RecordingTimelineControlsComponent} from './recording-timeline-controls/recording-timeline-controls.component';\nimport {VisualizerControlsComponent} from './visualizer-controls/visualizer-controls.component';\nimport {estimateFrameRate} from './shared/estimate-frame-rate';\n\n@Component({\n  selector: 'ng-recording-timeline',\n  templateUrl: './recording-timeline.component.html',\n  styleUrls: ['./recording-timeline.component.scss'],\n  imports: [\n    RecordingTimelineControlsComponent,\n    FrameSelectorComponent,\n    RecordingVisualizerComponent,\n    VisualizerControlsComponent,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecordingTimelineComponent {\n  readonly stream = input.required<Observable<ProfilerFrame[]>>();\n  readonly exportProfile = output<void>();\n\n  readonly visualizationMode = signal(VisualizationMode.BarGraph);\n  readonly changeDetection = signal(false);\n  readonly selectFrames = signal<number[]>([]);\n  readonly frame = computed(() => {\n    const indexes = this.selectFrames();\n    const data = this.frames();\n    return mergeFrames(indexes.map((index) => data[index]).filter(Boolean));\n  });\n\n  private readonly _filter = signal<Filter>(noopFilter);\n  protected readonly visualizing = signal(false);\n\n  // Ensure that `allFrames` is always cleaned if the stream changes.\n  // This is a safe guard in case the component is not destroyed when a recording is cleared\n  // (i.e. don't rely on the UI).\n  private readonly allFrames = linkedSignal<Observable<ProfilerFrame[]>, ProfilerFrame[]>({\n    source: this.stream,\n    computation: () => [],\n  });\n\n  protected readonly frames = computed(() => {\n    const filter = this._filter();\n    return this.allFrames().filter((node) => filter(node));\n  });\n\n  readonly currentFrameRate = computed(() => estimateFrameRate(this.frame()?.duration ?? 0));\n\n  readonly hasFrames = computed(() => this.allFrames().length > 0);\n\n  constructor() {\n    effect((cleanup) => {\n      const data = this.stream();\n      const subscription = data.subscribe({\n        next: (frames: ProfilerFrame[]): void => {\n          this.allFrames.update((all) => all.concat(frames));\n        },\n        complete: (): void => {\n          this.visualizing.set(true);\n        },\n      });\n      cleanup(() => subscription.unsubscribe());\n    });\n  }\n\n  setFilter(filter: string): void {\n    this._filter.set(createFilter(filter));\n  }\n}\n"]}