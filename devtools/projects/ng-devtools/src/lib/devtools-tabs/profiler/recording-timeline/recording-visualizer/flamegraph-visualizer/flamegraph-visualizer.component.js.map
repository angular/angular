{"version":3,"file":"flamegraph-visualizer.component.js","sourceRoot":"","sources":["flamegraph-visualizer.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAClG,OAAO,EAAC,mBAAmB,EAA2B,MAAM,gBAAgB,CAAC;AAG7E,OAAO,EAAC,YAAY,EAAC,MAAM,mDAAmD,CAAC;AAC/E,OAAO,EACL,mBAAmB,EAEnB,wBAAwB,GACzB,MAAM,kEAAkE,CAAC;AAE1E,OAAO,EAAC,sBAAsB,EAAC,MAAM,wCAAwC,CAAC;AAUvE,IAAM,6BAA6B,GAAnC,MAAM,6BAA6B;IAAnC;QACE,iBAAY,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;QAClC,iBAAY,GAAG,QAAQ,CAAC,GAAG,EAAE;YACpC,OAAO;gBACL,IAAI,CAAC,UAAU,CAAC,WAAW,CACzB,IAAI,CAAC,KAAK,EAAE,EACZ,IAAI,CAAC,eAAe,EAAE,EACtB,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CACjC;aACF,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,SAAI,GAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAEnB,eAAU,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC/C,WAAM,GAAG,QAAQ,CAAkB,GAAG,EAAE;YAC/C,qDAAqD;YACrD,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,MAAM;gBAChD,CAAC,CAAC;oBACE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;oBACf,UAAU,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;oBACrB,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;iBACpB;gBACH,CAAC,CAAC;oBACE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;oBACf,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;oBACpB,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;iBACpB,CAAC;QACR,CAAC,CAAC,CAAC;QAEM,eAAU,GAAG,MAAM,EAAiB,CAAC;QAErC,UAAK,GAAG,KAAK,CAAC,QAAQ,EAAiB,CAAC;QAExC,oBAAe,GAAG,KAAK,CAAC,QAAQ,EAAW,CAAC;IAmBvD,CAAC;IAjBC,WAAW,CAAC,KAAc;QACxB,IAAI,KAAK,CAAC,KAAK,KAAK,wBAAwB,EAAE,CAAC;YAC7C,OAAO;QACT,CAAC;QAED,MAAM,cAAc,GAAG,KAAuB,CAAC;QAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,cAAc;YACrB,kBAAkB,EAAE,aAAa;SAClC,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,cAA8B;QAC5C,OAAO,sBAAsB,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACpE,CAAC;CACF,CAAA;AApDY,6BAA6B;IAPzC,SAAS,CAAC;QACT,QAAQ,EAAE,0BAA0B;QACpC,WAAW,EAAE,wCAAwC;QACrD,SAAS,EAAE,CAAC,wCAAwC,CAAC;QACrD,OAAO,EAAE,CAAC,mBAAmB,CAAC;QAC9B,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,6BAA6B,CAoDzC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, computed, inject, input, output} from '@angular/core';\nimport {NgxFlamegraphModule, FlamegraphColor, RawData} from 'ngx-flamegraph';\nimport {ProfilerFrame} from '../../../../../../../../protocol';\n\nimport {ThemeService} from '../../../../../application-services/theme_service';\nimport {\n  FlamegraphFormatter,\n  FlamegraphNode,\n  ROOT_LEVEL_ELEMENT_LABEL,\n} from '../../record-formatter/flamegraph-formatter/flamegraph-formatter';\n\nimport {formatDirectiveProfile} from '../profile-formatter/profile-formatter';\nimport {SelectedDirective, SelectedEntry} from '../recording-visualizer-types';\n\n@Component({\n  selector: 'ng-flamegraph-visualizer',\n  templateUrl: './flamegraph-visualizer.component.html',\n  styleUrls: ['./flamegraph-visualizer.component.scss'],\n  imports: [NgxFlamegraphModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlamegraphVisualizerComponent {\n  public themeService = inject(ThemeService);\n  readonly profilerBars = computed(() => {\n    return [\n      this._formatter.formatFrame(\n        this.frame(),\n        this.changeDetection(),\n        this.themeService.currentTheme(),\n      ),\n    ];\n  });\n  view: [number, number] = [235, 200];\n\n  private readonly _formatter = new FlamegraphFormatter();\n  readonly colors = computed<FlamegraphColor>(() => {\n    // Represent `dynamic-blue-02` and `dynamic-green-01`\n    return this.themeService.currentTheme() === 'dark'\n      ? {\n          hue: [211, 123],\n          saturation: [100, 31],\n          lightness: [65, 49],\n        }\n      : {\n          hue: [214, 125],\n          saturation: [85, 37],\n          lightness: [50, 41],\n        };\n  });\n\n  readonly nodeSelect = output<SelectedEntry>();\n\n  readonly frame = input.required<ProfilerFrame>();\n\n  readonly changeDetection = input.required<boolean>();\n\n  selectFrame(frame: RawData): void {\n    if (frame.label === ROOT_LEVEL_ELEMENT_LABEL) {\n      return;\n    }\n\n    const flameGraphNode = frame as FlamegraphNode;\n    const directiveData = this.formatEntryData(flameGraphNode);\n\n    this.nodeSelect.emit({\n      entry: flameGraphNode,\n      selectedDirectives: directiveData,\n    });\n  }\n\n  formatEntryData(flameGraphNode: FlamegraphNode): SelectedDirective[] {\n    return formatDirectiveProfile(flameGraphNode.original.directives);\n  }\n}\n"]}