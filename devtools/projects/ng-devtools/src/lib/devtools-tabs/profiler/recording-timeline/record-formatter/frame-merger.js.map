{"version":3,"file":"frame-merger.js","sourceRoot":"","sources":["frame-merger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DirectiveProfile,\n  ElementProfile,\n  LifecycleProfile,\n  ProfilerFrame,\n} from '../../../../../../../protocol';\n\nconst mergeProperty = (mergeInProp: number | undefined, value: number | undefined) => {\n  if (mergeInProp === undefined) {\n    return value;\n  }\n  if (value === undefined) {\n    return mergeInProp;\n  }\n  return mergeInProp + value;\n};\n\nconst mergeDirective = (mergeIn: DirectiveProfile, second: DirectiveProfile) => {\n  mergeIn.changeDetection = mergeProperty(mergeIn.changeDetection, second.changeDetection);\n  Object.keys(mergeIn.lifecycle).forEach((key) => {\n    const hook = key as keyof LifecycleProfile;\n    mergeIn.lifecycle[hook] = mergeProperty(mergeIn.lifecycle[hook], second.lifecycle[hook]);\n  });\n};\n\nconst mergeDirectives = (mergeIn: ElementProfile[], second: ElementProfile[]) => {\n  for (let i = 0; i < second.length; i++) {\n    if (!mergeIn[i]) {\n      mergeIn[i] = {\n        children: [],\n        directives: [],\n        type: 'element',\n      };\n    }\n    second[i].directives.forEach((d, idx) => {\n      const mergeInDirective = mergeIn[i].directives[idx];\n      if (mergeInDirective && mergeInDirective.name === d.name) {\n        mergeDirective(mergeInDirective, d);\n      } else {\n        mergeIn[i].directives.push(d);\n      }\n    });\n    mergeDirectives(mergeIn[i].children, second[i].children);\n  }\n};\n\nconst mergeFrame = (mergeIn: ProfilerFrame, second: ProfilerFrame) => {\n  mergeIn.duration += second.duration;\n  mergeIn.source = '';\n  mergeDirectives(mergeIn.directives, second.directives);\n};\n\nexport const mergeFrames = (frames: ProfilerFrame[]): ProfilerFrame | null => {\n  if (!frames || !frames.length) {\n    return null;\n  }\n  const first = JSON.parse(JSON.stringify(frames[0])) as ProfilerFrame;\n  for (let i = 1; i < frames.length; i++) {\n    mergeFrame(first, frames[i]);\n  }\n  return first;\n};\n"]}