{"version":3,"file":"frame-merger.spec.js","sourceRoot":"","sources":["frame-merger.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementProfile, ProfilerFrame} from '../../../../../../../protocol';\n\nimport {mergeFrames} from './frame-merger';\n\ndescribe('mergeFrames', () => {\n  it('should work with empty frames', () => {\n    expect(mergeFrames([])).toBeNull();\n  });\n\n  it('should work with a single frame', () => {\n    const frame: ProfilerFrame = {\n      directives: [\n        {\n          children: [],\n          directives: [\n            {\n              isComponent: false,\n              isElement: false,\n              lifecycle: {},\n              outputs: {},\n              name: 'Foo',\n            },\n          ],\n          type: 'element',\n        },\n      ],\n      duration: 5,\n      source: 'foo',\n    };\n    const result = mergeFrames([frame]);\n\n    expect(result).toEqual(frame);\n\n    // Should be different reference\n    expect(result).not.toBe(frame);\n  });\n\n  it('should merge frames when nesting matches', () => {\n    const frame: ProfilerFrame = {\n      directives: [\n        {\n          children: [],\n          directives: [\n            {\n              isComponent: false,\n              isElement: false,\n              lifecycle: {},\n              outputs: {},\n              changeDetection: 10,\n              name: 'Foo',\n            },\n          ],\n          type: 'element',\n        },\n      ],\n      duration: 5,\n      source: 'foo',\n    };\n    const result = mergeFrames([frame, frame]);\n\n    expect(result).toEqual({\n      directives: [\n        {\n          children: [],\n          directives: [\n            {\n              isComponent: false,\n              isElement: false,\n              lifecycle: {},\n              outputs: {},\n              changeDetection: 20,\n              name: 'Foo',\n            },\n          ],\n          type: 'element',\n        },\n      ],\n      duration: 10,\n      source: '',\n    });\n  });\n\n  it('should merge frames when nesting does not match', () => {\n    const frame: ProfilerFrame = {\n      directives: [\n        {\n          children: [],\n          directives: [\n            {\n              isComponent: false,\n              isElement: false,\n              lifecycle: {},\n              outputs: {},\n              changeDetection: 10,\n              name: 'Foo',\n            },\n          ],\n          type: 'element',\n        },\n      ],\n      duration: 5,\n      source: 'foo',\n    };\n\n    const frame2: ProfilerFrame = {\n      directives: [\n        {\n          children: [\n            {\n              children: [],\n              directives: [\n                {\n                  isComponent: false,\n                  isElement: false,\n                  lifecycle: {},\n                  outputs: {},\n                  changeDetection: 10,\n                  name: 'Foo',\n                },\n              ],\n              type: 'element',\n            },\n          ],\n          directives: [\n            {\n              isComponent: false,\n              isElement: false,\n              lifecycle: {},\n              outputs: {},\n              changeDetection: 10,\n              name: 'Foo',\n            },\n          ],\n          type: 'element',\n        },\n      ],\n      duration: 5,\n      source: 'foo',\n    };\n    const result = mergeFrames([frame, frame2]);\n\n    expect(result).toEqual({\n      directives: [\n        {\n          children: [\n            {\n              children: [],\n              directives: [\n                {\n                  isComponent: false,\n                  isElement: false,\n                  lifecycle: {},\n                  outputs: {},\n                  changeDetection: 10,\n                  name: 'Foo',\n                },\n              ],\n              type: 'element',\n            },\n          ],\n          directives: [\n            {\n              isComponent: false,\n              isElement: false,\n              lifecycle: {},\n              outputs: {},\n              changeDetection: 20,\n              name: 'Foo',\n            },\n          ],\n          type: 'element',\n        },\n      ],\n      duration: 10,\n      source: '',\n    });\n  });\n});\n"]}