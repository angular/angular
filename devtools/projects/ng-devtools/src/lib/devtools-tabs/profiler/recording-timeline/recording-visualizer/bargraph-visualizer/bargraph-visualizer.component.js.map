{"version":3,"file":"bargraph-visualizer.component.js","sourceRoot":"","sources":["bargraph-visualizer.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAG1F,OAAO,EAAC,iBAAiB,EAAe,MAAM,iDAAiD,CAAC;AAEhG,OAAO,EAAC,sBAAsB,EAAC,MAAM,wCAAwC,CAAC;AAC9E,OAAO,EAAC,iBAAiB,EAAC,MAAM,iCAAiC,CAAC;AAU3D,IAAM,2BAA2B,GAAjC,MAAM,2BAA2B;IAAjC;QACI,eAAU,GAAG,MAAM,EAAiB,CAAC;QAE7B,eAAU,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACtD,UAAK,GAAG,KAAK,CAAC,QAAQ,EAAiB,CAAC;QAExC,mBAAc,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAe7E,CAAC;IAbC,eAAe,CAAC,YAA0B;QACxC,OAAO,sBAAsB,CAAC,YAAY,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU,CAAC,IAAkB;QAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,IAAI;YACX,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC5C,OAAO,EAAC,IAAI,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAC,CAAC;YAC5C,CAAC,CAAC;YACF,kBAAkB,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;SAC/C,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AArBY,2BAA2B;IAPvC,SAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,WAAW,EAAE,sCAAsC;QACnD,SAAS,EAAE,CAAC,sCAAsC,CAAC;QACnD,OAAO,EAAE,CAAC,iBAAiB,CAAC;QAC5B,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,2BAA2B,CAqBvC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, computed, input, output} from '@angular/core';\nimport {ProfilerFrame} from '../../../../../../../../protocol';\n\nimport {BarGraphFormatter, BargraphNode} from '../../record-formatter/bargraph-formatter/index';\n\nimport {formatDirectiveProfile} from '../profile-formatter/profile-formatter';\nimport {BarChartComponent} from './bar-chart/bar-chart.component';\nimport {SelectedDirective, SelectedEntry} from '../recording-visualizer-types';\n\n@Component({\n  selector: 'ng-bargraph-visualizer',\n  templateUrl: './bargraph-visualizer.component.html',\n  styleUrls: ['./bargraph-visualizer.component.scss'],\n  imports: [BarChartComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BargraphVisualizerComponent {\n  readonly nodeSelect = output<SelectedEntry>();\n\n  private readonly _formatter = new BarGraphFormatter();\n  frame = input.required<ProfilerFrame>();\n\n  profileRecords = computed(() => this._formatter.formatFrame(this.frame()));\n\n  formatEntryData(bargraphNode: BargraphNode): SelectedDirective[] {\n    return formatDirectiveProfile(bargraphNode.directives ?? []);\n  }\n\n  selectNode(node: BargraphNode): void {\n    this.nodeSelect.emit({\n      entry: node,\n      parentHierarchy: node.parents.map((element) => {\n        return {name: element.directives[0].name};\n      }),\n      selectedDirectives: this.formatEntryData(node),\n    });\n  }\n}\n"]}