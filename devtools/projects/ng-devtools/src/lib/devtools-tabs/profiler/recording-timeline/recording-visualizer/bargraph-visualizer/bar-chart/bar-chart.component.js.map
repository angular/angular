{"version":3,"file":"bar-chart.component.js","sourceRoot":"","sources":["bar-chart.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAkBnF,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAAvB;QACI,SAAI,GAAG,KAAK,CAAiB,EAAE,CAAC,CAAC;QAEjC,iBAAY,GAAG,QAAQ,CAAC,GAAG,EAAE;YACpC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,MAAM,MAAM,GAAc,EAAE,CAAC;YAC7B,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC5E,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,CAAC,IAAI,CAAC;oBACV,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC;oBACtB,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;oBAC/B,IAAI,EAAE,IAAI,CAAC,KAAK;oBAChB,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC;iBAC1B,CAAC,CAAC;YACL,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;QAEM,aAAQ,GAAG,MAAM,EAAgB,CAAC;IAC7C,CAAC;CAAA,CAAA;AApBY,iBAAiB;IAN7B,SAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,WAAW,EAAE,4BAA4B;QACzC,SAAS,EAAE,CAAC,4BAA4B,CAAC;QACzC,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,iBAAiB,CAoB7B;;AAED,MAAM,UAAU,aAAa,CAAC,GAAiB;IAC7C,OAAO,GAAG,GAAG,CAAC,KAAK,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAC7D,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WACjC,EAAE,CAAC;AACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, computed, input, output} from '@angular/core';\n\nimport {BargraphNode} from '../../../record-formatter/bargraph-formatter/bargraph-formatter';\n\ninterface BarData {\n  label: string;\n  count: number;\n  width: number;\n  time: number;\n  text: string;\n}\n\n@Component({\n  selector: 'ng-bar-chart',\n  templateUrl: './bar-chart.component.html',\n  styleUrls: ['./bar-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BarChartComponent {\n  readonly data = input<BargraphNode[]>([]);\n\n  readonly internalData = computed(() => {\n    const nodes = this.data() ?? [];\n    const values: BarData[] = [];\n    const max = nodes.reduce((a: number, c) => Math.max(a, c.value), -Infinity);\n    for (const node of nodes) {\n      values.push({\n        label: node.label,\n        count: node.count ?? 1,\n        width: (node.value / max) * 100,\n        time: node.value,\n        text: createBarText(node),\n      });\n    }\n    return values;\n  });\n\n  readonly barClick = output<BargraphNode>();\n}\n\nexport function createBarText(bar: BargraphNode) {\n  return `${bar.label} | ${bar.value.toFixed(1)} ms | ${bar.count} ${\n    bar.count === 1 ? 'instance' : 'instances'\n  }`;\n}\n"]}