{"version":3,"file":"tree-map-formatter.js","sourceRoot":"","sources":["tree-map-formatter.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;AAUpD,MAAM,OAAO,gBAAiB,SAAQ,eAA4B;IAAlE;;QACE,UAAK,GAAG,IAAI,OAAO,EAAE,CAAC;IAiDxB,CAAC;IA/CU,WAAW,CAAC,MAAqB;QACxC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,QAAQ,GAAkB,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC3C,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,MAAM,GAAG,GAAG;YACV,EAAE,EAAE,aAAa;YACjB,IAAI;YACJ,KAAK,EAAE,IAAI;YACX,QAAQ;YACR,QAAQ,EAAE,IAAI;SACf,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;IACb,CAAC;IAEQ,QAAQ,CACf,KAAoB,EACpB,QAA0B,EAC1B,OAA2B,IAAI;QAE/B,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;gBACpD,OAAO;YACT,CAAC;YACD,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACxC,MAAM,IAAI,GAAgB;gBACxB,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC3B,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,OAAO;gBACd,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,OAAO;aAClB,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACrD,IAAI,IAAI,EAAE,CAAC;gBACT,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;YACzB,CAAC;YACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementProfile, type ProfilerFrame} from '../../../../../../../../protocol';\n\nimport {RecordFormatter} from '../record-formatter';\n\nexport interface TreeMapNode {\n  id: string;\n  value: number;\n  size: number;\n  children: TreeMapNode[];\n  original: ElementProfile | null;\n}\n\nexport class TreeMapFormatter extends RecordFormatter<TreeMapNode> {\n  cache = new WeakMap();\n\n  override formatFrame(record: ProfilerFrame): TreeMapNode {\n    if (this.cache.has(record)) {\n      return this.cache.get(record);\n    }\n\n    const children: TreeMapNode[] = [];\n    this.addFrame(children, record.directives);\n    const size = children.reduce((accum, curr) => {\n      return accum + curr.size;\n    }, 0);\n\n    const out = {\n      id: 'Application',\n      size,\n      value: size,\n      children,\n      original: null,\n    };\n    this.cache.set(record, out);\n    return out;\n  }\n\n  override addFrame(\n    nodes: TreeMapNode[],\n    elements: ElementProfile[],\n    prev: TreeMapNode | null = null,\n  ): void {\n    elements.forEach((element) => {\n      if (!element) {\n        console.error('Unable to insert undefined element');\n        return;\n      }\n      const nodeVal = super.getValue(element);\n      const node: TreeMapNode = {\n        id: super.getLabel(element),\n        size: nodeVal,\n        value: nodeVal,\n        children: [],\n        original: element,\n      };\n      this.addFrame(node.children, element.children, node);\n      if (prev) {\n        prev.size += node.size;\n      }\n      nodes.push(node);\n    });\n  }\n}\n"]}