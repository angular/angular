{"version":3,"file":"bargraph-formatter.js","sourceRoot":"","sources":["bargraph-formatter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DirectiveProfile,\n  ElementProfile,\n  type ProfilerFrame,\n} from '../../../../../../../../protocol';\n\nimport {RecordFormatter} from '../record-formatter';\n\nexport interface BargraphNode {\n  parents: ElementProfile[];\n  value: number;\n  label: string;\n  original: ElementProfile;\n  count: number; // number of merged nodes with the same label\n  directives?: DirectiveProfile[];\n}\n\nexport class BarGraphFormatter extends RecordFormatter<BargraphNode[]> {\n  cache = new WeakMap();\n\n  override formatFrame(frame: ProfilerFrame): BargraphNode[] {\n    if (this.cache.has(frame)) {\n      return this.cache.get(frame);\n    }\n\n    const result: BargraphNode[] = [];\n    this.addFrame(result, frame.directives);\n    // Remove nodes with 0 value.\n    const nodesWithValue = result.filter((element) => element.value > 0);\n\n    // Merge nodes with the same label.\n    const uniqueBarGraphNodes: {[key: string]: BargraphNode} = {};\n    nodesWithValue.forEach((node) => {\n      if (uniqueBarGraphNodes[node.label] === undefined) {\n        uniqueBarGraphNodes[node.label] = {\n          label: node.label,\n          value: node.value,\n          original: node.original,\n          directives: [...node.original.directives],\n          parents: [],\n          count: 1,\n        };\n      } else {\n        // sum values of merged nodes\n        uniqueBarGraphNodes[node.label].value += node.value;\n        // merge directives of merged nodes\n        uniqueBarGraphNodes[node.label].directives!.push(...node.original.directives);\n        // increment count of merged nodes with the same label\n        uniqueBarGraphNodes[node.label].count++;\n      }\n    });\n\n    // Sort nodes by value.\n    const out = Object.values(uniqueBarGraphNodes).sort((a, b) => b.value - a.value);\n    this.cache.set(frame, out);\n    return out;\n  }\n\n  override addFrame(\n    nodes: BargraphNode[],\n    elements: ElementProfile[],\n    parents: ElementProfile[] = [],\n  ): number {\n    let timeSpent = 0;\n    elements.forEach((element) => {\n      // Possibly undefined because of the insertion on the backend.\n      if (!element) {\n        console.error('Unable to insert undefined element');\n        return;\n      }\n\n      timeSpent += this.addFrame(nodes, element.children, parents.concat(element));\n      timeSpent += super.getValue(element);\n\n      element.directives.forEach((dir) => {\n        const innerNode: BargraphNode = {\n          parents,\n          value: super.getDirectiveValue(dir),\n          label: dir.name,\n          original: element,\n          count: 1,\n        };\n        nodes.push(innerNode);\n      });\n    });\n    return timeSpent;\n  }\n}\n"]}