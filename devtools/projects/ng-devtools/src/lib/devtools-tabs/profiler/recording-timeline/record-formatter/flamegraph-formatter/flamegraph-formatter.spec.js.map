{"version":3,"file":"flamegraph-formatter.spec.js","sourceRoot":"","sources":["flamegraph-formatter.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EACL,kCAAkC,EAClC,aAAa,EACb,kCAAkC,EAClC,aAAa,GACd,MAAM,oCAAoC,CAAC;AAE5C,OAAO,EAAC,mBAAmB,EAAiB,MAAM,wBAAwB,CAAC;AAE3E,MAAM,SAAS,GAAG,IAAI,mBAAmB,EAAE,CAAC;AAE5C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,KAA+B,CAAC;IACpC,IAAI,SAAS,CAAC;IAEd,UAAU,CAAC,GAAG,EAAE;QACd,KAAK,GAAG;YACN,GAAG,EAAE,EAAE;YACP,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE,EAAE;SACX,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {AppEntry} from '../record-formatter';\nimport {\n  NESTED_FORMATTED_FLAMEGRAPH_RECORD,\n  NESTED_RECORD,\n  SIMPLE_FORMATTED_FLAMEGRAPH_RECORD,\n  SIMPLE_RECORD,\n} from '../record-formatter-spec-constants';\n\nimport {FlamegraphFormatter, FlamegraphNode} from './flamegraph-formatter';\n\nconst formatter = new FlamegraphFormatter();\n\ndescribe('addFrame cases', () => {\n  let entry: AppEntry<FlamegraphNode>;\n  let timeSpent;\n\n  beforeEach(() => {\n    entry = {\n      app: [],\n      timeSpent: 0,\n      source: '',\n    };\n  });\n\n  it('add frame for simple case', () => {\n    timeSpent = formatter.addFrame(entry.app, SIMPLE_RECORD);\n    expect(timeSpent).toBe(17);\n    expect(entry.app).toEqual(SIMPLE_FORMATTED_FLAMEGRAPH_RECORD);\n  });\n\n  it('add frame for deeply nested records', () => {\n    timeSpent = formatter.addFrame(entry.app, NESTED_RECORD);\n    expect(timeSpent).toBe(21);\n    expect(entry.app).toEqual(NESTED_FORMATTED_FLAMEGRAPH_RECORD);\n  });\n});\n"]}