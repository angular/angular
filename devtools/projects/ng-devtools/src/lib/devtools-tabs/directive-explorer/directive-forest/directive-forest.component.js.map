{"version":3,"file":"directive-forest.component.js","sourceRoot":"","sources":["directive-forest.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CdkVirtualScrollViewport,\n  CdkFixedSizeVirtualScroll,\n  CdkVirtualForOf,\n} from '@angular/cdk/scrolling';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {\n  afterRenderEffect,\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  DestroyRef,\n  effect,\n  ElementRef,\n  HostListener,\n  inject,\n  input,\n  output,\n  signal,\n  viewChild,\n} from '@angular/core';\nimport {DevToolsNode, ElementPosition, Events, MessageBus} from '../../../../../../protocol';\n\nimport {TabUpdate} from '../../tab-update/index';\n\nimport {ComponentDataSource, FlatNode} from './component-data-source';\nimport {getFullNodeNameString, isChildOf, parentCollapsed} from './directive-forest-utils';\nimport {IndexedNode} from './index-forest';\nimport {FilterComponent, FilterFn} from './filter/filter.component';\nimport {TreeNodeComponent, NodeTextMatch} from './tree-node/tree-node.component';\nimport {directiveForestFilterFnGenerator} from './filter/directive-forest-filter-fn-generator';\nimport {Debouncer} from '../../../shared/utils/debouncer';\n\nconst NODE_ITEM_HEIGHT = 18; // px; Required for CDK Virtual Scroll\nconst RESIZE_OBSERVER_DEBOUNCE = 250; // ms\n\n@Component({\n  selector: 'ng-directive-forest',\n  templateUrl: './directive-forest.component.html',\n  styleUrls: ['./directive-forest.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    FilterComponent,\n    CdkVirtualScrollViewport,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    TreeNodeComponent,\n  ],\n})\nexport class DirectiveForestComponent {\n  private readonly tabUpdate = inject(TabUpdate);\n  private readonly messageBus = inject<MessageBus<Events>>(MessageBus);\n  private readonly elementRef = inject(ElementRef);\n\n  readonly forest = input<DevToolsNode[]>([]);\n  readonly showCommentNodes = input<boolean>(false);\n  readonly currentSelectedElement = input.required<IndexedNode>();\n\n  readonly selectNode = output<IndexedNode | null>();\n  readonly selectDomElement = output<IndexedNode>();\n  readonly setParents = output<FlatNode[] | null>();\n  readonly highlightComponent = output<ElementPosition>();\n  readonly removeComponentHighlight = output<void>();\n  readonly toggleInspector = output<void>();\n\n  readonly viewport = viewChild.required<CdkVirtualScrollViewport>(CdkVirtualScrollViewport);\n\n  readonly selectedNode = signal<FlatNode | null>(null);\n  readonly highlightIdInTreeFromElement = signal<number | null>(null);\n  readonly matchedNodes = signal<Map<number, NodeTextMatch[]>>(new Map()); // Node index, NodeTextMatch\n  readonly matchesCount = computed(() => this.matchedNodes().size);\n  readonly currentlyMatchedIndex = signal<number>(-1);\n  protected readonly selectedNodeIdx = computed(() => {\n    const node = this.selectedNode();\n    if (node) {\n      return this.dataSource.data.indexOf(node);\n    }\n    return -1;\n  });\n\n  readonly treeControl = new FlatTreeControl<FlatNode>(\n    (node) => node!.level,\n    (node) => node.expandable,\n  );\n  readonly dataSource = new ComponentDataSource(this.treeControl);\n  readonly itemHeight = NODE_ITEM_HEIGHT;\n  readonly filterGenerator = directiveForestFilterFnGenerator;\n\n  private parents!: FlatNode[];\n  private initialized = false;\n  private forestRoot: FlatNode | null = null;\n\n  constructor() {\n    this.subscribeToInspectorEvents();\n    afterRenderEffect({\n      read: () => {\n        // Listen for tab updates to reset the scroll position to the top\n        // This ensures the viewport is properly updated when switching tabs\n        this.tabUpdate.tabUpdate();\n\n        const viewport = this.viewport();\n        viewport.scrollToIndex(0);\n        viewport.checkViewportSize();\n      },\n    });\n\n    effect(() => {\n      const result = this.updateForest(this.forest());\n\n      const changed =\n        result.movedItems.length || result.newItems.length || result.removedItems.length;\n\n      if (changed) {\n        this.reselectNodeOnUpdate();\n      }\n    });\n\n    this.handleViewportResize();\n  }\n\n  handleSelectDomElement(node: FlatNode): void {\n    this.selectDomElement.emit(node.original);\n  }\n\n  highlightNode(node: FlatNode): void {\n    this.highlightIdInTreeFromElement.set(null);\n    this.highlightComponent.emit(node.position);\n  }\n\n  removeHighlight(): void {\n    this.removeComponentHighlight.emit();\n  }\n\n  selectAndEnsureVisible(node: FlatNode): void {\n    this.select(node);\n\n    const scrollParent = this.viewport().elementRef.nativeElement;\n    // The top most point we see an element\n    const top = scrollParent.scrollTop;\n    // That's the bottom most point we currently see an element.\n    const parentHeight = scrollParent.offsetHeight;\n    const bottom = top + parentHeight;\n    const idx = this.dataSource.expandedDataValues.findIndex((el) => el.id === node.id);\n    // The node might be hidden.\n    if (idx < 0) {\n      return;\n    }\n    const itemTop = idx * this.itemHeight;\n    if (itemTop < top) {\n      scrollParent.scrollTo({top: itemTop});\n    } else if (bottom < itemTop + this.itemHeight) {\n      scrollParent.scrollTo({top: itemTop - parentHeight + this.itemHeight});\n    }\n  }\n\n  select(node: FlatNode): void {\n    this.populateParents(node.position);\n    this.selectNode.emit(node.original);\n    this.selectedNode.set(node);\n  }\n\n  clearSelectedNode(): void {\n    this.selectNode.emit(null);\n    this.selectedNode.set(null);\n    this.parents = [];\n    this.setParents.emit(null);\n  }\n\n  @HostListener('document:keydown.ArrowUp', ['$event'])\n  navigateUp(event: Event): void {\n    if (this.isEditingDirectiveState(event)) {\n      return;\n    }\n    event.preventDefault();\n\n    const data = this.dataSource.expandedDataValues;\n    const selectedNode = this.selectedNode();\n    let prevIdx = data.findIndex((e) => selectedNode && e.id === selectedNode.id) - 1;\n    if (prevIdx < 0) {\n      return;\n    }\n    let prevNode = data[prevIdx];\n    const currentNode = data[prevIdx + 1];\n    if (prevNode.position.length <= currentNode.position.length) {\n      return this.selectAndEnsureVisible(data[prevIdx]);\n    }\n    while (prevIdx >= 0 && parentCollapsed(prevIdx, data, this.treeControl)) {\n      prevIdx--;\n      prevNode = data[prevIdx];\n    }\n    this.selectAndEnsureVisible(data[prevIdx]);\n  }\n\n  @HostListener('document:keydown.ArrowDown', ['$event'])\n  navigateDown(event: Event): void {\n    if (this.isEditingDirectiveState(event)) {\n      return;\n    }\n    event.preventDefault();\n\n    const data = this.dataSource.expandedDataValues;\n    const selectedNode = this.selectedNode();\n    let idx = data.findIndex((e) => selectedNode && e.id === selectedNode.id);\n    const currentNode = data[idx];\n    if (!this.treeControl.isExpanded(currentNode) && currentNode.expandable) {\n      for (let i = idx + 1; i < data.length; i++) {\n        const node = data[i];\n        if (!isChildOf(node.position, currentNode.position)) {\n          idx = i;\n          break;\n        }\n      }\n    } else {\n      idx++;\n    }\n    if (idx >= data.length) {\n      return;\n    }\n    this.selectAndEnsureVisible(data[idx]);\n  }\n\n  @HostListener('document:keydown.ArrowLeft', ['$event'])\n  collapseCurrent(event: Event): void {\n    if (this.isEditingDirectiveState(event)) {\n      return;\n    }\n    const selectedNode = this.selectedNode();\n    if (!selectedNode) {\n      return;\n    }\n    this.treeControl.collapse(selectedNode);\n    event.preventDefault();\n  }\n\n  @HostListener('document:keydown.ArrowRight', ['$event'])\n  expandCurrent(event: Event): void {\n    if (this.isEditingDirectiveState(event)) {\n      return;\n    }\n    const selectedNode = this.selectedNode();\n    if (!selectedNode) {\n      return;\n    }\n    this.treeControl.expand(selectedNode);\n    event.preventDefault();\n  }\n\n  isEditingDirectiveState(event: Event): boolean {\n    return (event.target as Element).tagName === 'INPUT' || !this.selectedNode;\n  }\n\n  handleFilter(filterFn: FilterFn): void {\n    this.currentlyMatchedIndex.set(-1);\n    this.matchedNodes.set(new Map());\n\n    for (let i = 0; i < this.dataSource.data.length; i++) {\n      const node = this.dataSource.data[i];\n      const fullName = getFullNodeNameString(node);\n      const matches = filterFn(fullName);\n\n      if (matches.length) {\n        this.matchedNodes.update((matched) => {\n          const map = new Map(matched);\n          map.set(i, matches);\n          return map;\n        });\n      }\n    }\n\n    // Select the first match, if there are any.\n    if (this.matchesCount()) {\n      this.navigateMatchedNode('next');\n    }\n  }\n\n  navigateMatchedNode(dir: 'next' | 'prev') {\n    const dirIdx = dir === 'next' ? 1 : -1;\n    const indexesOfMatchedNodes = Array.from(this.matchedNodes());\n    const newMatchedIndex =\n      (this.currentlyMatchedIndex() + dirIdx + indexesOfMatchedNodes.length) %\n      indexesOfMatchedNodes.length;\n\n    const [nodeIdxToSelect] = indexesOfMatchedNodes[newMatchedIndex];\n    const nodeToSelect = this.dataSource.data[nodeIdxToSelect];\n    if (nodeIdxToSelect !== undefined) {\n      this.treeControl.expand(nodeToSelect);\n      this.selectAndEnsureVisible(nodeToSelect);\n\n      // Set the `currentlyMatchedIndex` after `selectAndEnsureVisible` since it resets it.\n      this.currentlyMatchedIndex.set(newMatchedIndex);\n    }\n    const nodeIsVisible = this.dataSource.expandedDataValues.find((node) => node === nodeToSelect);\n    if (!nodeIsVisible) {\n      this.expandParents();\n    }\n  }\n\n  private reselectNodeOnUpdate(): void {\n    const nodeThatStillExists = this.dataSource.getFlatNodeFromIndexedNode(\n      this.currentSelectedElement(),\n    );\n    if (nodeThatStillExists) {\n      this.select(nodeThatStillExists);\n    } else if (this.forestRoot) {\n      this.select(this.forestRoot);\n    } else {\n      this.clearSelectedNode();\n    }\n  }\n\n  private updateForest(forest: DevToolsNode[]): {\n    newItems: FlatNode[];\n    movedItems: FlatNode[];\n    removedItems: FlatNode[];\n  } {\n    const result = this.dataSource.update(forest, this.showCommentNodes());\n    this.forestRoot = this.dataSource.data[0];\n\n    if (!this.initialized && forest && forest.length) {\n      this.treeControl.expandAll();\n      this.initialized = true;\n      result.newItems.forEach((item) => (item.newItem = false));\n    }\n    // We want to expand them once they are rendered.\n    result.newItems.forEach((item) => {\n      this.treeControl.expand(item);\n    });\n    return result;\n  }\n\n  private populateParents(position: ElementPosition): void {\n    this.parents = [];\n    for (let i = 1; i <= position.length; i++) {\n      const current = position.slice(0, i);\n      const selectedNode = this.dataSource.data.find(\n        (item) => item.position.toString() === current.toString(),\n      );\n\n      // We might not be able to find the parent if the user has hidden the comment nodes.\n      if (selectedNode) {\n        this.parents.push(selectedNode);\n      }\n    }\n    this.setParents.emit(this.parents);\n  }\n\n  private subscribeToInspectorEvents(): void {\n    this.messageBus.on('selectComponent', (id: number) => {\n      this.selectNodeByComponentId(id);\n      this.toggleInspector.emit();\n      this.expandParents();\n    });\n\n    this.messageBus.on('highlightComponent', (id: number) => {\n      this.highlightIdInTreeFromElement.set(id);\n    });\n\n    this.messageBus.on('removeComponentHighlight', () => {\n      this.highlightIdInTreeFromElement.set(null);\n    });\n  }\n\n  private selectNodeByComponentId(id: number): void {\n    const foundNode = this.dataSource.data.find((node) => node.original.component?.id === id);\n    if (foundNode) {\n      this.selectAndEnsureVisible(foundNode);\n    }\n  }\n\n  private expandParents(): void {\n    this.parents.forEach((parent) => this.treeControl.expand(parent));\n  }\n\n  private handleViewportResize() {\n    // In some cases there a height changes, we need to recalculate the viewport size.\n    let lastHeight = this.elementRef.nativeElement.clientHeight;\n    const debouncer = new Debouncer();\n\n    const resizeObserver = new ResizeObserver(\n      debouncer.debounce(([entry]) => {\n        const currHeight = entry.contentRect.height;\n\n        // Perform check and scroll only if the height changes.\n        if (currHeight !== lastHeight) {\n          this.viewport().checkViewportSize();\n\n          // Scroll a few elements above the selected one for better UX.\n          const scrollItemIdx = Math.max(0, this.selectedNodeIdx() - 2);\n          this.viewport().scrollToIndex(scrollItemIdx);\n\n          lastHeight = currHeight;\n        }\n      }, RESIZE_OBSERVER_DEBOUNCE),\n    );\n    resizeObserver.observe(this.elementRef.nativeElement);\n\n    inject(DestroyRef).onDestroy(() => {\n      debouncer.cancel();\n      resizeObserver.disconnect();\n    });\n  }\n}\n"]}