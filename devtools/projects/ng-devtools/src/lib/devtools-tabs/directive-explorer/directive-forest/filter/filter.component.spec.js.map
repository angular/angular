{"version":3,"file":"filter.component.spec.js","sourceRoot":"","sources":["filter.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport {FilterComponent} from './filter.component';\n\ndescribe('FilterComponent', () => {\n  let component: FilterComponent;\n  let fixture: ComponentFixture<FilterComponent>;\n  const getMatchesCountEl = () => fixture.debugElement.query(By.css('.matches-count'));\n  const emitFilterEvent = (filter: string) =>\n    component.emitFilter({target: {value: filter} as any} as Event);\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [FilterComponent],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(FilterComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should render if there is a single text match', () => {\n    expect(getMatchesCountEl()).toBeFalsy();\n\n    fixture.componentRef.setInput('matchesCount', 1);\n    fixture.detectChanges();\n\n    expect(getMatchesCountEl().nativeElement.innerText).toEqual('1 match');\n  });\n\n  it('should render if there is are multiple text matches', () => {\n    expect(getMatchesCountEl()).toBeFalsy();\n\n    fixture.componentRef.setInput('matchesCount', 5);\n    fixture.detectChanges();\n\n    expect(getMatchesCountEl().nativeElement.innerText).toEqual('5 matches');\n  });\n\n  it('should render selected match', () => {\n    expect(getMatchesCountEl()).toBeFalsy();\n\n    fixture.componentRef.setInput('matchesCount', 5);\n    fixture.componentRef.setInput('currentMatch', 2);\n    fixture.detectChanges();\n\n    expect(getMatchesCountEl().nativeElement.innerText).toEqual('2 of 5');\n  });\n\n  it('should emit a default filter function that returns an empty matches array, if no match', () => {\n    component.filter.subscribe((filterFn) => {\n      const match = filterFn('Foo Bar');\n\n      expect(match.length).toEqual(0);\n    });\n\n    emitFilterEvent('Baz');\n  });\n\n  it('should emit a default filter function that returns match indices, if there is a match', () => {\n    component.filter.subscribe((filterFn) => {\n      const matches = filterFn('Foo Bar');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n      expect(match.startIdx).toEqual(4);\n      expect(match.endIdx).toEqual(7);\n    });\n\n    emitFilterEvent('Bar');\n  });\n\n  it('should emit a default filter function that returns match indices, if there is a full match', () => {\n    component.filter.subscribe((filterFn) => {\n      const matches = filterFn('Foo Bar');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n      expect(match.startIdx).toEqual(0);\n      expect(match.endIdx).toEqual(7);\n    });\n\n    emitFilterEvent('Foo Bar');\n  });\n\n  it('should emit a default filter function that returns match indices, if there is a match (case insensitive)', () => {\n    component.filter.subscribe((filterFn) => {\n      const matches = filterFn('Foo Bar Baz');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n      expect(match.startIdx).toEqual(4);\n      expect(match.endIdx).toEqual(7);\n    });\n\n    emitFilterEvent('bar');\n  });\n});\n"]}