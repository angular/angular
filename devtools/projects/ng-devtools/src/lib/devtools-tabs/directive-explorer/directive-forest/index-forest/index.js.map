{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAcH,MAAM,SAAS,GAAG,CAChB,IAAiD,EACjD,GAAW,EACX,iBAAkC,EAAE,EACvB,EAAE;IACf,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,OAAO;QACL,QAAQ;QACR,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC;QACrE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;QAChE,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,gBAAgB,EAAG,IAAY,CAAC,gBAAgB;KACjD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,MAAuD,EAAE,EAAE,CACrF,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DevToolsNode, ElementPosition} from '../../../../../../../protocol';\n\nexport interface IndexedNode extends DevToolsNode {\n  position: ElementPosition;\n  children: IndexedNode[];\n\n  // native elements are not serializable and thus not accessible in this structure\n  nativeElement?: never;\n  // Instead we will have this boolean\n  hasNativeElement: boolean;\n}\n\nconst indexTree = (\n  node: DevToolsNode & {hasNativeElement?: boolean},\n  idx: number,\n  parentPosition: ElementPosition = [],\n): IndexedNode => {\n  const position = parentPosition.concat([idx]);\n  return {\n    position,\n    element: node.element,\n    component: node.component,\n    directives: node.directives.map((d, i) => ({name: d.name, id: d.id})),\n    children: node.children.map((n, i) => indexTree(n, i, position)),\n    hydration: node.hydration,\n    defer: node.defer,\n    onPush: node.onPush,\n    hasNativeElement: (node as any).hasNativeElement,\n  };\n};\n\nexport const indexForest = (forest: (DevToolsNode & {hasNativeElement?: boolean})[]) =>\n  forest.map((n, i) => indexTree(n, i));\n"]}