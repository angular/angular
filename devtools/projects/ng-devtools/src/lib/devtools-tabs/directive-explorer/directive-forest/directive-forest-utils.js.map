{"version":3,"file":"directive-forest-utils.js","sourceRoot":"","sources":["directive-forest-utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,aAAuB,EAAE,cAAwB,EAAE,EAAE;IAC7E,IAAI,aAAa,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,EAAE,CAAC;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/C,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3C,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,OAAe,EACf,GAAe,EACf,WAAsC,EACtC,EAAE;IACF,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;IAC1B,KAAK,IAAI,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QACtC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACjF,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,uDAAuD;AACvD,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,IAAc,EAAU,EAAE,CACjE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAE3E,gFAAgF;AAChF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,IAAc,EAAU,EAAE;IAC9D,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;IACpC,IAAI,GAAG,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC;QACzB,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;IAC3B,CAAC;IACD,OAAO,IAAI,CAAC,IAAI,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;AACpD,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FlatTreeControl} from '@angular/cdk/tree';\n\nimport {FlatNode} from './component-data-source/index';\n\nexport const isChildOf = (childPosition: number[], parentPosition: number[]) => {\n  if (childPosition.length <= parentPosition.length) {\n    return false;\n  }\n  for (let i = 0; i < parentPosition.length; i++) {\n    if (childPosition[i] !== parentPosition[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const parentCollapsed = (\n  nodeIdx: number,\n  all: FlatNode[],\n  treeControl: FlatTreeControl<FlatNode>,\n) => {\n  const node = all[nodeIdx];\n  for (let i = nodeIdx - 1; i >= 0; i--) {\n    if (isChildOf(node.position, all[i].position) && !treeControl.isExpanded(all[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/** Returns the `FlatNode`'s directive array string. */\nexport const getDirectivesArrayString = (node: FlatNode): string =>\n  node.directives ? node.directives.map((dir) => `[${dir}]`).join('') : '';\n\n/** Returns the full node name string as rendered by the tree-node component. */\nexport const getFullNodeNameString = (node: FlatNode): string => {\n  const cmp = node.original.component;\n  if (cmp && cmp.isElement) {\n    return `<${node.name}/>`;\n  }\n  return node.name + getDirectivesArrayString(node);\n};\n"]}