{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {DefaultIterableDiffer, TrackByFunction} from '@angular/core';\nimport {MatTreeFlattener} from '@angular/material/tree';\nimport {DeferInfo, DevToolsNode, HydrationStatus} from '../../../../../../../protocol';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {diff} from '../../../diffing';\nimport {IndexedNode, indexForest} from '../index-forest';\n\n/** Flat node with expandable and level information */\nexport interface FlatNode {\n  id: string;\n  expandable: boolean;\n  name: string;\n  directives: string[];\n  position: number[];\n  level: number;\n  original: IndexedNode;\n  newItem?: boolean;\n  hydration: HydrationStatus;\n  defer: DeferInfo | null;\n  onPush?: boolean;\n  hasNativeElement: boolean;\n}\n\nconst expandable = (node: IndexedNode) => !!node.children && node.children.length > 0;\n\nconst trackBy: TrackByFunction<FlatNode> = (_: number, item: FlatNode) =>\n  `${item.id}#${item.expandable}`;\n\nconst getId = (node: IndexedNode) => {\n  if (node.defer) {\n    return node.defer.id;\n  } else if (node.hydration?.status === 'dehydrated') {\n    return node.position.join('-');\n  }\n\n  let prefix = '';\n  if (node.component) {\n    prefix = node.component.id.toString();\n  }\n  const dirIds = node.directives\n    .map((d) => d.id)\n    .sort((a, b) => {\n      return a - b;\n    });\n  return prefix + '-' + dirIds.join('-');\n};\n\n/**\n * Takes an `IndexedNode` forest and returns a transformed forest without `#comment` nodes.\n * The algorithm has linear complexity and O(depth(forest)) memory complexity.\n *\n * @param nodes indexed nodes, which have already have associated positions within the original\n *  tree and associated indices.\n * @returns forest with filtered `#comment` nodes.\n */\nconst filterCommentNodes = (nodes: IndexedNode[]) => {\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.element !== '#comment') {\n      continue;\n    }\n    nodes.splice(i, 1, ...node.children);\n    i--;\n  }\n  for (const node of nodes) {\n    filterCommentNodes(node.children);\n  }\n  return nodes;\n};\n\nexport class ComponentDataSource extends DataSource<FlatNode> {\n  private _differ = new DefaultIterableDiffer<FlatNode>(trackBy);\n  private _expandedData = new BehaviorSubject<FlatNode[]>([]);\n  private _flattenedData = new BehaviorSubject<FlatNode[]>([]);\n  private _nodeToFlat = new WeakMap<IndexedNode, FlatNode>();\n\n  private _treeFlattener = new MatTreeFlattener(\n    (node: IndexedNode, level: number) => {\n      if (this._nodeToFlat.has(node)) {\n        return this._nodeToFlat.get(node);\n      }\n      const flatNode: FlatNode = {\n        expandable: expandable(node),\n        id: getId(node),\n        // We can compare the nodes in the navigation functions above\n        // based on this identifier directly, since it's a reference type\n        // and the reference is preserved after transformation.\n        position: node.position,\n        name: node.component ? node.component.name : node.element,\n        directives: node.directives.map((d) => d.name),\n        original: node,\n        level,\n        hydration: node.hydration,\n        defer: node.defer,\n        onPush: node.onPush,\n        hasNativeElement: node.hasNativeElement,\n      };\n      this._nodeToFlat.set(node, flatNode);\n      return flatNode;\n    },\n    (node) => (node ? node.level : -1),\n    (node) => (node ? node.expandable : false),\n    (node) => (node ? node.children : []),\n  );\n\n  constructor(private _treeControl: FlatTreeControl<FlatNode>) {\n    super();\n  }\n\n  get data(): FlatNode[] {\n    return this._flattenedData.value;\n  }\n\n  get expandedDataValues(): FlatNode[] {\n    return this._expandedData.value;\n  }\n\n  getFlatNodeFromIndexedNode(indexedNode: IndexedNode): FlatNode | undefined {\n    return this._nodeToFlat.get(indexedNode);\n  }\n\n  update(\n    forest: DevToolsNode[],\n    showCommentNodes: boolean,\n  ): {newItems: FlatNode[]; movedItems: FlatNode[]; removedItems: FlatNode[]} {\n    if (!forest) {\n      return {newItems: [], movedItems: [], removedItems: []};\n    }\n\n    let indexedForest = indexForest(forest);\n\n    // We filter comment nodes here because we need to preserve the positions within the component\n    // tree.\n    //\n    // For example:\n    // ```\n    // - #comment\n    //   - bar\n    // ```\n    //\n    // #comment's position will be [0] and bar's will be [0, 0]. If we trim #comment nodes earlier\n    // before indexing, bar's position will be [0] which will be inaccurate and will make the\n    // backend enable to find the corresponding node when we request its properties.\n    if (!showCommentNodes) {\n      indexedForest = filterCommentNodes(indexedForest);\n    }\n\n    const flattenedCollection = this._treeFlattener.flattenNodes(indexedForest) as FlatNode[];\n\n    this.data.forEach((i) => (i.newItem = false));\n\n    const expandedNodes: Record<string, boolean> = {};\n    this.data.forEach((item) => {\n      expandedNodes[item.id] = this._treeControl.isExpanded(item);\n    });\n\n    const {newItems, movedItems, removedItems} = diff<FlatNode>(\n      this._differ,\n      this.data,\n      flattenedCollection,\n    );\n    this._treeControl.dataNodes = this.data;\n    this._flattenedData.next(this.data);\n\n    movedItems.forEach((i) => {\n      this._nodeToFlat.set(i.original, i);\n      if (expandedNodes[i.id]) {\n        this._treeControl.expand(i);\n      }\n    });\n    newItems.forEach((i) => (i.newItem = true));\n    removedItems.forEach((i) => this._nodeToFlat.delete(i.original));\n\n    return {newItems, movedItems, removedItems};\n  }\n\n  override connect(collectionViewer: CollectionViewer): Observable<FlatNode[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData,\n    ];\n    return merge<unknown[]>(...changes).pipe(\n      map(() => {\n        this._expandedData.next(\n          this._treeFlattener.expandFlattenedNodes(\n            this.data,\n            this._treeControl as FlatTreeControl<FlatNode | undefined>,\n          ) as FlatNode[],\n        );\n        return this._expandedData.value;\n      }),\n    );\n  }\n\n  override disconnect(): void {}\n}\n"]}