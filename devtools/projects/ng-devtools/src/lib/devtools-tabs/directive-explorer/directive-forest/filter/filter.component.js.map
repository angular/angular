{"version":3,"file":"filter.component.js","sourceRoot":"","sources":["filter.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAChF,OAAO,EAAC,OAAO,EAAC,MAAM,wBAAwB,CAAC;AAY/C,iEAAiE;AACjE,MAAM,sBAAsB,GAAsB,CAAC,MAAc,EAAE,EAAE;IACnE,OAAO,CAAC,MAAc,EAAE,EAAE;QACxB,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QAEpE,IAAI,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC;YAClB,OAAO;gBACL;oBACE,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE,QAAQ,GAAG,MAAM,CAAC,MAAM;iBACjC;aACF,CAAC;QACJ,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;AACJ,CAAC,CAAC;AASK,IAAM,eAAe,GAArB,MAAM,eAAe;IAArB;QACI,WAAM,GAAG,MAAM,EAAY,CAAC;QAC5B,gBAAW,GAAG,MAAM,EAAQ,CAAC;QAC7B,gBAAW,GAAG,MAAM,EAAQ,CAAC;QAE7B,iBAAY,GAAG,KAAK,CAAS,CAAC,CAAC,CAAC;QAChC,iBAAY,GAAG,KAAK,CAAS,CAAC,CAAC,CAAC;QAEhC,sBAAiB,GAAG,KAAK,CAAoB,sBAAsB,CAAC,CAAC;IAgBhF,CAAC;IAdC,UAAU,CAAC,KAAY;QACrB,MAAM,SAAS,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;QAC3D,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC,CAAC;QAErD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAED,eAAe;QACb,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,eAAe;QACb,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;CACF,CAAA;AAxBY,eAAe;IAP3B,SAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,WAAW,EAAE,yBAAyB;QACtC,SAAS,EAAE,CAAC,yBAAyB,CAAC;QACtC,OAAO,EAAE,CAAC,OAAO,CAAC;QAClB,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,eAAe,CAwB3B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, input, output} from '@angular/core';\nimport {MatIcon} from '@angular/material/icon';\n\nexport type FilterMatch = {\n  startIdx: number;\n  endIdx: number;\n};\n\nexport type FilterFn = (source: string) => FilterMatch[];\n\n/** Describes the filtering strategy of the `ng-filter` by providing a generator for the `FilterFn`. */\nexport type FilterFnGenerator = (filter: string) => FilterFn;\n\n/** Default `FilterFn` generator for a generic string search.  */\nconst genericSearchGenerator: FilterFnGenerator = (filter: string) => {\n  return (target: string) => {\n    if (!filter) {\n      return [];\n    }\n    const startIdx = target.toLowerCase().indexOf(filter.toLowerCase());\n\n    if (startIdx > -1) {\n      return [\n        {\n          startIdx: startIdx,\n          endIdx: startIdx + filter.length,\n        },\n      ];\n    }\n    return [];\n  };\n};\n\n@Component({\n  selector: 'ng-filter',\n  templateUrl: './filter.component.html',\n  styleUrls: ['./filter.component.scss'],\n  imports: [MatIcon],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FilterComponent {\n  readonly filter = output<FilterFn>();\n  readonly nextMatched = output<void>();\n  readonly prevMatched = output<void>();\n\n  readonly matchesCount = input<number>(0);\n  readonly currentMatch = input<number>(0);\n\n  readonly filterFnGenerator = input<FilterFnGenerator>(genericSearchGenerator);\n\n  emitFilter(event: Event): void {\n    const filterStr = (event.target as HTMLInputElement).value;\n    const filterFn = this.filterFnGenerator()(filterStr);\n\n    this.filter.emit(filterFn);\n  }\n\n  emitNextMatched(): void {\n    this.nextMatched.emit();\n  }\n\n  emitPrevMatched(): void {\n    this.prevMatched.emit();\n  }\n}\n"]}