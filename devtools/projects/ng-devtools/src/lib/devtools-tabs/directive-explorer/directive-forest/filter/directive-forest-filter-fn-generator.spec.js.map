{"version":3,"file":"directive-forest-filter-fn-generator.spec.js","sourceRoot":"","sources":["directive-forest-filter-fn-generator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  directiveForestFilterFnGenerator,\n  tokenizeDirectiveForestFilter,\n  parseDirectiveForestFilter,\n  ParsedFilter,\n} from './directive-forest-filter-fn-generator';\n\nfunction expectToMatchParsedFilter(target: ParsedFilter, test: ParsedFilter) {\n  expect(target).toEqual(test);\n}\n\nfunction expectToMatchParsedElement(target: ParsedFilter, test: ParsedFilter['element']) {\n  expect(target.component).toBeUndefined();\n  expect(target.directives.length).toEqual(0);\n  expect(target.element).toEqual(test);\n}\n\nfunction expectToMatchParsedComponent(target: ParsedFilter, test: ParsedFilter['component']) {\n  expect(target.element).toBeUndefined();\n  expect(target.directives.length).toEqual(0);\n  expect(target.component).toEqual(test);\n}\n\nfunction expectToMatchParsedDirectives(target: ParsedFilter, test: ParsedFilter['directives']) {\n  expect(target.element).toBeUndefined();\n  expect(target.component).toBeUndefined();\n  expect(target.directives).toEqual(test);\n}\n\ndescribe('directive-forest-filter-fn-generator', () => {\n  describe('tokenizeDirectiveForestFilter', () => {\n    it('should tokenize an empty string', () => {\n      const tokens = tokenizeDirectiveForestFilter('');\n      expect(tokens).toEqual([]);\n    });\n\n    it('should tokenize a component', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-component');\n      expect(tokens).toEqual([{type: 'text', value: 'app-component', idx: 0}]);\n    });\n\n    it('should tokenize a directive', () => {\n      const tokens = tokenizeDirectiveForestFilter('[FooDirective]');\n      expect(tokens).toEqual([\n        {type: 'opening_bracket', value: '[', idx: 0},\n        {type: 'text', value: 'FooDirective', idx: 1},\n        {type: 'closing_bracket', value: ']', idx: 13},\n      ]);\n    });\n\n    it('should tokenize multiple directives', () => {\n      const tokens = tokenizeDirectiveForestFilter('[Foo][Bar]');\n      expect(tokens).toEqual([\n        {type: 'opening_bracket', value: '[', idx: 0},\n        {type: 'text', value: 'Foo', idx: 1},\n        {type: 'closing_bracket', value: ']', idx: 4},\n        {type: 'opening_bracket', value: '[', idx: 5},\n        {type: 'text', value: 'Bar', idx: 6},\n        {type: 'closing_bracket', value: ']', idx: 9},\n      ]);\n    });\n\n    it('should tokenize a component multiple directives', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-cmp[Foo][Bar]');\n      expect(tokens).toEqual([\n        {type: 'text', value: 'app-cmp', idx: 0},\n        {type: 'opening_bracket', value: '[', idx: 7},\n        {type: 'text', value: 'Foo', idx: 8},\n        {type: 'closing_bracket', value: ']', idx: 11},\n        {type: 'opening_bracket', value: '[', idx: 12},\n        {type: 'text', value: 'Bar', idx: 13},\n        {type: 'closing_bracket', value: ']', idx: 16},\n      ]);\n    });\n\n    it('should tokenize an element', () => {\n      const tokens = tokenizeDirectiveForestFilter('<app-element />');\n      expect(tokens).toEqual([\n        {type: 'chevron_left', value: '<', idx: 0},\n        {type: 'text', value: 'app-element', idx: 1},\n        {type: 'space', value: ' ', idx: 12},\n        {type: 'slash', value: '/', idx: 13},\n        {type: 'chevron_right', value: '>', idx: 14},\n      ]);\n    });\n  });\n\n  describe('parseDirectiveForestFilter', () => {\n    it('should parse an empty string to an empty tokens array', () => {\n      const tokens = tokenizeDirectiveForestFilter('');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expect(parsed.component).toBeUndefined();\n      expect(parsed.directives.length).toEqual(0);\n    });\n\n    it('should parse a standard string', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-random-component');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedComponent(parsed, {\n        idx: 0,\n        value: 'app-random-component',\n      });\n    });\n\n    it('should parse a directive', () => {\n      const tokens = tokenizeDirectiveForestFilter('[AppDirective]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedDirectives(parsed, [\n        {\n          idx: 1,\n          value: 'AppDirective',\n        },\n      ]);\n    });\n\n    it('should parse multiple directives ([b][c] format)', () => {\n      const tokens = tokenizeDirectiveForestFilter('[FooDir][BarDir]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedDirectives(parsed, [\n        {\n          idx: 1,\n          value: 'FooDir',\n        },\n        {\n          idx: 9,\n          value: 'BarDir',\n        },\n      ]);\n    });\n\n    it('should parse multiple directives ([b c] format)', () => {\n      const tokens = tokenizeDirectiveForestFilter('[FooDir BarDir]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedDirectives(parsed, [\n        {\n          idx: 1,\n          value: 'FooDir',\n        },\n        {\n          idx: 8,\n          value: 'BarDir',\n        },\n      ]);\n    });\n\n    it('should parse a component + directive', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-component[AppDirective]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-component',\n        },\n        directives: [\n          {\n            idx: 14,\n            value: 'AppDirective',\n          },\n        ],\n      });\n    });\n\n    it('should parse a component + multiple directives (a[b][c] format)', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-foo[BarDir][BazDir]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-foo',\n        },\n        directives: [\n          {\n            idx: 8,\n            value: 'BarDir',\n          },\n          {\n            idx: 16,\n            value: 'BazDir',\n          },\n        ],\n      });\n    });\n\n    it('should parse a component + multiple directives (a[b c] format)', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-foo[BarDir BazDir]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-foo',\n        },\n        directives: [\n          {\n            idx: 8,\n            value: 'BarDir',\n          },\n          {\n            idx: 15,\n            value: 'BazDir',\n          },\n        ],\n      });\n    });\n\n    it('should parse a component with empty directive brackets (app-foo[)', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-foo[');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-foo',\n        },\n        directives: [],\n      });\n    });\n\n    it('should parse a component with empty directive brackets (app-foo[])', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-foo[]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-foo',\n        },\n        directives: [],\n      });\n    });\n\n    it('should parse a component with empty directive brackets (app-foo])', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-foo[]');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-foo',\n        },\n        directives: [],\n      });\n    });\n\n    it('should parse a component and a directive without closing bracket (app-foo[Foo)', () => {\n      const tokens = tokenizeDirectiveForestFilter('app-foo[Foo');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedFilter(parsed, {\n        component: {\n          idx: 0,\n          value: 'app-foo',\n        },\n        directives: [\n          {\n            idx: 8,\n            value: 'Foo',\n          },\n        ],\n      });\n    });\n\n    it('should parse an element', () => {\n      const tokens = tokenizeDirectiveForestFilter('<app-element />');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedElement(parsed, {\n        idx: 1,\n        value: 'app-element',\n      });\n    });\n\n    it('should parse an incomplete element', () => {\n      const tokens = tokenizeDirectiveForestFilter('<app-ele');\n      const parsed = parseDirectiveForestFilter(tokens);\n\n      expectToMatchParsedElement(parsed, {\n        idx: 1,\n        value: 'app-ele',\n      });\n    });\n  });\n\n  describe('directiveForestFilterFnGenerator', () => {\n    it('should NOT match an empty string input', () => {\n      const filterFn = directiveForestFilterFnGenerator('');\n      const matches = filterFn('app-foo-component');\n\n      expect(matches.length).toEqual(0);\n    });\n\n    it('should match a standard string input', () => {\n      const filterFn = directiveForestFilterFnGenerator('-foo-comp');\n      const matches = filterFn('app-foo-component');\n\n      expect(matches.length).toEqual(1);\n      expect(matches[0].startIdx).toEqual(3);\n      expect(matches[0].endIdx).toEqual(12);\n    });\n\n    it('should match the string fully', () => {\n      const filterFn = directiveForestFilterFnGenerator('app-foo-cmp');\n      const matches = filterFn('app-foo-cmp');\n\n      expect(matches.length).toEqual(1);\n      expect(matches[0].startIdx).toEqual(0);\n      expect(matches[0].endIdx).toEqual(11);\n    });\n\n    it('should match a directive', () => {\n      const filterFn = directiveForestFilterFnGenerator('[BarDir]');\n      const matches = filterFn('app-foo-cmp[BarDirective]');\n\n      expect(matches.length).toEqual(1);\n      expect(matches[0].startIdx).toEqual(12);\n      expect(matches[0].endIdx).toEqual(18);\n    });\n\n    it('should match multiple directives', () => {\n      const filterFn = directiveForestFilterFnGenerator('[Bar][Baz]');\n      const matches = filterFn('app-foo-cmp[BarDirective][BazDirective]');\n\n      expect(matches.length).toEqual(2);\n\n      const [bar, baz] = matches;\n\n      expect(bar.startIdx).toEqual(12);\n      expect(bar.endIdx).toEqual(15);\n\n      expect(baz.startIdx).toEqual(26);\n      expect(baz.endIdx).toEqual(29);\n    });\n\n    it('should match multiple directives irrespetive of order', () => {\n      const filterFn = directiveForestFilterFnGenerator('[Baz][BarDir]');\n      const matches = filterFn('app-foo-cmp[BarDirective][BazDirective]');\n\n      expect(matches.length).toEqual(2);\n\n      const [barDir, baz] = matches;\n\n      expect(barDir.startIdx).toEqual(12);\n      expect(barDir.endIdx).toEqual(18);\n\n      expect(baz.startIdx).toEqual(26);\n      expect(baz.endIdx).toEqual(29);\n    });\n\n    it('should match a component + directive', () => {\n      const filterFn = directiveForestFilterFnGenerator('app-foo[Bar]');\n      const matches = filterFn('app-foo-cmp[BarDirective]');\n\n      expect(matches.length).toEqual(2);\n\n      const [foo, bar] = matches;\n\n      expect(foo.startIdx).toEqual(0);\n      expect(foo.endIdx).toEqual(7);\n\n      expect(bar.startIdx).toEqual(12);\n      expect(bar.endIdx).toEqual(15);\n    });\n\n    it('should match a component + directive (reversed order)', () => {\n      const filterFn = directiveForestFilterFnGenerator('[Bar]app-foo');\n      const matches = filterFn('app-foo-cmp[BarDirective]');\n\n      expect(matches.length).toEqual(2);\n\n      const [foo, bar] = matches;\n\n      expect(foo.startIdx).toEqual(0);\n      expect(foo.endIdx).toEqual(7);\n\n      expect(bar.startIdx).toEqual(12);\n      expect(bar.endIdx).toEqual(15);\n    });\n\n    it('should match a component + multiple directive', () => {\n      const filterFn = directiveForestFilterFnGenerator('app-foo[Bar][BazDirective]');\n      const matches = filterFn('app-foo-cmp[BarDirective][BazDirective]');\n\n      expect(matches.length).toEqual(3);\n\n      const [foo, bar, baz] = matches;\n\n      expect(foo.startIdx).toEqual(0);\n      expect(foo.endIdx).toEqual(7);\n\n      expect(bar.startIdx).toEqual(12);\n      expect(bar.endIdx).toEqual(15);\n\n      expect(baz.startIdx).toEqual(26);\n      expect(baz.endIdx).toEqual(38);\n    });\n\n    it('should be able to distinguish between a component and a directive with the same name', () => {\n      const filterFn = directiveForestFilterFnGenerator('[app-foo]');\n      const matches = filterFn('app-foo[app-foo]');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n\n      expect(match.startIdx).toEqual(8);\n      expect(match.endIdx).toEqual(15);\n    });\n\n    it('should match an element', () => {\n      const filterFn = directiveForestFilterFnGenerator('<app-element />');\n      const matches = filterFn('<app-element />');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n\n      expect(match.startIdx).toEqual(1);\n      expect(match.endIdx).toEqual(12);\n    });\n\n    it('should match an element without a slash', () => {\n      const filterFn = directiveForestFilterFnGenerator('<app-element>');\n      const matches = filterFn('<app-element />');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n\n      expect(match.startIdx).toEqual(1);\n      expect(match.endIdx).toEqual(12);\n    });\n\n    it('should match an incomplete element', () => {\n      const filterFn = directiveForestFilterFnGenerator('<app-ele');\n      const matches = filterFn('<app-ele');\n\n      expect(matches.length).toEqual(1);\n\n      const [match] = matches;\n\n      expect(match.startIdx).toEqual(1);\n      expect(match.endIdx).toEqual(8);\n    });\n\n    it(`should NOT match, if a component matches but the directive doesn't`, () => {\n      const filterFn = directiveForestFilterFnGenerator('app-foo[Baz]');\n      const matches = filterFn('app-foo-cmp[BarDirective]');\n\n      expect(matches.length).toEqual(0);\n    });\n\n    it(`should NOT match, if a directive matches but the component doesn't`, () => {\n      const filterFn = directiveForestFilterFnGenerator('app-baz[Bar]');\n      const matches = filterFn('app-foo-cmp[BarDirective]');\n\n      expect(matches.length).toEqual(0);\n    });\n\n    it(`should NOT match, if some of the directives doesn't match`, () => {\n      const filterFn = directiveForestFilterFnGenerator('app-foo-cmp[Bar][Qux]');\n      const matches = filterFn('app-foo-cmp[BarDirective][BazDirective]');\n\n      expect(matches.length).toEqual(0);\n    });\n\n    it('should handle gracefully some gibberish cases', () => {\n      expect(() => directiveForestFilterFnGenerator('[')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('[]')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('][')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('<')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('<>')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('><')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('<<[[]][[][>></')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('[foo[bar[baz')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator(']foo]bar]baz')).not.toThrowError();\n\n      expect(() => directiveForestFilterFnGenerator('<app-foo[Bar][Baz]/>')).not.toThrowError();\n\n      expect(() =>\n        directiveForestFilterFnGenerator('app-foo-cmp<element  [Foo][Bar][[/><baz '),\n      ).not.toThrowError();\n    });\n  });\n});\n"]}