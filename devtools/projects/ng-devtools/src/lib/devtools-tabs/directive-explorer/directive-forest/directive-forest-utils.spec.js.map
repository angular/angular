{"version":3,"file":"directive-forest-utils.spec.js","sourceRoot":"","sources":["directive-forest-utils.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,wBAAwB,EAAE,qBAAqB,EAAC,MAAM,0BAA0B,CAAC;AAEzF,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,MAAM,GAAG,wBAAwB,CAAC,EAAc,CAAC,CAAC;YAExD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,MAAM,GAAG,wBAAwB,CAAC;gBACtC,UAAU,EAAE,CAAC,KAAK,CAAC;aACR,CAAC,CAAC;YAEf,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,MAAM,GAAG,wBAAwB,CAAC;gBACtC,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;aACf,CAAC,CAAC;YAEf,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,MAAM,GAAG,qBAAqB,CAAC;gBACnC,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,EAAC,SAAS,EAAE,EAAE,EAAC;aACd,CAAC,CAAC;YAEf,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,MAAM,GAAG,qBAAqB,CAAC;gBACnC,IAAI,EAAE,aAAa;gBACnB,QAAQ,EAAE;oBACR,SAAS,EAAE;wBACT,SAAS,EAAE,IAAI;qBAChB;iBACF;aACU,CAAC,CAAC;YAEf,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,MAAM,GAAG,qBAAqB,CAAC;gBACnC,IAAI,EAAE,UAAU;gBAChB,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;gBAC1B,QAAQ,EAAE,EAAC,SAAS,EAAE,EAAE,EAAC;aACd,CAAC,CAAC;YAEf,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FlatNode} from './component-data-source';\nimport {getDirectivesArrayString, getFullNodeNameString} from './directive-forest-utils';\n\ndescribe('directive-forest-utils', () => {\n  describe('getDirectivesArrayString', () => {\n    it('should return an empty string, if no directives', () => {\n      const output = getDirectivesArrayString({} as FlatNode);\n\n      expect(output).toEqual('');\n    });\n\n    it('should return a single directive string', () => {\n      const output = getDirectivesArrayString({\n        directives: ['Foo'],\n      } as FlatNode);\n\n      expect(output).toEqual('[Foo]');\n    });\n\n    it('should return multiple directives string', () => {\n      const output = getDirectivesArrayString({\n        directives: ['Foo', 'Bar'],\n      } as FlatNode);\n\n      expect(output).toEqual('[Foo][Bar]');\n    });\n  });\n\n  describe('getFullNodeNameString', () => {\n    it('should return a simple component name string', () => {\n      const output = getFullNodeNameString({\n        name: 'app-test',\n        original: {component: {}},\n      } as FlatNode);\n\n      expect(output).toEqual('app-test');\n    });\n\n    it('should enclose name in a tag, if an element', () => {\n      const output = getFullNodeNameString({\n        name: 'app-element',\n        original: {\n          component: {\n            isElement: true,\n          },\n        },\n      } as FlatNode);\n\n      expect(output).toEqual('<app-element/>');\n    });\n\n    it('should return component name with directives string, if any', () => {\n      const output = getFullNodeNameString({\n        name: 'app-test',\n        directives: ['Foo', 'Bar'],\n        original: {component: {}},\n      } as FlatNode);\n\n      expect(output).toEqual('app-test[Foo][Bar]');\n    });\n  });\n});\n"]}