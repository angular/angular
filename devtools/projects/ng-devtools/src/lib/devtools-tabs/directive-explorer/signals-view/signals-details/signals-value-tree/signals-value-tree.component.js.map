{"version":3,"file":"signals-value-tree.component.js","sourceRoot":"","sources":["signals-value-tree.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AAExE,OAAO,EAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,kBAAkB,EAAC,MAAM,wBAAwB,CAAC;AAChG,OAAO,EAAC,OAAO,EAAC,MAAM,wBAAwB,CAAC;AAuBxC,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IAA/B;QACI,gBAAW,GAAG,KAAK,CAAC,QAAQ,EAA6B,CAAC;QAC1D,eAAU,GAAG,KAAK,CAAC,QAAQ,EAAwB,CAAC;QAM7D,aAAQ,GAAG,CAAC,CAAS,EAAE,IAAc,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;IAC5D,CAAC;IALC,MAAM,CAAC,IAAc;QACnB,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;CAGF,CAAA;AATY,yBAAyB;IAPrC,SAAS,CAAC;QACT,QAAQ,EAAE,uBAAuB;QACjC,WAAW,EAAE,qCAAqC;QAClD,OAAO,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,kBAAkB,EAAE,OAAO,CAAC;QAC5E,QAAQ,EAAE,qCAAqC;QAC/C,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,yBAAyB,CASrC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, input} from '@angular/core';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {MatTree, MatTreeNode, MatTreeNodeDef, MatTreeNodePadding} from '@angular/material/tree';\nimport {MatIcon} from '@angular/material/icon';\nimport {Descriptor} from '../../../../../../../../protocol';\nimport {DataSource} from '@angular/cdk/collections';\n\nexport interface FlatNode {\n  expandable: boolean;\n  prop: Property;\n  level: number;\n}\n\nexport interface Property {\n  name: string;\n  descriptor: Descriptor;\n  parent: Property | null;\n}\n\n@Component({\n  selector: 'ng-signals-value-tree',\n  templateUrl: './signals-value-tree.component.html',\n  imports: [MatTree, MatTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatIcon],\n  styleUrl: './signals-value-tree.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignalsValueTreeComponent {\n  readonly treeControl = input.required<FlatTreeControl<FlatNode>>();\n  readonly dataSource = input.required<DataSource<FlatNode>>();\n\n  toggle(node: FlatNode) {\n    this.treeControl().toggle(node);\n  }\n\n  hasChild = (_: number, node: FlatNode) => node.expandable;\n}\n"]}