{"version":3,"file":"signal-graph-manager.spec.js","sourceRoot":"","sources":["signal-graph-manager.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ApplicationRef, signal} from '@angular/core';\nimport {TestBed} from '@angular/core/testing';\nimport {SignalGraphManager} from './signal-graph-manager';\nimport {DebugSignalGraph, ElementPosition, Events, MessageBus} from '../../../../../../protocol';\n\ntype PartialRecord<K extends keyof any, T> = {\n  [P in K]?: T;\n};\n\nconst dummyGraph: DebugSignalGraph = {\n  nodes: [],\n  edges: [],\n};\n\nclass SgmMockMessageBus extends MessageBus<Events> {\n  public readonly cbs: PartialRecord<keyof Events, (...args: unknown[]) => void> = {};\n\n  override on<E extends keyof Events>(topic: E, cb: (...args: unknown[]) => void): () => void {\n    this.cbs[topic] = cb;\n    return () => {\n      delete this.cbs[topic];\n    };\n  }\n\n  override emit<E extends keyof Events>(topic: E): boolean {\n    if (topic === 'getSignalGraph') {\n      this.cbs['latestSignalGraph']?.(dummyGraph);\n    }\n    return true;\n  }\n\n  override once(): void {}\n  override destroy(): void {}\n}\n\ndescribe('SignalGraphManager', () => {\n  let sgm: SignalGraphManager;\n  let messageBus: SgmMockMessageBus;\n\n  beforeEach(() => {\n    messageBus = new SgmMockMessageBus();\n\n    TestBed.configureTestingModule({\n      providers: [{provide: MessageBus, useValue: messageBus}, SignalGraphManager],\n    });\n    sgm = TestBed.inject(SignalGraphManager);\n  });\n\n  it('should listen and update the graph by a provided element', async () => {\n    const dummyEl: ElementPosition = [0];\n    sgm.listen(signal(dummyEl));\n\n    expect(sgm.element()).toEqual(dummyEl);\n\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n\n    expect(sgm.graph()).toEqual(dummyGraph);\n  });\n\n  it('should unlisten the current element', () => {\n    const dummyEl: ElementPosition = [0];\n    sgm.listen(signal(dummyEl));\n\n    expect('componentTreeDirty' in messageBus.cbs).toBeTrue();\n    expect(sgm.element()).toEqual(dummyEl);\n\n    sgm.unlisten();\n\n    expect('componentTreeDirty' in messageBus.cbs).toBeFalse();\n    expect(sgm.element()).toBeUndefined();\n  });\n\n  it('should clean up after the manager is marked for destruction', () => {\n    expect('latestSignalGraph' in messageBus.cbs).toBeTrue();\n    spyOn(sgm, 'unlisten').and.callThrough();\n\n    sgm.destroy();\n\n    expect('latestSignalGraph' in messageBus.cbs).toBeFalse();\n    expect(sgm.unlisten).toHaveBeenCalled();\n  });\n});\n"]}