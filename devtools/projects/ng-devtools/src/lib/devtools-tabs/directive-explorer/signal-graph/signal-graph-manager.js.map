{"version":3,"file":"signal-graph-manager.js","sourceRoot":"","sources":["signal-graph-manager.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAU,MAAM,EAAC,MAAM,eAAe,CAAC;AACnF,OAAO,EAAoC,UAAU,EAAC,MAAM,4BAA4B,CAAC;AAEzF;;GAEG;AAEI,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAa7B;QAZiB,aAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC5B,eAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QAChC,gBAAW,GAAG,MAAM,CAA0B,IAAI,CAAC,CAAC;QAIrE,sBAAsB;QACtB,YAAO,GAAwC,MAAM,CAAC,SAAS,CAAC,CAAC;QAEjE,gCAAgC;QACvB,UAAK,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;QAG7C,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAC1D,mBAAmB,EACnB,CAAC,KAAuB,EAAE,EAAE;YAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,OAA4C;QACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,MAAM,kBAAkB,GAAG,GAAG,EAAE;YAC9B,MAAM,EAAE,GAAG,OAAO,EAAE,CAAC;YACrB,IAAI,EAAE,EAAE,CAAC;gBACP,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC,CAAC;QACF,MAAM,SAAS,GAAG,MAAM,CAAC,kBAAkB,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC;QACxE,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;QAEtF,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE;YACrB,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,gBAAgB,EAAE,CAAC;YACnB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;IACtB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,kCAAkC,EAAE,EAAE,CAAC;IAC9C,CAAC;CACF,CAAA;AA1DY,kBAAkB;IAD9B,UAAU,EAAE;GACA,kBAAkB,CA0D9B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {effect, inject, Injectable, Injector, Signal, signal} from '@angular/core';\nimport {DebugSignalGraph, ElementPosition, MessageBus} from '../../../../../../protocol';\n\n/**\n * Keeps the signal graph of a provided element/component.\n */\n@Injectable()\nexport class SignalGraphManager {\n  private readonly injector = inject(Injector);\n  private readonly messageBus = inject(MessageBus);\n  private readonly signalGraph = signal<DebugSignalGraph | null>(null);\n  private unlistenFn?: () => void;\n  private lastesSignalGraphMessageUnlistenFn?: () => void;\n\n  /** Target element. */\n  element: Signal<ElementPosition | undefined> = signal(undefined);\n\n  /* Signal graph of `element`. */\n  readonly graph = this.signalGraph.asReadonly();\n\n  constructor() {\n    this.lastesSignalGraphMessageUnlistenFn = this.messageBus.on(\n      'latestSignalGraph',\n      (graph: DebugSignalGraph) => {\n        this.signalGraph.set(graph);\n      },\n    );\n  }\n\n  /**\n   * Listen for element/component change by a provided signal\n   * and update the signal graph according to it.\n   * @param element\n   */\n  listen(element: Signal<ElementPosition | undefined>) {\n    this.unlisten();\n\n    this.element = element;\n    const refreshSignalGraph = () => {\n      const el = element();\n      if (el) {\n        this.messageBus.emit('getSignalGraph', [el]);\n      }\n    };\n    const effectRef = effect(refreshSignalGraph, {injector: this.injector});\n    const unlistenBusEvent = this.messageBus.on('componentTreeDirty', refreshSignalGraph);\n\n    this.unlistenFn = () => {\n      effectRef.destroy();\n      unlistenBusEvent();\n      this.element = signal(undefined);\n    };\n  }\n\n  /**\n   * Unlisten the currently listened element.\n   */\n  unlisten() {\n    this.unlistenFn?.();\n  }\n\n  destroy() {\n    this.unlisten();\n    this.lastesSignalGraphMessageUnlistenFn?.();\n  }\n}\n"]}