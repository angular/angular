{"version":3,"file":"directive-property-resolver.js","sourceRoot":"","sources":["directive-property-resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {\n  Descriptor,\n  DirectiveMetadata,\n  DirectivePosition,\n  Events,\n  MessageBus,\n  NestedProp,\n  Properties,\n} from '../../../../../../protocol';\n\nimport {FlatNode, Property} from './element-property-resolver';\nimport {getTreeFlattener} from './flatten';\nimport {PropertyDataSource} from './property-data-source';\nimport {getExpandedDirectiveProperties} from './property-expanded-directive-properties';\n\nexport interface DirectiveTreeData {\n  dataSource: PropertyDataSource;\n  treeControl: FlatTreeControl<FlatNode>;\n}\n\nconst getDirectiveControls = (\n  dataSource: PropertyDataSource,\n): {dataSource: PropertyDataSource; treeControl: FlatTreeControl<FlatNode>} => {\n  const treeControl = dataSource.treeControl;\n  return {\n    dataSource,\n    treeControl,\n  };\n};\n\nexport const constructPathOfKeysToPropertyValue = (\n  nodePropToGetKeysFor: Property,\n  keys: string[] = [],\n): string[] => {\n  keys.unshift(nodePropToGetKeysFor.name);\n  const parentNodeProp = nodePropToGetKeysFor.parent;\n  if (parentNodeProp) {\n    constructPathOfKeysToPropertyValue(parentNodeProp, keys);\n  }\n  return keys;\n};\n\nexport class DirectivePropertyResolver {\n  private _treeFlattener = getTreeFlattener();\n\n  private _treeControl = new FlatTreeControl<FlatNode>(\n    (node) => node.level,\n    (node) => node.expandable,\n  );\n\n  private _inputsDataSource: PropertyDataSource;\n  private _propsDataSource: PropertyDataSource;\n  private _outputsDataSource: PropertyDataSource;\n  private _stateDataSource: PropertyDataSource;\n\n  constructor(\n    private _messageBus: MessageBus<Events>,\n    private _props: Properties,\n    private _directivePosition: DirectivePosition,\n  ) {\n    const {inputs, props, outputs, state} = this._classifyProperties();\n\n    this._inputsDataSource = this._createDataSourceFromProps(inputs);\n    this._propsDataSource = this._createDataSourceFromProps(props);\n    this._outputsDataSource = this._createDataSourceFromProps(outputs);\n    this._stateDataSource = this._createDataSourceFromProps(state);\n  }\n\n  get directiveInputControls(): DirectiveTreeData {\n    return getDirectiveControls(this._inputsDataSource);\n  }\n\n  get directivePropControls(): DirectiveTreeData {\n    return getDirectiveControls(this._propsDataSource);\n  }\n\n  get directiveOutputControls(): DirectiveTreeData {\n    return getDirectiveControls(this._outputsDataSource);\n  }\n\n  get directiveStateControls(): DirectiveTreeData {\n    return getDirectiveControls(this._stateDataSource);\n  }\n\n  get directiveMetadata(): DirectiveMetadata | undefined {\n    return this._props.metadata;\n  }\n\n  get directiveProperties(): {[name: string]: Descriptor} {\n    return this._props.props;\n  }\n\n  get directivePosition(): DirectivePosition {\n    return this._directivePosition;\n  }\n\n  getExpandedProperties(): NestedProp[] {\n    return [\n      ...getExpandedDirectiveProperties(this._inputsDataSource.data),\n      ...getExpandedDirectiveProperties(this._propsDataSource.data),\n      ...getExpandedDirectiveProperties(this._outputsDataSource.data),\n      ...getExpandedDirectiveProperties(this._stateDataSource.data),\n    ];\n  }\n\n  updateProperties(newProps: Properties): void {\n    this._props = newProps;\n    const {inputs, props, outputs, state} = this._classifyProperties();\n\n    this._inputsDataSource.update(inputs);\n    this._propsDataSource.update(props);\n    this._outputsDataSource.update(outputs);\n    this._stateDataSource.update(state);\n  }\n\n  updateValue(node: FlatNode, newValue: unknown): void {\n    const directiveId = this._directivePosition;\n    const keyPath = constructPathOfKeysToPropertyValue(node.prop);\n    this._messageBus.emit('updateState', [{directiveId, keyPath, newValue}]);\n    node.prop.descriptor.value = newValue;\n  }\n\n  private _createDataSourceFromProps(props: {[name: string]: Descriptor}): PropertyDataSource {\n    return new PropertyDataSource(\n      props,\n      this._treeFlattener,\n      this._treeControl,\n      this._directivePosition,\n      this._messageBus,\n    );\n  }\n\n  private _classifyProperties(): {\n    inputs: {[name: string]: Descriptor};\n    props: {[name: string]: Descriptor};\n    outputs: {[name: string]: Descriptor};\n    state: {[name: string]: Descriptor};\n  } {\n    const metadata = this._props.metadata;\n    if (!metadata) {\n      return {\n        inputs: {},\n        props: {},\n        outputs: {},\n        state: this.directiveProperties,\n      };\n    }\n\n    const inputLabels = new Set('inputs' in metadata ? Object.values(metadata.inputs) : []);\n    const propLabels = new Set('props' in metadata ? Object.values(metadata.props) : []);\n    const outputLabels = new Set('outputs' in metadata ? Object.values(metadata.outputs) : []);\n\n    const inputs: {[name: string]: Descriptor} = {};\n    const props: {[name: string]: Descriptor} = {};\n    const outputs: {[name: string]: Descriptor} = {};\n    const state: {[name: string]: Descriptor} = {};\n\n    for (const [propName, value] of Object.entries(this.directiveProperties)) {\n      if (inputLabels.has(propName)) {\n        inputs[propName] = value;\n      } else if (propLabels.has(propName)) {\n        props[propName] = value;\n      } else if (outputLabels.has(propName)) {\n        outputs[propName] = value;\n      } else {\n        state[propName] = value;\n      }\n    }\n\n    return {\n      inputs,\n      props,\n      outputs,\n      state,\n    };\n  }\n}\n"]}