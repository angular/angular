{"version":3,"file":"property-data-source.spec.js","sourceRoot":"","sources":["property-data-source.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AAGpD,OAAO,EAAC,gBAAgB,EAAC,MAAM,WAAW,CAAC;AAC3C,OAAO,EAAC,kBAAkB,EAAC,MAAM,wBAAwB,CAAC;AAE1D,MAAM,eAAe,GAAG,IAAI,eAAe,CACzC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,EACpB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAC1B,CAAC;AAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,MAAM,GAAG,IAAI,kBAAkB,CACnC;YACE,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,KAAK,EAAE,EAAE;gBACT,aAAa,EAAE,IAAI;aACpB;SACF,EACD,gBAAgB,EAAE,EAClB,eAAe,EACf,EAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EACpB,IAAW,CACZ,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC;YACZ,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,KAAK,EAAE,EAAE;gBACT,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;YAC1B;gBACE,UAAU,EAAE,KAAK;gBACjB,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE;oBACJ,UAAU,EAAE;wBACV,QAAQ,EAAE,IAAI;wBACd,UAAU,EAAE,KAAK;wBACjB,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,QAAQ,CAAC,MAAM;wBACrB,KAAK,EAAE,EAAE;wBACT,aAAa,EAAE,IAAI;qBACpB;oBACD,IAAI,EAAE,KAAK;oBACX,MAAM,EAAE,IAAI;iBACb;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {PropType} from '../../../../../../protocol';\n\nimport {FlatNode} from './element-property-resolver';\nimport {getTreeFlattener} from './flatten';\nimport {PropertyDataSource} from './property-data-source';\n\nconst flatTreeControl = new FlatTreeControl<FlatNode>(\n  (node) => node.level,\n  (node) => node.expandable,\n);\n\ndescribe('PropertyDataSource', () => {\n  it('should detect changes in the collection', () => {\n    const source = new PropertyDataSource(\n      {\n        foo: {\n          editable: true,\n          expandable: false,\n          preview: '42',\n          type: PropType.Number,\n          value: 42,\n          containerType: null,\n        },\n      },\n      getTreeFlattener(),\n      flatTreeControl,\n      {element: [1, 2, 3]},\n      null as any,\n    );\n\n    source.update({\n      foo: {\n        editable: true,\n        expandable: false,\n        preview: '43',\n        type: PropType.Number,\n        value: 43,\n        containerType: null,\n      },\n    });\n\n    expect(source.data).toEqual([\n      {\n        expandable: false,\n        level: 0,\n        prop: {\n          descriptor: {\n            editable: true,\n            expandable: false,\n            preview: '43',\n            type: PropType.Number,\n            value: 43,\n            containerType: null,\n          },\n          name: 'foo',\n          parent: null,\n        },\n      },\n    ]);\n  });\n});\n"]}