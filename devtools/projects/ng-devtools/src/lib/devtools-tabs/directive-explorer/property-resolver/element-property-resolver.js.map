{"version":3,"file":"element-property-resolver.js","sourceRoot":"","sources":["element-property-resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAYzC,OAAO,EAAC,yBAAyB,EAAC,MAAM,+BAA+B,CAAC;AAejE,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAGlC,YAAoB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;QAF3C,mCAA8B,GAAG,IAAI,GAAG,EAAqC,CAAC;IAEhC,CAAC;IAEvD,eAAe;QACb,IAAI,CAAC,8BAA8B,GAAG,IAAI,GAAG,EAAE,CAAC;IAClD,CAAC;IAED,aAAa,CAAC,WAAwB,EAAE,IAA0B;QAChE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,MAAM,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChE,IAAI,UAAU,EAAE,CAAC;gBACf,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvC,OAAO;YACT,CAAC;YACD,MAAM,QAAQ,GAAsB;gBAClC,OAAO,EAAE,WAAW,CAAC,QAAQ;gBAC7B,SAAS,EAAE,SAAS;aACrB,CAAC;YACF,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,CAAC,IAAI,KAAK,GAAG,EAAE,CAAC;gBACjE,QAAQ,CAAC,SAAS,GAAG,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;YAC/E,CAAC;YACD,IAAI,CAAC,8BAA8B,CAAC,GAAG,CACrC,GAAG,EACH,IAAI,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CACrE,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,uBAAuB,CAAC,IAA0B;QACxD,MAAM,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,8BAA8B,CAAC,IAAI,EAAE,CAAC,CAAC;QACrE,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;YAChC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC7B,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;IACH,CAAC;IAED,qBAAqB;QACnB,MAAM,MAAM,GAAoC,EAAE,CAAC;QACnD,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,8BAA8B,EAAE,CAAC;YAC9D,MAAM,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACtE,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,CAAC,iDAAiD,EAAE,SAAS,CAAC,CAAC;gBAC5E,SAAS;YACX,CAAC;YACD,MAAM,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,qBAAqB,EAAE,CAAC;QACzD,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,sBAAsB,CAAC,SAAiB;QACtC,OAAO,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;CACF,CAAA;AA1DY,uBAAuB;IADnC,UAAU,EAAE;GACA,uBAAuB,CA0DnC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {\n  ComponentExplorerViewProperties,\n  Descriptor,\n  DirectivePosition,\n  DirectivesProperties,\n  Events,\n  MessageBus,\n} from '../../../../../../protocol';\n\nimport {IndexedNode} from '../directive-forest/index-forest';\n\nimport {DirectivePropertyResolver} from './directive-property-resolver';\n\nexport interface FlatNode {\n  expandable: boolean;\n  prop: Property;\n  level: number;\n}\n\nexport interface Property {\n  name: string;\n  descriptor: Descriptor;\n  parent: Property | null;\n}\n\n@Injectable()\nexport class ElementPropertyResolver {\n  private _directivePropertiesController = new Map<string, DirectivePropertyResolver>();\n\n  constructor(private _messageBus: MessageBus<Events>) {}\n\n  clearProperties(): void {\n    this._directivePropertiesController = new Map();\n  }\n\n  setProperties(indexedNode: IndexedNode, data: DirectivesProperties): void {\n    this._flushDeletedProperties(data);\n\n    Object.keys(data).forEach((key) => {\n      const controller = this._directivePropertiesController.get(key);\n      if (controller) {\n        controller.updateProperties(data[key]);\n        return;\n      }\n      const position: DirectivePosition = {\n        element: indexedNode.position,\n        directive: undefined,\n      };\n      if (!indexedNode.component || indexedNode.component.name !== key) {\n        position.directive = indexedNode.directives.findIndex((d) => d.name === key);\n      }\n      this._directivePropertiesController.set(\n        key,\n        new DirectivePropertyResolver(this._messageBus, data[key], position),\n      );\n    });\n  }\n\n  private _flushDeletedProperties(data: DirectivesProperties): void {\n    const currentProps = [...this._directivePropertiesController.keys()];\n    const incomingProps = new Set(Object.keys(data));\n    for (const prop of currentProps) {\n      if (!incomingProps.has(prop)) {\n        this._directivePropertiesController.delete(prop);\n      }\n    }\n  }\n\n  getExpandedProperties(): ComponentExplorerViewProperties {\n    const result: ComponentExplorerViewProperties = {};\n    for (const [directive] of this._directivePropertiesController) {\n      const controller = this._directivePropertiesController.get(directive);\n      if (!controller) {\n        console.error('Unable to find nested properties controller for', directive);\n        continue;\n      }\n      result[directive] = controller.getExpandedProperties();\n    }\n    return result;\n  }\n\n  getDirectiveController(directive: string): DirectivePropertyResolver | undefined {\n    return this._directivePropertiesController.get(directive);\n  }\n}\n"]}