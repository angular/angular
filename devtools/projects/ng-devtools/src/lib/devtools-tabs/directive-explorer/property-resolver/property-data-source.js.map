{"version":3,"file":"property-data-source.js","sourceRoot":"","sources":["property-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CollectionViewer, DataSource, SelectionChange} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {DefaultIterableDiffer, TrackByFunction} from '@angular/core';\nimport {MatTreeFlattener} from '@angular/material/tree';\nimport {\n  Descriptor,\n  DirectivePosition,\n  Events,\n  MessageBus,\n  Properties,\n} from '../../../../../../protocol';\nimport {BehaviorSubject, merge, Observable, Subscription} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {diff} from '../../diffing';\n\nimport {arrayifyProps} from './arrayify-props';\nimport {FlatNode, Property} from './element-property-resolver';\n\nconst trackBy: TrackByFunction<FlatNode> = (_: number, item: FlatNode) =>\n  `#${item.prop.name}#${item.prop.descriptor.preview}#${item.level}`;\n\nexport class PropertyDataSource extends DataSource<FlatNode> {\n  private _data = new BehaviorSubject<FlatNode[]>([]);\n  private _subscriptions: Subscription[] = [];\n  private _expandedData = new BehaviorSubject<FlatNode[]>([]);\n  private _differ = new DefaultIterableDiffer<FlatNode>(trackBy);\n\n  constructor(\n    props: {[prop: string]: Descriptor},\n    private _treeFlattener: MatTreeFlattener<Property, FlatNode>,\n    private _treeControl: FlatTreeControl<FlatNode>,\n    private _entityPosition: DirectivePosition,\n    private _messageBus: MessageBus<Events>,\n  ) {\n    super();\n    this._data.next(this._treeFlattener.flattenNodes(arrayifyProps(props)));\n  }\n\n  get data(): FlatNode[] {\n    return this._data.value;\n  }\n\n  get treeControl(): FlatTreeControl<FlatNode> {\n    return this._treeControl;\n  }\n\n  update(props: {[prop: string]: Descriptor}): void {\n    const newData = this._treeFlattener.flattenNodes(arrayifyProps(props));\n    diff(this._differ, this.data, newData);\n    this._data.next(this.data);\n  }\n\n  override connect(collectionViewer: CollectionViewer): Observable<FlatNode[]> {\n    const changed = this._treeControl.expansionModel.changed;\n    if (!changed) {\n      throw new Error('Unable to subscribe to the expansion model change');\n    }\n    const s = changed.subscribe((change: SelectionChange<FlatNode>) => {\n      if (change.added) {\n        change.added.forEach((node) => this._toggleNode(node, true));\n      }\n      if (change.removed) {\n        change.removed.reverse().forEach((node) => this._toggleNode(node, false));\n      }\n    });\n    this._subscriptions.push(s);\n\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._data,\n    ];\n\n    return merge<unknown[]>(...changes).pipe(\n      map(() => {\n        this._expandedData.next(\n          this._treeFlattener.expandFlattenedNodes(this.data, this._treeControl),\n        );\n        return this._expandedData.value;\n      }),\n    );\n  }\n\n  override disconnect(): void {\n    this._subscriptions.forEach((s) => s.unsubscribe());\n    this._subscriptions = [];\n  }\n\n  private _toggleNode(node: FlatNode, expand: boolean): void {\n    const index = this.data.indexOf(node);\n    // If we cannot find the current node, or the current node is not expandable\n    // or...if it's expandable but it does have a value, or we're collapsing\n    // we're not interested in fetching its children.\n    if (index < 0 || !node.expandable || node.prop.descriptor.value || !expand) {\n      return;\n    }\n\n    let parentPath: string[] = [];\n    let current = node.prop;\n    while (current) {\n      parentPath.push(current.name);\n      if (!current.parent) {\n        break;\n      }\n      current = current.parent;\n    }\n    parentPath = parentPath.reverse();\n\n    this._messageBus.emit('getNestedProperties', [this._entityPosition, parentPath]);\n\n    this._messageBus.once(\n      'nestedProperties',\n      (position: DirectivePosition, data: Properties, _path: string[]) => {\n        node.prop.descriptor.value = data.props;\n        this._treeControl.expand(node);\n        const props = arrayifyProps(data.props, node.prop);\n        const flatNodes = this._treeFlattener.flattenNodes(props);\n        flatNodes.forEach((f) => (f.level += node.level + 1));\n        this.data.splice(index + 1, 0, ...flatNodes);\n        this._data.next(this.data);\n      },\n    );\n  }\n}\n"]}