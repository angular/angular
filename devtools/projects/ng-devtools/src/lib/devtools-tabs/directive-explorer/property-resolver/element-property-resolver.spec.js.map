{"version":3,"file":"element-property-resolver.spec.js","sourceRoot":"","sources":["element-property-resolver.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Properties, PropType} from '../../../../../../protocol';\n\nimport {IndexedNode} from '../directive-forest/index-forest';\n\nimport {ElementPropertyResolver} from './element-property-resolver';\n\nconst mockIndexedNode: IndexedNode = {\n  component: {\n    name: 'FooCmp',\n    id: 0,\n    isElement: false,\n  },\n  hydration: null,\n  directives: [\n    {\n      id: 1,\n      name: 'BarDir',\n    },\n    {\n      id: 2,\n      name: 'BazDir',\n    },\n  ],\n  defer: null,\n  hasNativeElement: true,\n  children: [],\n  element: 'foo',\n  position: [0],\n};\n\nconst fooNestedProperties: Properties = {\n  props: {\n    foo: {\n      editable: false,\n      expandable: true,\n      preview: '{...}',\n      type: PropType.Object,\n      value: {\n        bar: {\n          editable: false,\n          expandable: true,\n          preview: '{...}',\n          type: PropType.Object,\n          value: {},\n        },\n        baz: {\n          editable: false,\n          expandable: true,\n          preview: '{...}',\n          type: PropType.Object,\n          value: {},\n        },\n      },\n      containerType: null,\n    },\n  },\n};\n\nconst barNestedProps: Properties = {\n  props: {\n    bar: {\n      editable: false,\n      expandable: false,\n      preview: 'undefined',\n      type: PropType.Undefined,\n      value: undefined,\n      containerType: null,\n    },\n  },\n};\n\ndescribe('ElementPropertyResolver', () => {\n  let messageBusMock: any;\n  beforeEach(() => {\n    messageBusMock = jasmine.createSpyObj('messageBus', ['on', 'once', 'emit', 'destroy']);\n  });\n\n  it('should register directives', () => {\n    const resolver = new ElementPropertyResolver(messageBusMock);\n    resolver.setProperties(mockIndexedNode, {\n      FooCmp: {\n        props: {},\n      },\n      BarDir: {\n        props: {},\n      },\n      BazDir: {\n        props: {},\n      },\n    });\n    expect(resolver.getDirectiveController('FooCmp')).not.toBeFalsy();\n    expect(resolver.getDirectiveController('BarDir')).not.toBeFalsy();\n    expect(resolver.getDirectiveController('BazDir')).not.toBeFalsy();\n  });\n\n  it('should provide nested props', () => {\n    const resolver = new ElementPropertyResolver(messageBusMock);\n    resolver.setProperties(mockIndexedNode, {\n      FooCmp: fooNestedProperties,\n      BarDir: barNestedProps,\n      BazDir: {\n        props: {},\n      },\n    });\n    const fooController = resolver.getDirectiveController('FooCmp');\n    expect(fooController).toBeTruthy();\n    const fooProps = fooController!.getExpandedProperties();\n    expect(fooProps).toEqual([\n      {\n        name: 'foo',\n        children: [\n          {\n            name: 'bar',\n            children: [],\n          },\n          {\n            name: 'baz',\n            children: [],\n          },\n        ],\n      },\n    ]);\n\n    const barController = resolver.getDirectiveController('BarDir');\n    expect(barController).toBeTruthy();\n    const barProps = barController!.getExpandedProperties();\n    expect(barProps).toEqual([\n      {\n        name: 'bar',\n        children: [],\n      },\n    ]);\n  });\n});\n"]}