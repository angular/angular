{"version":3,"file":"flatten.js","sourceRoot":"","sources":["flatten.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAa,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AAChE,OAAO,EAAC,UAAU,EAAC,MAAM,MAAM,CAAC;AAEhC,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAG/C,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,EAAE,CACnC,IAAI,gBAAgB,CAClB,CAAC,IAAc,EAAE,KAAa,EAAY,EAAE;IAC1C,OAAO;QACL,UAAU,EAAE,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;QACvC,IAAI,EAAE,IAAI;QACV,KAAK;KACN,CAAC;AACJ,CAAC,EACD,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,EACpB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,EACzB,CAAC,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAC5B,CAAC;AAEJ,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAgB,EAAE,EAAE;IAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACrB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,IAAc,EAA0B,EAAE;IAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACnC,IACE,CAAC,UAAU,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC;QAC3E,CAAC,CAAC,UAAU,CAAC,KAAK,YAAY,UAAU,CAAC,EACzC,CAAC;QACD,OAAO,aAAa,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IACD,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IACvE,OAAO;AACT,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MatTreeFlattener} from '@angular/material/tree';\nimport {Descriptor, PropType} from '../../../../../../protocol';\nimport {Observable} from 'rxjs';\n\nimport {arrayifyProps} from './arrayify-props';\nimport {FlatNode, Property} from './element-property-resolver';\n\nexport const getTreeFlattener = () =>\n  new MatTreeFlattener(\n    (node: Property, level: number): FlatNode => {\n      return {\n        expandable: expandable(node.descriptor),\n        prop: node,\n        level,\n      };\n    },\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => getChildren(node),\n  );\n\nexport const expandable = (prop: Descriptor) => {\n  if (!prop) {\n    return false;\n  }\n  if (!prop.expandable) {\n    return false;\n  }\n  return !(prop.type !== PropType.Object && prop.type !== PropType.Array);\n};\n\nconst getChildren = (prop: Property): Property[] | undefined => {\n  const descriptor = prop.descriptor;\n  if (\n    (descriptor.type === PropType.Object || descriptor.type === PropType.Array) &&\n    !(descriptor.value instanceof Observable)\n  ) {\n    return arrayifyProps(descriptor.value || {}, prop);\n  }\n  console.error('Unexpected data type', descriptor, 'in property', prop);\n  return;\n};\n"]}