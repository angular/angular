{"version":3,"file":"directive-explorer.spec.js","sourceRoot":"","sources":["directive-explorer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\n\nimport {ApplicationOperations} from '../../application-operations';\nimport {DirectivePosition, MessageBus, PropType, PropertyQueryTypes} from '../../../../../protocol';\n\nimport {DirectiveExplorerComponent} from './directive-explorer.component';\nimport {DirectiveForestComponent} from './directive-forest/directive-forest.component';\nimport {IndexedNode} from './directive-forest/index-forest';\n\nimport SpyObj = jasmine.SpyObj;\nimport {By} from '@angular/platform-browser';\nimport {FrameManager} from '../../application-services/frame_manager';\nimport {Component, CUSTOM_ELEMENTS_SCHEMA, output, input} from '@angular/core';\nimport {ElementPropertyResolver, FlatNode} from './property-resolver/element-property-resolver';\nimport {BreadcrumbsComponent} from './directive-forest/breadcrumbs/breadcrumbs.component';\nimport {PropertyTabComponent} from './property-tab/property-tab.component';\nimport {SignalGraphManager} from './signal-graph/signal-graph-manager';\n\n@Component({\n  selector: 'ng-directive-forest',\n  template: '',\n})\nclass MockDirectiveForestComponent {\n  readonly forest = input<IndexedNode[]>([]);\n  readonly currentSelectedElement = input<IndexedNode | null>(null);\n  readonly showCommentNodes = input(false);\n  readonly selectNode = output<IndexedNode>();\n  readonly selectDomElement = output<IndexedNode>();\n  readonly setParents = output<IndexedNode>();\n  readonly highlightComponent = output<IndexedNode>();\n  readonly removeComponentHighlight = output<void>();\n  readonly toggleInspector = output<void>();\n}\n\n@Component({\n  selector: 'ng-breadcrumbs',\n  template: '',\n})\nclass MockBreadcrumbsComponent {\n  readonly parents = input<IndexedNode[]>([]);\n  readonly handleSelect = output<any>();\n  readonly mouseLeaveNode = output<any>();\n  readonly mouseOverNode = output<any>();\n}\n\n@Component({\n  selector: 'ng-property-tab',\n  template: '',\n})\nclass MockPropertyTabComponent {\n  readonly currentSelectedElement = input<IndexedNode | null>(null);\n  readonly inspect = output<{node: FlatNode; directivePosition: DirectivePosition}>();\n  readonly viewSource = output<string>();\n}\n\ndescribe('DirectiveExplorerComponent', () => {\n  let messageBusMock: SpyObj<any>;\n  let fixture: ComponentFixture<DirectiveExplorerComponent>;\n  let comp: DirectiveExplorerComponent;\n  let applicationOperationsSpy: SpyObj<ApplicationOperations>;\n  let contentScriptConnected = (frameId: number, name: string, url: string) => {};\n  let frameConnected = (frameId: number) => {};\n\n  beforeEach(() => {\n    applicationOperationsSpy = jasmine.createSpyObj<ApplicationOperations>('_appOperations', [\n      'viewSource',\n      'selectDomElement',\n      'inspect',\n    ]);\n\n    messageBusMock = jasmine.createSpyObj('messageBus', ['on', 'once', 'emit', 'destroy']);\n\n    messageBusMock.on.and.callFake((topic: string, cb: Function) => {\n      if (topic === 'contentScriptConnected') {\n        contentScriptConnected = cb as (frameId: number, name: string, url: string) => void;\n      }\n      if (topic === 'frameConnected') {\n        frameConnected = cb as (frameId: number) => void;\n      }\n    });\n    messageBusMock.emit.and.callFake((topic: string, args: any[]) => {\n      if (topic === 'enableFrameConnection') {\n        frameConnected(args[0]);\n      }\n    });\n\n    TestBed.configureTestingModule({\n      providers: [\n        {provide: ApplicationOperations, useValue: applicationOperationsSpy},\n        {provide: MessageBus, useValue: messageBusMock},\n        {\n          provide: ElementPropertyResolver,\n          useValue: new ElementPropertyResolver(messageBusMock),\n        },\n        {provide: FrameManager, useFactory: () => FrameManager.initialize(123)},\n      ],\n    }).overrideComponent(DirectiveExplorerComponent, {\n      add: {schemas: [CUSTOM_ELEMENTS_SCHEMA]},\n      remove: {imports: [DirectiveForestComponent]},\n    });\n\n    fixture = TestBed.overrideComponent(DirectiveExplorerComponent, {\n      remove: {\n        imports: [DirectiveForestComponent, BreadcrumbsComponent, PropertyTabComponent],\n        providers: [SignalGraphManager],\n      },\n      add: {\n        imports: [MockDirectiveForestComponent, MockBreadcrumbsComponent, MockPropertyTabComponent],\n        providers: [\n          {\n            provide: SignalGraphManager,\n            useValue: {\n              listen: () => {},\n              destroy: () => {},\n            },\n          },\n        ],\n      },\n    }).createComponent(DirectiveExplorerComponent);\n    comp = fixture.componentInstance;\n\n    TestBed.inject(FrameManager);\n    comp = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create instance from class', () => {\n    expect(comp).toBeTruthy();\n  });\n\n  it('subscribe to backend events', () => {\n    expect(messageBusMock.on).toHaveBeenCalledWith(\n      'latestComponentExplorerView',\n      jasmine.any(Function),\n    );\n    expect(messageBusMock.on).toHaveBeenCalledWith('componentTreeDirty', jasmine.any(Function));\n  });\n\n  describe('refresh', () => {\n    it('should emit getLatestComponentExplorerView event on refresh', () => {\n      comp.refresh();\n      expect(messageBusMock.emit).toHaveBeenCalledWith('getLatestComponentExplorerView', [\n        undefined,\n      ]);\n    });\n\n    it('should emit getLatestComponentExplorerView event with null view query', () => {\n      comp.refresh();\n      expect(messageBusMock.emit).toHaveBeenCalledWith('getLatestComponentExplorerView', [\n        undefined,\n      ]);\n    });\n\n    it('should emit getLatestComponentExplorerView event on refresh with view query no properties', () => {\n      const currentSelectedElement = jasmine.createSpyObj('currentSelectedElement', [\n        'position',\n        'children',\n      ]);\n      currentSelectedElement.position = [0];\n      currentSelectedElement.children = [];\n      comp.currentSelectedElement.set(currentSelectedElement);\n      comp.refresh();\n      expect(comp.currentSelectedElement()).toBeTruthy();\n      expect(messageBusMock.emit).toHaveBeenCalledWith('getLatestComponentExplorerView', [\n        undefined,\n      ]);\n    });\n  });\n\n  describe('node selection event', () => {\n    let nodeMock: SpyObj<IndexedNode>;\n\n    beforeEach(() => {\n      nodeMock = jasmine.createSpyObj('node', ['position', 'children']);\n    });\n\n    it('fires node selection events', () => {\n      const position = [0];\n      nodeMock.position = position;\n      comp.handleNodeSelection(nodeMock);\n      expect(messageBusMock.emit).toHaveBeenCalledWith('setSelectedComponent', [nodeMock.position]);\n      expect(messageBusMock.emit).toHaveBeenCalledWith('getLatestComponentExplorerView', [\n        {\n          selectedElement: position,\n          propertyQuery: {\n            type: PropertyQueryTypes.All,\n          },\n        },\n      ]);\n    });\n  });\n\n  describe('hydration', () => {\n    it('should highlight hydration nodes', () => {\n      comp.hightlightHydrationNodes();\n      expect(messageBusMock.emit).toHaveBeenCalledWith('createHydrationOverlay');\n\n      comp.removeHydrationNodesHightlights();\n      expect(messageBusMock.emit).toHaveBeenCalledWith('removeHydrationOverlay');\n    });\n\n    it('should show hydration slide toggle', () => {\n      fixture.componentRef.setInput('isHydrationEnabled', true);\n      fixture.detectChanges();\n      const toggle = fixture.debugElement.query(By.css('mat-slide-toggle'));\n      expect(toggle).toBeTruthy();\n\n      fixture.componentRef.setInput('isHydrationEnabled', false);\n      fixture.detectChanges();\n      const toggle2 = fixture.debugElement.query(By.css('mat-slide-toggle'));\n      expect(toggle2).toBeFalsy();\n    });\n  });\n\n  describe('applicaton operations', () => {\n    describe('view source', () => {\n      it('should not call application operations view source if no frames are detected', () => {\n        const directiveName = 'test';\n        comp.currentSelectedElement.set({\n          directives: [{name: directiveName}],\n          position: [0],\n          children: [] as IndexedNode[],\n        } as IndexedNode);\n        comp.viewSource(directiveName);\n        expect(applicationOperationsSpy.viewSource).toHaveBeenCalledTimes(0);\n      });\n\n      it('should not call application operations view source if a frame is selected that does not have a unique url on the page', () => {\n        contentScriptConnected(0, 'test1', 'http://localhost:4200/url');\n        contentScriptConnected(1, 'test2', 'http://localhost:4200/url');\n\n        const directiveName = 'test';\n        comp.currentSelectedElement.set({\n          directives: [{name: directiveName}],\n          position: [0],\n          children: [] as IndexedNode[],\n        } as IndexedNode);\n\n        comp.viewSource(directiveName);\n\n        expect(applicationOperationsSpy.viewSource).toHaveBeenCalledTimes(0);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('enableFrameConnection', [0, 123]);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('log', [\n          {\n            level: 'warn',\n            message: `The currently inspected frame does not have a unique url on this page. Cannot view source.`,\n          },\n        ]);\n      });\n\n      it('should call application operations view source if a frame is selected that has a unique url on the page', () => {\n        contentScriptConnected(0, 'test1', 'http://localhost:4200/url');\n        contentScriptConnected(1, 'test2', 'http://localhost:4200/url2');\n\n        const directiveName = 'test';\n        comp.currentSelectedElement.set({\n          directives: [{name: directiveName}],\n          position: [0],\n          children: [] as IndexedNode[],\n        } as IndexedNode);\n\n        comp.viewSource(directiveName);\n\n        expect(applicationOperationsSpy.viewSource).toHaveBeenCalledTimes(1);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('enableFrameConnection', [0, 123]);\n        expect(applicationOperationsSpy.viewSource).toHaveBeenCalledWith(\n          [0], // current selected element position\n          {name: 'test1', id: 0, url: new URL('http://localhost:4200/url')},\n          0, // directive index\n        );\n      });\n    });\n\n    describe('select dom element', () => {\n      it('should not call application operations select dom element if no frames are detected', () => {\n        comp.handleSelectDomElement({position: [0], children: [] as IndexedNode[]} as IndexedNode);\n        expect(applicationOperationsSpy.selectDomElement).toHaveBeenCalledTimes(0);\n      });\n\n      it('should not call application operations select dom element if a frame is selected that does not have a unique url on the page', () => {\n        contentScriptConnected(0, 'test1', 'http://localhost:4200/url');\n        contentScriptConnected(1, 'test2', 'http://localhost:4200/url');\n\n        comp.handleSelectDomElement({position: [0], children: [] as IndexedNode[]} as IndexedNode);\n\n        expect(applicationOperationsSpy.selectDomElement).toHaveBeenCalledTimes(0);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('enableFrameConnection', [0, 123]);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('log', [\n          {\n            level: 'warn',\n            message: `The currently inspected frame does not have a unique url on this page. Cannot select DOM element.`,\n          },\n        ]);\n      });\n\n      it('should call application operations select dom element if a frame is selected that has a unique url on the page', () => {\n        contentScriptConnected(0, 'test1', 'http://localhost:4200/url');\n        contentScriptConnected(1, 'test2', 'http://localhost:4200/url2');\n\n        comp.handleSelectDomElement({position: [0], children: [] as IndexedNode[]} as IndexedNode);\n\n        expect(applicationOperationsSpy.selectDomElement).toHaveBeenCalledTimes(1);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('enableFrameConnection', [0, 123]);\n        expect(applicationOperationsSpy.selectDomElement).toHaveBeenCalledWith(\n          [0], // current selected element position\n          {name: 'test1', id: 0, url: new URL('http://localhost:4200/url')},\n        );\n      });\n    });\n\n    describe('inspect', () => {\n      let node: FlatNode;\n      let directivePosition: DirectivePosition;\n\n      beforeEach(() => {\n        node = {\n          expandable: true,\n          prop: {\n            name: 'foo',\n            parent: null,\n            descriptor: {\n              expandable: true,\n              editable: false,\n              type: PropType.String,\n              preview: 'preview',\n              containerType: null,\n            },\n          },\n          level: 1,\n        };\n        directivePosition = {element: [0], directive: 0};\n      });\n\n      it('should not call application operations inspect if no frames are detected', () => {\n        comp.inspect({node, directivePosition});\n        expect(applicationOperationsSpy.selectDomElement).toHaveBeenCalledTimes(0);\n      });\n\n      it('should not call application operations inspect if a frame is selected that does not have a unique url on the page', () => {\n        contentScriptConnected(0, 'test1', 'http://localhost:4200/url');\n        contentScriptConnected(1, 'test2', 'http://localhost:4200/url');\n\n        comp.inspect({node, directivePosition});\n\n        expect(applicationOperationsSpy.inspect).toHaveBeenCalledTimes(0);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('enableFrameConnection', [0, 123]);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('log', [\n          {\n            level: 'warn',\n            message: `The currently inspected frame does not have a unique url on this page. Cannot inspect object.`,\n          },\n        ]);\n      });\n\n      it('should call application operations inspect if a frame is selected that has a unique url on the page', () => {\n        contentScriptConnected(0, 'test1', 'http://localhost:4200/url');\n        contentScriptConnected(1, 'test2', 'http://localhost:4200/url2');\n\n        comp.inspect({node, directivePosition});\n\n        expect(applicationOperationsSpy.inspect).toHaveBeenCalledTimes(1);\n        expect(messageBusMock.emit).toHaveBeenCalledWith('enableFrameConnection', [0, 123]);\n        expect(applicationOperationsSpy.inspect).toHaveBeenCalledWith(directivePosition, ['foo'], {\n          name: 'test1',\n          id: 0,\n          url: new URL('http://localhost:4200/url'),\n        });\n      });\n    });\n  });\n});\n"]}