{"version":3,"file":"defer-view.component.js","sourceRoot":"","sources":["defer-view.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AAClF,OAAO,EAAC,UAAU,EAAC,MAAM,2BAA2B,CAAC;AAU9C,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAAxB;QACI,UAAK,GAAG,KAAK,CAAC,QAAQ,EAA0B,CAAC;QAEjD,qBAAgB,GAAG,QAAQ,CAAC,GAAG,EAAE;YACxC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC;YACtD,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,IAAI,GAAa,EAAE,CAAC;YAC1B,IAAI,YAAY,CAAC,WAAW,EAAE,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,YAAY,CAAC,WAAW,IAAI,CAAC,CAAC;YACrD,CAAC;YACD,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,YAAY,CAAC,SAAS,IAAI,CAAC,CAAC;YACjD,CAAC;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC;CAAA,CAAA;AAlBY,kBAAkB;IAP9B,SAAS,CAAC;QACT,WAAW,EAAE,6BAA6B;QAC1C,QAAQ,EAAE,eAAe;QACzB,SAAS,EAAE,CAAC,6BAA6B,CAAC;QAC1C,OAAO,EAAE,CAAC,UAAU,CAAC;QACrB,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,kBAAkB,CAkB9B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, computed, input} from '@angular/core';\nimport {MatToolbar} from '@angular/material/toolbar';\nimport {DeferInfo} from '../../../../../../../protocol';\n\n@Component({\n  templateUrl: './defer-view.component.html',\n  selector: 'ng-defer-view',\n  styleUrls: ['./defer-view.component.scss'],\n  imports: [MatToolbar],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeferViewComponent {\n  readonly defer = input.required<NonNullable<DeferInfo>>();\n\n  readonly loadingBlockInfo = computed(() => {\n    const loadingBlock = this.defer().blocks.loadingBlock;\n    if (!loadingBlock) {\n      return null;\n    }\n\n    const info: string[] = [];\n    if (loadingBlock.minimumTime) {\n      info.push(`minimum ${loadingBlock.minimumTime}ms`);\n    }\n    if (loadingBlock.afterTime) {\n      info.push(`after ${loadingBlock.afterTime}ms`);\n    }\n    return info.length ? `(${info.join(', ')})` : null;\n  });\n}\n"]}