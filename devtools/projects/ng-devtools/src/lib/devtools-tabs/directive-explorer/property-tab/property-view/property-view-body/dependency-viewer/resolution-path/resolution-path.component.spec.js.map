{"version":3,"file":"resolution-path.component.spec.js","sourceRoot":"","sources":["resolution-path.component.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAmB,OAAO,EAAC,MAAM,uBAAuB,CAAC;AAChE,OAAO,EAAC,EAAE,EAAC,MAAM,2BAA2B,CAAC;AAE7C,OAAO,EAAC,mBAAmB,EAAE,uBAAuB,EAAC,MAAM,6BAA6B,CAAC;AAGzF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,SAAkC,CAAC;IACvC,IAAI,OAAkD,CAAC;IAEvD,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,OAAO,CAAC,sBAAsB,CAAC;YACnC,OAAO,EAAE,CAAC,uBAAuB,CAAC;SACnC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAEvB,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC;QAC3D,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACtC,OAAO,CAAC,aAAa,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,SAAS,GAAG;YAChB;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,aAAa;aACpB;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,iBAAiB;aACxB;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,IAAI,EAAE,SAAS;aAChB;SACsB,CAAC;QAE1B,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACjD,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7C,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAErD,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;YAE5B,MAAM,EAAE,GAAG,MAAM,CAAC,aAA4B,CAAC;YAE/C,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC5C,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/E,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\n\nimport {NODE_TYPE_CLASS_MAP, ResolutionPathComponent} from './resolution-path.component';\nimport {SerializedInjector} from '../../../../../../../../../../protocol';\n\ndescribe('ResolutionPath', () => {\n  let component: ResolutionPathComponent;\n  let fixture: ComponentFixture<ResolutionPathComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [ResolutionPathComponent],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(ResolutionPathComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should render a proper path in a reverse order', () => {\n    const dummyPath = [\n      {\n        name: 'Root',\n        type: 'environment',\n      },\n      {\n        name: 'AppComponent',\n        type: 'element',\n      },\n      {\n        name: 'Nav',\n        type: 'imported-module',\n      },\n      {\n        name: 'NavComponent',\n        type: 'element',\n      },\n    ] as SerializedInjector[];\n\n    fixture.componentRef.setInput('path', dummyPath);\n    fixture.detectChanges();\n\n    const nodeElements = fixture.debugElement.queryAll(By.css('.node'));\n    expect(nodeElements.length).toEqual(dummyPath.length);\n\n    for (let i = 0; i < nodeElements.length; i++) {\n      const nodeEl = nodeElements[i];\n      const pathNode = dummyPath[dummyPath.length - i - 1];\n\n      expect(nodeEl).toBeTruthy();\n\n      const el = nodeEl.nativeElement as HTMLElement;\n\n      expect(el.innerText).toEqual(pathNode.name);\n      expect(el.classList.contains(NODE_TYPE_CLASS_MAP[pathNode.type])).toBeTrue();\n    }\n  });\n});\n"]}