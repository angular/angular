{"version":3,"file":"component-metadata.component.js","sourceRoot":"","sources":["component-metadata.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EACL,uBAAuB,EACvB,SAAS,EACT,UAAU,IAAI,SAAS,EACvB,QAAQ,EACR,MAAM,EACN,KAAK,GACN,MAAM,eAAe,CAAC;AAQvB,OAAO,EAAC,uBAAuB,EAAC,MAAM,sDAAsD,CAAC;AAC7F,OAAO,EAAC,sBAAsB,EAAC,MAAM,iEAAiE,CAAC;AAShG,IAAM,0BAA0B,GAAhC,MAAM,0BAA0B;IAAhC;QACI,6BAAwB,GAAG,KAAK,CAAC,QAAQ,EAAiB,CAAC;QAE5D,iBAAY,GAAG,MAAM,CAAC,uBAAuB,CAAC,CAAC;QAEvD,kCAA6B,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;QACjG,8BAAyB,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAExC,eAAU,GAAG,QAAQ,CAAC,GAAG,EAAE;YAClC,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO;YACT,CAAC;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEM,sBAAiB,GAAG,QAAQ,CAAC,GAAG,EAAE;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,EAAE,EAAE,iBAAiB,CAAC;YACtD,IAAI,CAAC,QAAQ;gBAAE,OAAO,SAAS,CAAC;YAEhC,MAAM,aAAa,GAAI,QAA4D;iBAChF,aAAa,CAAC;YACjB,IAAI,CAAC,aAAa;gBAAE,OAAO,SAAS,CAAC;YAErC,QAAQ,QAAQ,CAAC,SAAS,EAAE,CAAC;gBAC3B,KAAK,SAAS,CAAC,OAAO;oBACpB,OAAO,IAAI,CAAC,6BAA6B,CAAC,aAAa,CAAC,CAAC;gBAC3D,KAAK,SAAS,CAAC,GAAG;oBAChB,OAAO,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC,CAAC;gBACvD;oBACE,OAAO,SAAS,CAAC;YACrB,CAAC;QACH,CAAC,CAAC,CAAC;QAEM,4BAAuB,GAAG,QAAQ,CAAC,GAAG,EAAE;YAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,EAAE,EAAE,iBAAiB,CAAC;YACtD,IAAI,CAAC,QAAQ;gBAAE,OAAO,SAAS,CAAC;YAEhC,MAAM,IAAI,GAAG,QAAoE,CAAC;YAClF,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;gBAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;YAC5C,CAAC;iBAAM,CAAC;gBACN,OAAO,SAAS,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CAAA,CAAA;AA7CY,0BAA0B;IAPtC,SAAS,CAAC;QACT,QAAQ,EAAE,uBAAuB;QACjC,WAAW,EAAE,qCAAqC;QAClD,SAAS,EAAE,CAAC,qCAAqC,CAAC;QAClD,OAAO,EAAE,CAAC,sBAAsB,CAAC;QACjC,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,0BAA0B,CA6CtC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ÉµFramework as Framework,\n  computed,\n  inject,\n  input,\n} from '@angular/core';\n\nimport {\n  AngularDirectiveMetadata,\n  AcxDirectiveMetadata,\n  ComponentType,\n} from '../../../../../../../../protocol';\n\nimport {ElementPropertyResolver} from '../../../property-resolver/element-property-resolver';\nimport {DocsRefButtonComponent} from '../../../../../shared/docs-ref-button/docs-ref-button.component';\n\n@Component({\n  selector: 'ng-component-metadata',\n  templateUrl: './component-metadata.component.html',\n  styleUrls: ['./component-metadata.component.scss'],\n  imports: [DocsRefButtonComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ComponentMetadataComponent {\n  readonly currentSelectedComponent = input.required<ComponentType>();\n\n  private _nestedProps = inject(ElementPropertyResolver);\n\n  angularViewEncapsulationModes = ['Emulated', 'Native', 'None', 'ShadowDom', 'IsolatedShadowDom'];\n  acxViewEncapsulationModes = ['Emulated', 'None'];\n\n  readonly controller = computed(() => {\n    const comp = this.currentSelectedComponent();\n    if (!comp) {\n      return;\n    }\n    return this._nestedProps.getDirectiveController(comp.name);\n  });\n\n  readonly viewEncapsulation = computed(() => {\n    const metadata = this.controller()?.directiveMetadata;\n    if (!metadata) return undefined;\n\n    const encapsulation = (metadata as AngularDirectiveMetadata | AcxDirectiveMetadata)\n      .encapsulation;\n    if (!encapsulation) return undefined;\n\n    switch (metadata.framework) {\n      case Framework.Angular:\n        return this.angularViewEncapsulationModes[encapsulation];\n      case Framework.ACX:\n        return this.acxViewEncapsulationModes[encapsulation];\n      default:\n        return undefined;\n    }\n  });\n\n  readonly changeDetectionStrategy = computed(() => {\n    const metadata = this.controller()?.directiveMetadata;\n    if (!metadata) return undefined;\n\n    const meta = metadata as Partial<AcxDirectiveMetadata | AngularDirectiveMetadata>;\n    if (meta.onPush !== undefined) {\n      return meta.onPush ? 'OnPush' : 'Default';\n    } else {\n      return undefined;\n    }\n  });\n}\n"]}