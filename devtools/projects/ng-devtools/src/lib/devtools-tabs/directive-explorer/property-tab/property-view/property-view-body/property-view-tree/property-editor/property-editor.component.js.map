{"version":3,"file":"property-editor.component.js","sourceRoot":"","sources":["property-editor.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterNextRender,\n  Component,\n  ElementRef,\n  effect,\n  input,\n  output,\n  signal,\n  viewChild,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {ContainerType} from '../../../../../../../../../../protocol';\n\ntype EditorType = string | number | boolean;\ntype EditorResult = EditorType | Array<EditorType>;\n\nenum PropertyEditorState {\n  Read,\n  Write,\n}\n\nconst parseValue = (value: EditorResult): EditorResult => {\n  try {\n    return JSON.parse(value as any) as EditorResult;\n  } catch {\n    return value.toString();\n  }\n};\n\n@Component({\n  templateUrl: './property-editor.component.html',\n  selector: 'ng-property-editor',\n  styleUrls: ['./property-editor.component.scss'],\n  imports: [FormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PropertyEditorComponent {\n  readonly key = input.required<string>();\n  readonly initialValue = input.required<EditorResult>();\n  readonly containerType = input<ContainerType>();\n\n  readonly updateValue = output<EditorResult>();\n\n  readonly inputEl = viewChild<ElementRef<HTMLInputElement>>('inputEl');\n\n  readState = PropertyEditorState.Read;\n  writeState = PropertyEditorState.Write;\n\n  readonly valueToSubmit = signal<EditorResult | undefined>(undefined);\n  readonly currentPropertyState = signal(this.readState);\n\n  constructor() {\n    afterNextRender({\n      read: () => {\n        this.valueToSubmit.set(this.initialValue());\n      },\n    });\n\n    effect(() => {\n      const editor = this.inputEl()?.nativeElement;\n      if (editor && this.currentPropertyState() === this.writeState) {\n        editor.focus();\n        editor.select();\n      }\n    });\n  }\n\n  accept(): void {\n    const parsed = parseValue(this.valueToSubmit()!);\n    this.updateValue.emit(parsed);\n    this.currentPropertyState.set(this.readState);\n  }\n\n  reject(): void {\n    this.valueToSubmit.set(this.initialValue());\n    this.currentPropertyState.set(this.readState);\n  }\n\n  onClick(): void {\n    if (this.currentPropertyState() === this.readState) {\n      this.currentPropertyState.set(this.writeState);\n    }\n  }\n\n  onBlur(): void {\n    if (this.currentPropertyState() === this.writeState) {\n      this.accept();\n    }\n  }\n}\n"]}