{"version":3,"file":"router-tree-fns.spec.js","sourceRoot":"","sources":["router-tree-fns.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EACL,gBAAgB,EAChB,aAAa,EACb,QAAQ,EAER,0BAA0B,GAC3B,MAAM,mBAAmB,CAAC;AAE3B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,KAAK,GAAG;gBACZ,IAAI,EAAE,UAAU;aACR,CAAC;YACX,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,MAAM;aACJ,CAAC;YAEX,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,KAAK,GAAG;gBACZ,IAAI,EAAE,UAAU;aACR,CAAC;YACX,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,MAAM;aACJ,CAAC;YAEX,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC1B,MAAM,KAAK,GAAG;gBACZ,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,UAAU;aACR,CAAC;YACX,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,MAAM;aACJ,CAAC;YAEX,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;gBACvB,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,EAAsB;aACf,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,OAAO;qBACd;oBACD;wBACE,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,EAAE,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC;qBACrD;iBACF;aACO,CAAC;YAEX,MAAM,QAAQ,GAAG,0BAA0B,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAE9D,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;gBACvB,KAAK,EAAE,EAAE;gBACT,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,OAAO;wBACb,KAAK,EAAE,OAAO;wBACd,QAAQ,EAAE,EAAsB;qBACjC;oBACD;wBACE,IAAI,EAAE,OAAO;wBACb,KAAK,EAAE,OAAO;wBACd,QAAQ,EAAE;4BACR,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAC;4BAChD,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAC;yBACjD;qBACF;iBACF;aACgB,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,MAAM,IAAI,GAAG;YACX,KAAK,EAAE,OAAO;SACf,CAAC;QACF,MAAM,QAAQ,GAAG;YACf,KAAK,EAAE,WAAW;SACnB,CAAC;QACF,MAAM,KAAK,GAAG;YACZ,KAAK,EAAE,QAAQ;YACf,QAAQ,EAAE,CAAC,QAAQ,CAAC;SACrB,CAAC;QACF,MAAM,YAAY,GAAG;YACnB,KAAK,EAAE,gBAAgB;SACxB,CAAC;QACF,MAAM,IAAI,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC;SACpB,CAAC;QAEpB,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,OAAO,GAAG,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAE7C,MAAM,OAAO,GAAG,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YAExD,MAAM,OAAO,GAAG,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Route} from '../../../../../protocol';\nimport {\n  findNodesByLabel,\n  getRouteLabel,\n  mapRoute,\n  RouterTreeNode,\n  transformRoutesIntoVisTree,\n} from './router-tree-fns';\n\ndescribe('router-tree-fns', () => {\n  describe('getRouteLabel', () => {\n    it('should return route label', () => {\n      const route = {\n        path: '/foo/bar',\n      } as Route;\n      const parent = {\n        path: '/foo',\n      } as Route;\n\n      expect(getRouteLabel(route, parent, false)).toEqual('/bar');\n    });\n\n    it('should return full route label', () => {\n      const route = {\n        path: '/foo/bar',\n      } as Route;\n      const parent = {\n        path: '/foo',\n      } as Route;\n\n      expect(getRouteLabel(route, parent, true)).toEqual('/foo/bar');\n    });\n  });\n\n  describe('mapRoute', () => {\n    it('should map route', () => {\n      const route = {\n        isActive: true,\n        path: '/foo/bar',\n      } as Route;\n      const parent = {\n        path: '/foo',\n      } as Route;\n\n      const treeNode = mapRoute(route, parent, false);\n      expect(treeNode).toEqual({\n        isActive: true,\n        path: '/foo/bar',\n        label: '/bar',\n        children: [] as RouterTreeNode[],\n      } as RouterTreeNode);\n    });\n  });\n\n  describe('transformRoutesIntoVisTree', () => {\n    it('should transform routes to visualizer tree', () => {\n      const rootRoute = {\n        path: '',\n        children: [\n          {\n            path: '/home',\n          },\n          {\n            path: '/list',\n            children: [{path: '/list/foo'}, {path: '/list/bar'}],\n          },\n        ],\n      } as Route;\n\n      const rootNode = transformRoutesIntoVisTree(rootRoute, false);\n\n      expect(rootNode).toEqual({\n        label: '',\n        path: '',\n        children: [\n          {\n            path: '/home',\n            label: '/home',\n            children: [] as RouterTreeNode[],\n          },\n          {\n            path: '/list',\n            label: '/list',\n            children: [\n              {path: '/list/foo', label: '/foo', children: []},\n              {path: '/list/bar', label: '/bar', children: []},\n            ],\n          },\n        ],\n      } as RouterTreeNode);\n    });\n  });\n\n  describe('findNodesByLabel', () => {\n    const home = {\n      label: '/home',\n    };\n    const contacts = {\n      label: '/contacts',\n    };\n    const about = {\n      label: '/about',\n      children: [contacts],\n    };\n    const aboutProduct = {\n      label: '/about-product',\n    };\n    const root = {\n      label: '/',\n      children: [home, about, aboutProduct],\n    } as RouterTreeNode;\n\n    it('should return no results if an empty search string is provided', () => {\n      const result = findNodesByLabel(root, '');\n      expect(result).toEqual(new Set([]));\n    });\n\n    it('should find nodes by label', () => {\n      const result1 = findNodesByLabel(root, 'cont');\n      expect(result1).toEqual(new Set([contacts]));\n\n      const result2 = findNodesByLabel(root, 'about');\n      expect(result2).toEqual(new Set([about, aboutProduct]));\n\n      const result3 = findNodesByLabel(root, 'products');\n      expect(result3).toEqual(new Set([]));\n    });\n  });\n});\n"]}