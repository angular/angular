{"version":3,"file":"route-details-row.component.js","sourceRoot":"","sources":["route-details-row.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,uBAAuB,EAAC,MAAM,eAAe,CAAC;AAC1F,OAAO,EAAC,eAAe,EAAC,MAAM,sCAAsC,CAAC;AACrE,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AAalC,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IAA9B;QACI,UAAK,GAAG,KAAK,CAAC,QAAQ,EAAU,CAAC;QACjC,SAAI,GAAG,KAAK,CAAC,QAAQ,EAAkB,CAAC;QACxC,YAAO,GAAG,KAAK,CAAC,QAAQ,EAAU,CAAC;QACnC,sBAAiB,GAAG,KAAK,CAAU,KAAK,CAAC,CAAC;QAC1C,SAAI,GAAG,KAAK,CAAU,MAAM,CAAC,CAAC;QAE9B,aAAQ,GAAG,MAAM,EAAU,CAAC;QAE5B,aAAQ,GAAG,QAAQ,CAAC,GAAG,EAAE;YAChC,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,EAA0B,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEM,cAAS,GAAG,QAAQ,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpC,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;CAAA,CAAA;AApBY,wBAAwB;IARpC,SAAS,CAAC;QACT,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,wBAAwB;QAClC,WAAW,EAAE,oCAAoC;QACjD,SAAS,EAAE,CAAC,oCAAoC,CAAC;QACjD,OAAO,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC;QACpC,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,wBAAwB,CAoBpC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Component, computed, input, output, ChangeDetectionStrategy} from '@angular/core';\nimport {ButtonComponent} from '../../shared/button/button.component';\nimport {JsonPipe} from '@angular/common';\nimport {RouterTreeNode} from './router-tree-fns';\n\nexport type RowType = 'text' | 'chip' | 'flag' | 'list';\n\n@Component({\n  standalone: true,\n  selector: '[ng-route-details-row]',\n  templateUrl: './route-details-row.component.html',\n  styleUrls: ['./route-details-row.component.scss'],\n  imports: [ButtonComponent, JsonPipe],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RouteDetailsRowComponent {\n  readonly label = input.required<string>();\n  readonly data = input.required<RouterTreeNode>();\n  readonly dataKey = input.required<string>();\n  readonly renderValueAsJson = input<boolean>(false);\n  readonly type = input<RowType>('text');\n\n  readonly btnClick = output<string>();\n\n  readonly rowValue = computed(() => {\n    return this.data()[this.dataKey() as keyof RouterTreeNode];\n  });\n\n  readonly dataArray = computed(() => {\n    if (!this.data() || !this.dataKey()) {\n      return [];\n    }\n\n    return this.rowValue();\n  });\n}\n"]}