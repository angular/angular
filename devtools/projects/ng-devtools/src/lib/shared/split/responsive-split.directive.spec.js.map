{"version":3,"file":"responsive-split.directive.spec.js","sourceRoot":"","sources":["responsive-split.directive.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Component, DebugElement, ElementRef, viewChild} from '@angular/core';\nimport {TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\n\nimport {\n  RESIZE_DEBOUNCE,\n  ResponsiveSplitConfig,\n  ResponsiveSplitDirective,\n} from './responsive-split.directive';\nimport {WINDOW} from '../../application-providers/window_provider';\nimport {SplitComponent} from './split.component';\nimport {SplitAreaDirective} from './splitArea.directive';\n\n//\n// `ResizeObserver` mock.\n//\n\ninterface ResizeObserverMock extends ResizeObserver {\n  trigger: (width: number, height: number) => void;\n}\n\nlet observerInstance: ResizeObserverMock | undefined;\n\nfunction getResizeObserver() {\n  if (!observerInstance) {\n    throw new Error('The ResizeObserver mock is not instantiated.');\n  }\n  return observerInstance;\n}\n\nclass ResizeObserverMockImpl implements ResizeObserverMock {\n  constructor(private readonly cb: (e: Partial<ResizeObserverEntry>[]) => void) {\n    observerInstance = this;\n  }\n\n  trigger(width: number, height: number) {\n    this.cb([{contentBoxSize: [{inlineSize: width, blockSize: height}]}]);\n  }\n\n  disconnect() {}\n  observe() {}\n  unobserve() {}\n}\n\n// Test component\n@Component({\n  selector: 'ng-test-cmp',\n  imports: [SplitComponent, SplitAreaDirective, ResponsiveSplitDirective],\n  template: `\n    <as-split #host [ngResponsiveSplit]=\"config\">\n      <as-split-area>\n        <p>Foo</p>\n      </as-split-area>\n      <as-split-area>\n        <p>Bar</p>\n      </as-split-area>\n    </as-split>\n  `,\n})\nclass TestComponent {\n  readonly split = viewChild.required(SplitComponent);\n  readonly host = viewChild.required<ElementRef>('host');\n\n  readonly config: ResponsiveSplitConfig = {\n    defaultDirection: 'horizontal',\n    aspectRatioBreakpoint: 1.5,\n    breakpointDirection: 'vertical',\n  };\n}\n\nfunction initTestComponent(\n  width: number,\n  height: number,\n): {host: DebugElement; split: SplitComponent} {\n  TestBed.configureTestingModule({\n    providers: [{provide: WINDOW, useValue: {...window, ResizeObserver: ResizeObserverMockImpl}}],\n  });\n  const fixture = TestBed.createComponent(TestComponent);\n  fixture.detectChanges();\n\n  const host = fixture.debugElement.query(By.css('as-split'));\n  const split = host.componentInstance;\n\n  getResizeObserver().trigger(width, height);\n\n  // Should be equal or greater than the resize debounce.\n  jasmine.clock().tick(RESIZE_DEBOUNCE + 10);\n\n  return {\n    host,\n    split,\n  };\n}\n\n//\n// Tests\n//\n\ndescribe('responsive-split', () => {\n  beforeEach(() => {\n    jasmine.clock().uninstall();\n    jasmine.clock().install();\n  });\n\n  it('should use horizontal direction (ratio == 1)', () => {\n    const {split} = initTestComponent(200, 200);\n\n    expect(split.direction()).toEqual('horizontal');\n  });\n\n  it('should use horizontal direction (ratio == 1.49)', () => {\n    const {split} = initTestComponent(299, 200);\n\n    expect(split.direction()).toEqual('horizontal');\n  });\n\n  it('should use vertical direction (ratio == 1.5)', () => {\n    const {split} = initTestComponent(350, 200);\n\n    expect(split.direction()).toEqual('vertical');\n  });\n\n  it('should use vertical direction (ratio == 2)', () => {\n    const {split} = initTestComponent(400, 200);\n\n    expect(split.direction()).toEqual('vertical');\n  });\n});\n"]}