{"version":3,"file":"responsive-split.directive.js","sourceRoot":"","sources":["responsive-split.directive.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AACvF,OAAO,EAAC,MAAM,EAAC,MAAM,6CAA6C,CAAC;AACnE,OAAO,EAAC,SAAS,EAAC,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAGjD,MAAM,CAAC,MAAM,eAAe,GAAG,EAAE,CAAC,CAAC,kBAAkB;AAWrD,0CAA0C;AAInC,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IAWnC;QAViB,SAAI,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;QAC9B,eAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QAChC,WAAM,GAAG,MAAM,CAAoB,MAAM,CAAC,CAAC;QAEzC,WAAM,GAAG,KAAK,CAAC,QAAQ,CAAwB;YAChE,KAAK,EAAE,mBAAmB;SAC3B,CAAC,CAAC;QAEgB,oBAAe,GAAG,MAAM,EAAa,CAAC;QAGvD,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAClC,uFAAuF;QACvF,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CACnD,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE;YAC7B,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;gBACzB,MAAM,CAAC,EAAC,UAAU,EAAE,SAAS,EAAC,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC;gBACvD,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC,EAAE,eAAe,CAAC,CACpB,CAAC;QAEF,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACtD,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAChC,SAAS,CAAC,MAAM,EAAE,CAAC;YACnB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,cAAc,CAAC,KAAa,EAAE,MAAc;QAClD,MAAM,KAAK,GAAG,KAAK,GAAG,MAAM,CAAC;QAC7B,MAAM,EAAC,gBAAgB,EAAE,mBAAmB,EAAE,qBAAqB,EAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACrF,IAAI,MAAM,GAAc,gBAAgB,CAAC;QAEzC,IAAI,KAAK,IAAI,qBAAqB,EAAE,CAAC;YACnC,MAAM,GAAG,mBAAmB,CAAC;QAC/B,CAAC;QAED,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,MAAM,EAAE,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;CACF,CAAA;AA5CY,wBAAwB;IAHpC,SAAS,CAAC;QACT,QAAQ,EAAE,6BAA6B;KACxC,CAAC;GACW,wBAAwB,CA4CpC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, inject, input, DestroyRef, output} from '@angular/core';\nimport {WINDOW} from '../../application-providers/window_provider';\nimport {Debouncer} from '../utils/debouncer';\nimport {SplitComponent} from './split.component';\nimport {Direction} from './interface';\n\nexport const RESIZE_DEBOUNCE = 50; // in milliseconds\n\nexport type ResponsiveSplitConfig = {\n  /** Default direction of the as-split (when < `aspectRatioBreakpoint`) */\n  defaultDirection: Direction;\n  /** Width to height ratio. If greater than or equal, `breakpointDirection` is applied. */\n  aspectRatioBreakpoint: number;\n  /** Default direction of the as-split (when >= `aspectRatioBreakpoint`) */\n  breakpointDirection: Direction;\n};\n\n/** Make as-split direction responsive. */\n@Directive({\n  selector: 'as-split[ngResponsiveSplit]',\n})\nexport class ResponsiveSplitDirective {\n  private readonly host = inject(SplitComponent);\n  private readonly elementRef = inject(ElementRef);\n  private readonly window = inject<typeof globalThis>(WINDOW);\n\n  protected readonly config = input.required<ResponsiveSplitConfig>({\n    alias: 'ngResponsiveSplit',\n  });\n\n  protected readonly directionChange = output<Direction>();\n\n  constructor() {\n    const debouncer = new Debouncer();\n    // We use the ResizeObserver from the injected window object to allow mocking in tests.\n    const resizeObserver = new this.window.ResizeObserver(\n      debouncer.debounce(([entry]) => {\n        if (entry.contentBoxSize) {\n          const [{inlineSize, blockSize}] = entry.contentBoxSize;\n          this.applyDirection(inlineSize, blockSize);\n        }\n      }, RESIZE_DEBOUNCE),\n    );\n\n    resizeObserver.observe(this.elementRef.nativeElement);\n    inject(DestroyRef).onDestroy(() => {\n      debouncer.cancel();\n      resizeObserver.unobserve(this.elementRef.nativeElement);\n    });\n  }\n\n  private applyDirection(width: number, height: number) {\n    const ratio = width / height;\n    const {defaultDirection, breakpointDirection, aspectRatioBreakpoint} = this.config();\n    let newDir: Direction = defaultDirection;\n\n    if (ratio >= aspectRatioBreakpoint) {\n      newDir = breakpointDirection;\n    }\n\n    if (this.host.direction() !== newDir) {\n      this.host.direction.set(newDir);\n      this.directionChange.emit(newDir);\n    }\n  }\n}\n"]}