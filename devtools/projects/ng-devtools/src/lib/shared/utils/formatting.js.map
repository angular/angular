{"version":3,"file":"formatting.js","sourceRoot":"","sources":["formatting.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH;;;;GAIG;AACH,MAAM,UAAU,WAAW,CAAC,KAAa;IACvC,IAAI,KAAK,GAAG,IAAI;QAAE,OAAO,GAAG,KAAK,IAAI,CAAC;IACtC,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI;QAAE,OAAO,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IAClE,OAAO,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;AACpD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,GAAG;IACjB,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM;IAClB,SAAS,EAAE,GAAG,EAAE,CAAC,WAAW;IAC5B,MAAM,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,GAAG,GAAG;IACnC,MAAM,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACrD,OAAO,EAAE,CAAC,GAAY,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC;CACvC,CAAC;AAEF;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,KAAc;IAC9C,IAAI,KAAK,KAAK,IAAI;QAAE,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC;IAC7C,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO,UAAU,CAAC,SAAS,EAAE,CAAC;IACvD,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/D,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/D,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACnC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Formats a byte count into a readable string with appropriate units.\n * @param bytes The number of bytes to format\n * @returns A formatted string with units (B, KB, MB)\n */\nexport function formatBytes(bytes: number): string {\n  if (bytes < 1024) return `${bytes} B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n  return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n}\n\n/**\n * Formatter functions for different value types\n */\nconst formatters = {\n  null: () => 'null',\n  undefined: () => 'undefined',\n  string: (val: string) => `\"${val}\"`,\n  object: (val: object) => JSON.stringify(val, null, 2),\n  default: (val: unknown) => String(val),\n};\n\n/**\n * Formats a value into a readable string representation\n * @param value The value to format\n * @returns A formatted string representation of the value\n */\nexport function getFormattedValue(value: unknown): string {\n  if (value === null) return formatters.null();\n  if (value === undefined) return formatters.undefined();\n  if (typeof value === 'string') return formatters.string(value);\n  if (typeof value === 'object') return formatters.object(value);\n  return formatters.default(value);\n}\n"]}