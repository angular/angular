{"version":3,"file":"tree-visualizer.js","sourceRoot":"","sources":["tree-visualizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as d3 from 'd3';\nimport {GraphRenderer} from './graph-renderer';\nimport {Debouncer} from '../utils/debouncer';\n\nlet arrowDefId = 0;\nlet instanceIdx = 0;\n\nconst MAX_NODE_LABEL_LENGTH = 25;\nconst RESIZE_OBSERVER_DEBOUNCE = 250;\n\nexport interface TreeNode {\n  label: string;\n  subLabel?: string;\n  children: TreeNode[];\n}\n\nexport type TreeD3Node<T extends TreeNode> = d3.HierarchyPointNode<T>;\n\nexport type SvgD3Node<T extends TreeNode> = d3.Selection<\n  d3.BaseType,\n  TreeD3Node<T>,\n  HTMLElement,\n  TreeD3Node<T>\n>;\n\nexport type SvgD3Link<T extends TreeNode> = d3.Selection<\n  SVGPathElement,\n  d3.HierarchyPointNode<T>,\n  HTMLElement,\n  TreeD3Node<T>\n>;\n\nexport interface TreeVisualizerConfig<T extends TreeNode> {\n  /** WARNING: For vertically-oriented trees, use separation greater than `1` */\n  orientation: 'horizontal' | 'vertical';\n  nodeSize: [width: number, height: number];\n  nodeSeparation: (nodeA: TreeD3Node<T>, nodeB: TreeD3Node<T>) => number;\n  nodeLabelSize: [width: number, height: number];\n  arrowDirection: 'parent-to-child' | 'child-to-parent';\n  /** Perform custom changes on the SVG node (e.g. set classes, colors, attributes, etc.) */\n  d3NodeModifier: (node: SvgD3Node<T>) => void;\n  /** Perform custom changes on the SVG link (e.g. set classes, colors, attributes, etc.) */\n  d3LinkModifier: (link: SvgD3Link<T>) => void;\n}\n\n// For easier compatability with d3 v5\n// Inspired by https://www.mulberryhousesoftware.com/articles/supporting-two-major-versions-of-d3\nfunction wrapEvent<E, V>(fn: (e: E) => void): (e: E) => void;\nfunction wrapEvent<E, V>(fn: (e: E, node: V) => void): (e: E, node: V) => void;\nfunction wrapEvent<E, V>(fn: (e: E, node: V) => void): (e: E, node: V) => void {\n  return (e: E, node: V) => fn(e, node);\n}\n\nexport class TreeVisualizer<T extends TreeNode = TreeNode> extends GraphRenderer<T, TreeD3Node<T>> {\n  private zoomController: d3.ZoomBehavior<HTMLElement, unknown> | null = null;\n  private snappedNode: {node: TreeD3Node<T>; scale: number} | null = null;\n  private snappedNodeListenersDisposeFn?: () => void;\n  private readonly config: TreeVisualizerConfig<T>;\n  private readonly defaultConfig: TreeVisualizerConfig<T> = {\n    orientation: 'horizontal',\n    nodeSize: [200, 500],\n    nodeSeparation: () => 2,\n    nodeLabelSize: [250, 60],\n    arrowDirection: 'parent-to-child',\n    d3NodeModifier: () => {},\n    d3LinkModifier: () => {},\n  };\n\n  constructor(\n    private readonly containerElement: HTMLElement,\n    private readonly graphElement: HTMLElement,\n    config: Partial<TreeVisualizerConfig<T>> = {},\n  ) {\n    super();\n    instanceIdx++;\n\n    this.config = {\n      ...this.defaultConfig,\n      ...config,\n    };\n\n    this.manageSnappedNode();\n  }\n\n  override root: TreeD3Node<T> | null = null;\n\n  override zoomScale(scale: number) {\n    if (this.zoomController) {\n      this.zoomController.scaleTo(d3.select<HTMLElement, unknown>(this.containerElement), scale);\n    }\n  }\n\n  override snapToRoot(scale = 1): void {\n    if (this.root) {\n      this.snapToD3Node(this.root, scale);\n    }\n  }\n\n  override snapToNode(node: T, scale = 1): void {\n    const d3Node = this.findD3NodeByDataNode(node);\n    if (d3Node) {\n      this.snapToD3Node(d3Node, scale);\n    }\n  }\n\n  override getInternalNodeById(id: string): TreeD3Node<T> | null {\n    const selection = d3\n      .select<HTMLElement, TreeD3Node<T>>(this.containerElement)\n      .select(`.node[data-id=\"${id}\"]`);\n    if (selection.empty()) {\n      return null;\n    }\n    return selection.datum();\n  }\n\n  override cleanup(): void {\n    super.cleanup();\n    d3.select(this.graphElement).selectAll('*').remove();\n    this.snappedNode = null;\n  }\n\n  override dispose(): void {\n    super.dispose();\n    this.snappedNodeListenersDisposeFn?.();\n  }\n\n  override render(root: T): void {\n    // cleanup old graph\n    this.cleanup();\n\n    const data = d3.hierarchy(root, (node: T) => node.children as Array<T>);\n    const tree = d3.tree<T>();\n    const svg = d3.select(this.containerElement);\n    const g = d3.select<HTMLElement, TreeD3Node<T>>(this.graphElement);\n\n    this.zoomController = d3.zoom<HTMLElement, unknown>().scaleExtent([0.1, 2]);\n    this.zoomController.on(\n      'start zoom end',\n      wrapEvent((e: {transform: number}) => {\n        g.attr('transform', e.transform);\n      }),\n    );\n    svg.call(this.zoomController);\n\n    // Compute the new tree layout.\n    tree.nodeSize(this.config.nodeSize);\n    tree.separation((a: TreeD3Node<T>, b: TreeD3Node<T>) => {\n      return this.config.nodeSeparation(a, b);\n    });\n\n    const nodes = tree(data);\n    this.root = nodes;\n\n    arrowDefId++;\n    svg\n      .append('svg:defs')\n      .selectAll('marker')\n      .data([`end${arrowDefId}`]) // Different link/path types can be defined here\n      .enter()\n      .append('svg:marker') // This section adds in the arrows\n      .attr('id', String)\n      .attr('viewBox', '0 -5 10 10')\n      .attr('refX', 10)\n      .attr('refY', 0)\n      .attr('class', 'arrow')\n      .attr('markerWidth', 6)\n      .attr('markerHeight', 6)\n      .attr('orient', 'auto')\n      .append('svg:path')\n      .attr('d', 'M0,-5L10,0L0,5');\n\n    svg\n      .append('svg:defs')\n      .selectAll('marker')\n      .data([`start${arrowDefId}`]) // Different link/path types can be defined here\n      .enter()\n      .append('svg:marker') // This section adds in the arrows\n      .attr('id', String)\n      .attr('viewBox', '0 -5 10 10')\n      .attr('refX', 0)\n      .attr('refY', 0)\n      .attr('class', 'arrow')\n      .attr('markerWidth', 6)\n      .attr('markerHeight', 6)\n      .attr('orient', 'auto')\n      .append('svg:path')\n      .attr('d', 'M10,-5L0,0L10,5');\n\n    const [labelWidth, labelHeight] = this.config.nodeLabelSize;\n    const halfLabelWidth = labelWidth / 2;\n    const halfLabelHeight = labelHeight / 2;\n\n    const d3Link = g\n      .selectAll('.link')\n      .data(nodes.descendants().slice(1))\n      .enter()\n      .append('path')\n      .attr('aria-labelledby', (_, idx) => `tree-link-${instanceIdx}-${idx}`)\n      .attr('class', 'link')\n      .attr(\n        this.config.arrowDirection === 'parent-to-child' ? 'marker-start' : 'marker-end',\n        this.config.arrowDirection === 'parent-to-child'\n          ? `url(#start${arrowDefId})`\n          : `url(#end${arrowDefId})`,\n      )\n      .attr('d', (node: TreeD3Node<T>) => {\n        const {x, y} = this.getNodeCoor(node);\n        const {x: parentX, y: parentY} = this.getNodeCoor(node.parent!);\n\n        if (this.config.orientation === 'horizontal') {\n          return `\n            M${x - halfLabelWidth},${y}\n            C${(x + parentX) / 2},\n              ${y} ${(x + parentX) / 2},\n              ${parentY} ${parentX + halfLabelWidth},\n              ${parentY}`;\n        }\n\n        return `\n          M${x},${y - halfLabelHeight}\n          C${x},\n            ${(y + parentY) / 2} ${parentX},\n            ${(y + parentY) / 2} ${parentX},\n            ${parentY + halfLabelHeight}`;\n      });\n\n    this.config.d3LinkModifier(d3Link);\n\n    // Set accessibility title\n    d3Link\n      .append('title')\n      .attr('id', (_, idx) => `tree-link-${instanceIdx}-${idx}`)\n      .text((node: TreeD3Node<T>) => {\n        const parentLabel = node.parent!.data.label;\n        const nodeLabel = node.data.label;\n        if (parentLabel && nodeLabel) {\n          return `${parentLabel}-${nodeLabel}`;\n        }\n        const definedLabel = nodeLabel || parentLabel || 'Disconnected';\n\n        return definedLabel + ' link';\n      });\n\n    // Declare the nodes\n    const d3NodeG = g\n      .selectAll('g.node-group')\n      .data(nodes.descendants())\n      .enter()\n      .append('g')\n      .attr('class', 'node-group')\n      .on(\n        'click',\n        wrapEvent((pointerEvent: PointerEvent, node: TreeD3Node<T>) => {\n          this.nodeClickListeners.forEach((listener) => listener(pointerEvent, node));\n        }),\n      )\n      .on(\n        'mouseover',\n        wrapEvent((pointerEvent: PointerEvent, node: TreeD3Node<T>) => {\n          this.nodeMouseoverListeners.forEach((listener) => listener(pointerEvent, node));\n        }),\n      )\n      .on(\n        'mouseout',\n        wrapEvent((pointerEvent: PointerEvent, node: TreeD3Node<T>) => {\n          this.nodeMouseoutListeners.forEach((listener) => listener(pointerEvent, node));\n        }),\n      )\n      .attr('transform', (node: TreeD3Node<T>) => {\n        const {x, y} = this.getNodeCoor(node);\n        return `translate(${x},${y})`;\n      })\n      .attr('aria-labelledby', (_, idx) => `tree-node-${instanceIdx}-${idx}`);\n\n    // Set accessibility title\n    d3NodeG\n      .append('title')\n      .attr('id', (_, idx) => `tree-node-${instanceIdx}-${idx}`)\n      .text((node: TreeD3Node<T>) => `${node.data.label || 'Empty'} node`);\n\n    const d3Node = d3NodeG\n      .append('foreignObject')\n      .attr('class', 'node-wrapper')\n      .attr('width', labelWidth)\n      .attr('height', labelHeight)\n      .attr('x', -halfLabelWidth)\n      .attr('y', -halfLabelHeight)\n      .append('xhtml:div')\n      .attr('class', 'node')\n      .style('position', 'relative')\n      .text((node: TreeD3Node<T>) => {\n        const label = node.data.label;\n        return label.length > MAX_NODE_LABEL_LENGTH\n          ? label.slice(0, MAX_NODE_LABEL_LENGTH - '...'.length) + '...'\n          : label;\n      });\n\n    d3Node.each(function (node: TreeD3Node<T>) {\n      const subLabel = node.data.subLabel;\n      if (subLabel) {\n        d3.select(this).append('div').attr('class', 'sub-label').text(subLabel);\n      }\n    });\n\n    this.config.d3NodeModifier(d3Node);\n\n    svg.attr('height', '100%').attr('width', '100%');\n  }\n\n  /** Returns the node coordinates based on orientation. */\n  private getNodeCoor(node: TreeD3Node<T>): {x: number; y: number} {\n    const {x, y} = node;\n\n    if (this.config.orientation === 'horizontal') {\n      return {\n        x: y,\n        y: x,\n      };\n    }\n    return {x, y};\n  }\n\n  private manageSnappedNode() {\n    this.keepSnappedNodeOnFocus();\n    this.cleanSnappedNodeOnInteraction();\n  }\n\n  private keepSnappedNodeOnFocus() {\n    let initCall = true;\n    const debouncer = new Debouncer();\n    const resizeObserver = new ResizeObserver(\n      debouncer.debounce(([entry]) => {\n        if (!entry || !entry.contentRect.width || !entry.contentRect.height || !this.snappedNode) {\n          return;\n        }\n        // Avoid executing the code on observer init.\n        // The node is already being snapped.\n        if (initCall) {\n          initCall = false;\n          return;\n        }\n\n        const {node, scale} = this.snappedNode;\n        this.snapToD3Node(node, scale);\n      }, RESIZE_OBSERVER_DEBOUNCE),\n    );\n\n    resizeObserver.observe(this.containerElement);\n\n    this.snappedNodeListenersDisposeFn = () => {\n      resizeObserver.disconnect();\n      debouncer.cancel();\n    };\n  }\n\n  private cleanSnappedNodeOnInteraction() {\n    const svg = d3.select(this.containerElement);\n    svg.on('mousedown wheel', () => {\n      this.snappedNode = null;\n    });\n  }\n\n  private snapToD3Node(node: TreeD3Node<T>, scale = 1): void {\n    const svg = d3.select(this.containerElement);\n    const contHalfWidth = this.containerElement.clientWidth / 2;\n    const contHalfHeight = this.containerElement.clientHeight / 2;\n    const {x, y} = this.getNodeCoor(node);\n\n    const t = d3.zoomIdentity\n      .translate(contHalfWidth, contHalfHeight)\n      .scale(scale)\n      .translate(-x, -y);\n    svg.transition().duration(500).call(this.zoomController!.transform, t);\n\n    this.snappedNode = {node, scale};\n  }\n\n  private findD3NodeByDataNode(node: T): TreeD3Node<T> | null {\n    if (!this.root) {\n      return null;\n    }\n\n    let curr: TreeD3Node<T> | undefined;\n    const stack: TreeD3Node<T>[] = [this.root];\n\n    while (stack.length) {\n      curr = stack.pop();\n\n      if (curr?.data === node) {\n        return curr;\n      } else if (curr?.children) {\n        for (const child of curr.children) {\n          stack.push(child);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n"]}