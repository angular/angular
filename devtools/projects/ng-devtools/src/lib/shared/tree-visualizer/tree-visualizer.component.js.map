{"version":3,"file":"tree-visualizer.component.js","sourceRoot":"","sources":["tree-visualizer.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterNextRender,\n  ChangeDetectionStrategy,\n  Component,\n  DestroyRef,\n  effect,\n  ElementRef,\n  inject,\n  input,\n  output,\n  signal,\n  viewChild,\n} from '@angular/core';\nimport {TreeD3Node, TreeNode, TreeVisualizer, TreeVisualizerConfig} from './tree-visualizer';\n\nlet instanceIdx = 0;\n\n@Component({\n  selector: 'ng-tree-visualizer',\n  template: `\n    <svg\n      #container\n      [class.panning]=\"panning()\"\n      (pointerdown)=\"panning.set(true)\"\n      (pointerup)=\"panning.set(false)\"\n      [attr.aria-labelledby]=\"a11yTitleId\"\n    >\n      <title [id]=\"a11yTitleId\">{{ this.a11yTitle() }}</title>\n      <g #group></g>\n    </svg>\n  `,\n  styleUrl: 'tree-visualizer.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeVisualizerComponent<T extends TreeNode = TreeNode> {\n  protected readonly container = viewChild.required<ElementRef>('container');\n  protected readonly group = viewChild.required<ElementRef>('group');\n\n  readonly root = input.required<T>();\n  protected readonly config = input<Partial<TreeVisualizerConfig<T>>>();\n  protected readonly a11yTitle = input.required<string>();\n  protected readonly a11yTitleId = `tree-vis-host-${++instanceIdx}`;\n\n  protected readonly ready = output<void>();\n  protected readonly render = output<{initial: boolean}>();\n  protected readonly nodeClick = output<TreeD3Node<T>>();\n  protected readonly nodeMouseout = output<TreeD3Node<T>>();\n  protected readonly nodeMouseover = output<TreeD3Node<T>>();\n\n  panning = signal<boolean>(false);\n\n  private initialRender: boolean = true;\n  private visualizer?: TreeVisualizer<T>;\n\n  constructor() {\n    afterNextRender(() => {\n      this.visualizer?.cleanup();\n      this.visualizer = new TreeVisualizer<T>(\n        this.container().nativeElement,\n        this.group().nativeElement,\n        this.config(),\n      );\n      this.ready.emit();\n    });\n\n    effect(() => {\n      this.renderGraph(this.root());\n    });\n\n    inject(DestroyRef).onDestroy(() => {\n      this.visualizer?.dispose();\n    });\n  }\n\n  get svg(): HTMLElement {\n    return this.container().nativeElement;\n  }\n\n  snapToRoot(scale?: number) {\n    this.visualizer?.snapToRoot(scale);\n  }\n\n  snapToNode(node: T, scale?: number) {\n    this.visualizer?.snapToNode(node, scale);\n  }\n\n  getNodeById(id: string) {\n    return this.visualizer?.getInternalNodeById(id);\n  }\n\n  private renderGraph(root: T): void {\n    if (!this.visualizer) {\n      return;\n    }\n\n    this.visualizer.render(root);\n    this.visualizer.onNodeClick((_, node) => this.nodeClick.emit(node));\n    this.visualizer.onNodeMouseout((_, node) => this.nodeMouseout.emit(node));\n    this.visualizer.onNodeMouseover((_, node) => this.nodeMouseover.emit(node));\n\n    this.render.emit({initial: this.initialRender});\n    if (this.initialRender) {\n      this.initialRender = false;\n    }\n  }\n}\n"]}