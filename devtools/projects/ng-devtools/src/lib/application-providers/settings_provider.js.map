{"version":3,"file":"settings_provider.js","sourceRoot":"","sources":["settings_provider.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,qBAAqB,EAAE,MAAM,EAAiC,MAAM,eAAe,CAAC;AAC5F,OAAO,EAAC,kBAAkB,EAAE,aAAa,EAAC,MAAM,wCAAwC,CAAC;AACzF,OAAO,EAAC,qBAAqB,EAAC,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAAC,QAAQ,EAAC,MAAM,kCAAkC,CAAC;AAE1D,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAE/B,gEAAgE;AAChE,4CAA4C;AAC5C,MAAM,mBAAmB,GAAG,CAAC,CAAC;AAE9B,MAAM,UAAU,eAAe;IAC7B,IAAI,aAAuC,CAAC;IAE5C,OAAO;QACL,qBAAqB,CAAC,KAAK,IAAI,EAAE;YAC/B,MAAM,aAAa,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;YACpD,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,eAAe,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC5E,MAAM,IAAI,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAA6B,CAAC;YAC/E,aAAa,GAAG,eAAe,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACvD,CAAC,CAAC;QACF;YACE,OAAO,EAAE,aAAa;YACtB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,aAAa,CAAC,aAAa,CAAC;SACnD;QACD,QAAQ;KACT,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,SAAS,eAAe,CACtB,IAA8B,EAC9B,aAAoC;IAEpC,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;IAEvC,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,mBAAmB,EAAE,CAAC;QACvD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmCG;IAEH,yCAAyC;IAEzC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,mBAAmB,CAAC;IACjD,aAAa,CAAC,eAAe,CAAC,EAAC,CAAC,kBAAkB,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;IAEhE,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {provideAppInitializer, inject, Provider, EnvironmentProviders} from '@angular/core';\nimport {SETTINGS_STORE_KEY, SettingsStore} from '../application-services/settings_store';\nimport {ApplicationOperations} from '../application-operations';\nimport {Settings} from '../application-services/settings';\n\nconst DATA_VERSION_KEY = '__v';\n\n// Note: Any changes to the settings items should be accompanied\n// by a migration along with a version bump.\nconst LATEST_DATA_VERSION = 1;\n\nexport function provideSettings(): (Provider | EnvironmentProviders)[] {\n  let savedSettings: {[key: string]: unknown};\n\n  return [\n    provideAppInitializer(async () => {\n      const appOperations = inject(ApplicationOperations);\n      const keyedItem = await appOperations.getStorageItems([SETTINGS_STORE_KEY]);\n      const data = (keyedItem[SETTINGS_STORE_KEY] ?? {}) as {[key: string]: unknown};\n      savedSettings = applyMigrations(data, appOperations);\n    }),\n    {\n      provide: SettingsStore,\n      useFactory: () => new SettingsStore(savedSettings),\n    },\n    Settings,\n  ];\n}\n\n/**\n * Migrates the provided data to the latest data format, if needed.\n * Returns a new object with the migrated data.\n *\n * @param data Non-migrated data\n * @param appOperations\n * @returns New migrated data object\n */\nfunction applyMigrations(\n  data: {[key: string]: unknown},\n  appOperations: ApplicationOperations,\n): {[key: string]: unknown} {\n  const dataCopy = structuredClone(data);\n\n  if (dataCopy[DATA_VERSION_KEY] === LATEST_DATA_VERSION) {\n    return dataCopy;\n  }\n\n  /**\n   * Any changes to the data format must be handled in this part of the code\n   * by comparing the data versions and applying the respective changes to\n   * that data. All migrations should be kept and applied in chronological order\n   * starting from oldest to latest/newest. The exact approach how this is performed\n   * is up to the developer.\n   *\n   * Example:\n   *\n   * Data v1 (initial format; provided data): { 'theme': 'd' };\n   * Data v2 (older format): { 'theme-option': 'dark' };\n   * Data v3 (latest format): { 'theme-setting': 'dark-theme' };\n   *\n   * // Migrate data from v1 to v2\n   * if (dataVer === 1) {\n   *   const themeMap = {\n   *     'd': 'dark',\n   *     'l': 'light',\n   *   };\n   *   dataCopy['theme-option'] = themeMap[dataCopy['theme']];\n   *   delete dataCopy['theme'];\n   *   dataCopy[DATA_VERSION_KEY] = 2;\n   * }\n   *\n   * // Migrate data from v2 to v3 (latest)\n   * if (dataVer === 2) {\n   *   const themeMap = {\n   *     'dark': 'dark-theme',\n   *     'light': 'light-theme',\n   *   };\n   *   dataCopy['theme-setting'] = themeMap[dataCopy['theme-option']];\n   *   delete dataCopy['theme-option']\n   *   dataCopy[DATA_VERSION_KEY] = 3;\n   * }\n   *\n   */\n\n  // APPLY ANY MIGRATIONS TO THE DATA HERE.\n\n  dataCopy[DATA_VERSION_KEY] = LATEST_DATA_VERSION;\n  appOperations.setStorageItems({[SETTINGS_STORE_KEY]: dataCopy});\n\n  return dataCopy;\n}\n"]}