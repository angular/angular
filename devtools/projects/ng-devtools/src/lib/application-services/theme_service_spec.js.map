{"version":3,"file":"theme_service_spec.js","sourceRoot":"","sources":["theme_service_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TestBed} from '@angular/core/testing';\nimport {DOCUMENT} from '@angular/common';\nimport {ThemeService} from './theme_service';\nimport {WINDOW} from '../application-providers/window_provider';\nimport {SETTINGS_MOCK} from './test-utils/settings_mock';\n\nfunction configureTestingModuleWithWindowMock(mock: Partial<Window>) {\n  TestBed.configureTestingModule({\n    providers: [\n      {\n        provide: WINDOW,\n        useValue: mock,\n      },\n      SETTINGS_MOCK,\n      ThemeService,\n    ],\n  });\n}\n\nfunction mockSystemTheme(initialTheme: 'light' | 'dark' = 'light') {\n  // Set the initial theme.\n  let currMediaString = `(prefers-color-scheme: ${initialTheme})`;\n  let matchMediaListener: (() => void) | null = null;\n\n  return {\n    /** Alter the system theme */\n    switchTheme: (theme: 'light' | 'dark') => {\n      currMediaString = `(prefers-color-scheme: ${theme})`;\n      if (matchMediaListener) {\n        matchMediaListener();\n      }\n    },\n    /** matchMedia mock  */\n    matchMedia: (mediaString: string): MediaQueryList =>\n      ({\n        matches: mediaString === currMediaString,\n        addEventListener: (e: string, cb: () => void) => {\n          matchMediaListener = cb;\n        },\n        removeEventListener: (e: string, cb: () => void) => {},\n      }) as MediaQueryList,\n  };\n}\n\ndescribe('ThemeService', () => {\n  it(`should enable light mode, if it's the preferred/system one`, () => {\n    configureTestingModuleWithWindowMock({\n      matchMedia: mockSystemTheme('light').matchMedia,\n    });\n\n    const service = TestBed.inject(ThemeService);\n    const doc = TestBed.inject(DOCUMENT);\n\n    expect(service.currentTheme()).toEqual('light');\n\n    TestBed.tick();\n\n    expect(doc.documentElement.classList.contains('light-theme')).toBeTrue();\n  });\n\n  it(`should enable dark mode, if it's the preferred/system one`, () => {\n    configureTestingModuleWithWindowMock({\n      matchMedia: mockSystemTheme('dark').matchMedia,\n    });\n\n    const service = TestBed.inject(ThemeService);\n    const doc = TestBed.inject(DOCUMENT);\n\n    expect(service.currentTheme()).toEqual('dark');\n\n    TestBed.tick();\n\n    expect(doc.documentElement.classList.contains('dark-theme')).toBeTrue();\n  });\n\n  it('should toggle dark mode', () => {\n    configureTestingModuleWithWindowMock({\n      matchMedia: mockSystemTheme('light').matchMedia,\n    });\n\n    const service = TestBed.inject(ThemeService);\n    // Toggle dark mode.\n    service.toggleDarkMode(true);\n\n    const doc = TestBed.inject(DOCUMENT);\n\n    expect(service.currentTheme()).toEqual('dark');\n\n    TestBed.tick();\n\n    expect(doc.documentElement.classList.contains('dark-theme')).toBeTrue();\n  });\n\n  it('should update the theme automatically, if the system one changes', () => {\n    const {switchTheme, matchMedia} = mockSystemTheme('light');\n    configureTestingModuleWithWindowMock({matchMedia});\n\n    const service = TestBed.inject(ThemeService);\n    // Initialize the watcher.\n    service.initializeThemeWatcher();\n\n    const docClassList = TestBed.inject(DOCUMENT).documentElement.classList;\n\n    expect(service.currentTheme()).toEqual('light');\n\n    TestBed.tick();\n    expect(docClassList.contains('light-theme')).toBeTrue();\n\n    // This should simulate a system theme change, as if the user did it on OS level.\n    switchTheme('dark');\n\n    expect(service.currentTheme()).toEqual('dark');\n\n    TestBed.tick();\n    expect(docClassList.contains('dark-theme')).toBeTrue();\n  });\n});\n"]}