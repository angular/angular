{"version":3,"file":"settings_store.js","sourceRoot":"","sources":["settings_store.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAiB,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAC,qBAAqB,EAAC,MAAM,2BAA2B,CAAC;AAEhE,MAAM,CAAC,MAAM,kBAAkB,GAAG,gBAAgB,CAAC;AAEnD,kEAAkE;AAClE,MAAM,OAAO,aAAa;IAKxB,YAAoB,IAA8B;QAA9B,SAAI,GAAJ,IAAI,CAA0B;QAJjC,kBAAa,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAC9C,aAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC5B,YAAO,GAAG,IAAI,GAAG,EAAmC,CAAC;IAEjB,CAAC;IAEtD;;;;OAIG;IACH,MAAM,CAAI,MAAwD;QAChE,MAAM,QAAQ,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,QAA6B,CAAC;QACvC,CAAC;QAED,MAAM,YAAY,GAAG,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAO,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;QAC9F,MAAM,KAAK,GAAG,MAAM,CAAI,YAAY,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAElC,MAAM,CACJ,GAAG,EAAE;YACH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;YAC9B,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,EAAC,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;QACxE,CAAC,EACD,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAC,CAC1B,CAAC;QAEF,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {effect, inject, Injector, signal, WritableSignal} from '@angular/core';\nimport {ApplicationOperations} from '../application-operations';\n\nexport const SETTINGS_STORE_KEY = 'ng-dt-settings';\n\n/** Provides an API for storing and preserving settings values. */\nexport class SettingsStore {\n  private readonly appOperations = inject(ApplicationOperations);\n  private readonly injector = inject(Injector);\n  private readonly signals = new Map<string, WritableSignal<unknown>>();\n\n  constructor(private data: {[key: string]: unknown}) {}\n\n  /**\n   * Create a settings value a provided key, as a writable signal.\n   * If the item doesn't exist, a new one will be created.\n   * Updates to the signal value are automatically stored in the storage.\n   */\n  create<T>(config: {key: string; category: string; initialValue: T}): WritableSignal<T> {\n    const storeKey = `${config.key}@${config.category}`;\n    const existing = this.signals.get(storeKey);\n    if (existing) {\n      return existing as WritableSignal<T>;\n    }\n\n    const initialValue = storeKey in this.data ? (this.data[storeKey] as T) : config.initialValue;\n    const value = signal<T>(initialValue);\n    this.signals.set(storeKey, value);\n\n    effect(\n      () => {\n        this.data[storeKey] = value();\n        this.appOperations.setStorageItems({[SETTINGS_STORE_KEY]: this.data});\n      },\n      {injector: this.injector},\n    );\n\n    return value;\n  }\n}\n"]}