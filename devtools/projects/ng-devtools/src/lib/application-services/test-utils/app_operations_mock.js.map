{"version":3,"file":"app_operations_mock.js","sourceRoot":"","sources":["app_operations_mock.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OAAO,EAAC,qBAAqB,EAAC,MAAM,8BAA8B,CAAC;AACnE,OAAO,EAAC,kBAAkB,EAAC,MAAM,mBAAmB,CAAC;AAErD,MAAM,OAAO,iBAAkB,SAAQ,qBAAqB;IAA5D;;QACU,YAAO,GAA6B,EAAE,CAAC;IAiDjD,CAAC;IA/CC,sDAAsD;IACtD,iBAAiB;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAA6B,CAAC;IACtE,CAAC;IAEQ,KAAK,CAAC,eAAe,CAAC,KAA+B;QAC5D,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,IAAI,CAAC,OAAO;YACf,GAAG,KAAK;SACT,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,eAAe,CAAC,KAAe;QAC5C,MAAM,GAAG,GAA6B,EAAE,CAAC;QACzC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAEQ,kBAAkB,CAAC,KAAe;QACzC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEQ,UAAU,CAAC,QAAyB,EAAE,MAAa,EAAE,cAAuB;QACnF,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEQ,gBAAgB,CAAC,QAAyB,EAAE,MAAa;QAChE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEQ,OAAO,CACd,iBAAoC,EACpC,UAAoB,EACpB,MAAa;QAEb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEQ,aAAa,CAAC,QAA4B,EAAE,MAAa;QAChE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEQ,oBAAoB,CAAC,IAAY,EAAE,IAAY,EAAE,MAAa;QACrE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DirectivePosition, ElementPosition, SignalNodePosition} from '../../../../../protocol';\nimport {Frame} from '../../application-environment';\nimport {ApplicationOperations} from '../../application-operations';\nimport {SETTINGS_STORE_KEY} from '../settings_store';\n\nexport class AppOperationsMock extends ApplicationOperations {\n  private storage: {[key: string]: unknown} = {};\n\n  /** Helper method – gives access to stored settings */\n  getStoredSettings() {\n    return this.storage[SETTINGS_STORE_KEY] as {[key: string]: unknown};\n  }\n\n  override async setStorageItems(items: {[key: string]: unknown}): Promise<void> {\n    this.storage = {\n      ...this.storage,\n      ...items,\n    };\n  }\n\n  override async getStorageItems(items: string[]): Promise<{[key: string]: unknown}> {\n    const obj: {[key: string]: unknown} = {};\n    for (const item of items) {\n      obj[item] = this.storage[item];\n    }\n    return obj;\n  }\n\n  override removeStorageItems(items: string[]): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  override viewSource(position: ElementPosition, target: Frame, directiveIndex?: number): void {\n    throw new Error('Method not implemented.');\n  }\n\n  override selectDomElement(position: ElementPosition, target: Frame): void {\n    throw new Error('Method not implemented.');\n  }\n\n  override inspect(\n    directivePosition: DirectivePosition,\n    objectPath: string[],\n    target: Frame,\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  override inspectSignal(position: SignalNodePosition, target: Frame): void {\n    throw new Error('Method not implemented.');\n  }\n\n  override viewSourceFromRouter(name: string, type: string, target: Frame): void {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}