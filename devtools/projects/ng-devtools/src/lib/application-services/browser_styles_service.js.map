{"version":3,"file":"browser_styles_service.js","sourceRoot":"","sources":["browser_styles_service.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAC,MAAM,eAAe,CAAC;AACnE,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAC,QAAQ,EAAC,MAAM,uBAAuB,CAAC;AAK/C,+CAA+C;AAC/C,wCAAwC;AACxC,sBAAsB;AAEtB,8DAA8D;AAC9D,MAAM,kBAAkB,GAA+B;IACrD,QAAQ,EAAE,WAAW;IACrB,SAAS,EAAE,YAAY;IACvB,SAAS,EAAE,WAAW;CACvB,CAAC;AAEF,MAAM,cAAc,GAA+B;IACjD,QAAQ,EAAE,YAAY;IACtB,SAAS,EAAE,aAAa;IACxB,SAAS,EAAE,YAAY;CACxB,CAAC;AAKK,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAA1B;QACY,QAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvB,oBAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAC3C,aAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE5B,YAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAkClD,CAAC;IAhCC,yBAAyB;QACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,iDAAiD;IACzC,iBAAiB;QACvB,MAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IACtD,CAAC;IAED,mCAAmC;IAC3B,gBAAgB;QACtB,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAClD,KAAK,CAAC,GAAG,GAAG,YAAY,CAAC;QACzB,KAAK,CAAC,IAAI,GAAG,YAAY,QAAQ,EAAE,CAAC;QAEpC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,QAAQ,CAAC;QAClB,CAAC;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF,CAAA;AAxCY,oBAAoB;IAHhC,UAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,oBAAoB,CAwChC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, RendererFactory2} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform} from '@angular/cdk/platform';\n\n// Update for with newly supported browser\nexport type Browser = 'chrome' | 'firefox' | 'unknown';\n\n// If for some reason we are unable to properly\n// detect the browser, we are defaulting\n// to Chrome's styles.\n\n// Keep class names in sync with _theme.scss and _browser.scss\nconst BROWSER_CLASS_NAME: {[key in Browser]: string} = {\n  'chrome': 'chrome-ui',\n  'firefox': 'firefox-ui',\n  'unknown': 'chrome-ui',\n};\n\nconst BROWSER_STYLES: {[key in Browser]: string} = {\n  'chrome': 'chrome.css',\n  'firefox': 'firefox.css',\n  'unknown': 'chrome.css',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserStylesService {\n  private readonly doc = inject(DOCUMENT);\n  private readonly rendererFactory = inject(RendererFactory2);\n  private readonly renderer = this.rendererFactory.createRenderer(null, null);\n  private readonly platform = inject(Platform);\n\n  private readonly browser = this.detectBrowser();\n\n  initBrowserSpecificStyles() {\n    this.addBrowserUiClass();\n    this.loadBrowserStyle();\n  }\n\n  /** Add the browser class to the document body */\n  private addBrowserUiClass() {\n    const browserClass = BROWSER_CLASS_NAME[this.browser];\n    this.renderer.addClass(this.doc.body, browserClass);\n  }\n\n  /** Load browser-specific styles */\n  private loadBrowserStyle() {\n    const fileName = BROWSER_STYLES[this.browser];\n    const head = this.doc.getElementsByTagName('head')[0];\n\n    const style = this.renderer.createElement('link');\n    style.rel = 'stylesheet';\n    style.href = `./styles/${fileName}`;\n\n    head.appendChild(style);\n  }\n\n  private detectBrowser(): Browser {\n    if (this.platform.BLINK) {\n      return 'chrome';\n    }\n    if (this.platform.FIREFOX) {\n      return 'firefox';\n    }\n    return 'unknown';\n  }\n}\n"]}