{"version":3,"file":"settings_store_spec.js","sourceRoot":"","sources":["settings_store_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TestBed} from '@angular/core/testing';\nimport {SettingsStore} from './settings_store';\nimport {ApplicationOperations} from '../application-operations';\nimport {AppOperationsMock} from './test-utils/app_operations_mock';\nimport {ApplicationRef} from '@angular/core';\n\ndescribe('SettingsStore', () => {\n  let settingsStore: SettingsStore;\n  let getStoredSettings: () => {[key: string]: unknown};\n\n  beforeEach(() => {\n    const appOperationsMock = new AppOperationsMock();\n\n    TestBed.configureTestingModule({\n      providers: [\n        {provide: ApplicationOperations, useValue: appOperationsMock},\n        {\n          provide: SettingsStore,\n          useFactory: () => new SettingsStore({}),\n        },\n      ],\n    });\n\n    settingsStore = TestBed.inject(SettingsStore);\n    getStoredSettings = () => appOperationsMock.getStoredSettings();\n  });\n\n  it('should return a settings item with an initial value', async () => {\n    const item = settingsStore.create({\n      key: 'item',\n      category: 'test',\n      initialValue: 'foo',\n    });\n    expect(item()).toEqual('foo');\n  });\n\n  it('should set a settings item value', async () => {\n    const value = settingsStore.create({\n      key: 'item',\n      category: 'test',\n      initialValue: 'foo',\n    });\n    expect(value()).toEqual('foo');\n\n    value.set('bar');\n    expect(value()).toBe('bar');\n\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n\n    expect(getStoredSettings()['item@test']).toEqual('bar');\n  });\n\n  it('should set multiple values to a single settings item', async () => {\n    const value = settingsStore.create({\n      key: 'item',\n      category: 'test',\n      initialValue: 'foo',\n    });\n    expect(value()).toEqual('foo');\n\n    value.set('bar');\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n    expect(getStoredSettings()['item@test']).toEqual('bar');\n\n    value.set('baz');\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n    expect(getStoredSettings()['item@test']).toEqual('baz');\n  });\n\n  it('should set values to multiple settings items', async () => {\n    const first = settingsStore.create({\n      key: 'first',\n      category: 'test',\n      initialValue: 'not_set',\n    });\n    const second = settingsStore.create({\n      key: 'second',\n      category: 'test',\n      initialValue: 'not_set',\n    });\n    expect(first()).toEqual('not_set');\n    expect(second()).toEqual('not_set');\n\n    first.set('1st');\n    second.set('2nd');\n\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n\n    expect(getStoredSettings()['first@test']).toEqual('1st');\n    expect(getStoredSettings()['second@test']).toEqual('2nd');\n  });\n\n  it('should keep in sync multiple instances of the same settings item', async () => {\n    const foo = settingsStore.create({\n      key: 'item',\n      category: 'test',\n      initialValue: 'foo',\n    });\n    const bar = settingsStore.create({\n      key: 'item',\n      category: 'test',\n      initialValue: 'bar',\n    });\n    expect(foo()).toEqual('foo');\n    expect(bar()).toEqual('foo');\n\n    bar.set('baz');\n    expect(foo()).toEqual('baz');\n    expect(bar()).toEqual('baz');\n\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n\n    expect(getStoredSettings()['item@test']).toEqual('baz');\n  });\n\n  it('should keep the latest signal value', async () => {\n    const value = settingsStore.create({\n      key: 'item',\n      category: 'test',\n      initialValue: 'foo',\n    });\n    expect(value()).toEqual('foo');\n\n    value.set('bar');\n    value.set('baz');\n    expect(value()).toBe('baz');\n\n    await TestBed.inject(ApplicationRef).whenStable();\n    TestBed.tick();\n\n    expect(getStoredSettings()['item@test']).toEqual('baz');\n  });\n});\n"]}