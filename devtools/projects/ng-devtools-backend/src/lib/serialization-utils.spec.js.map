{"version":3,"file":"serialization-utils.spec.js","sourceRoot":"","sources":["serialization-utils.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAErD,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,GAAG,GAAG;YACV,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,IAAI;YACT,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,SAAS;YAChB,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAC;SACzB,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC;YAClC,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,IAAI;YACT,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,SAAS;YAChB,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAC;SACzB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,GAAG,GAAG;YACV,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK;SACjB,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC;YAClC,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,yBAAyB;SAC/B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,GAAG,GAAQ,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC;QAC7B,MAAM,GAAG,GAAG;YACV,GAAG,EAAE,GAAG;SACT,CAAC;QACF,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;QAEd,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC;YAClC,GAAG,EAAE,yBAAyB;SAC/B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {sanitizeObject} from './serialization-utils';\n\ndescribe('sanitizeObject', () => {\n  it('should not change valid object', () => {\n    const foo = {\n      bar: 'bar',\n      baz: 42,\n      qux: true,\n      quux: null,\n      corge: undefined,\n      grault: [1, 2, 3],\n      garply: {a: 'a', b: 'b'},\n    };\n\n    expect(sanitizeObject(foo)).toEqual({\n      bar: 'bar',\n      baz: 42,\n      qux: true,\n      quux: null,\n      corge: undefined,\n      grault: [1, 2, 3],\n      garply: {a: 'a', b: 'b'},\n    });\n  });\n\n  it('should remove function', () => {\n    const foo = {\n      bar: 'bar',\n      baz: () => 'baz',\n    };\n\n    expect(sanitizeObject(foo)).toEqual({\n      bar: 'bar',\n      baz: '[Non-serializable data]',\n    });\n  });\n\n  it('should strip cyclic references', () => {\n    const bar: any = {foo: null};\n    const foo = {\n      bar: bar,\n    };\n    bar.foo = foo;\n\n    expect(sanitizeObject(foo)).toEqual({\n      bar: '[Non-serializable data]',\n    });\n  });\n});\n"]}