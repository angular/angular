{"version":3,"file":"prop-type.spec.js","sourceRoot":"","sources":["prop-type.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAC,WAAW,EAAC,MAAM,aAAa,CAAC;AAExC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,MAAM,SAAS,GAAG;QAChB;YACE,UAAU,EAAE,GAAG;YACf,QAAQ,EAAE,QAAQ,CAAC,MAAM;YACzB,YAAY,EAAE,QAAQ;SACvB;QACD;YACE,UAAU,EAAE,aAAa;YACzB,QAAQ,EAAE,QAAQ,CAAC,MAAM;YACzB,YAAY,EAAE,QAAQ;SACvB;QACD;YACE,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,QAAQ,CAAC,IAAI;YACvB,YAAY,EAAE,MAAM;SACrB;QACD;YACE,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE,QAAQ,CAAC,SAAS;YAC5B,YAAY,EAAE,WAAW;SAC1B;QACD;YACE,UAAU,EAAE,MAAM,CAAC,QAAQ;YAC3B,QAAQ,EAAE,QAAQ,CAAC,MAAM;YACzB,YAAY,EAAE,QAAQ;SACvB;QACD;YACE,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,QAAQ,CAAC,OAAO;YAC1B,YAAY,EAAE,SAAS;SACxB;QACD,qFAAqF;QACrF;;;;aAIK;QACL;YACE,UAAU,EAAE,IAAI,CAAC,MAAM;YACvB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,YAAY,EAAE,UAAU;SACzB;QACD;YACE,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,QAAQ,CAAC,MAAM;YACzB,YAAY,EAAE,QAAQ;SACvB;QACD;YACE,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,QAAQ,EAAE,QAAQ,CAAC,IAAI;YACvB,YAAY,EAAE,MAAM;SACrB;QACD;YACE,UAAU,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC;YACxB,QAAQ,EAAE,QAAQ,CAAC,KAAK;YACxB,YAAY,EAAE,OAAO;SACtB;QACD;YACE,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACpC,QAAQ,EAAE,QAAQ,CAAC,GAAG;YACtB,YAAY,EAAE,KAAK;SACpB;QACD;YACE,UAAU,EAAE,IAAI,GAAG,CAAmB;gBACpC,CAAC,MAAM,EAAE,MAAM,CAAC;gBAChB,CAAC,KAAK,EAAE,EAAE,CAAC;gBACX,CAAC,EAAC,EAAE,EAAE,GAAG,EAAC,EAAE,SAAS,CAAC;aACvB,CAAC;YACF,QAAQ,EAAE,QAAQ,CAAC,GAAG;YACtB,YAAY,EAAE,KAAK;SACpB;KACF,CAAC;IACF,KAAK,MAAM,EAAC,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAC,IAAI,SAAS,EAAE,CAAC;QAC7D,EAAE,CAAC,oBAAoB,MAAM,CAAC,UAAU,CAAC,gBAAgB,YAAY,IAAI,QAAQ,GAAG,EAAE,GAAG,EAAE;YACzF,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PropType} from '../../../../protocol';\n\nimport {getPropType} from './prop-type';\n\ndescribe('getPropType', () => {\n  const testCases = [\n    {\n      expression: 123,\n      propType: PropType.Number,\n      propTypeName: 'Number',\n    },\n    {\n      expression: 'John Lennon',\n      propType: PropType.String,\n      propTypeName: 'String',\n    },\n    {\n      expression: null,\n      propType: PropType.Null,\n      propTypeName: 'Null',\n    },\n    {\n      expression: undefined,\n      propType: PropType.Undefined,\n      propTypeName: 'Undefined',\n    },\n    {\n      expression: Symbol.iterator,\n      propType: PropType.Symbol,\n      propTypeName: 'Symbol',\n    },\n    {\n      expression: true,\n      propType: PropType.Boolean,\n      propTypeName: 'Boolean',\n    },\n    // TODO: configure the test environment to be env that supports big integer notation.\n    /* {\n      expression: 123n,\n      propType: PropType.BigInt,\n      propTypeName: 'BigInt',\n    }, */\n    {\n      expression: Math.random,\n      propType: PropType.Function,\n      propTypeName: 'Function',\n    },\n    {\n      expression: Math,\n      propType: PropType.Object,\n      propTypeName: 'Object',\n    },\n    {\n      expression: new Date(),\n      propType: PropType.Date,\n      propTypeName: 'Date',\n    },\n    {\n      expression: ['John', 40],\n      propType: PropType.Array,\n      propTypeName: 'Array',\n    },\n    {\n      expression: new Set([1, 2, 3, 4, 5]),\n      propType: PropType.Set,\n      propTypeName: 'Set',\n    },\n    {\n      expression: new Map<unknown, unknown>([\n        ['name', 'John'],\n        ['age', 40],\n        [{id: 123}, undefined],\n      ]),\n      propType: PropType.Map,\n      propTypeName: 'Map',\n    },\n  ];\n  for (const {expression, propType, propTypeName} of testCases) {\n    it(`should determine ${String(expression)} as PropType:${propTypeName}(${propType})`, () => {\n      const actual = getPropType(expression);\n      expect(actual).toBe(actual);\n    });\n  }\n});\n"]}