{"version":3,"file":"state-serializer.spec.js","sourceRoot":"","sources":["state-serializer.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAC,aAAa,EAAE,OAAO,EAAC,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAC,iCAAiC,EAAC,MAAM,oBAAoB,CAAC;AAErE,MAAM,SAAS,GAAU,EAAE,CAAC;AAE5B,MAAM,SAAS,GAAG;IAChB;QACE,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,CAAC;wBACP,QAAQ,EAAE;4BACR;gCACE,IAAI,EAAE,CAAC;gCACP,QAAQ,EAAE;oCACR;wCACE,IAAI,EAAE,KAAK;wCACX,QAAQ,EAAE,EAAE;qCACb;iCACF;6BACF;yBACF;qBACF;oBACD;wBACE,IAAI,EAAE,CAAC;wBACP,QAAQ,EAAE;4BACR;gCACE,IAAI,EAAE,CAAC;gCACP,QAAQ,EAAE,EAAE;6BACb;yBACF;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,MAAM,IAAI,GAAG;IACX,GAAG,EAAE,CAAC;IACN,MAAM,EAAE;QACN,GAAG,EAAE;YACH;gBACE,GAAG,EAAE,CAAC;aACP;YACD,CAAC;YACD;gBACE;oBACE,GAAG,EAAE,CAAC;iBACP;aACF;YACD,IAAI,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACxB;KACF;CACF,CAAC;AAEF,MAAM,IAAI,GAAG;IACX,MAAM,EAAE;QACN,GAAG,EAAE;YACH;gBACE,GAAG,EAAE,CAAC;aACP;YACD,CAAC;YACD;gBACE;oBACE,GAAG,EAAE,CAAC;iBACP;aACF;SACF;KACF;CACF,CAAC;AAEF,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IACjD,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,MAAM,GAAG,iCAAiC,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAClE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,GAAG;gBACZ,KAAK,EAAE,CAAC;gBACR,aAAa,EAAE,IAAI;aACpB;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE;oBACL,GAAG,EAAE;wBACH,IAAI,EAAE,QAAQ,CAAC,KAAK;wBACpB,UAAU,EAAE,IAAI;wBAChB,QAAQ,EAAE,KAAK;wBACf,OAAO,EAAE,UAAU;wBACnB,aAAa,EAAE,IAAI;qBACpB;iBACF;gBACD,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,MAAM,GAAG,iCAAiC,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAClE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,GAAG;gBACZ,KAAK,EAAE,CAAC;gBACR,aAAa,EAAE,IAAI;aACpB;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE;oBACL,GAAG,EAAE;wBACH,IAAI,EAAE,QAAQ,CAAC,KAAK;wBACpB,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;wBAChB,OAAO,EAAE,UAAU;wBACnB,KAAK,EAAE;4BACL;gCACE,IAAI,EAAE,QAAQ,CAAC,KAAK;gCACpB,QAAQ,EAAE,KAAK;gCACf,UAAU,EAAE,IAAI;gCAChB,OAAO,EAAE,UAAU;gCACnB,KAAK,EAAE;oCACL;wCACE,IAAI,EAAE,QAAQ,CAAC,MAAM;wCACrB,QAAQ,EAAE,KAAK;wCACf,UAAU,EAAE,IAAI;wCAChB,OAAO,EAAE,OAAO;wCAChB,KAAK,EAAE;4CACL,GAAG,EAAE;gDACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gDACrB,UAAU,EAAE,KAAK;gDACjB,QAAQ,EAAE,IAAI;gDACd,OAAO,EAAE,GAAG;gDACZ,KAAK,EAAE,CAAC;gDACR,aAAa,EAAE,IAAI;6CACpB;yCACF;wCACD,aAAa,EAAE,IAAI;qCACpB;iCACF;gCACD,aAAa,EAAE,IAAI;6BACpB;4BACD;gCACE,IAAI,EAAE,QAAQ,CAAC,GAAG;gCAClB,QAAQ,EAAE,KAAK;gCACf,UAAU,EAAE,KAAK;gCACjB,OAAO,EAAE,QAAQ;gCACjB,aAAa,EAAE,IAAI;6BACpB;yBACF;wBACD,aAAa,EAAE,IAAI;qBACpB;iBACF;gBACD,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,MAAM,GAAG,iCAAiC,CAAC,IAAI,EAAE;YACrD;gBACE,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE,EAAE;aACb;YACD;gBACE,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,EAAE;aACb;SACF,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE;oBACL,GAAG,EAAE;wBACH,IAAI,EAAE,QAAQ,CAAC,KAAK;wBACpB,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;wBAChB,OAAO,EAAE,UAAU;wBACnB,aAAa,EAAE,IAAI;qBACpB;iBACF;gBACD,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,MAAM,GAAG,iCAAiC,CAC9C;YACE,IAAI,GAAG;gBACL,OAAO;oBACL,GAAG,EAAE;wBACH,GAAG,EAAE,CAAC;qBACP;iBACF,CAAC;YACJ,CAAC;SACF,EACD;YACE;gBACE,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,KAAK;wBACX,QAAQ,EAAE,EAAE;qBACb;iBACF;aACF;SACF,CACF,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE;oBACL,GAAG,EAAE;wBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;wBACrB,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;wBAChB,OAAO,EAAE,OAAO;wBAChB,aAAa,EAAE,IAAI;qBACpB;iBACF;gBACD,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,MAAM,GAAG,iCAAiC,CAC9C;YACE,IAAI,GAAG;gBACL,OAAO;oBACL,GAAG,EAAE;wBACH,GAAG,EAAE;4BACH,GAAG,EAAE,CAAC;yBACP;qBACF;iBACF,CAAC;YACJ,CAAC;SACF,EACD,EAAE,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE;oBACL,GAAG,EAAE;wBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;wBACrB,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;wBAChB,OAAO,EAAE,OAAO;wBAChB,aAAa,EAAE,IAAI;qBACpB;iBACF;gBACD,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,MAAM,GAAG,iCAAiC,CAC9C;YACE,IAAI,GAAG;gBACL,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,IAAI,GAAG;gBACL,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,IAAI,GAAG,CAAC,GAAW,IAAG,CAAC;SACxB,EACD,EAAE,CACH,CAAC;QAEF,wCAAwC;QACxC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,KAAK;gBACf,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE,EAAE;gBACT,aAAa,EAAE,IAAI;aACpB;YACD,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,KAAK;gBACf,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE,EAAE;gBACT,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,MAAM,GAAG,iCAAiC,CAC9C;YACE,KAAK,EAAE;gBACL,MAAM,EAAE;oBACN,KAAK,EAAE;wBACL,GAAG,EAAE,CAAC;wBACN,GAAG,EAAE,CAAC;qBACP;oBACD,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACT,OAAO,KAAK,CAAC;oBACf,CAAC;oBACD,IAAI,GAAG;wBACL,OAAO,EAAE,CAAC;oBACZ,CAAC;iBACF;aACF;SACF,EACD;YACE;gBACE,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE;4BACR;gCACE,IAAI,EAAE,OAAO;gCACb,QAAQ,EAAE;oCACR;wCACE,IAAI,EAAE,KAAK;wCACX,QAAQ,EAAE,EAAE;qCACb;oCACD;wCACE,IAAI,EAAE,KAAK;wCACX,QAAQ,EAAE,EAAE;qCACb;iCACF;6BACF;4BACD;gCACE,IAAI,EAAE,KAAK;gCACX,QAAQ,EAAE,EAAE;6BACb;yBACF;qBACF;iBACF;aACF;SACF,CACF,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,KAAK,EAAE;gBACL,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE;oBACL,MAAM,EAAE;wBACN,IAAI,EAAE,QAAQ,CAAC,MAAM;wBACrB,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;wBAChB,OAAO,EAAE,OAAO;wBAChB,KAAK,EAAE;4BACL,KAAK,EAAE;gCACL,IAAI,EAAE,QAAQ,CAAC,MAAM;gCACrB,QAAQ,EAAE,KAAK;gCACf,UAAU,EAAE,IAAI;gCAChB,OAAO,EAAE,OAAO;gCAChB,KAAK,EAAE;oCACL,GAAG,EAAE;wCACH,IAAI,EAAE,QAAQ,CAAC,MAAM;wCACrB,UAAU,EAAE,KAAK;wCACjB,QAAQ,EAAE,IAAI;wCACd,OAAO,EAAE,GAAG;wCACZ,KAAK,EAAE,CAAC;wCACR,aAAa,EAAE,IAAI;qCACpB;oCACD,GAAG,EAAE;wCACH,IAAI,EAAE,QAAQ,CAAC,MAAM;wCACrB,UAAU,EAAE,KAAK;wCACjB,QAAQ,EAAE,IAAI;wCACd,OAAO,EAAE,GAAG;wCACZ,KAAK,EAAE,CAAC;wCACR,aAAa,EAAE,IAAI;qCACpB;iCACF;gCACD,aAAa,EAAE,IAAI;6BACpB;4BACD,GAAG,EAAE;gCACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gCACrB,UAAU,EAAE,KAAK;gCACjB,QAAQ,EAAE,KAAK;gCACf,OAAO,EAAE,OAAO;gCAChB,KAAK,EAAE,EAAE;gCACT,aAAa,EAAE,IAAI;6BACpB;yBACF;wBACD,aAAa,EAAE,IAAI;qBACpB;iBACF;gBACD,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,MAAM,GAAG,iCAAiC,CAC9C;YACE,IAAI,GAAG,CAAC,CAAM,IAAG,CAAC;YAClB,IAAI,GAAG;gBACL,OAAO,EAAC,GAAG,EAAE,CAAC,EAAC,CAAC;YAClB,CAAC;SACF,EACD,EAAE,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,SAAS;gBACxB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,OAAO;gBAChB,aAAa,EAAE,IAAI;aACpB;YACD,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,OAAO;gBAChB,aAAa,EAAE,IAAI;gBACnB,KAAK,EAAE;oBACL,GAAG,EAAE;wBACH,IAAI,EAAE,QAAQ,CAAC,MAAM;wBACrB,UAAU,EAAE,KAAK;wBACjB,QAAQ,EAAE,IAAI;wBACd,OAAO,EAAE,GAAG;wBACZ,KAAK,EAAE,CAAC;wBACR,aAAa,EAAE,IAAI;qBACpB;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,MAAM,GAAG,iCAAiC,CAAC,EAAC,GAAG,EAAE,SAAS,EAAC,EAAE,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ,CAAC,SAAS;gBACxB,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,WAAW;gBACpB,aAAa,EAAE,IAAI;aACpB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oGAAoG,EAAE,GAAG,EAAE;QAC5G,MAAM,QAAQ,GAAG;YACf,SAAS,EAAE;gBACT,IAAI,GAAG;oBACL,OAAO,EAAE,CAAC;gBACZ,CAAC;gBACD,IAAI,GAAG,CAAC,MAAc,IAAG,CAAC;gBAC1B,IAAI,GAAG;oBACL,OAAO,EAAE,CAAC;gBACZ,CAAC;gBACD,IAAI,GAAG,CAAC,MAAc,IAAG,CAAC;aAC3B;SACF,CAAC;QAEF,MAAM,aAAa,GAAG,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;QAC3C,MAAM,CAAC,aAAc,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,aAAc,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/C,MAAM,aAAa,GAAG,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;QAC3C,MAAM,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAc,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,aAAc,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/C,MAAM,aAAa,GAAG,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAc,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,aAAc,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,QAAQ,GAAG;YACf,GAAG,EAAE,CAAC;YACN,SAAS,EAAE;gBACT,IAAI,GAAG;oBACL,OAAO,EAAE,CAAC;gBACZ,CAAC;gBACD,IAAI,GAAG,CAAC,MAAc,IAAG,CAAC;gBAC1B,IAAI,GAAG,CAAC,MAAc,IAAG,CAAC;aAC3B;SACF,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,wCAAwC;QACxC,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAErC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,QAAQ,GAAG;YACf,GAAG,EAAE,CAAC;YACN,SAAS,EAAE;gBACT,IAAI,SAAS,CAAC,MAAc,IAAG,CAAC;gBAChC,IAAI,SAAS;oBACX,OAAO,EAAE,CAAC;gBACZ,CAAC;aACF;SACF,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PropType} from '../../../../protocol';\n\nimport {getDescriptor, getKeys} from './object-utils';\nimport {deeplySerializeSelectedProperties} from './state-serializer';\n\nconst QUERY_1_1: any[] = [];\n\nconst QUERY_1_2 = [\n  {\n    name: 'nested',\n    children: [\n      {\n        name: 'arr',\n        children: [\n          {\n            name: 2,\n            children: [\n              {\n                name: 0,\n                children: [\n                  {\n                    name: 'two',\n                    children: [],\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 3,\n            children: [\n              {\n                name: 0,\n                children: [],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst dir1 = {\n  one: 1,\n  nested: {\n    arr: [\n      {\n        obj: 1,\n      },\n      2,\n      [\n        {\n          two: 1,\n        },\n      ],\n      new Set(['foo', 'bar']),\n    ],\n  },\n};\n\nconst dir2 = {\n  nested: {\n    arr: [\n      {\n        obj: 1,\n      },\n      2,\n      [\n        {\n          two: 1,\n        },\n      ],\n    ],\n  },\n};\n\ndescribe('deeplySerializeSelectedProperties', () => {\n  it('should work with empty queries', () => {\n    const result = deeplySerializeSelectedProperties(dir1, QUERY_1_1);\n    expect(result).toEqual({\n      one: {\n        type: PropType.Number,\n        expandable: false,\n        editable: true,\n        preview: '1',\n        value: 1,\n        containerType: null,\n      },\n      nested: {\n        type: PropType.Object,\n        editable: false,\n        expandable: true,\n        preview: '{...}',\n        value: {\n          arr: {\n            type: PropType.Array,\n            expandable: true,\n            editable: false,\n            preview: 'Array(4)',\n            containerType: null,\n          },\n        },\n        containerType: null,\n      },\n    });\n  });\n\n  it('should collect not specified but existing props below level', () => {\n    const result = deeplySerializeSelectedProperties(dir1, QUERY_1_2);\n    expect(result).toEqual({\n      one: {\n        type: PropType.Number,\n        expandable: false,\n        editable: true,\n        preview: '1',\n        value: 1,\n        containerType: null,\n      },\n      nested: {\n        type: PropType.Object,\n        editable: false,\n        expandable: true,\n        preview: '{...}',\n        value: {\n          arr: {\n            type: PropType.Array,\n            editable: false,\n            expandable: true,\n            preview: 'Array(4)',\n            value: [\n              {\n                type: PropType.Array,\n                editable: false,\n                expandable: true,\n                preview: 'Array(1)',\n                value: [\n                  {\n                    type: PropType.Object,\n                    editable: false,\n                    expandable: true,\n                    preview: '{...}',\n                    value: {\n                      two: {\n                        type: PropType.Number,\n                        expandable: false,\n                        editable: true,\n                        preview: '1',\n                        value: 1,\n                        containerType: null,\n                      },\n                    },\n                    containerType: null,\n                  },\n                ],\n                containerType: null,\n              },\n              {\n                type: PropType.Set,\n                editable: false,\n                expandable: false,\n                preview: 'Set(2)',\n                containerType: null,\n              },\n            ],\n            containerType: null,\n          },\n        },\n        containerType: null,\n      },\n    });\n  });\n\n  it('should handle deletions even of the query asks for such props', () => {\n    const result = deeplySerializeSelectedProperties(dir2, [\n      {\n        name: 'one',\n        children: [],\n      },\n      {\n        name: 'nested',\n        children: [],\n      },\n    ]);\n    expect(result).toEqual({\n      nested: {\n        type: PropType.Object,\n        editable: false,\n        expandable: true,\n        preview: '{...}',\n        value: {\n          arr: {\n            type: PropType.Array,\n            editable: false,\n            expandable: true,\n            preview: 'Array(3)',\n            containerType: null,\n          },\n        },\n        containerType: null,\n      },\n    });\n  });\n\n  it('should work with getters with specified query', () => {\n    const result = deeplySerializeSelectedProperties(\n      {\n        get foo(): any {\n          return {\n            baz: {\n              qux: 3,\n            },\n          };\n        },\n      },\n      [\n        {\n          name: 'foo',\n          children: [\n            {\n              name: 'baz',\n              children: [],\n            },\n          ],\n        },\n      ],\n    );\n    expect(result).toEqual({\n      foo: {\n        type: PropType.Object,\n        editable: false,\n        expandable: false,\n        preview: '(...)',\n        value: {\n          baz: {\n            type: PropType.Object,\n            editable: false,\n            expandable: true,\n            preview: '{...}',\n            containerType: null,\n          },\n        },\n        containerType: null,\n      },\n    });\n  });\n\n  it('should work with getters without specified query', () => {\n    const result = deeplySerializeSelectedProperties(\n      {\n        get foo(): any {\n          return {\n            baz: {\n              qux: {\n                cos: 3,\n              },\n            },\n          };\n        },\n      },\n      [],\n    );\n    expect(result).toEqual({\n      foo: {\n        type: PropType.Object,\n        editable: false,\n        expandable: false,\n        preview: '(...)',\n        value: {\n          baz: {\n            type: PropType.Object,\n            editable: false,\n            expandable: true,\n            preview: '{...}',\n            containerType: null,\n          },\n        },\n        containerType: null,\n      },\n    });\n  });\n\n  it('both getters and setters should be readonly', () => {\n    const result = deeplySerializeSelectedProperties(\n      {\n        get foo(): number {\n          return 42;\n        },\n        get bar(): number {\n          return 42;\n        },\n        set bar(val: number) {},\n      },\n      [],\n    );\n\n    // Neither getter and setter is editable\n    expect(result).toEqual({\n      foo: {\n        type: PropType.Number,\n        expandable: false,\n        editable: false,\n        preview: '(...)',\n        value: 42,\n        containerType: null,\n      },\n      bar: {\n        type: PropType.Number,\n        expandable: false,\n        editable: false,\n        preview: '(...)',\n        value: 42,\n        containerType: null,\n      },\n    });\n  });\n\n  it('should return the precise path requested', () => {\n    const result = deeplySerializeSelectedProperties(\n      {\n        state: {\n          nested: {\n            props: {\n              foo: 1,\n              bar: 2,\n            },\n            [Symbol(3)](): number {\n              return 1.618;\n            },\n            get foo(): number {\n              return 42;\n            },\n          },\n        },\n      },\n      [\n        {\n          name: 'state',\n          children: [\n            {\n              name: 'nested',\n              children: [\n                {\n                  name: 'props',\n                  children: [\n                    {\n                      name: 'foo',\n                      children: [],\n                    },\n                    {\n                      name: 'bar',\n                      children: [],\n                    },\n                  ],\n                },\n                {\n                  name: 'foo',\n                  children: [],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    );\n    expect(result).toEqual({\n      state: {\n        type: PropType.Object,\n        editable: false,\n        expandable: true,\n        preview: '{...}',\n        value: {\n          nested: {\n            type: PropType.Object,\n            editable: false,\n            expandable: true,\n            preview: '{...}',\n            value: {\n              props: {\n                type: PropType.Object,\n                editable: false,\n                expandable: true,\n                preview: '{...}',\n                value: {\n                  foo: {\n                    type: PropType.Number,\n                    expandable: false,\n                    editable: true,\n                    preview: '1',\n                    value: 1,\n                    containerType: null,\n                  },\n                  bar: {\n                    type: PropType.Number,\n                    expandable: false,\n                    editable: true,\n                    preview: '2',\n                    value: 2,\n                    containerType: null,\n                  },\n                },\n                containerType: null,\n              },\n              foo: {\n                type: PropType.Number,\n                expandable: false,\n                editable: false,\n                preview: '(...)',\n                value: 42,\n                containerType: null,\n              },\n            },\n            containerType: null,\n          },\n        },\n        containerType: null,\n      },\n    });\n  });\n\n  it('both setter and getter would get a (...) as preview', () => {\n    const result = deeplySerializeSelectedProperties(\n      {\n        set foo(_: any) {},\n        get bar(): Object {\n          return {foo: 1};\n        },\n      },\n      [],\n    );\n    expect(result).toEqual({\n      foo: {\n        type: PropType.Undefined,\n        editable: false,\n        expandable: false,\n        preview: '(...)',\n        containerType: null,\n      },\n      bar: {\n        type: PropType.Object,\n        editable: false,\n        expandable: false,\n        preview: '(...)',\n        containerType: null,\n        value: {\n          foo: {\n            type: PropType.Number,\n            expandable: false,\n            editable: true,\n            preview: '1',\n            value: 1,\n            containerType: null,\n          },\n        },\n      },\n    });\n  });\n\n  it('should preview the undefined values correctly', () => {\n    const result = deeplySerializeSelectedProperties({obj: undefined}, []);\n    expect(result).toEqual({\n      obj: {\n        type: PropType.Undefined,\n        editable: true,\n        expandable: false,\n        preview: 'undefined',\n        containerType: null,\n      },\n    });\n  });\n\n  it('getDescriptor should get the descriptors for both getters and setters correctly from the prototype', () => {\n    const instance = {\n      __proto__: {\n        get foo(): number {\n          return 42;\n        },\n        set bar(newNum: number) {},\n        get baz(): number {\n          return 42;\n        },\n        set baz(newNum: number) {},\n      },\n    };\n\n    const descriptorFoo = getDescriptor(instance, 'foo');\n    expect(descriptorFoo).not.toBeNull();\n    expect(descriptorFoo!.get).not.toBeNull();\n    expect(descriptorFoo!.set).toBeUndefined();\n    expect(descriptorFoo!.value).toBeUndefined();\n    expect(descriptorFoo!.enumerable).toBe(true);\n    expect(descriptorFoo!.configurable).toBe(true);\n\n    const descriptorBar = getDescriptor(instance, 'bar');\n    expect(descriptorBar).not.toBeNull();\n    expect(descriptorBar!.get).toBeUndefined();\n    expect(descriptorBar!.set).not.toBeNull();\n    expect(descriptorBar!.value).toBeUndefined();\n    expect(descriptorBar!.enumerable).toBe(true);\n    expect(descriptorBar!.configurable).toBe(true);\n\n    const descriptorBaz = getDescriptor(instance, 'baz');\n    expect(descriptorBaz).not.toBeNull();\n    expect(descriptorBaz!.get).not.toBeNull();\n    expect(descriptorBaz!.set).not.toBeNull();\n    expect(descriptorBaz!.value).toBeUndefined();\n    expect(descriptorBaz!.enumerable).toBe(true);\n    expect(descriptorBaz!.configurable).toBe(true);\n  });\n\n  it('getKeys should all keys including getters and setters', () => {\n    const instance = {\n      baz: 2,\n      __proto__: {\n        get foo(): number {\n          return 42;\n        },\n        set foo(newNum: number) {},\n        set bar(newNum: number) {},\n      },\n    };\n\n    expect(getKeys(instance)).toEqual(['baz', 'foo', 'bar']);\n  });\n\n  it('getKeys should not throw on empty object without prototype', () => {\n    // creates an object without a prototype\n    const instance = Object.create(null);\n\n    expect(getKeys(instance)).toEqual([]);\n  });\n\n  it('getKeys would ignore getters and setters for \"__proto__\"', () => {\n    const instance = {\n      baz: 2,\n      __proto__: {\n        set __proto__(newObj: Object) {},\n        get __proto__(): Object {\n          return {};\n        },\n      },\n    };\n\n    expect(getKeys(instance)).toEqual(['baz']);\n  });\n});\n"]}