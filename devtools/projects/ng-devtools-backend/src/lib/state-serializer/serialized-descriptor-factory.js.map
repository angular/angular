{"version":3,"file":"serialized-descriptor-factory.js","sourceRoot":"","sources":["serialized-descriptor-factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ContainerType, Descriptor, NestedProp, PropType} from '../../../../protocol';\n\nimport {isSignal, safelyReadSignalValue, unwrapSignal} from '../utils';\n\nimport {getDescriptor, getKeys} from './object-utils';\n\n// todo(aleksanderbodurri) pull this out of this file\nconst METADATA_PROPERTY_NAME = '__ngContext__';\n\ntype NestedType = PropType.Array | PropType.Object;\n\nexport interface CompositeType {\n  type: Extract<PropType, NestedType>;\n  prop: any;\n  containerType: ContainerType;\n}\n\nexport interface TerminalType {\n  type: Exclude<PropType, NestedType>;\n  prop: any;\n  containerType: ContainerType;\n}\n\nexport type PropertyData = TerminalType | CompositeType;\n\nexport type Formatter<Result> = {\n  [key in PropType]: (data: any) => Result;\n};\n\ninterface LevelOptions {\n  currentLevel: number;\n  level?: number;\n}\n\nconst serializable: Set<PropType> = new Set([\n  PropType.Boolean,\n  PropType.String,\n  PropType.Null,\n  PropType.Number,\n  PropType.Object,\n  PropType.Undefined,\n  PropType.Unknown,\n]);\n\nconst typeToDescriptorPreview: Formatter<string> = {\n  [PropType.Array]: (prop: Array<unknown>) => `Array(${prop.length})`,\n  [PropType.Set]: (prop: Set<unknown>) => `Set(${prop.size})`,\n  [PropType.Map]: (prop: Map<unknown, unknown>) => `Map(${prop.size})`,\n  [PropType.BigInt]: (prop: bigint) => truncate(prop.toString()),\n  [PropType.Boolean]: (prop: boolean) => truncate(prop.toString()),\n  [PropType.String]: (prop: string) => `\"${prop}\"`,\n  [PropType.Function]: (prop: Function) => `${prop.name}(...)`,\n  [PropType.HTMLNode]: (prop: Node) => prop.constructor.name,\n  [PropType.Null]: (_: null) => 'null',\n  [PropType.Number]: (prop: any) => parseInt(prop, 10).toString(),\n  [PropType.Object]: (prop: Object) => (getKeys(prop).length > 0 ? '{...}' : '{}'),\n  [PropType.Symbol]: (symbol: symbol) => `Symbol(${symbol.description})`,\n  [PropType.Undefined]: (_: undefined) => 'undefined',\n  [PropType.Date]: (prop: unknown) => {\n    if (prop instanceof Date) {\n      return `Date(${new Date(prop).toISOString()})`;\n    }\n    return `${prop}`;\n  },\n  [PropType.Unknown]: (_: any) => 'unknown',\n};\n\ntype Key = string | number;\ntype NestedSerializerFn = (\n  instance: any,\n  propName: string | number,\n  nodes: NestedProp[],\n  isReadonly: boolean,\n  currentLevel: number,\n  level?: number,\n) => Descriptor;\n\nconst ignoreList: Set<Key> = new Set([METADATA_PROPERTY_NAME, '__ngSimpleChanges__']);\n\nconst shallowPropTypeToTreeMetaData: Record<\n  Exclude<PropType, NestedType>,\n  {editable: boolean; expandable: boolean}\n> = {\n  [PropType.String]: {\n    editable: true,\n    expandable: false,\n  },\n  [PropType.BigInt]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.Boolean]: {\n    editable: true,\n    expandable: false,\n  },\n  [PropType.Number]: {\n    editable: true,\n    expandable: false,\n  },\n  [PropType.Date]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.Null]: {\n    editable: true,\n    expandable: false,\n  },\n  [PropType.Undefined]: {\n    editable: true,\n    expandable: false,\n  },\n  [PropType.Symbol]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.Function]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.HTMLNode]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.Unknown]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.Set]: {\n    editable: false,\n    expandable: false,\n  },\n  [PropType.Map]: {\n    editable: false,\n    expandable: false,\n  },\n};\n\nconst isEditable = (\n  descriptor: PropertyDescriptor | undefined,\n  propName: string | number,\n  propData: TerminalType,\n  isGetterOrSetter: boolean,\n) => {\n  if (propData.containerType === 'ReadonlySignal') {\n    return false;\n  }\n\n  if (typeof propName === 'symbol') {\n    return false;\n  }\n\n  if (isGetterOrSetter) {\n    return false;\n  }\n\n  if (descriptor?.writable === false) {\n    return false;\n  }\n\n  return shallowPropTypeToTreeMetaData[propData.type].editable;\n};\n\nconst isGetterOrSetter = (descriptor: any): boolean =>\n  (descriptor?.set || descriptor?.get) && !('value' in descriptor);\n\nconst getPreview = (propData: TerminalType | CompositeType, isGetterOrSetter: boolean) => {\n  if (propData.containerType === 'ReadonlySignal') {\n    const {error, value} = safelyReadSignalValue(propData.prop);\n    if (error) {\n      return 'ERROR: Could not read signal value. See console for details.';\n    }\n    return `Readonly Signal(${typeToDescriptorPreview[propData.type](value)})`;\n  } else if (propData.containerType === 'WritableSignal') {\n    const {error, value} = safelyReadSignalValue(propData.prop);\n    if (error) {\n      return 'ERROR: Could not read signal value. See console for details.';\n    }\n    return `Signal(${typeToDescriptorPreview[propData.type](value)})`;\n  }\n\n  return !isGetterOrSetter\n    ? typeToDescriptorPreview[propData.type](propData.prop)\n    : typeToDescriptorPreview[PropType.Function]({name: ''});\n};\n\nexport function createShallowSerializedDescriptor(\n  instance: any,\n  propName: string | number,\n  propData: TerminalType,\n  isReadonly: boolean,\n): Descriptor {\n  const {type, containerType} = propData;\n\n  const descriptor = getDescriptor(instance, propName as string);\n  const getterOrSetter: boolean = isGetterOrSetter(descriptor);\n\n  const shallowSerializedDescriptor: Descriptor = {\n    type,\n    expandable: shallowPropTypeToTreeMetaData[type].expandable,\n    editable: isEditable(descriptor, propName, propData, getterOrSetter) && !isReadonly,\n    preview: getPreview(propData, getterOrSetter),\n    containerType,\n  };\n\n  if (propData.prop !== undefined && serializable.has(type)) {\n    shallowSerializedDescriptor.value = unwrapSignal(propData.prop);\n  }\n\n  return shallowSerializedDescriptor;\n}\n\nexport function createLevelSerializedDescriptor(\n  instance: {},\n  propName: string | number,\n  propData: CompositeType,\n  levelOptions: LevelOptions,\n  continuation: (\n    instance: any,\n    propName: string | number,\n    isReadonly: boolean,\n    level?: number,\n    max?: number,\n  ) => Descriptor,\n): Descriptor {\n  const {type, prop, containerType} = propData;\n\n  const descriptor = getDescriptor(instance, propName as string);\n  const getterOrSetter: boolean = isGetterOrSetter(descriptor);\n\n  const levelSerializedDescriptor: Descriptor = {\n    type,\n    editable: false,\n    expandable: !getterOrSetter && getKeys(prop).length > 0,\n    preview: getPreview(propData, getterOrSetter),\n    containerType,\n  };\n\n  if (levelOptions.level !== undefined && levelOptions.currentLevel < levelOptions.level) {\n    const value = getLevelDescriptorValue(propData, levelOptions, continuation);\n    if (value !== undefined) {\n      levelSerializedDescriptor.value = value;\n    }\n  }\n\n  return levelSerializedDescriptor;\n}\n\nexport function createNestedSerializedDescriptor(\n  instance: {},\n  propName: string | number,\n  propData: CompositeType,\n  levelOptions: LevelOptions,\n  nodes: NestedProp[],\n  nestedSerializer: NestedSerializerFn,\n): Descriptor {\n  const {type, prop, containerType} = propData;\n\n  const descriptor = getDescriptor(instance, propName as string);\n  const getterOrSetter: boolean = isGetterOrSetter(descriptor);\n\n  const nestedSerializedDescriptor: Descriptor = {\n    type,\n    editable: false,\n    expandable: !getterOrSetter && getKeys(prop).length > 0,\n    preview: getPreview(propData, getterOrSetter),\n    containerType,\n  };\n\n  if (nodes?.length) {\n    const value = getNestedDescriptorValue(propData, levelOptions, nodes, nestedSerializer);\n    if (value !== undefined) {\n      nestedSerializedDescriptor.value = value;\n    }\n  }\n  return nestedSerializedDescriptor;\n}\n\nfunction getNestedDescriptorValue(\n  propData: CompositeType,\n  levelOptions: LevelOptions,\n  nodes: NestedProp[],\n  nestedSerializer: NestedSerializerFn,\n) {\n  const {type, prop} = propData;\n  const {currentLevel} = levelOptions;\n  const value = unwrapSignal(prop);\n\n  switch (type) {\n    case PropType.Array:\n      return nodes.map((nestedProp) =>\n        nestedSerializer(value, nestedProp.name, nestedProp.children, false, currentLevel + 1),\n      );\n    case PropType.Object:\n      return nodes.reduce(\n        (accumulator, nestedProp) => {\n          if (prop.hasOwnProperty(nestedProp.name) && !ignoreList.has(nestedProp.name)) {\n            accumulator[nestedProp.name] = nestedSerializer(\n              value,\n              nestedProp.name,\n              nestedProp.children,\n              false,\n              currentLevel + 1,\n            );\n          }\n          return accumulator;\n        },\n        {} as Record<string, Descriptor>,\n      );\n  }\n}\n\nfunction getLevelDescriptorValue(\n  propData: CompositeType,\n  levelOptions: LevelOptions,\n  continuation: (\n    instance: any,\n    propName: string | number,\n    isReadonly: boolean,\n    level?: number,\n    max?: number,\n  ) => Descriptor,\n) {\n  const {type, prop} = propData;\n  const {currentLevel, level} = levelOptions;\n  const value = unwrapSignal(prop);\n  const isReadonly = isSignal(prop);\n  switch (type) {\n    case PropType.Array:\n      return value.map((_: any, idx: number) =>\n        continuation(value, idx, isReadonly, currentLevel + 1, level),\n      );\n    case PropType.Object:\n      return getKeys(value).reduce(\n        (accumulator, propName) => {\n          if (!ignoreList.has(propName)) {\n            accumulator[propName] = continuation(\n              value,\n              propName,\n              isReadonly,\n              currentLevel + 1,\n              level,\n            );\n          }\n          return accumulator;\n        },\n        {} as Record<string, Descriptor>,\n      );\n  }\n}\n\nfunction truncate(str: string, max = 20): string {\n  return str.length > max ? str.substring(0, max) + '...' : str;\n}\n"]}