{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LifecycleProfile} from '../../../../protocol';\n\nimport {getDirectiveName} from '../highlighter';\n\nimport {DirectiveForestHooks} from './hooks';\n\nconst markName = (s: string, method: Method) => `🅰️ ${s}#${method}`;\n\nconst supportsPerformance =\n  globalThis.performance && typeof globalThis.performance.getEntriesByName === 'function';\n\ntype Method = keyof LifecycleProfile | 'changeDetection' | string;\n\nconst recordMark = (s: string, method: Method) => {\n  if (supportsPerformance) {\n    // tslint:disable-next-line:ban\n    performance.mark(`${markName(s, method)}_start`);\n  }\n};\n\nconst endMark = (nodeName: string, method: Method) => {\n  if (supportsPerformance) {\n    const name = markName(nodeName, method);\n    const start = `${name}_start`;\n    const end = `${name}_end`;\n    if (performance.getEntriesByName(start).length > 0) {\n      // tslint:disable-next-line:ban\n      performance.mark(end);\n\n      const measureOptions = {\n        start,\n        end,\n        detail: {\n          devtools: {\n            dataType: 'track-entry',\n            color: 'primary',\n            track: '🅰️ Angular DevTools',\n          },\n        },\n      };\n      performance.measure(name, measureOptions);\n    }\n    performance.clearMarks(start);\n    performance.clearMarks(end);\n    performance.clearMeasures(name);\n  }\n};\n\nlet timingAPIFlag = false;\n\nexport const enableTimingAPI = () => (timingAPIFlag = true);\nexport const disableTimingAPI = () => (timingAPIFlag = false);\n\nconst timingAPIEnabled = () => timingAPIFlag;\n\nlet directiveForestHooks: DirectiveForestHooks;\n\nexport const initializeOrGetDirectiveForestHooks = (\n  depsForTestOnly: {\n    directiveForestHooks?: typeof DirectiveForestHooks;\n  } = {},\n) => {\n  // Allow for overriding the DirectiveForestHooks implementation for testing purposes.\n  if (depsForTestOnly.directiveForestHooks) {\n    directiveForestHooks = new depsForTestOnly.directiveForestHooks();\n  }\n\n  if (directiveForestHooks) {\n    return directiveForestHooks;\n  } else {\n    directiveForestHooks = new DirectiveForestHooks();\n  }\n\n  directiveForestHooks.profiler.subscribe({\n    onChangeDetectionStart(component: any): void {\n      if (!timingAPIEnabled()) {\n        return;\n      }\n      recordMark(getDirectiveName(component), 'changeDetection');\n    },\n    onChangeDetectionEnd(component: any): void {\n      if (!timingAPIEnabled()) {\n        return;\n      }\n      endMark(getDirectiveName(component), 'changeDetection');\n    },\n    onLifecycleHookStart(component: any, lifecyle: keyof LifecycleProfile): void {\n      if (!timingAPIEnabled()) {\n        return;\n      }\n      recordMark(getDirectiveName(component), lifecyle);\n    },\n    onLifecycleHookEnd(component: any, lifecyle: keyof LifecycleProfile): void {\n      if (!timingAPIEnabled()) {\n        return;\n      }\n      endMark(getDirectiveName(component), lifecyle);\n    },\n    onOutputStart(component: any, output: string): void {\n      if (!timingAPIEnabled()) {\n        return;\n      }\n      recordMark(getDirectiveName(component), output);\n    },\n    onOutputEnd(component: any, output: string): void {\n      if (!timingAPIEnabled()) {\n        return;\n      }\n      endMark(getDirectiveName(component), output);\n    },\n  });\n  directiveForestHooks.initialize();\n  return directiveForestHooks;\n};\n"]}