{"version":3,"file":"hooks.js","sourceRoot":"","sources":["hooks.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,OAAO,EAAC,eAAe,EAAc,MAAM,oBAAoB,CAAC;AAChE,OAAO,EAAW,sBAAsB,EAAC,MAAM,YAAY,CAAC;AAE5D;;;;;;;GAOG;AACH,MAAM,OAAO,oBAAoB;IAAjC;QACU,aAAQ,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;QACzC,YAAO,GAAwB,EAAE,CAAC;QAClC,mBAAc,GAAkB,EAAE,CAAC;QAE3C,aAAQ,GAAa,sBAAsB,EAAE,CAAC;IAoChD,CAAC;IAlCC,oBAAoB,CAAC,GAAQ;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACvD,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,OAAO,CAAC,IAAI,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;QAClD,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,cAAc,CAAC,GAAQ;QACrB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACjD,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,yBAAyB;QACvB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,MAAM,EAAC,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,eAAe,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvF,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC;QAC/B,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACtD,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementPosition} from '../../../../protocol';\n\nimport {ComponentTreeNode} from '../interfaces';\n\nimport {IdentityTracker, IndexedNode} from './identity-tracker';\nimport {Profiler, selectProfilerStrategy} from './profiler';\n\n/**\n *  Class to hook into directive forest.\n *\n *  Exposes latest directive forest state.\n *\n *  Delegates profiling to a Profiler instance.\n *  Delegates forest indexing to IdentityTracker Singleton\n */\nexport class DirectiveForestHooks {\n  private _tracker = IdentityTracker.getInstance();\n  private _forest: ComponentTreeNode[] = [];\n  private _indexedForest: IndexedNode[] = [];\n\n  profiler: Profiler = selectProfilerStrategy();\n\n  getDirectivePosition(dir: any): ElementPosition | undefined {\n    const result = this._tracker.getDirectivePosition(dir);\n    if (result === undefined) {\n      console.warn('Unable to find position of', dir);\n    }\n    return result;\n  }\n\n  getDirectiveId(dir: any): number | undefined {\n    const result = this._tracker.getDirectiveId(dir);\n    if (result === undefined) {\n      console.warn('Unable to find ID of', result);\n    }\n    return result;\n  }\n\n  getIndexedDirectiveForest(): IndexedNode[] {\n    return this._indexedForest;\n  }\n\n  getDirectiveForest(): ComponentTreeNode[] {\n    return this._forest;\n  }\n\n  initialize(): void {\n    this.indexForest();\n  }\n\n  indexForest(): void {\n    const {newNodes, removedNodes, indexedForest, directiveForest} = this._tracker.index();\n    this._indexedForest = indexedForest;\n    this._forest = directiveForest;\n    this.profiler.onIndexForest(newNodes, removedNodes);\n  }\n}\n"]}