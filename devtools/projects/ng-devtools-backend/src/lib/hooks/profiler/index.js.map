{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,aAAa,EAAC,MAAM,iCAAiC,CAAC;AAE9D,OAAO,EAAC,UAAU,EAAC,MAAM,UAAU,CAAC;AACpC,OAAO,EAAC,gBAAgB,EAAC,MAAM,YAAY,CAAC;AAG5C,OAAO,EAAa,QAAQ,EAAC,MAAM,UAAU,CAAC;AAE9C;;;GAGG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAa,EAAE;IACnD,IAAI,OAAO,aAAa,EAAE,CAAC,YAAY,KAAK,UAAU,EAAE,CAAC;QACvD,OAAO,IAAI,UAAU,EAAE,CAAC;IAC1B,CAAC;IACD,OAAO,IAAI,gBAAgB,EAAE,CAAC;AAChC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ngDebugClient} from '../../ng-debug-api/ng-debug-api';\n\nimport {NgProfiler} from './native';\nimport {PatchingProfiler} from './polyfill';\nimport {Profiler} from './shared';\n\nexport {type Hooks, Profiler} from './shared';\n\n/**\n * Factory method for creating profiler object.\n * Gives priority to NgProfiler, falls back on PatchingProfiler if framework APIs are not present.\n */\nexport const selectProfilerStrategy = (): Profiler => {\n  if (typeof ngDebugClient().ÉµsetProfiler === 'function') {\n    return new NgProfiler();\n  }\n  return new PatchingProfiler();\n};\n"]}