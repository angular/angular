{"version":3,"file":"component-tree.js","sourceRoot":"","sources":["component-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  InjectOptions,\n  InjectionToken,\n  Injector,\n  Type,\n  ValueProvider,\n  ɵAngularComponentDebugMetadata as AngularComponentDebugMetadata,\n  ɵAcxComponentDebugMetadata as AcxComponentDebugMetadata,\n  ɵProviderRecord as ProviderRecord,\n} from '@angular/core';\nimport {\n  ComponentExplorerViewQuery,\n  DirectiveMetadata,\n  DirectivesProperties,\n  ElementPosition,\n  PropertyQueryTypes,\n  SerializedInjectedService,\n  SerializedInjector,\n  SerializedProviderRecord,\n  UpdatedStateData,\n} from '../../../../protocol';\nimport {\n  buildDirectiveForestWithStrategy,\n  getLViewFromDirectiveOrElementInstance,\n} from '../directive-forest/index';\nimport {\n  ngDebugApiIsSupported,\n  ngDebugClient,\n  ngDebugDependencyInjectionApiIsSupported,\n} from '../ng-debug-api/ng-debug-api';\nimport {\n  deeplySerializeSelectedProperties,\n  serializeDirectiveState,\n} from '../state-serializer/state-serializer';\nimport {mutateNestedProp} from '../property-mutation';\nimport {ComponentTreeNode, DirectiveInstanceType, ComponentInstanceType} from '../interfaces';\nimport {getAppRoots} from './get-roots';\nimport {AcxChangeDetectionStrategy, ChangeDetectionStrategy, Framework} from './core-enums';\n\nexport const injectorToId = new WeakMap<Injector | HTMLElement, string>();\nexport const nodeInjectorToResolutionPath = new WeakMap<HTMLElement, SerializedInjector[]>();\nexport const idToInjector = new Map<string, Injector>();\nexport const injectorsSeen = new Set<string>();\nlet injectorId = 0;\n\nexport function getInjectorId() {\n  return `${injectorId++}`;\n}\n\nexport function getInjectorMetadata(injector: Injector) {\n  return ngDebugClient().ɵgetInjectorMetadata?.(injector) ?? null;\n}\n\nexport function getInjectorResolutionPath(injector: Injector): Injector[] {\n  const ng = ngDebugClient();\n  if (!ngDebugApiIsSupported(ng, 'ɵgetInjectorResolutionPath')) {\n    return [];\n  }\n\n  return ng.ɵgetInjectorResolutionPath(injector) ?? [];\n}\n\nexport function getInjectorFromElementNode(element: Node): Injector | null {\n  return ngDebugClient().getInjector?.(element) ?? null;\n}\n\nfunction getDirectivesFromElement(element: HTMLElement): {\n  component: unknown | null;\n  directives: unknown[];\n} {\n  const ng = ngDebugClient();\n  let component = null;\n  if (element instanceof Element && ngDebugApiIsSupported(ng, 'getComponent')) {\n    component = ng.getComponent(element);\n  }\n\n  return {\n    component,\n    directives: ngDebugClient().getDirectives?.(element) ?? [],\n  };\n}\n\nexport const getLatestComponentState = (\n  query: ComponentExplorerViewQuery,\n  directiveForest?: ComponentTreeNode[],\n): {directiveProperties: DirectivesProperties} | undefined => {\n  // if a directive forest is passed in we don't have to build the forest again.\n  directiveForest = directiveForest ?? buildDirectiveForest();\n\n  const node = queryDirectiveForest(query.selectedElement, directiveForest);\n  if (!node || !node.nativeElement) {\n    return;\n  }\n\n  const directiveProperties: DirectivesProperties = {};\n\n  const injector = getInjectorFromElementNode(node.nativeElement!);\n\n  const injectors = injector ? getInjectorResolutionPath(injector) : [];\n  const resolutionPathWithProviders = !ngDebugDependencyInjectionApiIsSupported()\n    ? []\n    : injectors.map((injector) => ({\n        injector,\n        providers: getInjectorProviders(injector),\n      }));\n  const populateResultSet = (dir: DirectiveInstanceType | ComponentInstanceType) => {\n    const {instance, name} = dir;\n    const metadata = getDirectiveMetadata(instance);\n    if (injector && metadata.framework === Framework.Angular) {\n      metadata.dependencies = getDependenciesForDirective(\n        injector,\n        resolutionPathWithProviders,\n        instance.constructor,\n      );\n    }\n\n    if (query.propertyQuery.type === PropertyQueryTypes.All) {\n      directiveProperties[dir.name] = {\n        props: serializeDirectiveState(instance),\n        metadata,\n      };\n    }\n\n    if (query.propertyQuery.type === PropertyQueryTypes.Specified) {\n      directiveProperties[name] = {\n        props: deeplySerializeSelectedProperties(\n          instance,\n          query.propertyQuery.properties[name] || [],\n        ),\n        metadata,\n      };\n    }\n  };\n\n  node.directives.forEach((dir) => populateResultSet(dir));\n  if (node.component) {\n    populateResultSet(node.component);\n  }\n\n  return {\n    directiveProperties,\n  };\n};\n\nfunction serializeElementInjectorWithId(injector: Injector): SerializedInjector | null {\n  let id: string;\n  const element = getElementInjectorElement(injector);\n\n  if (!injectorToId.has(element)) {\n    id = getInjectorId();\n    injectorToId.set(element, id);\n    idToInjector.set(id, injector);\n  }\n\n  id = injectorToId.get(element)!;\n  idToInjector.set(id, injector);\n  injectorsSeen.add(id);\n\n  const serializedInjector = serializeInjector(injector);\n  if (serializedInjector === null) {\n    return null;\n  }\n\n  return {id, ...serializedInjector};\n}\n\nfunction serializeInjectorWithId(injector: Injector): SerializedInjector | null {\n  if (isElementInjector(injector)) {\n    return serializeElementInjectorWithId(injector);\n  } else {\n    return serializeEnvironmentInjectorWithId(injector);\n  }\n}\n\nfunction serializeEnvironmentInjectorWithId(injector: Injector): SerializedInjector | null {\n  let id: string;\n\n  if (!injectorToId.has(injector)) {\n    id = getInjectorId();\n    injectorToId.set(injector, id);\n    idToInjector.set(id, injector);\n  }\n\n  id = injectorToId.get(injector)!;\n  idToInjector.set(id, injector);\n  injectorsSeen.add(id);\n\n  const serializedInjector = serializeInjector(injector);\n  if (serializedInjector === null) {\n    return null;\n  }\n\n  return {id, ...serializedInjector};\n}\n\nconst enum DirectiveMetadataKey {\n  INPUTS = 'inputs',\n  OUTPUTS = 'outputs',\n  ENCAPSULATION = 'encapsulation',\n  ON_PUSH = 'onPush',\n}\n\n// Gets directive metadata. For newer versions of Angular (v12+) it uses\n// the global `getDirectiveMetadata`. For prior versions of the framework\n// the method directly interacts with the directive/component definition.\nconst getDirectiveMetadata = (dir: any): DirectiveMetadata => {\n  const getMetadata = ngDebugClient().getDirectiveMetadata!;\n  const metadata = getMetadata?.(dir);\n  if (metadata) {\n    const {framework} = metadata;\n    switch (framework) {\n      case undefined: // Back compat, older Angular versions did not set `framework`.\n      case Framework.Angular: {\n        const meta = metadata as typeof metadata & Partial<AngularComponentDebugMetadata>;\n        return {\n          framework: Framework.Angular,\n          name: meta.name,\n          inputs: meta.inputs,\n          outputs: meta.outputs,\n          encapsulation: meta.encapsulation,\n          onPush: meta.changeDetection === ChangeDetectionStrategy.OnPush,\n        };\n      }\n      case Framework.ACX: {\n        const meta = metadata as typeof metadata & Partial<AcxComponentDebugMetadata>;\n        return {\n          framework: Framework.ACX,\n          name: meta.name,\n          inputs: meta.inputs,\n          outputs: meta.outputs,\n          encapsulation: meta.encapsulation,\n          onPush: meta.changeDetection === AcxChangeDetectionStrategy.OnPush,\n        };\n      }\n      case Framework.Wiz: {\n        return {\n          framework: Framework.Wiz,\n          name: metadata.name,\n          props: metadata.props,\n        };\n      }\n      default: {\n        throw new Error(`Unknown framework: \"${framework}\".`);\n      }\n    }\n  }\n\n  // Used in older Angular versions, prior to the introduction of `getDirectiveMetadata`.\n  const safelyGrabMetadata = (key: DirectiveMetadataKey) => {\n    try {\n      return dir.constructor.ɵcmp ? dir.constructor.ɵcmp[key] : dir.constructor.ɵdir[key];\n    } catch {\n      console.warn(`Could not find metadata for key: ${key} in directive:`, dir);\n      return undefined;\n    }\n  };\n\n  return {\n    framework: Framework.Angular,\n    inputs: safelyGrabMetadata(DirectiveMetadataKey.INPUTS),\n    outputs: safelyGrabMetadata(DirectiveMetadataKey.OUTPUTS),\n    encapsulation: safelyGrabMetadata(DirectiveMetadataKey.ENCAPSULATION),\n    onPush: safelyGrabMetadata(DirectiveMetadataKey.ON_PUSH),\n  };\n};\n\nexport function isOnPushDirective(dir: any): boolean {\n  const metadata = getDirectiveMetadata(dir.instance);\n  switch (metadata.framework) {\n    case Framework.Angular:\n      return Boolean(metadata.onPush);\n    case Framework.ACX:\n      return Boolean(metadata.onPush);\n    case Framework.Wiz:\n      return false;\n    default:\n      throw new Error(`Unknown framework: \"${metadata.framework}\".`);\n  }\n}\n\nexport function getInjectorProviders(injector: Injector) {\n  if (isNullInjector(injector)) {\n    return [];\n  }\n\n  return ngDebugClient().ɵgetInjectorProviders!(injector);\n}\n\nconst getDependenciesForDirective = (\n  injector: Injector,\n  resolutionPath: {injector: Injector; providers: ProviderRecord[]}[],\n  directive: any,\n): SerializedInjectedService[] => {\n  const ng = ngDebugClient();\n  if (!ngDebugApiIsSupported(ng, 'ɵgetDependenciesFromInjectable')) {\n    return [];\n  }\n\n  let dependencies = ng.ɵgetDependenciesFromInjectable(injector, directive)?.dependencies ?? [];\n  const uniqueServices = new Set<string>();\n  const serializedInjectedServices: SerializedInjectedService[] = [];\n\n  let position = 0;\n  for (const dependency of dependencies) {\n    const providedIn = dependency.providedIn;\n    const foundInjectorIndex = resolutionPath.findIndex((node) => node.injector === providedIn);\n\n    if (foundInjectorIndex === -1) {\n      position++;\n      continue;\n    }\n\n    const providers = resolutionPath[foundInjectorIndex].providers;\n    const foundProvider = providers.find((provider) => provider.token === dependency.token);\n\n    // the dependency resolution path is\n    // the path from the root injector to the injector that provided the dependency (1)\n    // +\n    // the import path from the providing injector to the feature module that provided the\n    // dependency (2)\n    const dependencyResolutionPath: SerializedInjector[] = [\n      // (1)\n      ...resolutionPath\n        .slice(0, foundInjectorIndex + 1)\n        .map((node) => serializeInjectorWithId(node.injector)!),\n\n      // (2)\n      // We slice the import path to remove the first element because this is the same\n      // injector as the last injector in the resolution path.\n      ...(foundProvider?.importPath ?? []).slice(1).map((node): SerializedInjector => {\n        return {\n          type: 'imported-module',\n          name: valueToLabel(node),\n          id: getInjectorId(),\n        };\n      }),\n    ];\n\n    let flags = dependency.flags as InjectOptions;\n    let flagToken = '';\n    if (flags !== undefined) {\n      // TODO: We need to remove this once the InjectFlags enum is removed from core\n      if (typeof flags === 'number') {\n        flags = {\n          optional: !!(flags & 8),\n          skipSelf: !!(flags & 4),\n          self: !!(flags & 2),\n          host: !!(flags & 1),\n        };\n      }\n      flagToken = (['optional', 'skipSelf', 'self', 'host'] as (keyof InjectOptions)[])\n        .filter((key) => flags[key])\n        .join('-');\n    }\n\n    const serviceKey = `${dependency.token}-${flagToken}`;\n    if (!uniqueServices.has(serviceKey)) {\n      uniqueServices.add(serviceKey);\n\n      const service = {\n        token: valueToLabel(dependency.token),\n        value: valueToLabel(dependency.value),\n        flags,\n        position: [position],\n        resolutionPath: dependencyResolutionPath,\n      };\n\n      if (dependency.token && isInjectionToken(dependency.token)) {\n        service.token = dependency.token!.toString();\n      }\n\n      serializedInjectedServices.push(service);\n    }\n\n    position++;\n  }\n\n  return serializedInjectedServices;\n};\n\nconst valueToLabel = (value: any): string => {\n  if (isInjectionToken(value)) {\n    return `InjectionToken(${value['_desc']})`;\n  }\n\n  if (typeof value === 'object') {\n    return stripUnderscore(value.constructor.name);\n  }\n\n  if (typeof value === 'function') {\n    return stripUnderscore(value.name);\n  }\n\n  if (typeof value !== 'string') {\n    return String(value);\n  }\n\n  return stripUnderscore(value);\n};\n\nfunction stripUnderscore(str: string): string {\n  if (str.startsWith('_')) {\n    return str.slice(1);\n  }\n\n  return str;\n}\n\nexport function serializeInjector(injector: Injector): Omit<SerializedInjector, 'id'> | null {\n  const metadata = getInjectorMetadata(injector);\n\n  if (metadata === null) {\n    console.error('Angular DevTools: Could not serialize injector.', injector);\n    return null;\n  }\n\n  const providers = getInjectorProviders(injector).length;\n\n  if (metadata.type === 'null') {\n    return {type: 'null', name: 'Null Injector', providers: 0};\n  }\n\n  if (metadata.type === 'element') {\n    const source = metadata.source as HTMLElement;\n    const name = stripUnderscore(elementToDirectiveNames(source)[0]);\n\n    return {type: 'element', name, providers};\n  }\n\n  if (metadata.type === 'environment') {\n    if ((injector as any).scopes instanceof Set) {\n      if ((injector as any).scopes.has('platform')) {\n        return {type: 'environment', name: 'Platform', providers};\n      }\n\n      if ((injector as any).scopes.has('root')) {\n        return {type: 'environment', name: 'Root', providers};\n      }\n    }\n\n    return {type: 'environment', name: stripUnderscore(metadata.source ?? ''), providers};\n  }\n\n  console.error('Angular DevTools: Could not serialize injector.', injector);\n  return null;\n}\n\nexport function serializeProviderRecord(\n  providerRecord: ProviderRecord,\n  index: number,\n  hasImportPath = false,\n): SerializedProviderRecord {\n  let type: 'type' | 'class' | 'value' | 'factory' | 'existing' = 'type';\n  let multi = false;\n\n  if (typeof providerRecord.provider === 'object') {\n    if ((providerRecord.provider as ClassProvider).useClass !== undefined) {\n      type = 'class';\n    } else if ((providerRecord.provider as ValueProvider).useValue !== undefined) {\n      type = 'value';\n    } else if ((providerRecord.provider as FactoryProvider).useFactory !== undefined) {\n      type = 'factory';\n    } else if ((providerRecord.provider as ExistingProvider).useExisting !== undefined) {\n      type = 'existing';\n    }\n\n    if (providerRecord.provider.multi !== undefined) {\n      multi = providerRecord.provider.multi;\n    }\n  }\n\n  const serializedProvider: {\n    token: string;\n    type: typeof type;\n    multi: boolean;\n    isViewProvider: boolean;\n    index: number;\n    importPath?: string[];\n  } = {\n    token: valueToLabel(providerRecord.token),\n    type,\n    multi,\n    isViewProvider: providerRecord.isViewProvider,\n    index,\n  };\n\n  if (hasImportPath) {\n    serializedProvider['importPath'] = (providerRecord.importPath ?? []).map((injector) =>\n      valueToLabel(injector),\n    );\n  }\n\n  return serializedProvider;\n}\n\nfunction elementToDirectiveNames(element: HTMLElement): string[] {\n  const {component, directives} = getDirectivesFromElement(element);\n  return [component, ...directives]\n    .map((dir) => dir?.constructor?.name ?? '')\n    .filter((dir) => !!dir);\n}\n\nexport function getElementInjectorElement(elementInjector: Injector): HTMLElement {\n  if (!isElementInjector(elementInjector)) {\n    throw new Error('Injector is not an element injector');\n  }\n\n  return getInjectorMetadata(elementInjector)!.source as HTMLElement;\n}\n\nfunction isInjectionToken(token: Type<unknown> | InjectionToken<unknown>): boolean {\n  return token.constructor.name === 'InjectionToken';\n}\n\nexport function isElementInjector(injector: Injector) {\n  const metadata = getInjectorMetadata(injector);\n  return metadata !== null && metadata.type === 'element';\n}\n\nfunction isNullInjector(injector: Injector) {\n  const metadata = getInjectorMetadata(injector);\n  return metadata !== null && metadata.type === 'null';\n}\n\nconst getRootLViewsHelper = (element: Element, rootLViews = new Set<any>()): Set<any> => {\n  if (!(element instanceof HTMLElement)) {\n    return rootLViews;\n  }\n  const lView = getLViewFromDirectiveOrElementInstance(element);\n  if (lView) {\n    rootLViews.add(lView);\n    return rootLViews;\n  }\n  for (let i = 0; i < element.children.length; i++) {\n    getRootLViewsHelper(element.children[i], rootLViews);\n  }\n  return rootLViews;\n};\n\nfunction getRootElements(): Element[] {\n  if (!ngDebugClient().getComponent) {\n    // If the ngDebugClient does not support getComponent, we cannot proceed.\n    return [];\n  }\n\n  const roots = getAppRoots();\n  const rootSet = new Set(roots);\n\n  // Traverse the DOM tree for other non application root Angular components.\n  // Pass in the existing roots to inform the traversal that we can skip those paths.\n  discoverNonApplicationRootComponents(document.body, rootSet);\n\n  return [...rootSet];\n}\n\n/**\n * Warning: This function mutates the `roots` arg!\n *\n * Recursively traverse the DOM tree to find all Angular component root elements.\n *\n * This function starts from the given element and traverses its children.\n * When it finds an Angular component, it adds that element to the `roots` set.\n *\n * If we discover an angular component that we've already added to the `roots` set,\n * we skip traversing its children. This is to ensure that we only collect unique root elements.\n *\n *\n * Example:\n *\n * Lets say we have the following DOM structure:\n *\n * ```html\n * <body>\n *   <app-root-1>...</app-root-1>\n *   <app-root-2>...</app-root-2>\n *\n *   <mat-dialog>\n *    ...\n *   </mat-dialog>\n *\n *   <div id=\"not-angular\">Not an angular component</div>\n * </body>\n *\n * ```\n *\n * In this case, `app-root-1` and `app-root-2` are the root elements of Angular components.\n * The `mat-dialog` is a non application root Angular component.\n *\n * We can discover the roots by searching for ng-version. This gives us a set of paths that we can skip traversing.\n *\n * ```ts\n * const rootSet = new Set(getAppRoots());\n * console.log(rootSet);\n * // Set(<app-root-1>, <app-root-2>)\n * discoverNonApplicationRootComponents(document.body, rootSet);\n * console.log(rootSet);\n * // Set(<app-root-1>, <app-root-2>, <mat-dialog>)\n * ```\n *\n * ```md\n *\n * traversing document.body.children:\n * - child: <app-root-1>\n *   - Since we have this already in the `roots` set, we skip traversing its children.\n * - child: <app-root-2>\n *   - Since we have this already in the `roots` set, we skip traversing its children.\n * - child: <mat-dialog>\n *   - Since this is not in the `roots` set, we check if it is an Angular component.\n *   - Since it is, we add it to the `roots` set and break the loop.\n * - child: <div id=\"not-angular\">\n *   - Since this is not an Angular component, we traverse its children to see if we can find any Angular components.\n *\n * ```\n *\n * @param element The current DOM element being traversed.\n * @param roots A set of root elements found during the traversal.\n */\nfunction discoverNonApplicationRootComponents(element: Element, roots: Set<Element>): void {\n  const children = Array.from(element.children);\n  for (const child of children) {\n    if (roots.has(child)) {\n      continue;\n    }\n\n    const ng = ngDebugClient();\n    if (ng.getComponent && ng.getComponent(child)) {\n      roots.add(child);\n      // If the child is an Angular component, we can skip traversing its children.\n      continue;\n    }\n\n    discoverNonApplicationRootComponents(child, roots);\n  }\n}\n\nexport const buildDirectiveForest = (): ComponentTreeNode[] => {\n  return buildDirectiveForestWithStrategy(getRootElements());\n};\n\n// Based on an ElementID we return a specific component node.\n// If we can't find any, we return null.\nexport const queryDirectiveForest = (\n  position: ElementPosition,\n  forest: ComponentTreeNode[],\n): ComponentTreeNode | null => {\n  if (!position.length) {\n    return null;\n  }\n  let node: null | ComponentTreeNode = null;\n  for (const i of position) {\n    node = forest[i];\n    if (!node) {\n      return null;\n    }\n    forest = node.children;\n  }\n  return node;\n};\n\nexport const findNodeInForest = (\n  position: ElementPosition,\n  forest: ComponentTreeNode[],\n): HTMLElement | null => {\n  const foundComponent: ComponentTreeNode | null = queryDirectiveForest(position, forest);\n  return foundComponent ? (foundComponent.nativeElement as HTMLElement) : null;\n};\n\nexport const findNodeFromSerializedPosition = (\n  serializedPosition: string,\n): ComponentTreeNode | null => {\n  const position: number[] = serializedPosition.split(',').map((index) => parseInt(index, 10));\n  return queryDirectiveForest(position, buildDirectiveForest());\n};\n\nexport const updateState = (updatedStateData: UpdatedStateData): void => {\n  const ng = ngDebugClient();\n  const node = queryDirectiveForest(updatedStateData.directiveId.element, buildDirectiveForest());\n  if (!node) {\n    console.warn(\n      'Could not update the state of component',\n      updatedStateData,\n      'because the component was not found',\n    );\n    return;\n  }\n  if (updatedStateData.directiveId.directive !== undefined) {\n    const directive = node.directives[updatedStateData.directiveId.directive].instance;\n    mutateNestedProp(directive, updatedStateData.keyPath, updatedStateData.newValue);\n    if (ngDebugApiIsSupported(ng, 'getOwningComponent')) {\n      ng.applyChanges?.(ng.getOwningComponent(directive)!);\n    }\n    return;\n  }\n  if (node.component) {\n    const comp = node.component.instance;\n    mutateNestedProp(comp, updatedStateData.keyPath, updatedStateData.newValue);\n    ng.applyChanges?.(comp);\n    return;\n  }\n};\n\nexport function serializeResolutionPath(resolutionPath: Injector[]): SerializedInjector[] {\n  const serializedResolutionPath: SerializedInjector[] = [];\n\n  for (const injector of resolutionPath) {\n    let serializedInjectorWithId: SerializedInjector | null = null;\n\n    if (isElementInjector(injector)) {\n      serializedInjectorWithId = serializeElementInjectorWithId(injector);\n    } else {\n      serializedInjectorWithId = serializeEnvironmentInjectorWithId(injector);\n    }\n\n    if (serializedInjectorWithId === null) {\n      continue;\n    }\n\n    serializedResolutionPath.push(serializedInjectorWithId);\n  }\n\n  return serializedResolutionPath;\n}\n"]}