{"version":3,"file":"component-tree.spec.js","sourceRoot":"","sources":["component-tree.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,QAAQ,EAAsB,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAC,0BAA0B,EAAC,MAAM,kBAAkB,CAAC;AAI5D,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,SAAS,CAAC,GAAG,EAAE;QACb,OAAQ,UAAkB,CAAC,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAC/B,SAAS,EAAE,EAAE;aACd,CAAC,CAAC;YAEH,MAAM,EAAE,GAAgB;gBACtB,WAAW,EAAE,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC;aACxE,CAAC;YACD,UAAkB,CAAC,EAAE,GAAG,EAAE,CAAC;YAE5B,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC3D,UAAkB,CAAC,EAAE,GAAG,EAAE,CAAC;YAE5B,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, ɵGlobalDevModeUtils} from '@angular/core';\nimport {getInjectorFromElementNode} from './component-tree';\n\ntype Ng = ɵGlobalDevModeUtils['ng'];\n\ndescribe('component-tree', () => {\n  afterEach(() => {\n    delete (globalThis as any).ng;\n  });\n\n  describe('getInjectorFromElementNode', () => {\n    it('returns injector', () => {\n      const injector = Injector.create({\n        providers: [],\n      });\n\n      const ng: Partial<Ng> = {\n        getInjector: jasmine.createSpy('getInjector').and.returnValue(injector),\n      };\n      (globalThis as any).ng = ng;\n\n      const el = document.createElement('div');\n      expect(getInjectorFromElementNode(el)).toBe(injector);\n      expect(ng.getInjector).toHaveBeenCalledOnceWith(el);\n    });\n\n    it('returns `null` when `getInjector` is not supported', () => {\n      (globalThis as any).ng = {};\n\n      const el = document.createElement('div');\n      expect(getInjectorFromElementNode(el)).toBeNull();\n    });\n  });\n});\n"]}