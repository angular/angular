{"version":3,"file":"client-event-subscribers.js","sourceRoot":"","sources":["client-event-subscribers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAmBH,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EACL,qBAAqB,EACrB,eAAe,EACf,4BAA4B,EAC5B,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,uBAAuB,CAAC;AAE/B,OAAO,EAAC,kBAAkB,EAAC,MAAM,2CAA2C,CAAC;AAC7E,OAAO,EACL,yBAAyB,EACzB,0BAA0B,EAC1B,oBAAoB,EACpB,yBAAyB,EACzB,uBAAuB,EACvB,YAAY,EACZ,aAAa,EACb,iBAAiB,EACjB,iBAAiB,EACjB,4BAA4B,EAC5B,oBAAoB,EACpB,uBAAuB,EACvB,uBAAuB,EACvB,WAAW,GACZ,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAC,gBAAgB,EAAE,eAAe,EAAE,mCAAmC,EAAC,MAAM,SAAS,CAAC;AAC/F,OAAO,EAAC,KAAK,IAAI,cAAc,EAAE,IAAI,IAAI,aAAa,EAAC,MAAM,iBAAiB,CAAC;AAE/E,OAAO,EACL,mBAAmB,EACnB,qBAAqB,EACrB,WAAW,GAEZ,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,aAAa,EAAE,wCAAwC,EAAC,MAAM,6BAA6B,CAAC;AACpG,OAAO,EAAC,mBAAmB,EAAC,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAC,uBAAuB,EAAE,cAAc,EAAC,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAC,iBAAiB,EAAE,YAAY,EAAC,MAAM,SAAS,CAAC;AAExD,OAAO,EAAC,gBAAgB,EAAC,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAIrD,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,UAA8B,EAC9B,eAEC,EACK,EAAE;IACR,MAAM,SAAS,GAAiB,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC;IAE5C,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;IAExD,UAAU,CAAC,EAAE,CACX,gCAAgC,EAChC,sCAAsC,CAAC,UAAU,CAAC,CACnD,CAAC;IAEF,UAAU,CAAC,EAAE,CAAC,qBAAqB,EAAE,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC;IAE1E,UAAU,CAAC,EAAE,CAAC,gBAAgB,EAAE,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC;IACpE,UAAU,CAAC,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;IAElE,UAAU,CAAC,EAAE,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,SAAS,CAAC,CAAC,CAAC;IAE5E,UAAU,CAAC,EAAE,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9E,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1D,UAAU,CAAC,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;IAElE,UAAU,CAAC,EAAE,CAAC,2BAA2B,EAAE,iCAAiC,CAAC,UAAU,CAAC,CAAC,CAAC;IAE1F,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAE1C,UAAU,CAAC,EAAE,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;IAClD,UAAU,CAAC,EAAE,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAEpD,UAAU,CAAC,EAAE,CAAC,sBAAsB,EAAE,4BAA4B,CAAC,UAAU,CAAC,CAAC,CAAC;IAEhF,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAE1C,UAAU,CAAC,EAAE,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,UAAU,CAAC,CAAC,CAAC;IAExE,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAC,OAAO,EAAE,KAAK,EAAC,EAAE,EAAE;QACxC,OAAO,CAAC,KAAK,CAAC,CAAC,uBAAuB,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,EAAE,CAAC,gBAAgB,EAAE,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC;IAEpE,IAAI,qBAAqB,EAAE,IAAI,4BAA4B,EAAE,IAAI,eAAe,EAAE,EAAE,CAAC;QACnF,SAAS,CAAC,GAAG,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;QAE3C,6DAA6D;QAC7D,+DAA+D;QAC/D,gEAAgE;QAChE,mBAAmB;QACnB,iBAAiB,CAAC,GAAG,EAAE;YACrB,mCAAmC,CAAC,eAAe,CAAC;iBACjD,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBACjD,SAAS,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAEF,EAAE;AACF,uBAAuB;AACvB,EAAE;AAEF,MAAM,gBAAgB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,GAAG,EAAE;IAChE,UAAU,CAAC,OAAO,EAAE,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,sCAAsC,GAC1C,CAAC,UAA8B,EAAE,EAAE,CAAC,CAAC,KAAkC,EAAE,EAAE;IACzE,sDAAsD;IACtD,2DAA2D;IAE3D,mCAAmC,EAAE,CAAC,WAAW,EAAE,CAAC;IAEpD,MAAM,MAAM,GAAG,6BAA6B,CAC1C,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,EACjE,wCAAwC,EAAE,CAC3C,CAAC;IAEF,+BAA+B;IAC/B,KAAK,MAAM,UAAU,IAAI,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC;QAC7C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YACnC,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;YAC/C,IAAI,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAChC,MAAM,OAAO,GAAG,yBAAyB,CAAC,QAAQ,CAAC,CAAC;gBACpD,IAAI,OAAO,EAAE,CAAC;oBACZ,4BAA4B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC/C,CAAC;YACH,CAAC;YAED,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IACD,aAAa,CAAC,KAAK,EAAE,CAAC;IAEtB,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,UAAU,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC;QAC3D,OAAO;IACT,CAAC;IAED,MAAM,KAAK,GAAG,uBAAuB,CACnC,KAAK,EACL,mCAAmC,EAAE,CAAC,kBAAkB,EAAE,CAC3D,CAAC;IAEF,IAAI,KAAK,EAAE,CAAC;QACV,MAAM,EAAC,mBAAmB,EAAC,GAAG,KAAK,CAAC;QACpC,UAAU,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC,EAAC,MAAM,EAAE,UAAU,EAAE,mBAAmB,EAAC,CAAC,CAAC,CAAC;IAC9F,CAAC;SAAM,CAAC;QACN,oFAAoF;QACpF,UAAU,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC,CAAC;AAEJ,MAAM,uBAAuB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,GAAG,EAAE,CACvE,eAAe,CAAC,UAAU,CAAC,CAAC;AAC9B,MAAM,iBAAiB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAE1F,MAAM,qBAAqB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,CAAC,IAAY,EAAE,EAAE;IACjF,MAAM,MAAM,GAAQ,iBAAiB,EAAE,CAAC;IACxC,6FAA6F;IAC7F,IAAI,MAAM,EAAE,CAAC;QACX,aAAa,EAAE,CAAC,cAAc,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;IACzE,CAAC;AACH,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,IAAY,EAAE,IAAuB,EAAE,EAAE;IAC5E,MAAM,MAAM,GAAQ,iBAAiB,EAAE,CAAC;IAExC,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;QACnB,OAAO;IACT,CAAC;IAED,IAAI,OAAO,CAAC;IACZ,IAAI,IAAI,KAAK,WAAW,EAAE,CAAC;QACzB,OAAO,GAAG,qBAAqB,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;SAAM,CAAC;QACN,OAAO,GAAG,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,GAAG,EAAE,CACtE,cAAc,CAAC,CAAC,KAAoB,EAAE,EAAE;IACtC,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC;AAEL,MAAM,qBAAqB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,GAAG,EAAE;IACrE,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG,CAAC,SAAuB,EAAE,EAAE,CAAC,CAAC,QAAyB,EAAE,EAAE;IAC3F,MAAM,IAAI,GAAG,oBAAoB,CAC/B,QAAQ,EACR,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,CAClE,CAAC;IACF,mBAAmB,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;IACtC,SAAS,CAAC,GAAG,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,2BAA2B,GAC/B,CAAC,UAA8B,EAAE,EAAE,CAAC,CAAC,QAA2B,EAAE,QAAkB,EAAE,EAAE;IACtF,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,QAAQ,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC/F,MAAM,IAAI,GAAG,oBAAoB,CAC/B,QAAQ,CAAC,OAAO,EAChB,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,CAClE,CAAC;IACF,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,SAAS,EAAE,CAAC;IACrB,CAAC;IACD,MAAM,OAAO,GACX,QAAQ,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC1F,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,SAAS,EAAE,CAAC;IACrB,CAAC;IACD,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC5B,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE,CAAC;QAC5B,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;IACD,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE;QAClC,QAAQ;QACR,EAAC,KAAK,EAAE,uBAAuB,CAAC,IAAI,CAAC,EAAC;QACtC,QAAQ;KACT,CAAC,CAAC;IACH,OAAO;AACT,CAAC,CAAC;AAEJ,MAAM,iCAAiC,GACrC,CAAC,UAA8B,EAAE,EAAE,CAAC,CAAC,QAA4B,EAAE,QAAkB,EAAE,EAAE;IACvF,MAAM,SAAS,GAAG,GAAG,EAAE,CACrB,UAAU,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC/E,MAAM,IAAI,GAAG,oBAAoB,CAC/B,QAAQ,CAAC,OAAO,EAChB,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,CAClE,CAAC;IACF,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,MAAM,QAAQ,GAAG,0BAA0B,CAAC,IAAI,CAAC,aAAc,CAAC,CAAC;IACjE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,MAAM,EAAE,GAAG,aAAa,EAAE,CAAC;IAE3B,MAAM,WAAW,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC;IACnD,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAChF,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,IAAI,IAAI,GAAG,OAAO,CAAC,KAAe,CAAC;IACnC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE,CAAC;QAC5B,IAAI,GAAI,IAA+B,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;IACD,UAAU,CAAC,IAAI,CAAC,wBAAwB,EAAE;QACxC,QAAQ;QACR,EAAC,KAAK,EAAE,uBAAuB,CAAC,IAAI,CAAC,EAAC;QACtC,QAAQ;KACT,CAAC,CAAC;IACH,OAAO;AACT,CAAC,CAAC;AAEJ,EAAE;AACF,oBAAoB;AACpB,EAAE;AAEF,uEAAuE;AACvE,MAAM,SAAS,GAAG,CAAC,UAA8B,EAAE,EAAE;IACnD,MAAM,MAAM,GAAG,6BAA6B,CAC1C,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,EACjE,wCAAwC,EAAE,CAC3C,CAAC;IACF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO;IAEhC,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC;IAC9E,IAAI,CAAC,YAAY;QAAE,OAAO;IAE1B,MAAM,KAAK,GAAG,uBAAuB,CAAC,YAAY,CAAC,CAAC;IACpD,IAAI,CAAC,KAAK;QAAE,OAAO;IAEnB,MAAM,cAAc,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAEhD,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,4BAA4B,GAAG,CAAC,QAA4B,EAAE,EAAE;IACpE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;QACnC,OAAO;IACT,CAAC;IAED,MAAM,eAAe,GAAG,oBAAoB,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAE,CAAC,CAAC;IAC7E,MAAM,kBAAkB,GAA+B,EAAE,CAAC;IAC1D,MAAM,cAAc,GAA6C,IAAI,GAAG,EAAE,CAAC;IAE3E,KAAK,MAAM,CAAC,KAAK,EAAE,cAAc,CAAC,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC;QAChE,MAAM,MAAM,GAAG,uBAAuB,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;QAC/F,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhC,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAC/D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IACD,MAAM,yBAAyB,GAA+B,EAAE,CAAC;IACjE,KAAK,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC;QACxD,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9D,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClE,KAAK,MAAM,MAAM,IAAI,eAAe,EAAE,CAAC;YACrC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,gBAAgB,CAAC,GAAG,YAAY,CAAC;QACxC,IAAI,gBAAgB,KAAK,SAAS,EAAE,CAAC;YACnC,kFAAkF;YAClF,yBAAyB,CAAC,IAAI,CAAC;gBAC7B,KAAK,EAAE,gBAAgB,CAAC,KAAK;gBAC7B,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,IAAI;gBACX,gFAAgF;gBAChF,4BAA4B;gBAC5B,cAAc,EAAE,gBAAgB,CAAC,cAAc;gBAC/C,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAe,CAAC;aACvD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,OAAO,yBAAyB,CAAC;AACnC,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CACvB,kBAAsC,EACtC,kBAA4C,EAC5C,EAAE;IACF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAE,CAAC;IAC1D,MAAM,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAEvD,IAAI,OAAO,kBAAkB,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QACjD,MAAM,QAAQ,GAAG,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IAC9D,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;QACnD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QACjF,OAAO,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IACjE,CAAC;SAAM,CAAC;QACN,OAAO;IACT,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,CAAC,QAA4B,EAAgB,EAAE;IAC7E,MAAM,yBAAyB,GAAG,4BAA4B,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC/E,MAAM,cAAc,GAAG,yBAAyB,CAAC,IAAI,CACnD,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAC1C,CAAC;IAEF,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO;IACT,CAAC;IAED,MAAM,cAAc,GAAG,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAElE,OAAO,WAAW,CAAC,cAAc,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,UAA8B,EAAQ,EAAE;IAC/D,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;IACtC,MAAM,QAAQ,GAAG,eAAe,EAAE,CAAC;IAEnC,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO;IACT,CAAC;IAED,IAAI,QAAQ,IAAI,qBAAqB,EAAE,IAAI,4BAA4B,EAAE,EAAE,CAAC;QAC1E,mCAAmC,EAAE,CAAC;IACxC,CAAC;IAED,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE;QAChC;YACE,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAE;YAC7B,OAAO,EAAE,qBAAqB,EAAE;YAChC,GAAG,EAAE,QAAQ;YACb,SAAS,EAAE,kBAAkB,EAAE;YAC/B,aAAa,EAAE,gBAAgB,EAAE;SAClC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,UAA8B,EAAsB,EAAE;IAC5E,MAAM,SAAS,GAAG,IAAI,kBAAkB,CAAC;QACvC,gBAAgB,EAAE,CAAC,EAAU,EAAE,EAAE;YAC/B,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC;QACD,gBAAgB,EAAE,GAAG,EAAE;YACrB,UAAU,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QACD,iBAAiB,EAAE,CAAC,EAAU,EAAE,EAAE;YAChC,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC;KACF,CAAC,CAAC;IAEH,UAAU,CAAC,EAAE,CAAC,gBAAgB,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;IAC3D,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC,cAAc,CAAC,CAAC;IAExD,UAAU,CAAC,EAAE,CAAC,wBAAwB,EAAE,CAAC,QAAyB,EAAE,EAAE;QACpE,SAAS,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACH,UAAU,CAAC,EAAE,CAAC,wBAAwB,EAAE,WAAW,CAAC,CAAC;IAErD,UAAU,CAAC,EAAE,CAAC,wBAAwB,EAAE,SAAS,CAAC,uBAAuB,CAAC,CAAC;IAC3E,UAAU,CAAC,EAAE,CAAC,wBAAwB,EAAE,SAAS,CAAC,yBAAyB,CAAC,CAAC;IAE7E,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAkBF,SAAS,iBAAiB;IACxB,MAAM,MAAM,GAAG,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,CAAC;IACjF,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAE3B,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,QAAQ,GAAG,0BAA0B,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACpE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,EAAE,GAAG,aAAa,EAAE,CAAC;IAC3B,OAAQ,EAAU,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,CAAC;AACpD,CAAC;AAED,iEAAiE;AACjE,qEAAqE;AACrE,gCAAgC;AAChC,MAAM,6BAA6B,GAAG,CACpC,KAA0B,EAC1B,qBAAqB,GAAG,KAAK,EACI,EAAE;IACnC,MAAM,eAAe,GAAoC,EAAE,CAAC;IAC5D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,cAAc,GAAkC;YACpD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACvB,CAAC,CAAC;oBACE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;oBACzB,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS;oBACnC,EAAE,EAAE,mCAAmC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAE;iBACnF;gBACH,CAAC,CAAC,IAAI;YACR,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBACtC,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,EAAE,EAAE,mCAAmC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAE;aACtE,CAAC,CAAC;YACH,QAAQ,EAAE,6BAA6B,CAAC,IAAI,CAAC,QAAQ,EAAE,qBAAqB,CAAC;YAC7E,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK;YAElE,uCAAuC;YACvC,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa;SACvC,CAAC;QACF,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAErC,IAAI,qBAAqB,EAAE,CAAC;YAC1B,cAAc,CAAC,cAAc,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF,SAAS,uBAAuB,CAAC,IAAuB;IACtD,uEAAuE;IACvE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QACxB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,YAAY,GAAG,0BAA0B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACpE,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,uFAAuF;IACvF,mFAAmF;IACnF,kFAAkF;IAClF,sBAAsB;IACtB,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,CAAC;QACrC,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,OAAO,GAAG,yBAAyB,CAAC,YAAY,CAAC,CAAC;IAExD,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QAC/C,MAAM,eAAe,GAAG,yBAAyB,CAAC,YAAY,CAAC,CAAC;QAChE,4BAA4B,CAAC,GAAG,CAAC,OAAO,EAAE,uBAAuB,CAAC,eAAe,CAAC,CAAC,CAAC;IACtF,CAAC;IAED,MAAM,cAAc,GAAG,4BAA4B,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;IAClE,KAAK,MAAM,QAAQ,IAAI,cAAc,EAAE,CAAC;QACtC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,4BAA4B,GAChC,CAAC,UAA8B,EAAE,EAAE,CAAC,CAAC,QAA4B,EAAE,EAAE;IACnE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;QACnC,OAAO;IACT,CAAC;IAED,MAAM,eAAe,GAAG,oBAAoB,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAE,CAAC,CAAC;IAC7E,MAAM,kBAAkB,GAA+B,EAAE,CAAC;IAE1D,MAAM,cAAc,GAAyC,IAAI,GAAG,EAAE,CAAC;IAEvE,KAAK,MAAM,CAAC,KAAK,EAAE,cAAc,CAAC,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC;QAChE,MAAM,MAAM,GAAG,uBAAuB,CACpC,cAAc,EACd,KAAK,EACL,QAAQ,CAAC,IAAI,KAAK,aAAa,CAChC,CAAC;QAEF,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhC,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAC/D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,yBAAyB,GAA+B,EAAE,CAAC;IAEjE,KAAK,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC;QACxD,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9D,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAElE,KAAK,MAAM,MAAM,IAAI,eAAe,EAAE,CAAC;YACrC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,gBAAgB,CAAC,GAAG,YAAY,CAAC;QACxC,IAAI,gBAAgB,KAAK,SAAS,EAAE,CAAC;YACnC,kFAAkF;YAClF,yBAAyB,CAAC,IAAI,CAAC;gBAC7B,KAAK,EAAE,gBAAgB,CAAC,KAAK;gBAC7B,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,IAAI;gBACX,gFAAgF;gBAChF,4BAA4B;gBAC5B,cAAc,EAAE,gBAAgB,CAAC,cAAc;gBAC/C,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAe,CAAC;aACvD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,UAAU,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC;AAEJ,MAAM,WAAW,GAAG,CAClB,kBAAsC,EACtC,kBAA4C,EACtC,EAAE;IACR,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAE,CAAC;IAE1D,MAAM,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAEvD,OAAO,CAAC,KAAK,CACX,KAAK,kBAAkB,CAAC,IAAI,EAAE,EAC9B,UACE,kBAAkB,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SACtD,0CAA0C,CAC3C,CAAC;IACF,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAEpC,IAAI,OAAO,kBAAkB,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QACjD,MAAM,QAAQ,GAAG,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAE3D,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACpC,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;QACnD,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QAElF,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QACtC,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,OAAO,CAAC,QAAQ,EAAE,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,GAAG,EAAE;IACxE,MAAM,EAAE,GAAG,aAAa,EAAE,CAAC;IAE3B,MAAM,MAAM,GAAG,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,CAAC;IACjF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxB,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3B,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;QACzC,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,0BAA0B,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACpE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,MAAM,iBAAiB,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,QAAQ,CAAC,IAAI,IAAI,CAG3D,CAAC;IAET,IACE,iBAAiB;QACjB,OAAO,iBAAiB,KAAK,QAAQ;QACrC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,GAAG,CAAC,EACzC,CAAC;QACD,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC5D,CAAC;SAAM,CAAC;QACN,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/C,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,CAC1B,kBAAsC,EACtC,kBAA4C,EAC5C,EAAE;IACF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAE,CAAC;IAC1D,MAAM,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAEvD,IAAI,OAAO,kBAAkB,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QACjD,MAAM,QAAQ,GAAG,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IAC9D,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;QACnD,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QAClF,OAAO,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IAClE,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAAC,UAA8B,EAAE,EAAE,CAAC,CAAC,OAAwB,EAAE,EAAE;IAC9F,MAAM,EAAE,GAAG,aAAa,EAAE,CAAC;IAE3B,6BAA6B;IAC7B,MAAM,IAAI,GAAG,oBAAoB,CAC/B,OAAO,EACP,mCAAmC,EAAE,CAAC,yBAAyB,EAAE,CAClE,CAAC;IACF,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,0BAA0B,CAAC,IAAI,CAAC,aAAc,CAAC,CAAC;IAEjE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO;IACT,CAAC;IAED,MAAM,KAAK,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC;IAC7C,IAAI,KAAK,EAAE,CAAC;QACV,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAuB,CAAC,IAAI,EAAE,EAAE;YAC3D,OAAO;gBACL,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,OAAO,EAAE,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;gBACnC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY;aAChC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,EAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;IACtE,CAAC;AACH,CAAC,CAAC;AAEF,uEAAuE;AACvE,MAAM,UAAU,iBAAiB,CAAC,KAAY;IAC5C,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;QACf,KAAK,CAAC,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;QACnB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentExplorerViewQuery,\n  ComponentType,\n  DebugSignalGraphNode,\n  DevToolsNode,\n  DirectivePosition,\n  DirectiveType,\n  ElementPosition,\n  Events,\n  MessageBus,\n  ProfilerFrame,\n  Route,\n  SerializedInjector,\n  SerializedProviderRecord,\n  SignalNodePosition,\n  TransferStateValue,\n} from '../../../protocol';\nimport {debounceTime} from 'rxjs/operators';\nimport {\n  appIsAngularInDevMode,\n  appIsAngularIvy,\n  appIsSupportedAngularVersion,\n  getAngularVersion,\n  isHydrationEnabled,\n} from '../../../shared-utils';\n\nimport {ComponentInspector} from './component-inspector/component-inspector';\nimport {\n  getElementInjectorElement,\n  getInjectorFromElementNode,\n  getInjectorProviders,\n  getInjectorResolutionPath,\n  getLatestComponentState,\n  idToInjector,\n  injectorsSeen,\n  isElementInjector,\n  isOnPushDirective,\n  nodeInjectorToResolutionPath,\n  queryDirectiveForest,\n  serializeProviderRecord,\n  serializeResolutionPath,\n  updateState,\n} from './component-tree/component-tree';\nimport {unHighlight} from './highlighter';\nimport {disableTimingAPI, enableTimingAPI, initializeOrGetDirectiveForestHooks} from './hooks';\nimport {start as startProfiling, stop as stopProfiling} from './hooks/capture';\nimport {ComponentTreeNode} from './interfaces';\nimport {\n  getElementRefByName,\n  getComponentRefByName,\n  parseRoutes,\n  RoutePropertyType,\n} from './router-tree';\nimport {ngDebugClient, ngDebugDependencyInjectionApiIsSupported} from './ng-debug-api/ng-debug-api';\nimport {setConsoleReference} from './set-console-reference';\nimport {serializeDirectiveState, serializeValue} from './state-serializer/state-serializer';\nimport {runOutsideAngular, unwrapSignal} from './utils';\nimport {DirectiveForestHooks} from './hooks/hooks';\nimport {getSupportedApis} from './ng-debug-api/supported-apis';\nimport {sanitizeObject} from './serialization-utils';\n\ntype InspectorRef = {ref: ComponentInspector | null};\n\nexport const subscribeToClientEvents = (\n  messageBus: MessageBus<Events>,\n  depsForTestOnly?: {\n    directiveForestHooks?: typeof DirectiveForestHooks;\n  },\n): void => {\n  const inspector: InspectorRef = {ref: null};\n\n  messageBus.on('shutdown', shutdownCallback(messageBus));\n\n  messageBus.on(\n    'getLatestComponentExplorerView',\n    getLatestComponentExplorerViewCallback(messageBus),\n  );\n\n  messageBus.on('queryNgAvailability', checkForAngularCallback(messageBus));\n\n  messageBus.on('startProfiling', startProfilingCallback(messageBus));\n  messageBus.on('stopProfiling', stopProfilingCallback(messageBus));\n\n  messageBus.on('setSelectedComponent', selectedComponentCallback(inspector));\n\n  messageBus.on('getNestedProperties', getNestedPropertiesCallback(messageBus));\n  messageBus.on('getRoutes', getRoutesCallback(messageBus));\n  messageBus.on('navigateRoute', navigateRouteCallback(messageBus));\n\n  messageBus.on('getSignalNestedProperties', getSignalNestedPropertiesCallback(messageBus));\n\n  messageBus.on('updateState', updateState);\n\n  messageBus.on('enableTimingAPI', enableTimingAPI);\n  messageBus.on('disableTimingAPI', disableTimingAPI);\n\n  messageBus.on('getInjectorProviders', getInjectorProvidersCallback(messageBus));\n\n  messageBus.on('logProvider', logProvider);\n\n  messageBus.on('getTransferState', getTransferStateCallback(messageBus));\n\n  messageBus.on('log', ({message, level}) => {\n    console[level](`[Angular DevTools]: ${message}`);\n  });\n\n  messageBus.on('getSignalGraph', getSignalGraphCallback(messageBus));\n\n  if (appIsAngularInDevMode() && appIsSupportedAngularVersion() && appIsAngularIvy()) {\n    inspector.ref = setupInspector(messageBus);\n\n    // Often websites have `scroll` event listener which triggers\n    // Angular's change detection. We don't want to constantly send\n    // update requests, instead we want to request an update at most\n    // once every 250ms\n    runOutsideAngular(() => {\n      initializeOrGetDirectiveForestHooks(depsForTestOnly)\n        .profiler.changeDetection$.pipe(debounceTime(250))\n        .subscribe(() => messageBus.emit('componentTreeDirty'));\n    });\n  }\n};\n\n//\n// Callback Definitions\n//\n\nconst shutdownCallback = (messageBus: MessageBus<Events>) => () => {\n  messageBus.destroy();\n};\n\nconst getLatestComponentExplorerViewCallback =\n  (messageBus: MessageBus<Events>) => (query?: ComponentExplorerViewQuery) => {\n    // We want to force re-indexing of the component tree.\n    // Pressing the refresh button means the user saw stuck UI.\n\n    initializeOrGetDirectiveForestHooks().indexForest();\n\n    const forest = prepareForestForSerialization(\n      initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest(),\n      ngDebugDependencyInjectionApiIsSupported(),\n    );\n\n    // cleanup injector id mappings\n    for (const injectorId of idToInjector.keys()) {\n      if (!injectorsSeen.has(injectorId)) {\n        const injector = idToInjector.get(injectorId)!;\n        if (isElementInjector(injector)) {\n          const element = getElementInjectorElement(injector);\n          if (element) {\n            nodeInjectorToResolutionPath.delete(element);\n          }\n        }\n\n        idToInjector.delete(injectorId);\n      }\n    }\n    injectorsSeen.clear();\n\n    if (!query) {\n      messageBus.emit('latestComponentExplorerView', [{forest}]);\n      return;\n    }\n\n    const state = getLatestComponentState(\n      query,\n      initializeOrGetDirectiveForestHooks().getDirectiveForest(),\n    );\n\n    if (state) {\n      const {directiveProperties} = state;\n      messageBus.emit('latestComponentExplorerView', [{forest, properties: directiveProperties}]);\n    } else {\n      // if the node is not found in the tree, we assume its gone and send the tree as is.\n      messageBus.emit('latestComponentExplorerView', [{forest}]);\n    }\n  };\n\nconst checkForAngularCallback = (messageBus: MessageBus<Events>) => () =>\n  checkForAngular(messageBus);\nconst getRoutesCallback = (messageBus: MessageBus<Events>) => () => getRoutes(messageBus);\n\nconst navigateRouteCallback = (messageBus: MessageBus<Events>) => (path: string) => {\n  const router: any = getRouterInstance();\n  // If the router is not found or the navigateByUrl method is not available, we can't navigate\n  if (router) {\n    ngDebugClient().ɵnavigateByUrl?.(router, path);\n  } else {\n    console.warn('Router not found or navigateByUrl method not available');\n  }\n};\n\n/**\n * Opens the source code of a component or a directive in the editor.\n * @param name - The name of the component, provider, or directive to view source for.\n * @param type - The type of the element to view source for  component, provider, or directive.\n * @returns - The element instance of the component, provider, or directive.\n */\nexport const viewSourceFromRouter = (name: string, type: RoutePropertyType) => {\n  const router: any = getRouterInstance();\n\n  if (router == null) {\n    return;\n  }\n\n  let element;\n  if (type === 'component') {\n    element = getComponentRefByName(router.config, name);\n  } else {\n    element = getElementRefByName(type, router.config, name);\n  }\n  return element;\n};\n\nconst startProfilingCallback = (messageBus: MessageBus<Events>) => () =>\n  startProfiling((frame: ProfilerFrame) => {\n    messageBus.emit('sendProfilerChunk', [frame]);\n  });\n\nconst stopProfilingCallback = (messageBus: MessageBus<Events>) => () => {\n  messageBus.emit('profilerResults', [stopProfiling()]);\n};\n\nconst selectedComponentCallback = (inspector: InspectorRef) => (position: ElementPosition) => {\n  const node = queryDirectiveForest(\n    position,\n    initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest(),\n  );\n  setConsoleReference({node, position});\n  inspector.ref?.highlightByPosition(position);\n};\n\nconst getNestedPropertiesCallback =\n  (messageBus: MessageBus<Events>) => (position: DirectivePosition, propPath: string[]) => {\n    const emitEmpty = () => messageBus.emit('nestedProperties', [position, {props: {}}, propPath]);\n    const node = queryDirectiveForest(\n      position.element,\n      initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest(),\n    );\n    if (!node) {\n      return emitEmpty();\n    }\n    const current =\n      position.directive === undefined ? node.component : node.directives[position.directive];\n    if (!current) {\n      return emitEmpty();\n    }\n    let data = current.instance;\n    for (const prop of propPath) {\n      data = unwrapSignal(data[prop]);\n      if (!data) {\n        console.error('Cannot access the properties', propPath, 'of', node);\n      }\n    }\n    messageBus.emit('nestedProperties', [\n      position,\n      {props: serializeDirectiveState(data)},\n      propPath,\n    ]);\n    return;\n  };\n\nconst getSignalNestedPropertiesCallback =\n  (messageBus: MessageBus<Events>) => (position: SignalNodePosition, propPath: string[]) => {\n    const emitEmpty = () =>\n      messageBus.emit('signalNestedProperties', [position, {props: {}}, propPath]);\n    const node = queryDirectiveForest(\n      position.element,\n      initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest(),\n    );\n    if (!node) {\n      return emitEmpty();\n    }\n\n    const injector = getInjectorFromElementNode(node.nativeElement!);\n    if (!injector) {\n      return emitEmpty();\n    }\n\n    const ng = ngDebugClient();\n\n    const signalGraph = ng.ɵgetSignalGraph?.(injector);\n    if (!signalGraph) {\n      return emitEmpty();\n    }\n\n    const current = signalGraph.nodes.find((node) => node.id === position.signalId);\n    if (!current) {\n      return emitEmpty();\n    }\n\n    let data = current.value as object;\n    for (const prop of propPath) {\n      data = (data as Record<string, object>)[prop];\n      if (!data) {\n        console.error('Cannot access the properties', propPath, 'of', node);\n      }\n    }\n    messageBus.emit('signalNestedProperties', [\n      position,\n      {props: serializeDirectiveState(data)},\n      propPath,\n    ]);\n    return;\n  };\n\n//\n// Subscribe Helpers\n//\n\n// todo: parse router tree with framework APIs after they are developed\nconst getRoutes = (messageBus: MessageBus<Events>) => {\n  const forest = prepareForestForSerialization(\n    initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest(),\n    ngDebugDependencyInjectionApiIsSupported(),\n  );\n  if (forest.length === 0) return;\n\n  const rootInjector = forest[0].resolutionPath?.find((i) => i.name === 'Root');\n  if (!rootInjector) return;\n\n  const route = getRouterConfigFromRoot(rootInjector);\n  if (!route) return;\n\n  const sanitizedRoute = sanitizeRouteData(route);\n\n  messageBus.emit('updateRouterTree', [[sanitizedRoute]]);\n};\n\nconst getSerializedProviderRecords = (injector: SerializedInjector) => {\n  if (!idToInjector.has(injector.id)) {\n    return;\n  }\n\n  const providerRecords = getInjectorProviders(idToInjector.get(injector.id)!);\n  const allProviderRecords: SerializedProviderRecord[] = [];\n  const tokenToRecords: Map<unknown, SerializedProviderRecord[]> = new Map();\n\n  for (const [index, providerRecord] of providerRecords.entries()) {\n    const record = serializeProviderRecord(providerRecord, index, injector.type === 'environment');\n    allProviderRecords.push(record);\n\n    const records = tokenToRecords.get(providerRecord.token) ?? [];\n    records.push(record);\n    tokenToRecords.set(providerRecord.token, records);\n  }\n  const serializedProviderRecords: SerializedProviderRecord[] = [];\n  for (const [token, records] of tokenToRecords.entries()) {\n    const multiRecords = records.filter((record) => record.multi);\n    const nonMultiRecords = records.filter((record) => !record.multi);\n    for (const record of nonMultiRecords) {\n      serializedProviderRecords.push(record);\n    }\n    const [firstMultiRecord] = multiRecords;\n    if (firstMultiRecord !== undefined) {\n      // All multi providers will have the same token, so we can just use the first one.\n      serializedProviderRecords.push({\n        token: firstMultiRecord.token,\n        type: 'multi',\n        multi: true,\n        // todo(aleksanderbodurri): implememnt way to differentiate multi providers that\n        // provided as viewProviders\n        isViewProvider: firstMultiRecord.isViewProvider,\n        index: records.map((record) => record.index as number),\n      });\n    }\n  }\n\n  return serializedProviderRecords;\n};\n\nconst getProviderValue = (\n  serializedInjector: SerializedInjector,\n  serializedProvider: SerializedProviderRecord,\n) => {\n  if (!idToInjector.has(serializedInjector.id)) {\n    return;\n  }\n\n  const injector = idToInjector.get(serializedInjector.id)!;\n  const providerRecords = getInjectorProviders(injector);\n\n  if (typeof serializedProvider.index === 'number') {\n    const provider = providerRecords[serializedProvider.index];\n    return injector.get(provider.token, null, {optional: true});\n  } else if (Array.isArray(serializedProvider.index)) {\n    const provider = serializedProvider.index.map((index) => providerRecords[index]);\n    return injector.get(provider[0].token, null, {optional: true});\n  } else {\n    return;\n  }\n};\n\nconst getRouterConfigFromRoot = (injector: SerializedInjector): Route | void => {\n  const serializedProviderRecords = getSerializedProviderRecords(injector) ?? [];\n  const routerInstance = serializedProviderRecords.find(\n    (provider) => provider.token === 'Router', // get the instance of router using token\n  );\n\n  if (!routerInstance) {\n    return;\n  }\n\n  const routerProvider = getProviderValue(injector, routerInstance);\n\n  return parseRoutes(routerProvider);\n};\n\nconst checkForAngular = (messageBus: MessageBus<Events>): void => {\n  const ngVersion = getAngularVersion();\n  const appIsIvy = appIsAngularIvy();\n\n  if (!ngVersion) {\n    return;\n  }\n\n  if (appIsIvy && appIsAngularInDevMode() && appIsSupportedAngularVersion()) {\n    initializeOrGetDirectiveForestHooks();\n  }\n\n  messageBus.emit('ngAvailability', [\n    {\n      version: ngVersion.toString(),\n      devMode: appIsAngularInDevMode(),\n      ivy: appIsIvy,\n      hydration: isHydrationEnabled(),\n      supportedApis: getSupportedApis(),\n    },\n  ]);\n};\n\nconst setupInspector = (messageBus: MessageBus<Events>): ComponentInspector => {\n  const inspector = new ComponentInspector({\n    onComponentEnter: (id: number) => {\n      messageBus.emit('highlightComponent', [id]);\n    },\n    onComponentLeave: () => {\n      messageBus.emit('removeComponentHighlight');\n    },\n    onComponentSelect: (id: number) => {\n      messageBus.emit('selectComponent', [id]);\n    },\n  });\n\n  messageBus.on('inspectorStart', inspector.startInspecting);\n  messageBus.on('inspectorEnd', inspector.stopInspecting);\n\n  messageBus.on('createHighlightOverlay', (position: ElementPosition) => {\n    inspector.highlightByPosition(position);\n  });\n  messageBus.on('removeHighlightOverlay', unHighlight);\n\n  messageBus.on('createHydrationOverlay', inspector.highlightHydrationNodes);\n  messageBus.on('removeHydrationOverlay', inspector.removeHydrationHighlights);\n\n  return inspector;\n};\n\nexport interface SerializableDirectiveInstanceType extends DirectiveType {\n  id: number;\n}\n\nexport interface SerializableComponentInstanceType extends ComponentType {\n  id: number;\n}\n\nexport interface SerializableComponentTreeNode\n  extends DevToolsNode<SerializableDirectiveInstanceType, SerializableComponentInstanceType> {\n  children: SerializableComponentTreeNode[];\n  nativeElement?: never;\n  // Since the nativeElement is not serializable, we will use this boolean as backup\n  hasNativeElement: boolean;\n}\n\nfunction getRouterInstance() {\n  const forest = initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest();\n  const rootNode = forest[0];\n\n  if (!rootNode || !rootNode.nativeElement) {\n    return null;\n  }\n\n  const injector = getInjectorFromElementNode(rootNode.nativeElement);\n  if (!injector) {\n    return null;\n  }\n\n  const ng = ngDebugClient();\n  return (ng as any).ɵgetRouterInstance?.(injector);\n}\n\n// Here we drop properties to prepare the tree for serialization.\n// We don't need the component instance, so we just traverse the tree\n// and leave the component name.\nconst prepareForestForSerialization = (\n  roots: ComponentTreeNode[],\n  includeResolutionPath = false,\n): SerializableComponentTreeNode[] => {\n  const serializedNodes: SerializableComponentTreeNode[] = [];\n  for (const node of roots) {\n    const serializedNode: SerializableComponentTreeNode = {\n      element: node.element,\n      component: node.component\n        ? {\n            name: node.component.name,\n            isElement: node.component.isElement,\n            id: initializeOrGetDirectiveForestHooks().getDirectiveId(node.component.instance)!,\n          }\n        : null,\n      directives: node.directives.map((d) => ({\n        name: d.name,\n        id: initializeOrGetDirectiveForestHooks().getDirectiveId(d.instance)!,\n      })),\n      children: prepareForestForSerialization(node.children, includeResolutionPath),\n      hydration: node.hydration,\n      defer: node.defer,\n      onPush: node.component ? isOnPushDirective(node.component) : false,\n\n      // native elements are not serializable\n      hasNativeElement: !!node.nativeElement,\n    };\n    serializedNodes.push(serializedNode);\n\n    if (includeResolutionPath) {\n      serializedNode.resolutionPath = getNodeDIResolutionPath(node);\n    }\n  }\n\n  return serializedNodes;\n};\n\nfunction getNodeDIResolutionPath(node: ComponentTreeNode): SerializedInjector[] | undefined {\n  // Some nodes are not linked to HTMLElements, for example @defer blocks\n  if (!node.nativeElement) {\n    return undefined;\n  }\n\n  const nodeInjector = getInjectorFromElementNode(node.nativeElement);\n  if (!nodeInjector) {\n    return [];\n  }\n  // There are legit cases where an angular node will have non-ElementInjector injectors.\n  // For example, components created with createComponent require the API consumer to\n  // pass in an element injector, else it sets the element injector of the component\n  // to the NullInjector\n  if (!isElementInjector(nodeInjector)) {\n    return [];\n  }\n\n  const element = getElementInjectorElement(nodeInjector);\n\n  if (!nodeInjectorToResolutionPath.has(element)) {\n    const resolutionPaths = getInjectorResolutionPath(nodeInjector);\n    nodeInjectorToResolutionPath.set(element, serializeResolutionPath(resolutionPaths));\n  }\n\n  const serializedPath = nodeInjectorToResolutionPath.get(element)!;\n  for (const injector of serializedPath) {\n    injectorsSeen.add(injector.id);\n  }\n\n  return serializedPath;\n}\n\nconst getInjectorProvidersCallback =\n  (messageBus: MessageBus<Events>) => (injector: SerializedInjector) => {\n    if (!idToInjector.has(injector.id)) {\n      return;\n    }\n\n    const providerRecords = getInjectorProviders(idToInjector.get(injector.id)!);\n    const allProviderRecords: SerializedProviderRecord[] = [];\n\n    const tokenToRecords: Map<any, SerializedProviderRecord[]> = new Map();\n\n    for (const [index, providerRecord] of providerRecords.entries()) {\n      const record = serializeProviderRecord(\n        providerRecord,\n        index,\n        injector.type === 'environment',\n      );\n\n      allProviderRecords.push(record);\n\n      const records = tokenToRecords.get(providerRecord.token) ?? [];\n      records.push(record);\n      tokenToRecords.set(providerRecord.token, records);\n    }\n\n    const serializedProviderRecords: SerializedProviderRecord[] = [];\n\n    for (const [token, records] of tokenToRecords.entries()) {\n      const multiRecords = records.filter((record) => record.multi);\n      const nonMultiRecords = records.filter((record) => !record.multi);\n\n      for (const record of nonMultiRecords) {\n        serializedProviderRecords.push(record);\n      }\n\n      const [firstMultiRecord] = multiRecords;\n      if (firstMultiRecord !== undefined) {\n        // All multi providers will have the same token, so we can just use the first one.\n        serializedProviderRecords.push({\n          token: firstMultiRecord.token,\n          type: 'multi',\n          multi: true,\n          // todo(aleksanderbodurri): implememnt way to differentiate multi providers that\n          // provided as viewProviders\n          isViewProvider: firstMultiRecord.isViewProvider,\n          index: records.map((record) => record.index as number),\n        });\n      }\n    }\n\n    messageBus.emit('latestInjectorProviders', [injector, serializedProviderRecords]);\n  };\n\nconst logProvider = (\n  serializedInjector: SerializedInjector,\n  serializedProvider: SerializedProviderRecord,\n): void => {\n  if (!idToInjector.has(serializedInjector.id)) {\n    return;\n  }\n\n  const injector = idToInjector.get(serializedInjector.id)!;\n\n  const providerRecords = getInjectorProviders(injector);\n\n  console.group(\n    `%c${serializedInjector.name}`,\n    `color: ${\n      serializedInjector.type === 'element' ? '#a7d5a9' : '#f05057'\n    }; font-size: 1.25rem; font-weight: bold;`,\n  );\n  // tslint:disable-next-line:no-console\n  console.log('injector: ', injector);\n\n  if (typeof serializedProvider.index === 'number') {\n    const provider = providerRecords[serializedProvider.index];\n\n    // tslint:disable-next-line:no-console\n    console.log('provider: ', provider);\n    // tslint:disable-next-line:no-console\n    console.log(`value: `, injector.get(provider.token, null, {optional: true}));\n  } else if (Array.isArray(serializedProvider.index)) {\n    const providers = serializedProvider.index.map((index) => providerRecords[index]);\n\n    // tslint:disable-next-line:no-console\n    console.log('providers: ', providers);\n    // tslint:disable-next-line:no-console\n    console.log(`value: `, injector.get(providers[0].token, null, {optional: true}));\n  }\n\n  console.groupEnd();\n};\n\nconst getTransferStateCallback = (messageBus: MessageBus<Events>) => () => {\n  const ng = ngDebugClient();\n\n  const forest = initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest();\n  if (forest.length === 0) {\n    messageBus.emit('transferStateData', [null]);\n    return;\n  }\n\n  const rootNode = forest[0];\n  if (!rootNode || !rootNode.nativeElement) {\n    messageBus.emit('transferStateData', [null]);\n    return;\n  }\n\n  const injector = getInjectorFromElementNode(rootNode.nativeElement);\n  if (!injector) {\n    messageBus.emit('transferStateData', [null]);\n    return;\n  }\n\n  const transferStateData = (ng.ɵgetTransferState?.(injector) ?? null) as Record<\n    string,\n    TransferStateValue\n  > | null;\n\n  if (\n    transferStateData &&\n    typeof transferStateData === 'object' &&\n    Object.keys(transferStateData).length > 0\n  ) {\n    messageBus.emit('transferStateData', [transferStateData]);\n  } else {\n    messageBus.emit('transferStateData', [null]);\n  }\n};\n\nconst getInjectorInstance = (\n  serializedInjector: SerializedInjector,\n  serializedProvider: SerializedProviderRecord,\n) => {\n  if (!idToInjector.has(serializedInjector.id)) {\n    return;\n  }\n\n  const injector = idToInjector.get(serializedInjector.id)!;\n  const providerRecords = getInjectorProviders(injector);\n\n  if (typeof serializedProvider.index === 'number') {\n    const provider = providerRecords[serializedProvider.index];\n    return injector.get(provider.token, null, {optional: true});\n  } else if (Array.isArray(serializedProvider.index)) {\n    const providers = serializedProvider.index.map((index) => providerRecords[index]);\n    return injector.get(providers[0].token, null, {optional: true});\n  }\n  return null;\n};\n\nconst getSignalGraphCallback = (messageBus: MessageBus<Events>) => (element: ElementPosition) => {\n  const ng = ngDebugClient();\n\n  // get injector from position\n  const node = queryDirectiveForest(\n    element,\n    initializeOrGetDirectiveForestHooks().getIndexedDirectiveForest(),\n  );\n  if (!node) {\n    return;\n  }\n\n  const injector = getInjectorFromElementNode(node.nativeElement!);\n\n  if (!injector) {\n    return;\n  }\n\n  const graph = ng.ɵgetSignalGraph?.(injector);\n  if (graph) {\n    const nodes = graph.nodes.map<DebugSignalGraphNode>((node) => {\n      return {\n        id: node.id,\n        kind: node.kind,\n        label: node.label,\n        epoch: node.epoch,\n        preview: serializeValue(node.value),\n        debuggable: !!node.debuggableFn,\n      };\n    });\n    messageBus.emit('latestSignalGraph', [{nodes, edges: graph.edges}]);\n  }\n};\n\n// Route data needs to be serializable to be sent over the message bus.\nexport function sanitizeRouteData(route: Route): Route {\n  if (route.data) {\n    route.data = sanitizeObject(route.data);\n  }\n\n  if (route.children) {\n    route.children = route.children.map(sanitizeRouteData);\n  }\n\n  return route;\n}\n"]}