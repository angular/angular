{"version":3,"file":"ltree.js","sourceRoot":"","sources":["ltree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SemVerDSL} from 'semver-dsl';\n\nimport {getDirectiveName} from '../highlighter';\nimport {ComponentInstanceType, ComponentTreeNode, DirectiveInstanceType} from '../interfaces';\nimport {isCustomElement} from '../utils';\nimport {VERSION} from '../version';\n\nlet HEADER_OFFSET = 19;\n\nconst latest = () => {\n  HEADER_OFFSET = 20;\n};\n\nSemVerDSL(VERSION).gte('10.0.0-next.4', latest);\n\n// In g3 everyone has version 0.0.0, using the currently synced commits in the g3 codebase.\nSemVerDSL(VERSION).eq('0.0.0', latest);\n\nconst TYPE = 1;\nconst ELEMENT = 0;\nconst LVIEW_TVIEW = 1;\n\n// Big oversimplification of the LView structure.\ntype LView = Array<any>;\n\nexport const isLContainer = (value: unknown): boolean => {\n  return Array.isArray(value) && value[TYPE] === true;\n};\n\nconst isLView = (value: unknown): value is LView => {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n};\n\nexport const METADATA_PROPERTY_NAME = '__ngContext__';\nexport function getLViewFromDirectiveOrElementInstance(dir: any): null | LView {\n  if (!dir) {\n    return null;\n  }\n  const context = dir[METADATA_PROPERTY_NAME];\n  if (!context) {\n    return null;\n  }\n  if (isLView(context)) {\n    return context;\n  }\n  return context.lView;\n}\n\nexport const getDirectiveHostElement = (dir: any) => {\n  if (!dir) {\n    return false;\n  }\n  const ctx = dir[METADATA_PROPERTY_NAME];\n  if (!ctx) {\n    return false;\n  }\n  if (ctx[0] !== null) {\n    return ctx[0];\n  }\n  const components = ctx[LVIEW_TVIEW].components;\n  if (!components || components.length !== 1) {\n    return false;\n  }\n  return ctx[components[0]][0];\n};\n\nexport class LTreeStrategy {\n  supports(element: Element): boolean {\n    return typeof (element as any).__ngContext__ !== 'undefined';\n  }\n\n  private _getNode(lView: LView, data: any, idx: number): ComponentTreeNode {\n    const directives: DirectiveInstanceType[] = [];\n    let component: ComponentInstanceType | null = null;\n    const tNode = data[idx];\n    const node = lView[idx][ELEMENT];\n    const element = (node.tagName || node.nodeName).toLowerCase();\n    if (!tNode) {\n      return {\n        nativeElement: node,\n        children: [],\n        element,\n        directives: [],\n        component: null,\n        hydration: null, // We know there is no hydration if we use the LTreeStrategy\n        defer: null, // neither there will be any defer\n      };\n    }\n    for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n      const instance = lView[i];\n      const dirMeta = data[i];\n      if (dirMeta && dirMeta.template) {\n        component = {\n          name: element,\n          isElement: isCustomElement(node),\n          instance,\n        };\n      } else if (dirMeta) {\n        directives.push({\n          name: getDirectiveName(instance),\n          instance,\n        });\n      }\n    }\n    return {\n      nativeElement: node,\n      children: [],\n      element,\n      directives,\n      component,\n      hydration: null, // We know there is no hydration if we use the LTreeStrategy\n      defer: null, // neither there will be any defer\n    };\n  }\n\n  private _extract(lViewOrLContainer: any, nodes: ComponentTreeNode[] = []): ComponentTreeNode[] {\n    if (isLContainer(lViewOrLContainer)) {\n      for (let i = 9; i < lViewOrLContainer.length; i++) {\n        if (lViewOrLContainer[i]) {\n          this._extract(lViewOrLContainer[i], nodes);\n        }\n      }\n      return nodes;\n    }\n    const lView = lViewOrLContainer;\n    const tView = lView[LVIEW_TVIEW];\n    for (let i = HEADER_OFFSET; i < lView.length; i++) {\n      const lViewItem = lView[i];\n      if (tView.data && Array.isArray(lViewItem) && lViewItem[ELEMENT] instanceof Node) {\n        const node = this._getNode(lView, tView.data, i);\n\n        // TODO(mgechev): verify if this won't make us skip projected content.\n        if (node.component || node.directives.length) {\n          nodes.push(node);\n          this._extract(lViewItem, node.children);\n        }\n      }\n    }\n    return nodes;\n  }\n\n  build(element: Element, _: number): ComponentTreeNode[] {\n    const ctx = (element as any).__ngContext__;\n    const rootLView = ctx.lView ?? ctx;\n    return this._extract(rootLView);\n  }\n}\n"]}