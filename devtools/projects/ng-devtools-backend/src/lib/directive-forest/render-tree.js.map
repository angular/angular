{"version":3,"file":"render-tree.js","sourceRoot":"","sources":["render-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵFrameworkAgnosticGlobalUtils as FrameworkAgnosticGlobalUtils,\n  ɵDeferBlockData as DeferBlockData,\n  ɵHydratedNode as HydrationNode,\n} from '@angular/core';\nimport {CurrentDeferBlock, HydrationStatus} from '../../../../protocol';\n\nimport {ComponentTreeNode} from '../interfaces';\nimport {ngDebugClient} from '../ng-debug-api/ng-debug-api';\nimport {isCustomElement} from '../utils';\n\nconst extractViewTree = (\n  domNode: Node | Element,\n  result: ComponentTreeNode[],\n  deferBlocks: DeferBlocksIterator,\n  rootId: number,\n  getComponent?: FrameworkAgnosticGlobalUtils['getComponent'],\n  getDirectives?: FrameworkAgnosticGlobalUtils['getDirectives'],\n  getDirectiveMetadata?: FrameworkAgnosticGlobalUtils['getDirectiveMetadata'],\n): ComponentTreeNode[] => {\n  // Ignore DOM Node if it came from a different frame. Use instanceof Node to check this.\n  if (!(domNode instanceof Node)) {\n    return result;\n  }\n\n  const directives = getDirectives?.(domNode) ?? [];\n  if (!directives.length && !(domNode instanceof Element)) {\n    return result;\n  }\n  const componentTreeNode: ComponentTreeNode = {\n    children: [],\n    component: null,\n    directives: directives.map((dir) => {\n      return {\n        instance: dir,\n        name: dir.constructor.name,\n      };\n    }),\n    element: domNode.nodeName.toLowerCase(),\n    nativeElement: domNode,\n    hydration: hydrationStatus(domNode),\n    defer: null,\n  };\n\n  if (!(domNode instanceof Element)) {\n    // In case we show the Comment nodes\n    result.push(componentTreeNode);\n    return result;\n  }\n\n  const isDehydratedElement = componentTreeNode.hydration?.status === 'dehydrated';\n  const component = getComponent?.(domNode);\n  if (component) {\n    componentTreeNode.component = {\n      instance: component,\n      isElement: isCustomElement(domNode),\n      name: getDirectiveMetadata?.(component)?.name ?? domNode.nodeName.toLowerCase(),\n    };\n  }\n\n  const isDisplayableNode = component || componentTreeNode.directives.length || isDehydratedElement;\n  if (isDisplayableNode) {\n    result.push(componentTreeNode);\n  }\n\n  // Nodes that are part of a defer block will be added as children of the defer block\n  // and should be skipped from the regular code path\n  const deferredNodesToSkip = new Set<Node>();\n  const appendTo = isDisplayableNode ? componentTreeNode.children : result;\n\n  domNode.childNodes.forEach((node) => {\n    groupDeferChildrenIfNeeded(\n      node,\n      deferredNodesToSkip,\n      appendTo,\n      deferBlocks,\n      rootId,\n      getComponent,\n      getDirectives,\n      getDirectiveMetadata,\n    );\n\n    if (!deferredNodesToSkip.has(node)) {\n      extractViewTree(\n        node,\n        appendTo,\n        deferBlocks,\n        rootId,\n        getComponent,\n        getDirectives,\n        getDirectiveMetadata,\n      );\n    }\n  });\n\n  return result;\n};\n\n/**\n * Group Nodes under a defer block if they are part of it.\n *\n * @param node\n * @param deferredNodesToSkip Will mutate the set with the nodes that are grouped into the created deferblock.\n * @param deferBlocks\n * @param appendTo\n * @param getComponent\n * @param getDirectives\n * @param getDirectiveMetadata\n */\nfunction groupDeferChildrenIfNeeded(\n  node: Node,\n  deferredNodesToSkip: Set<Node>,\n  appendTo: ComponentTreeNode[],\n  deferBlocks: DeferBlocksIterator,\n  rootId: number,\n  getComponent?: FrameworkAgnosticGlobalUtils['getComponent'],\n  getDirectives?: FrameworkAgnosticGlobalUtils['getDirectives'],\n  getDirectiveMetadata?: FrameworkAgnosticGlobalUtils['getDirectiveMetadata'],\n) {\n  const currentDeferBlock = deferBlocks.currentBlock;\n  const isFirstDefferedChild = node === currentDeferBlock?.rootNodes[0];\n  if (isFirstDefferedChild) {\n    deferBlocks.advance();\n\n    // When encountering the first child of a defer block\n    // We create a synthetic TreeNode reprensenting the defer block\n    const childrenTree: ComponentTreeNode[] = [];\n    currentDeferBlock.rootNodes.forEach((child) => {\n      extractViewTree(\n        child,\n        childrenTree,\n        deferBlocks,\n        rootId,\n        getComponent,\n        getDirectives,\n        getDirectiveMetadata,\n      );\n    });\n\n    const deferBlockTreeNode = {\n      children: childrenTree,\n      component: null,\n      directives: [],\n      element: '@defer',\n      nativeElement: undefined,\n      hydration: null,\n      defer: {\n        id: `deferId-${rootId}-${deferBlocks.currentIndex}`,\n        state: currentDeferBlock.state,\n        currentBlock: currentBlock(currentDeferBlock),\n        triggers: groupTriggers(currentDeferBlock.triggers),\n        blocks: {\n          hasErrorBlock: currentDeferBlock.hasErrorBlock,\n          placeholderBlock: currentDeferBlock.placeholderBlock,\n          loadingBlock: currentDeferBlock.loadingBlock,\n        },\n      },\n    } satisfies ComponentTreeNode;\n\n    currentDeferBlock?.rootNodes.forEach((child) => deferredNodesToSkip.add(child));\n    appendTo.push(deferBlockTreeNode);\n  }\n}\n\nfunction hydrationStatus(element: Node): HydrationStatus {\n  if (!(element instanceof Element)) {\n    return null;\n  }\n\n  if (!!element.getAttribute('ngh')) {\n    return {status: 'dehydrated'};\n  }\n\n  const hydrationInfo = (element as HydrationNode).__ngDebugHydrationInfo__;\n  switch (hydrationInfo?.status) {\n    case 'hydrated':\n      return {status: 'hydrated'};\n    case 'skipped':\n      return {status: 'skipped'};\n    case 'mismatched':\n      return {\n        status: 'mismatched',\n        expectedNodeDetails: hydrationInfo.expectedNodeDetails,\n        actualNodeDetails: hydrationInfo.actualNodeDetails,\n      };\n    default:\n      return null;\n  }\n}\n\nfunction groupTriggers(triggers: string[]) {\n  const defer: string[] = [];\n  const hydrate: string[] = [];\n  const prefetch: string[] = [];\n\n  for (let trigger of triggers) {\n    if (trigger.startsWith('hydrate')) {\n      hydrate.push(trigger);\n    } else if (trigger.startsWith('prefetch')) {\n      prefetch.push(trigger);\n    } else {\n      defer.push(trigger);\n    }\n  }\n  return {defer, hydrate, prefetch};\n}\n\nfunction currentBlock(deferBlock: DeferBlockData): CurrentDeferBlock | null {\n  if (['placeholder', 'loading', 'error'].includes(deferBlock.state)) {\n    return deferBlock.state as 'placeholder' | 'loading' | 'error';\n  }\n  return null;\n}\nexport class RTreeStrategy {\n  supports(): boolean {\n    return (['getDirectiveMetadata', 'getComponent'] as const).every(\n      (method) => typeof ngDebugClient()[method] === 'function',\n    );\n  }\n\n  build(element: Element, rootId: number = 0): ComponentTreeNode[] {\n    const ng = ngDebugClient();\n    const deferBlocks = ng.ɵgetDeferBlocks?.(element) ?? [];\n\n    return extractViewTree(\n      element,\n      [],\n      new DeferBlocksIterator(deferBlocks),\n      rootId,\n      ng.getComponent,\n      ng.getDirectives,\n      ng.getDirectiveMetadata,\n    );\n  }\n}\n\nclass DeferBlocksIterator {\n  public currentIndex = 0;\n  private blocks: DeferBlockData[] = [];\n  constructor(blocks: DeferBlockData[]) {\n    this.blocks = blocks;\n  }\n\n  advance() {\n    this.currentIndex++;\n  }\n\n  get currentBlock() {\n    return this.blocks[this.currentIndex];\n  }\n}\n"]}