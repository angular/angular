{"version":3,"file":"render-tree.spec.js","sourceRoot":"","sources":["render-tree.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵDirectiveDebugMetadata as DirectiveDebugMetadata,\n  ɵFramework as Framework,\n  ɵFrameworkAgnosticGlobalUtils as FrameworkAgnosticGlobalUtils,\n} from '@angular/core';\nimport {RTreeStrategy} from './render-tree';\n\ndescribe('render tree extraction', () => {\n  let treeStrategy: RTreeStrategy;\n  let directiveMap: Map<Node, any[]>;\n  let componentMap: Map<Element, any>;\n  let directiveMetadataMap: Map<any, DirectiveDebugMetadata>;\n\n  beforeEach(() => {\n    treeStrategy = new RTreeStrategy();\n    directiveMap = new Map();\n    componentMap = new Map();\n    directiveMetadataMap = new Map();\n\n    (window as any).ng = {\n      getDirectiveMetadata(dir: any): DirectiveDebugMetadata | null {\n        return directiveMetadataMap.get(dir) ?? null;\n      },\n      getComponent(element: Element): any {\n        return componentMap.get(element);\n      },\n      getDirectives(node: Node): any {\n        return directiveMap.get(node) || [];\n      },\n    } satisfies Partial<FrameworkAgnosticGlobalUtils>;\n  });\n\n  afterEach(() => delete (window as any).ng);\n\n  it('should detect Angular Ivy apps', () => {\n    expect(treeStrategy.supports()).toBeTrue();\n  });\n\n  it('should fail with detection of non-Ivy apps', () => {\n    delete (window as any).ng.getDirectiveMetadata;\n    expect(treeStrategy.supports()).toBeFalse();\n  });\n\n  it('should extract render tree from an empty element', () => {\n    expect(treeStrategy.build(document.createElement('div'))).toEqual([]);\n  });\n\n  it('should extract trees without structural directives', () => {\n    const appNode = document.createElement('app');\n    const childNode = document.createElement('child');\n    const childDirectiveNode = document.createElement('div');\n    appNode.appendChild(childNode);\n    appNode.appendChild(childDirectiveNode);\n\n    const appComponent: any = {};\n    const childComponent: any = {};\n    const childDirective: any = {};\n    componentMap.set(appNode, appComponent);\n    componentMap.set(childNode, childComponent);\n    directiveMap.set(childDirectiveNode, [childDirective]);\n\n    const rtree = treeStrategy.build(appNode);\n    expect(rtree.length).toBe(1);\n    expect(rtree[0].children.length).toBe(2);\n    expect(rtree[0].children[0].component?.instance).toBe(childComponent);\n    expect(rtree[0].children[1].component).toBe(null);\n    expect(rtree[0].children[1].directives[0].instance).toBe(childDirective);\n  });\n\n  it('should skip nodes without directives', () => {\n    const appNode = document.createElement('app');\n    const childNode = document.createElement('div');\n    const childComponentNode = document.createElement('child');\n    appNode.appendChild(childNode);\n    childNode.appendChild(childComponentNode);\n\n    const appComponent: any = {};\n    const childComponent: any = {};\n    componentMap.set(appNode, appComponent);\n    componentMap.set(childComponentNode, childComponent);\n\n    const rtree = treeStrategy.build(appNode);\n    expect(rtree[0].children.length).toBe(1);\n    expect(rtree[0].children[0].children.length).toBe(0);\n  });\n\n  it('should use component name from `ng.getDirectiveMetadata`', () => {\n    const appNode = document.createElement('app');\n\n    const appComponent = {};\n    componentMap.set(appNode, appComponent);\n    directiveMetadataMap.set(appComponent, {\n      framework: Framework.Angular,\n      name: 'AppComponent',\n      inputs: {},\n      outputs: {},\n    });\n\n    const rtree = treeStrategy.build(appNode);\n    expect(rtree[0].component!.name).toBe('AppComponent');\n  });\n});\n"]}