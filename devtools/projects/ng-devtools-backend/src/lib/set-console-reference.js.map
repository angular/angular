{"version":3,"file":"set-console-reference.js","sourceRoot":"","sources":["set-console-reference.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AASlD,MAAM,wBAAwB,GAAG,KAAK,CAAC;AACvC,MAAM,QAAQ,GAAG,CAAC,CAAC;AAEnB,MAAM,wBAAwB,GAA2B,EAAE,CAAC;AAE5D,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,aAAmC,EAAE,EAAE;IACzE,IAAI,aAAa,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;QAChC,OAAO;IACT,CAAC;IACD,oBAAoB,CAAC,aAAa,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAAC,aAAmC,EAAE,EAAE;IACnE,oCAAoC,CAAC,aAAa,CAAC,CAAC;IACpD,wBAAwB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAChD,2BAA2B,CAAC,wBAAwB,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,oCAAoC,GAAG,CAAC,aAAmC,EAAE,EAAE;IACnF,MAAM,UAAU,GAAG,wBAAwB,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,EAAE,CACtE,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,CAC5D,CAAC;IACF,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE,CAAC;QACtB,wBAAwB,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;SAAM,IAAI,wBAAwB,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;QACxD,wBAAwB,CAAC,GAAG,EAAE,CAAC;IACjC,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,2BAA2B,GAAG,CAAC,cAAsC,EAAE,EAAE;IAC7E,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE,CAC9C,eAAe,CAAC,aAAa,CAAC,IAAI,EAAE,8BAA8B,CAAC,KAAK,CAAC,CAAC,CAC3E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,IAA8B,EAAE,GAAW,EAAE,EAAE;IACtE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE;QACjC,GAAG,EAAE,GAAG,EAAE;YACR,IAAI,IAAI,EAAE,SAAS,EAAE,CAAC;gBACpB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YACjC,CAAC;YACD,IAAI,IAAI,EAAE,aAAa,EAAE,CAAC;gBACxB,OAAO,IAAI,CAAC,aAAa,CAAC;YAC5B,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,YAAY,EAAE,IAAI;KACnB,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,8BAA8B,GAAG,CAAC,qBAA6B,EAAE,EAAE,CACvE,GAAG,wBAAwB,GAAG,qBAAqB,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementPosition} from '../../../protocol';\nimport {arrayEquals} from '../../../shared-utils';\n\nimport {ComponentTreeNode} from './interfaces';\n\ninterface ConsoleReferenceNode {\n  node: ComponentTreeNode | null;\n  position: ElementPosition;\n}\n\nconst CONSOLE_REFERENCE_PREFIX = '$ng';\nconst CAPACITY = 5;\n\nconst nodesForConsoleReference: ConsoleReferenceNode[] = [];\n\nexport const setConsoleReference = (referenceNode: ConsoleReferenceNode) => {\n  if (referenceNode.node === null) {\n    return;\n  }\n  _setConsoleReference(referenceNode);\n};\n\nconst _setConsoleReference = (referenceNode: ConsoleReferenceNode) => {\n  prepareCurrentReferencesForInsertion(referenceNode);\n  nodesForConsoleReference.unshift(referenceNode);\n  assignConsoleReferencesFrom(nodesForConsoleReference);\n};\n\nconst prepareCurrentReferencesForInsertion = (referenceNode: ConsoleReferenceNode) => {\n  const foundIndex = nodesForConsoleReference.findIndex((nodeToLookFor) =>\n    arrayEquals(nodeToLookFor.position, referenceNode.position),\n  );\n  if (foundIndex !== -1) {\n    nodesForConsoleReference.splice(foundIndex, 1);\n  } else if (nodesForConsoleReference.length === CAPACITY) {\n    nodesForConsoleReference.pop();\n  }\n};\n\nconst assignConsoleReferencesFrom = (referenceNodes: ConsoleReferenceNode[]) => {\n  referenceNodes.forEach((referenceNode, index) =>\n    setDirectiveKey(referenceNode.node, getConsoleReferenceWithIndexOf(index)),\n  );\n};\n\nconst setDirectiveKey = (node: ComponentTreeNode | null, key: string) => {\n  Object.defineProperty(window, key, {\n    get: () => {\n      if (node?.component) {\n        return node.component.instance;\n      }\n      if (node?.nativeElement) {\n        return node.nativeElement;\n      }\n      return node;\n    },\n    configurable: true,\n  });\n};\n\nconst getConsoleReferenceWithIndexOf = (consoleReferenceIndex: number) =>\n  `${CONSOLE_REFERENCE_PREFIX}${consoleReferenceIndex}`;\n"]}