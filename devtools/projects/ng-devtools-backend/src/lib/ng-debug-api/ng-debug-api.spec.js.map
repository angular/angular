{"version":3,"file":"ng-debug-api.spec.js","sourceRoot":"","sources":["ng-debug-api.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵFrameworkAgnosticGlobalUtils} from '@angular/core';\nimport {\n  ngDebugDependencyInjectionApiIsSupported,\n  ngDebugProfilerApiIsSupported,\n  ngDebugRoutesApiIsSupported,\n  ngDebugSignalGraphApiIsSupported,\n  ngDebugSignalPropertiesInspectionApiIsSupported,\n  ngDebugTransferStateApiIsSupported,\n} from './ng-debug-api';\nimport {Framework} from '../component-tree/core-enums';\n\ntype Ng = ɵFrameworkAgnosticGlobalUtils;\n\n/** Add a root element to the body. */\nconst mockRoot = () => {\n  document.body.replaceChildren();\n  const root = document.createElement('div');\n  root.setAttribute('ng-version', '');\n  document.body.appendChild(root);\n};\n\n/** Creates an `ng` object with a `getDirectiveMetadata` mock. */\nconst fakeNgGlobal = (framework: Framework): Partial<Ng> => {\n  const base: Partial<Ng> = {\n    getComponent<T>(_element: any): any {\n      return {};\n    },\n    getDirectiveMetadata(_directiveOrComponentInstance: any): any {\n      return {\n        framework,\n      };\n    },\n  };\n\n  // Only Angular and ACX have route debug functions\n  if (framework === Framework.Angular || framework === Framework.ACX) {\n    return {\n      ...base,\n      ɵgetLoadedRoutes(route: any): any {\n        return [];\n      },\n      ɵnavigateByUrl(router: any, url: string): any {},\n      ɵgetRouterInstance(injector: any): any {\n        return {};\n      },\n    };\n  }\n\n  // Wiz does not have route debug functions\n  return base;\n};\n\ndescribe('ng-debug-api', () => {\n  afterEach(() => {\n    delete (globalThis as any).ng;\n  });\n\n  describe('ngDebugDependencyInjectionApiIsSupported', () => {\n    const goldenNg: Partial<Record<keyof Ng, () => void>> = {\n      getInjector() {},\n      ɵgetInjectorResolutionPath() {},\n      ɵgetDependenciesFromInjectable() {},\n      ɵgetInjectorProviders() {},\n      ɵgetInjectorMetadata() {},\n    };\n\n    it('returns true when required APIs are supported', () => {\n      (globalThis as any).ng = goldenNg;\n\n      expect(ngDebugDependencyInjectionApiIsSupported()).toBeTrue();\n    });\n\n    it('returns false when any required API is missing', () => {\n      (globalThis as any).ng = {...goldenNg, getInjector: undefined};\n      expect(ngDebugDependencyInjectionApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = {...goldenNg, ɵgetInjectorResolutionPath: undefined};\n      expect(ngDebugDependencyInjectionApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = {...goldenNg, ɵgetDependenciesFromInjectable: undefined};\n      expect(ngDebugDependencyInjectionApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = {...goldenNg, ɵgetInjectorProviders: undefined};\n      expect(ngDebugDependencyInjectionApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = {...goldenNg, ɵgetInjectorMetadata: undefined};\n      expect(ngDebugDependencyInjectionApiIsSupported()).toBeFalse();\n    });\n  });\n\n  describe('ngDebugProfilerApiIsSupported', () => {\n    // Tests must be updated after the temporary solutions\n    // are replaced in favor of the stable API.\n    beforeEach(() => mockRoot());\n\n    it('should support Profiler API', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Angular);\n      expect(ngDebugProfilerApiIsSupported()).toBeTrue();\n\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      expect(ngDebugProfilerApiIsSupported()).toBeTrue();\n    });\n\n    it('should NOT support Profiler API', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Wiz);\n\n      expect(ngDebugRoutesApiIsSupported()).toBeFalse();\n    });\n  });\n\n  describe('ngDebugRoutesApiIsSupported', () => {\n    // Tests must be updated after the temporary solutions\n    // are replaced in favor of the stable API.\n    beforeEach(() => mockRoot());\n\n    it('should support Routes API', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Angular);\n      expect(ngDebugRoutesApiIsSupported()).toBeTrue();\n\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      expect(ngDebugRoutesApiIsSupported()).toBeTrue();\n    });\n\n    it('should NOT support Routes API', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Wiz);\n\n      expect(ngDebugRoutesApiIsSupported()).toBeFalse();\n    });\n  });\n\n  describe('ngDebugSignalGraphIsSupported', () => {\n    beforeEach(() => mockRoot());\n\n    it('should support Signal Graph API with getSignalGraph', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Angular);\n      (globalThis as any).ng.ɵgetSignalGraph = () => {};\n      expect(ngDebugSignalGraphApiIsSupported()).toBeTrue();\n    });\n\n    it('should not support Signal Graph API with no getSignalGraph', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      (globalThis as any).ng.ɵgetSignalGraph = 'not implemented';\n      expect(ngDebugSignalGraphApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      (globalThis as any).ng.ɵgetSignalGraph = undefined;\n      expect(ngDebugSignalGraphApiIsSupported()).toBeFalse();\n    });\n  });\n\n  describe('ngDebugTransferStateApiIsSupported', () => {\n    beforeEach(() => mockRoot());\n\n    it('should support Transfer State API with getTransferState', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Angular);\n      (globalThis as any).ng.ɵgetTransferState = () => {};\n      expect(ngDebugTransferStateApiIsSupported()).toBeTrue();\n    });\n\n    it('should not support Transfer State API with no getTransferState', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      (globalThis as any).ng.ɵgetTransferState = 'not implemented';\n      expect(ngDebugTransferStateApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      (globalThis as any).ng.ɵgetTransferState = undefined;\n      expect(ngDebugTransferStateApiIsSupported()).toBeFalse();\n    });\n  });\n\n  describe('ngDebugSignalPropertiesInspectionApiIsSupported', () => {\n    beforeEach(() => mockRoot());\n\n    it('should support signal properties inspection API', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Angular);\n      expect(ngDebugSignalPropertiesInspectionApiIsSupported()).toBeTrue();\n    });\n\n    it('should NOT support signal properties inspection API', () => {\n      (globalThis as any).ng = fakeNgGlobal(Framework.Wiz);\n      expect(ngDebugSignalPropertiesInspectionApiIsSupported()).toBeFalse();\n\n      (globalThis as any).ng = fakeNgGlobal(Framework.ACX);\n      expect(ngDebugSignalPropertiesInspectionApiIsSupported()).toBeFalse();\n    });\n  });\n});\n"]}