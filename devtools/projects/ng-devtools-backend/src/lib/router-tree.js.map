{"version":3,"file":"router-tree.js","sourceRoot":"","sources":["router-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Route} from '../../../protocol';\nimport type {Route as AngularRoute} from '@angular/router';\n\nexport type RoutePropertyType = RouteGuard | 'providers' | 'component';\n\nexport type RouteGuard = 'canActivate' | 'canActivateChild' | 'canDeactivate' | 'canMatch';\n\ntype Routes = any;\ntype Router = any;\n\nexport function parseRoutes(router: Router): Route {\n  const currentUrl = router.stateManager?.routerState?.snapshot?.url;\n  const rootName = (router as any).rootComponentType?.name || 'no-name';\n  const rootChildren = router.config;\n\n  const root: Route = {\n    component: rootName,\n    path: '/',\n    children: rootChildren ? assignChildrenToParent(null, rootChildren, currentUrl) : [],\n    isAux: false,\n    isLazy: false,\n    isRedirect: false,\n    data: [],\n    isActive: currentUrl === '/',\n  };\n\n  return root;\n}\n\nfunction getGuardNames(child: AngularRoute, type: RouteGuard): string[] {\n  const guards = child?.[type] || [];\n\n  const names = guards.map((g: any) => g.name);\n  return names || [];\n}\n\nfunction getProviderName(child: any): string[] {\n  const providers = child?.providers || [];\n  const names = providers.map((p: any) => p.name);\n  return names || [];\n}\n\nfunction assignChildrenToParent(\n  parentPath: string | null,\n  children: Routes,\n  currentUrl: string,\n): Route[] {\n  return children.map((child: AngularRoute) => {\n    const childName = childRouteName(child);\n    const loadedRoutes = (window as any).ng?.ÉµgetLoadedRoutes?.(child as any);\n    const childDescendents: [AngularRoute] = loadedRoutes || child.children;\n\n    const pathFragment = child.outlet ? `(${child.outlet}:${child.path})` : child.path;\n    const routePath = `${parentPath ?? ''}/${pathFragment}`.split('//').join('/');\n\n    // only found in aux routes, otherwise property will be undefined\n    const isAux = Boolean(child.outlet);\n    const isRedirect = Boolean(child.redirectTo);\n    const isLazy = Boolean(child.loadChildren || child.loadComponent);\n\n    const pathWithoutParams = routePath.split('/:')[0];\n    const isActive = currentUrl?.startsWith(pathWithoutParams);\n\n    const routeConfig: Route = {\n      title: typeof child.title === 'string' ? child.title : '[Function]',\n      pathMatch: child.pathMatch,\n      component: childName,\n      canActivateGuards: getGuardNames(child, 'canActivate'),\n      canActivateChildGuards: getGuardNames(child, 'canActivateChild'),\n      canMatchGuards: getGuardNames(child, 'canMatch'),\n      canDeactivateGuards: getGuardNames(child, 'canDeactivate'),\n      providers: getProviderName(child),\n      path: routePath,\n      data: [],\n      isAux,\n      isLazy,\n      isActive,\n      isRedirect,\n    };\n\n    if (childDescendents) {\n      routeConfig.children = assignChildrenToParent(routeConfig.path, childDescendents, currentUrl);\n    }\n\n    if (child.data) {\n      for (const el in child.data) {\n        if (child.data.hasOwnProperty(el)) {\n          routeConfig?.data?.push({\n            key: el,\n            value: child.data[el],\n          });\n        }\n      }\n    }\n\n    return routeConfig;\n  });\n}\n\nfunction childRouteName(child: AngularRoute): string {\n  if (child.component) {\n    return child.component.name;\n  } else if (child.loadChildren || child.loadComponent) {\n    return `${child.path} [Lazy]`;\n  } else if (child.redirectTo) {\n    return `${child.path} -> redirecting to -> \"${child.redirectTo}\"`;\n  } else {\n    return 'no-name-route';\n  }\n}\n\n/**\n *  Get the element reference by type & name from the routes array. Called recursively to search through all children.\n * @param type - type of element to search for (canActivate, canActivateChild, canDeactivate, canLoad, providers)\n * @param routes - array of routes to search through\n * @param name - name of the element to search for refers to the name of the guard or provider\n * @returns - the element reference if found, otherwise null\n */\nexport function getElementRefByName(\n  type: RoutePropertyType,\n  routes: AngularRoute[],\n  name: string,\n): any | null {\n  for (const element of routes) {\n    const routeGuard = type as RouteGuard;\n    if (element[routeGuard]) {\n      for (const guard of element[routeGuard]) {\n        // TODO: improve this, not every guard has a name property\n        if ((guard as any).name === name) {\n          return guard;\n        }\n      }\n    }\n\n    // _loadedRoutes is internal, we can't acess it with the dot notation\n    const loadedRoutes = (element as any)?.['_loadedRoutes'] as AngularRoute[] | undefined;\n    if (loadedRoutes) {\n      const result = getElementRefByName(type, loadedRoutes, name);\n      if (result !== null) {\n        return result;\n      }\n    }\n\n    if (element?.children) {\n      const result = getElementRefByName(type, element.children, name);\n      if (result !== null) {\n        return result;\n      }\n    }\n  }\n}\n\n/**\n *  Get the componet reference by name from the routes array. Called recursively to search through all children.\n * @param routes - array of routes to search through\n * @param name - name of the component to search for\n * @returns - the element reference if found, otherwise null\n */\nexport function getComponentRefByName(routes: AngularRoute[], name: string): any | null {\n  for (const element of routes) {\n    if (element?.component?.name === name) {\n      return element.component;\n    }\n\n    // _loadedRoutes is internal, we can't acess it with the dot notation\n    const loadedRoutes = (element as any)?.['_loadedRoutes'] as AngularRoute[] | undefined;\n    if (loadedRoutes) {\n      const result = getComponentRefByName(loadedRoutes, name);\n      if (result !== null) {\n        return result;\n      }\n    }\n\n    if (element?.children) {\n      const result = getComponentRefByName(element.children, name);\n      if (result !== null) {\n        return result;\n      }\n    }\n  }\n  return null;\n}\n"]}