{"version":3,"file":"angular-check.js","sourceRoot":"","sources":["angular-check.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAY,EAAE;IACjD,OAAO,YAAY,EAAE,IAAI,yBAAyB,EAAE,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,GAAY,EAAE;IAC3C,MAAM,WAAW,GAAI,MAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC3E,OAAO,OAAO,WAAW,EAAE,aAAa,KAAK,WAAW,CAAC;AAC3D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,GAAY,EAAE;IACxC,OAAO,CAAC,CAAC,iBAAiB,EAAE,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,GAAY,EAAE;IACxD,MAAM,OAAO,GAAG,iBAAiB,EAAE,CAAC;IACpC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7D,OAAO,YAAY,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF;;;;;;;;;;;GAWG;AACH,MAAM,yBAAyB,GAAG,GAAY,EAAE;IAC9C,OAAO,CACL,OAAO,EAAE,KAAK,QAAQ;QACtB,CAAC,OAAO,EAAE,CAAC,YAAY,KAAK,UAAU,IAAI,OAAO,EAAE,CAAC,KAAK,KAAK,UAAU,CAAC,CAC1E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAkB,EAAE;IACnD,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAClD,IAAI,CAAC,EAAE,EAAE,CAAC;QACR,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM,UAAU,kBAAkB;IAChC,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAC/D,CAAC,QAAQ,EAAE,EAAE,CAAE,QAA0B,EAAE,wBAAwB,CACpE,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ÉµHydratedNode as HydrationNode} from '@angular/core';\n\ndeclare const ng: any;\n\nexport const appIsAngularInDevMode = (): boolean => {\n  return appIsAngular() && appHasGlobalNgDebugObject();\n};\n\nexport const appIsAngularIvy = (): boolean => {\n  const rootElement = (window as any).document.querySelector('[ng-version]');\n  return typeof rootElement?.__ngContext__ !== 'undefined';\n};\n\nexport const appIsAngular = (): boolean => {\n  return !!getAngularVersion();\n};\n\nexport const appIsSupportedAngularVersion = (): boolean => {\n  const version = getAngularVersion();\n  if (!version) {\n    return false;\n  }\n  const major = parseInt(version.toString().split('.')[0], 10);\n  return appIsAngular() && (major >= 12 || major === 0);\n};\n\n/**\n * We check if the global `window.ng` is an object and if this object\n * has the `getComponent` or `probe` methods attached to it.\n *\n * `ng.probe` is a view engine method, but to ensure that we correctly\n * detect development mode we need to consider older rendering engines.\n *\n * In some g3 apps processed with Closure, `ng` is a function,\n * which means that `typeof ng !== 'undefined'` is not a sufficient check.\n *\n * @returns if the app has global ng debug object\n */\nconst appHasGlobalNgDebugObject = (): boolean => {\n  return (\n    typeof ng === 'object' &&\n    (typeof ng.getComponent === 'function' || typeof ng.probe === 'function')\n  );\n};\n\nexport const getAngularVersion = (): string | null => {\n  const el = document.querySelector('[ng-version]');\n  if (!el) {\n    return null;\n  }\n  return el.getAttribute('ng-version');\n};\n\nexport function isHydrationEnabled(): boolean {\n  return Array.from(document.querySelectorAll('[ng-version]')).some(\n    (rootNode) => (rootNode as HydrationNode)?.__ngDebugHydrationInfo__,\n  );\n}\n"]}