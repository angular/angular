{"version":3,"file":"priority-aware-message-bus.spec.js","sourceRoot":"","sources":["priority-aware-message-bus.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAC,uBAAuB,EAAC,MAAM,8BAA8B,CAAC;AAErE,MAAM,cAAe,SAAQ,UAAkB;IAA/C;;QACE,QAAG,GAAQ,EAAE,CAAC;IAchB,CAAC;IAbU,IAAI,CAAC,CAAQ,EAAE,EAAO;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IACQ,EAAE,CAAC,KAAY,EAAE,EAAO;QAC/B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QACrB,OAAO,GAAG,EAAE;YACV,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC;IACJ,CAAC;IACQ,IAAI,CAAC,KAAY,EAAE,EAAO;QACjC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IACvB,CAAC;IACQ,OAAO,KAAU,CAAC;CAC5B;AAED,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,OAAO,GAAQ,CAAC,CAAM,EAAE,EAAU,EAAE,EAAE,GAAE,CAAC,CAAC;QAChD,MAAM,GAAG,GAAG,IAAI,uBAAuB,CAAC,IAAI,cAAc,EAAE,EAAE,OAAO,CAAC,CAAC;QACvE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACzC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,IAAI,QAAa,CAAC;QAClB,MAAM,OAAO,GAAQ,CAAC,EAAO,EAAE,CAAS,EAAE,EAAE;YAC1C,QAAQ,GAAG,EAAE,CAAC;QAChB,CAAC,CAAC;QACF,MAAM,GAAG,GAAG,IAAI,uBAAuB,CAAC,IAAI,cAAc,EAAE,EAAE,OAAO,CAAC,CAAC;QACvE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC9D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC/D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC/D,QAAQ,EAAE,CAAC;QACX,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sFAAsF,EAAE,GAAG,EAAE;QAC9F,IAAI,QAAa,CAAC;QAClB,MAAM,OAAO,GAAQ,CAAC,EAAO,EAAE,CAAS,EAAE,EAAE;YAC1C,QAAQ,GAAG,EAAE,CAAC;QAChB,CAAC,CAAC;QACF,MAAM,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,uBAAuB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACvD,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACnD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC/D,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC5B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MessageBus} from './message-bus';\nimport {Events, Topic} from './messages';\nimport {PriorityAwareMessageBus} from './priority-aware-message-bus';\n\nclass MockMessageBus extends MessageBus<Events> {\n  cbs: any = {};\n  override emit(_: Topic, __: any): boolean {\n    return true;\n  }\n  override on(topic: Topic, cb: any): () => void {\n    this.cbs[topic] = cb;\n    return () => {\n      delete this.cbs[topic];\n    };\n  }\n  override once(topic: Topic, cb: any): void {\n    this.cbs[topic] = cb;\n  }\n  override destroy(): void {}\n}\n\ndescribe('PriorityAwareMessageBus', () => {\n  it('should emit not throttled requests', () => {\n    const timeout: any = (_: any, __: number) => {};\n    const bus = new PriorityAwareMessageBus(new MockMessageBus(), timeout);\n    expect(bus.emit('handshake')).toBeTrue();\n    expect(bus.emit('inspectorStart')).toBeTrue();\n  });\n\n  it('should throttle `getLatestComponentExplorerView`', () => {\n    let callback: any;\n    const timeout: any = (cb: any, _: number) => {\n      callback = cb;\n    };\n    const bus = new PriorityAwareMessageBus(new MockMessageBus(), timeout);\n    expect(bus.emit('getLatestComponentExplorerView')).toBeTrue();\n    expect(bus.emit('getLatestComponentExplorerView')).toBeFalse();\n    expect(bus.emit('getLatestComponentExplorerView')).toBeFalse();\n    callback();\n    expect(bus.emit('getLatestComponentExplorerView')).toBeTrue();\n  });\n\n  it('should not emit `getLatestComponentExplorerView` if blocked by `getNestedProperties`', () => {\n    let callback: any;\n    const timeout: any = (cb: any, _: number) => {\n      callback = cb;\n    };\n    const mock = new MockMessageBus();\n    const bus = new PriorityAwareMessageBus(mock, timeout);\n    bus.on('nestedProperties', () => {});\n    expect(bus.emit('getNestedProperties')).toBeTrue();\n    expect(bus.emit('getLatestComponentExplorerView')).toBeFalse();\n    mock.cbs.nestedProperties();\n    expect(bus.emit('getLatestComponentExplorerView')).toBeTruthy();\n  });\n});\n"]}