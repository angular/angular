{"version":3,"file":"priority-aware-message-bus.js","sourceRoot":"","sources":["priority-aware-message-bus.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MessageBus} from './message-bus';\nimport {Events, Topic} from './messages';\n\ntype ThrottleTopicDuration = {\n  [method in Topic]?: number;\n};\n\ntype ThrottledTopics = {\n  [method in Topic]?: boolean;\n};\n\ntype TopicsInProgress = {\n  [method in Topic]?: boolean;\n};\n\nconst THROTTLE_METHODS: ThrottleTopicDuration = {\n  getLatestComponentExplorerView: 100,\n};\n\ntype TopicBlockSequence = {\n  [method in Topic]?: Topic[];\n};\n\n// We can't refresh the view until we've received\n// a response with the latest nested properties.\nconst TOPIC_BLOCK_SEQUENCE: TopicBlockSequence = {\n  getLatestComponentExplorerView: ['getNestedProperties'],\n};\n\ntype TopicSequence = {\n  [method in Topic]?: Topic;\n};\n\nconst TOPIC_RESPONSE: TopicSequence = {\n  getNestedProperties: 'nestedProperties',\n};\n\nconst TOPIC_REQUEST: TopicSequence = {\n  nestedProperties: 'getNestedProperties',\n};\n\nexport class PriorityAwareMessageBus extends MessageBus<Events> {\n  private _throttled: ThrottledTopics = {};\n  private _inProgress: TopicsInProgress = {};\n\n  constructor(\n    private _bus: MessageBus<Events>,\n    // Binding is necessary to ensure that `setTimeout` is called in the global context.\n    // an doesn't throw \"Illegal invocation\" error.\n    private _setTimeout: typeof setTimeout = setTimeout.bind(globalThis),\n  ) {\n    super();\n  }\n\n  override on<E extends Topic>(topic: E, cb: Events[E]): () => void {\n    return this._bus.on(topic, (...args: any) => {\n      (cb as any)(...args);\n      this._afterMessage(topic);\n    });\n  }\n\n  override once<E extends Topic>(topic: E, cb: Events[E]): void {\n    return this._bus.once(topic, (...args: any) => {\n      (cb as any)(...args);\n      this._afterMessage(topic);\n    });\n  }\n\n  override emit<E extends Topic>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._throttled[topic]) {\n      return false;\n    }\n    if (TOPIC_RESPONSE[topic]) {\n      this._inProgress[topic] = true;\n    }\n    const blockedBy = TOPIC_BLOCK_SEQUENCE[topic];\n    if (blockedBy) {\n      // The source code here is safe.\n      // TypeScript type inference ignores the null check here.\n      for (const blocker of blockedBy!) {\n        if (this._inProgress[blocker]) {\n          return false;\n        }\n      }\n    }\n    if (THROTTLE_METHODS[topic]) {\n      this._throttled[topic] = true;\n      this._setTimeout(() => (this._throttled[topic] = false), THROTTLE_METHODS[topic]);\n    }\n    return this._bus.emit(topic, args);\n  }\n\n  override destroy(): void {\n    this._bus.destroy();\n  }\n\n  private _afterMessage(topic: Topic): void {\n    const request = TOPIC_REQUEST[topic];\n    if (!request) {\n      return;\n    }\n    if (this._inProgress[request]) {\n      this._inProgress[request] = false;\n    }\n  }\n}\n"]}