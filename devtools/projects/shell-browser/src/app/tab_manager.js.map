{"version":3,"file":"tab_manager.js","sourceRoot":"","sources":["tab_manager.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAkBH,SAAS,SAAS,CAAC,GAAW;IAC5B,OAAO,CAAC,GAAG,GAAG,EAAE,KAAK,GAAG,CAAC;AAC3B,CAAC;AAMD,MAAM,OAAO,UAAU;IACrB,YACU,IAAU,EACV,OAA8B;QAD9B,SAAI,GAAJ,IAAI,CAAM;QACV,YAAO,GAAP,OAAO,CAAuB;IACrC,CAAC;IAEJ,MAAM,CAAC,UAAU,CAAC,IAAU,EAAE,UAAiC,MAAM,CAAC,OAAO;QAC3E,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9C,OAAO,CAAC,UAAU,EAAE,CAAC;QACrB,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1C,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;gBAClC,OAAO;YACT,CAAC;YAED,IACE,CAAC,IAAI,CAAC,MAAM;gBACZ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG;gBAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,SAAS;gBAChC,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,EACjC,CAAC;gBACD,OAAO,CAAC,IAAI,CAAC,8CAA8C,EAAE,IAAI,CAAC,CAAC;gBACnE,OAAO;YACT,CAAC;YAED,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,eAAe,CAAC,KAAa;;QACnC,MAAA,IAAI,CAAC,IAAI,EAAC,KAAK,SAAL,KAAK,IAAM;YACnB,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,EAAE;SACnB,EAAC;IACJ,CAAC;IAEO,sBAAsB,CAAC,IAAyB;QACtD,sDAAsD;QACtD,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAEtC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC;QAE9B,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;QACpB,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE;YACzC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;YAEpB,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC;gBAC3D,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,6FAA6F;QAC7F,2FAA2F;QAC3F,kGAAkG;QAClG,KAAK,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC;YACvE,UAAU,CAAC,YAAa,CAAC,IAAI,CAAC,GAAG,EAAE;gBACjC,IAAI,UAAU,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;oBAC7B,MAAM,IAAI,KAAK,CACb,4FAA4F,CAC7F,CAAC;gBACJ,CAAC;gBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC1C,GAAG,CAAC,QAAS,CAAC,WAAW,CAAC;oBACxB,KAAK,EAAE,wBAAwB;oBAC/B,IAAI,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC;iBACjF,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEO,2BAA2B,CAAC,IAAyB;QAC3D,+DAA+D;QAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,MAAO,CAAC;QAC5B,MAAM,OAAO,GAAG,MAAM,CAAC,OAAQ,CAAC;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAI,CAAC,EAAG,CAAC;QAE9B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC;QAE9B,IAAI,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE,CAAC;YAC9C,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG;gBAC5B,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,CAAC,CAAC;aACZ,CAAC;QACJ,CAAC;QAED,MAAM,aAAa,GAAG,GAAG,CAAC,cAAc,CAAC,OAAO,CAAE,CAAC;QACnD,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,aAAa,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,aAAa,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,IAAI,KAAK,CAAC;QAEvD,0FAA0F;QAC1F,mBAAmB;QACnB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE;YACjC,OAAO,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAEnC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACjD,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,aAAa,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,CAAC,mBAAmB,EAAE,EAAE;YAC/D,MAAM,cAAc,GAAG,CAAC,OAAwB,EAAE,EAAE;gBAClD,IAAI,OAAO,CAAC,KAAK,KAAK,cAAc,EAAE,CAAC;oBACrC,oGAAoG;oBACpG,kEAAkE;oBAClE,mBAAmB,EAAE,CAAC;oBAEtB,wFAAwF;oBACxF,mCAAmC;oBACnC,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;wBACjB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;wBAE7C,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;4BACvB,KAAK,EAAE,wBAAwB;4BAC/B,IAAI,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,IAAK,CAAC,IAAI,EAAE,aAAa,CAAC,IAAK,CAAC,MAAO,CAAC,GAAG,CAAC;yBAC3E,CAAC,CAAC;oBACL,CAAC;oBAED,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;gBAChD,CAAC;YACH,CAAC,CAAC;YAEF,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAC3C,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE;gBACjC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU,CAChB,YAAwC,EACxC,uBAAgD;QAEhD,IAAI,YAAY,KAAK,IAAI,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,iBAAiB,GAAG,uBAAuB,CAAC,IAAI,CAAC;QAEvD,IAAI,iBAAiB,KAAK,IAAI,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QAED,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7E,MAAM,iBAAiB,GAAG,CAAC,OAAwD,EAAE,EAAE;YACrF,IAAI,OAAO,CAAC,KAAK,KAAK,uBAAuB,EAAE,CAAC;gBAC9C,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC9B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;gBACtE,CAAC;gBAED,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,OAAO,CAAC,IAAwC,CAAC;gBAE1E,IAAI,OAAO,KAAK,uBAAuB,CAAC,OAAO,EAAE,CAAC;oBAChD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAE7B,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;wBACtB,MAAM,IAAI,KAAK,CAAC,4CAA4C,KAAK,EAAE,CAAC,CAAC;oBACvE,CAAC;oBAED,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC;wBACtD,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;oBAC9C,CAAC;oBAED,uBAAuB,CAAC,OAAO,GAAG,IAAI,CAAC;oBACvC,YAAY,CAAC,WAAW,CAAC;wBACvB,KAAK,EAAE,gBAAgB;wBACvB,IAAI,EAAE,CAAC,uBAAuB,CAAC,OAAO,CAAC;qBACxC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,sFAAsF;YACtF,8FAA8F;YAC9F,MAAM;YACN,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;gBACrC,OAAO;YACT,CAAC;YAED,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC;QACF,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAEtD,MAAM,sBAAsB,GAAG,CAAC,OAAwD,EAAE,EAAE;YAC1F,sFAAsF;YACtF,8FAA8F;YAC9F,MAAM;YACN,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;gBACrC,OAAO;YACT,CAAC;YAED,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC,CAAC;QACF,iBAAiB,CAAC,SAAS,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;QAEhE,MAAM,qBAAqB,GAAG,GAAG,EAAE;YACjC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACzD,YAAY,CAAC,WAAW,CAAC;gBACvB,KAAK,EAAE,2BAA2B;gBAClC,IAAI,EAAE,CAAC,uBAAuB,CAAC,OAAO,EAAE,uBAAuB,CAAC,IAAK,CAAC,IAAI,CAAC;aAC5E,CAAC,CAAC;YAEH,iBAAiB,CAAC,SAAS,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;QACrE,CAAC,CAAC;QACF,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAC5E,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {Events, Topic} from '../../../protocol';\n\nexport interface ContentScriptConnection {\n  port: chrome.runtime.Port | null;\n  enabled: boolean;\n  frameId: 'devtools' | number;\n  backendReady?: Promise<void>;\n}\n\nexport interface DevToolsConnection {\n  devtools: chrome.runtime.Port | null;\n  contentScripts: {[name: string]: ContentScriptConnection};\n}\n\nfunction isNumeric(str: string): boolean {\n  return +str + '' === str;\n}\n\nexport interface Tabs {\n  [tabId: string]: DevToolsConnection | undefined;\n}\n\nexport class TabManager {\n  constructor(\n    private tabs: Tabs,\n    private runtime: typeof chrome.runtime,\n  ) {}\n\n  static initialize(tabs: Tabs, runtime: typeof chrome.runtime = chrome.runtime): TabManager {\n    const manager = new TabManager(tabs, runtime);\n    manager.initialize();\n    return manager;\n  }\n\n  private initialize(): void {\n    this.runtime.onConnect.addListener((port) => {\n      if (isNumeric(port.name)) {\n        this.registerDevToolsForTab(port);\n        return;\n      }\n\n      if (\n        !port.sender ||\n        !port.sender.tab ||\n        port.sender.tab.id === undefined ||\n        port.sender.frameId === undefined\n      ) {\n        console.warn('Received a connection from an unknown sender', port);\n        return;\n      }\n\n      this.registerContentScriptForTab(port);\n    });\n  }\n\n  private ensureTabExists(tabId: number): void {\n    this.tabs[tabId] ??= {\n      devtools: null,\n      contentScripts: {},\n    };\n  }\n\n  private registerDevToolsForTab(port: chrome.runtime.Port): void {\n    // For the devtools page, our port name is the tab id.\n    const tabId = parseInt(port.name, 10);\n\n    this.ensureTabExists(tabId);\n    const tab = this.tabs[tabId]!;\n\n    tab.devtools = port;\n    tab.devtools.onDisconnect.addListener(() => {\n      tab.devtools = null;\n\n      for (const connection of Object.values(tab.contentScripts)) {\n        connection.enabled = false;\n      }\n    });\n\n    // DevTools may register after the content script has already registered. If that's the case,\n    // we need to set up the double pipe between the devtools and each content script, and send\n    // the contentScriptConnected message to the devtools page to inform it of all frames on the page.\n    for (const [frameId, connection] of Object.entries(tab.contentScripts)) {\n      connection.backendReady!.then(() => {\n        if (connection.port === null) {\n          throw new Error(\n            'Expected Content to have already connected before the backendReady event on the same page.',\n          );\n        }\n        this.doublePipe(tab.devtools, connection);\n        tab.devtools!.postMessage({\n          topic: 'contentScriptConnected',\n          args: [parseInt(frameId, 10), connection.port.name, connection.port.sender!.url],\n        });\n      });\n    }\n  }\n\n  private registerContentScriptForTab(port: chrome.runtime.Port): void {\n    // A content script connection will have a sender and a tab id.\n    const sender = port.sender!;\n    const frameId = sender.frameId!;\n    const tabId = sender.tab!.id!;\n\n    this.ensureTabExists(tabId);\n    const tab = this.tabs[tabId]!;\n\n    if (tab.contentScripts[frameId] === undefined) {\n      tab.contentScripts[frameId] = {\n        port: null,\n        enabled: false,\n        frameId: -1,\n      };\n    }\n\n    const contentScript = tab.contentScripts[frameId]!;\n    contentScript.port = port;\n    contentScript.frameId = frameId;\n    contentScript.enabled = contentScript.enabled ?? false;\n\n    // When the content script disconnects, clean up the connection state we're storing in the\n    // background page.\n    port.onDisconnect.addListener(() => {\n      delete tab.contentScripts[frameId];\n\n      if (Object.keys(tab.contentScripts).length === 0) {\n        delete this.tabs[tabId];\n      }\n    });\n\n    contentScript.backendReady = new Promise((resolveBackendReady) => {\n      const onBackendReady = (message: {topic: string}) => {\n        if (message.topic === 'backendReady') {\n          // If DevTools is not yet connected, this resolve will enable devtools to eventually connect to this\n          // content script (even though the content script connected first)\n          resolveBackendReady();\n\n          // If the devtools connection is already established, set up the double pipe between the\n          // devtools and the content script.\n          if (tab.devtools) {\n            this.doublePipe(tab.devtools, contentScript);\n\n            tab.devtools.postMessage({\n              topic: 'contentScriptConnected',\n              args: [frameId, contentScript.port!.name, contentScript.port!.sender!.url],\n            });\n          }\n\n          port.onMessage.removeListener(onBackendReady);\n        }\n      };\n\n      port.onMessage.addListener(onBackendReady);\n      port.onDisconnect.addListener(() => {\n        port.onMessage.removeListener(onBackendReady);\n      });\n    });\n  }\n\n  private doublePipe(\n    devtoolsPort: chrome.runtime.Port | null,\n    contentScriptConnection: ContentScriptConnection,\n  ): void {\n    if (devtoolsPort === null) {\n      throw new Error('DevTools port is equal to null');\n    }\n\n    const contentScriptPort = contentScriptConnection.port;\n\n    if (contentScriptPort === null) {\n      throw new Error('Content script port is equal to null');\n    }\n\n    // tslint:disable-next-line:no-console\n    console.log('Creating two-way communication channel', Date.now(), this.tabs);\n\n    const onDevToolsMessage = (message: {topic: Topic; args: Parameters<Events[Topic]>}) => {\n      if (message.topic === 'enableFrameConnection') {\n        if (message.args.length !== 2) {\n          throw new Error('Expected two arguments for enableFrameConnection');\n        }\n\n        const [frameId, tabId] = message.args as [frameId: number, tabId: number];\n\n        if (frameId === contentScriptConnection.frameId) {\n          const tab = this.tabs[tabId];\n\n          if (tab === undefined) {\n            throw new Error(`Expected tab to be registered with tabId ${tabId}`);\n          }\n\n          for (const frameId of Object.keys(tab.contentScripts)) {\n            tab.contentScripts[frameId].enabled = false;\n          }\n\n          contentScriptConnection.enabled = true;\n          devtoolsPort.postMessage({\n            topic: 'frameConnected',\n            args: [contentScriptConnection.frameId],\n          });\n        }\n      }\n\n      // Do not allow any message to be sent if a content script is not enabled. This is the\n      // mechanism that lets us select which content script connection Angular Devtools is connected\n      // to.\n      if (!contentScriptConnection.enabled) {\n        return;\n      }\n\n      contentScriptPort.postMessage(message);\n    };\n    devtoolsPort.onMessage.addListener(onDevToolsMessage);\n\n    const onContentScriptMessage = (message: {topic: Topic; args: Parameters<Events[Topic]>}) => {\n      // Do not allow any message to be sent if a content script is not enabled. This is the\n      // mechanism that lets us select which content script connection Angular Devtools is connected\n      // to.\n      if (!contentScriptConnection.enabled) {\n        return;\n      }\n\n      devtoolsPort.postMessage(message);\n    };\n    contentScriptPort.onMessage.addListener(onContentScriptMessage);\n\n    const shutdownContentScript = () => {\n      devtoolsPort.onMessage.removeListener(onDevToolsMessage);\n      devtoolsPort.postMessage({\n        topic: 'contentScriptDisconnected',\n        args: [contentScriptConnection.frameId, contentScriptConnection.port!.name],\n      });\n\n      contentScriptPort.onMessage.removeListener(onContentScriptMessage);\n    };\n    contentScriptPort.onDisconnect.addListener(() => shutdownContentScript());\n  }\n}\n"]}