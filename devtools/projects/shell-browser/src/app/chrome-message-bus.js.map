{"version":3,"file":"chrome-message-bus.js","sourceRoot":"","sources":["chrome-message-bus.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {Events, MessageBus, Parameters} from '../../../protocol';\n\ninterface ChromeMessage<T, K extends keyof T> {\n  topic: K;\n  args: Parameters<T[K]>;\n}\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\nexport class ChromeMessageBus extends MessageBus<Events> {\n  private _disconnected = false;\n  private _listeners: any[] = [];\n\n  constructor(private _port: chrome.runtime.Port) {\n    super();\n\n    _port.onDisconnect.addListener(() => {\n      // console.log('Disconnected the port');\n      this._disconnected = true;\n    });\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      cb(msg.topic, msg.args);\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  override on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      if (msg.topic === topic) {\n        (cb as any).apply(null, msg.args);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  override once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>) => {\n      if (msg.topic === topic) {\n        (cb as any).apply(null, msg.args);\n        this._port.onMessage.removeListener(listener);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n  }\n\n  override emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._disconnected) {\n      return false;\n    }\n    this._port.postMessage({\n      topic,\n      args,\n      __ignore_ng_zone__: true,\n      __NG_DEVTOOLS_EVENT__: true,\n    });\n    return true;\n  }\n\n  override destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n"]}