{"version":3,"file":"chrome-application-operations.js","sourceRoot":"","sources":["chrome-application-operations.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"chrome\"/>\n/// <reference types=\"firefox-webext-browser\" />\n\nimport {Platform} from '@angular/cdk/platform';\nimport {inject} from '@angular/core';\nimport {ApplicationOperations, Frame, TOP_LEVEL_FRAME_ID} from '../../../ng-devtools';\nimport {DirectivePosition, ElementPosition, SignalNodePosition} from '../../../protocol';\n\nexport class ChromeApplicationOperations extends ApplicationOperations {\n  platform = inject(Platform);\n\n  override viewSource(position: ElementPosition, target: Frame, directiveIndex?: number): void {\n    const viewSource = `inspect(inspectedApplication.findConstructorByPosition('${position}', ${directiveIndex}))`;\n    this.runInInspectedWindow(viewSource, target);\n  }\n\n  override selectDomElement(position: ElementPosition, target: Frame): void {\n    const selectDomElement = `inspect(inspectedApplication.findDomElementByPosition('${position}'))`;\n    this.runInInspectedWindow(selectDomElement, target);\n  }\n\n  override inspect(\n    directivePosition: DirectivePosition,\n    objectPath: string[],\n    target: Frame,\n  ): void {\n    const args = {\n      directivePosition,\n      objectPath,\n    };\n    const inspect = `inspect(inspectedApplication.findPropertyByPosition('${JSON.stringify(\n      args,\n    )}'))`;\n    this.runInInspectedWindow(inspect, target);\n  }\n\n  override inspectSignal(position: SignalNodePosition, target: Frame): void {\n    const inspectSignal = `inspect(inspectedApplication.findSignalNodeByPosition('${JSON.stringify(\n      position,\n    )}'))`;\n    this.runInInspectedWindow(inspectSignal, target);\n  }\n\n  override viewSourceFromRouter(name: string, type: string, target: Frame): void {\n    const viewSource = `inspect(inspectedApplication.findConstructorByNameForRouter('${name}', '${type}'))`;\n    this.runInInspectedWindow(viewSource, target);\n  }\n\n  override setStorageItems(items: {[key: string]: unknown}): Promise<void> {\n    return this.storage.set(items);\n  }\n\n  override getStorageItems(items: string[]): Promise<{[key: string]: unknown}> {\n    return this.storage.get(items);\n  }\n\n  override removeStorageItems(items: string[]): Promise<void> {\n    return this.storage.remove(items);\n  }\n\n  private runInInspectedWindow(script: string, target: Frame) {\n    if (this.platform.FIREFOX && target.id !== TOP_LEVEL_FRAME_ID) {\n      console.error(\n        '[Angular DevTools]: This browser does not support targeting a specific frame for eval by URL.',\n      );\n      return;\n    } else if (this.platform.FIREFOX) {\n      chrome.devtools.inspectedWindow.eval(script);\n      return;\n    }\n\n    const frameURL = target.url;\n    chrome.devtools.inspectedWindow.eval(script, {frameURL: frameURL?.toString?.()});\n  }\n\n  private get storage(): typeof browser.storage.local {\n    if (!this.platform.FIREFOX) {\n      return chrome.storage.local;\n    }\n    return browser.storage.local;\n  }\n}\n"]}