{"version":3,"file":"app-todo.component.js","sourceRoot":"","sources":["app-todo.component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AACvE,OAAO,EAAC,SAAS,EAAC,MAAM,0BAA0B,CAAC;AAEnD,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAG5C,IAAM,UAAU,GAAhB,MAAM,UAAU;CAAG,CAAA;AAAb,UAAU;IADtB,UAAU,EAAE;GACA,UAAU,CAAG;;AASnB,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAAtB;QAIL,8BAAyB,GAAG,SAAS,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC;QAEpE,WAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;IAetC,CAAC;IAbC,UAAU;QACR,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE;YAClD,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC;SAC7C,CAAC,CAAC;QAEH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YAC3C,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YAErC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AArBY,gBAAgB;IAP5B,SAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,WAAW,EAAE,2BAA2B;QACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;QACxC,aAAa,EAAE,CAAC,UAAU,CAAC;QAC3B,UAAU,EAAE,KAAK;KAClB,CAAC;GACW,gBAAgB,CAqB5B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Component, inject, Injectable, viewChild} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\n\nimport {DialogComponent} from './dialog.component';\n\n@Injectable()\nexport class MyServiceA {}\n\n@Component({\n  selector: 'app-todo-demo',\n  templateUrl: './app-todo.component.html',\n  styleUrls: ['./app-todo.component.scss'],\n  viewProviders: [MyServiceA],\n  standalone: false,\n})\nexport class AppTodoComponent {\n  name!: string;\n  animal!: string;\n\n  viewChildWillThrowAnError = viewChild.required('thisSignalWillThrowAnError');\n\n  readonly dialog = inject(MatDialog);\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(DialogComponent, {\n      width: '250px',\n      data: {name: this.name, animal: this.animal},\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      // tslint:disable-next-line:no-console\n      console.log('The dialog was closed');\n\n      this.animal = result;\n    });\n  }\n}\n"]}