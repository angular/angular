{"version":3,"file":"rendering.js","sourceRoot":"","sources":["rendering.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CachedInjectorService} from '../cached_injector_service';\nimport {NotificationSource} from '../change_detection/scheduling/zoneless_scheduling';\nimport {EnvironmentInjector, InjectionToken, Injector, Provider} from '../di';\nimport {\n  DehydratedContainerView,\n  DEFER_BLOCK_STATE as SERIALIZED_DEFER_BLOCK_STATE,\n} from '../hydration/interfaces';\nimport {assertLContainer, assertTNodeForLView} from '../render3/assert';\nimport {ChainedInjector} from '../render3/chained_injector';\nimport {markViewDirty} from '../render3/instructions/mark_view_dirty';\nimport {handleUncaughtError} from '../render3/instructions/shared';\nimport {DEHYDRATED_VIEWS, LContainer} from '../render3/interfaces/container';\nimport {TContainerNode, TNode} from '../render3/interfaces/node';\nimport {isDestroyed} from '../render3/interfaces/type_checks';\nimport {HEADER_OFFSET, INJECTOR, LView, PARENT, TVIEW, TView} from '../render3/interfaces/view';\nimport {getConstant, getTNode} from '../render3/util/view_utils';\nimport {createAndRenderEmbeddedLView, shouldAddViewToDom} from '../render3/view_manipulation';\nimport {assertDefined} from '../util/assert';\n\nimport {\n  DEFER_BLOCK_STATE,\n  DeferBlockConfig,\n  DeferBlockDependencyInterceptor,\n  DeferBlockInternalState,\n  DeferBlockState,\n  DeferDependenciesLoadingState,\n  DeferredLoadingBlockConfig,\n  DeferredPlaceholderBlockConfig,\n  LDeferBlockDetails,\n  LOADING_AFTER_CLEANUP_FN,\n  NEXT_DEFER_BLOCK_STATE,\n  ON_COMPLETE_FNS,\n  SSR_BLOCK_STATE,\n  STATE_IS_FROZEN_UNTIL,\n  TDeferBlockDetails,\n} from './interfaces';\nimport {scheduleTimerTrigger} from './timer_scheduler';\nimport {\n  assertDeferredDependenciesLoaded,\n  getLDeferBlockDetails,\n  getLoadingBlockAfter,\n  getMinimumDurationForState,\n  getTDeferBlockDetails,\n  getTemplateIndexForState,\n} from './utils';\nimport {profiler} from '../render3/profiler';\nimport {ProfilerEvent} from '../render3/profiler_types';\nimport {addLViewToLContainer, removeLViewFromLContainer} from '../render3/view/container';\n\n/**\n * **INTERNAL**, avoid referencing it in application code.\n * *\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\n * implementation.\n *\n * This token is only injected in devMode\n */\nexport const DEFER_BLOCK_DEPENDENCY_INTERCEPTOR =\n  /* @__PURE__ */ new InjectionToken<DeferBlockDependencyInterceptor>(\n    'DEFER_BLOCK_DEPENDENCY_INTERCEPTOR',\n  );\n\n/**\n * **INTERNAL**, token used for configuring defer block behavior.\n */\nexport const DEFER_BLOCK_CONFIG = new InjectionToken<DeferBlockConfig>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'DEFER_BLOCK_CONFIG' : '',\n);\n\n/**\n * Checks whether there is a cached injector associated with a given defer block\n * declaration and returns if it exists. If there is no cached injector present -\n * creates a new injector and stores in the cache.\n */\nfunction getOrCreateEnvironmentInjector(\n  parentInjector: Injector,\n  tDetails: TDeferBlockDetails,\n  providers: Provider[],\n) {\n  return parentInjector\n    .get(CachedInjectorService)\n    .getOrCreateInjector(\n      tDetails,\n      parentInjector as EnvironmentInjector,\n      providers,\n      ngDevMode ? 'DeferBlock Injector' : '',\n    );\n}\n\n/** Injector Helpers */\n\n/**\n * Creates a new injector, which contains providers collected from dependencies (NgModules) of\n * defer-loaded components. This function detects different types of parent injectors and creates\n * a new injector based on that.\n */\nfunction createDeferBlockInjector(\n  parentInjector: Injector,\n  tDetails: TDeferBlockDetails,\n  providers: Provider[],\n) {\n  // Check if the parent injector is an instance of a `ChainedInjector`.\n  //\n  // In this case, we retain the shape of the injector and use a newly created\n  // `EnvironmentInjector` as a parent in the `ChainedInjector`. That is needed to\n  // make sure that the primary injector gets consulted first (since it's typically\n  // a NodeInjector) and `EnvironmentInjector` tree is consulted after that.\n  if (parentInjector instanceof ChainedInjector) {\n    const origInjector = parentInjector.injector;\n    // Guaranteed to be an environment injector\n    const parentEnvInjector = parentInjector.parentInjector;\n\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(origInjector, envInjector);\n  }\n\n  const parentEnvInjector = parentInjector.get(EnvironmentInjector);\n\n  // If the `parentInjector` is *not* an `EnvironmentInjector` - we need to create\n  // a new `ChainedInjector` with the following setup:\n  //\n  //  - the provided `parentInjector` becomes a primary injector\n  //  - an existing (real) `EnvironmentInjector` becomes a parent injector for\n  //    a newly-created one, which contains extra providers\n  //\n  // So the final order in which injectors would be consulted in this case would look like this:\n  //\n  //  1. Provided `parentInjector`\n  //  2. Newly-created `EnvironmentInjector` with extra providers\n  //  3. `EnvironmentInjector` from the `parentInjector`\n  if (parentEnvInjector !== parentInjector) {\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(parentInjector, envInjector);\n  }\n\n  // The `parentInjector` is an instance of an `EnvironmentInjector`.\n  // No need for special handling, we can use `parentInjector` as a\n  // parent injector directly.\n  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);\n}\n\n/** Rendering Helpers */\n\n/**\n * Transitions a defer block to the new state. Updates the  necessary\n * data structures and renders corresponding block.\n *\n * @param newState New state that should be applied to the defer block.\n * @param tNode TNode that represents a defer block.\n * @param lContainer Represents an instance of a defer block.\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\n *   should be rendered immediately, even if they have `after` or `minimum` config\n *   options setup. This flag to needed for testing APIs to transition defer block\n *   between states via `DeferFixture.render` method.\n */\nexport function renderDeferBlockState(\n  newState: DeferBlockState,\n  tNode: TNode,\n  lContainer: LContainer,\n  skipTimerScheduling = false,\n): void {\n  const hostLView = lContainer[PARENT];\n  const hostTView = hostLView[TVIEW];\n\n  // Check if this view is not destroyed. Since the loading process was async,\n  // the view might end up being destroyed by the time rendering happens.\n  if (isDestroyed(hostLView)) return;\n\n  // Make sure this TNode belongs to TView that represents host LView.\n  ngDevMode && assertTNodeForLView(tNode, hostLView);\n\n  const lDetails = getLDeferBlockDetails(hostLView, tNode);\n\n  ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\n\n  const currentState = lDetails[DEFER_BLOCK_STATE];\n\n  const ssrState = lDetails[SSR_BLOCK_STATE];\n  if (ssrState !== null && newState < ssrState) {\n    return; // trying to render a previous state, exit\n  }\n\n  if (\n    isValidStateChange(currentState, newState) &&\n    isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)\n  ) {\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\n    // Skips scheduling on the server since it can delay the server response.\n    const needsScheduling =\n      !skipTimerScheduling &&\n      (typeof ngServerMode === 'undefined' || !ngServerMode) &&\n      (getLoadingBlockAfter(tDetails) !== null ||\n        getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null ||\n        getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\n\n    if (ngDevMode && needsScheduling) {\n      assertDefined(\n        applyDeferBlockStateWithSchedulingImpl,\n        'Expected scheduling function to be defined',\n      );\n    }\n\n    const applyStateFn = needsScheduling\n      ? applyDeferBlockStateWithSchedulingImpl!\n      : applyDeferBlockState;\n    try {\n      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\n    } catch (error: unknown) {\n      handleUncaughtError(hostLView, error);\n    }\n  }\n}\n\nfunction findMatchingDehydratedViewForDeferBlock(\n  lContainer: LContainer,\n  lDetails: LDeferBlockDetails,\n): {dehydratedView: DehydratedContainerView | null; dehydratedViewIx: number} {\n  const dehydratedViewIx =\n    lContainer[DEHYDRATED_VIEWS]?.findIndex(\n      (view: any) => view.data[SERIALIZED_DEFER_BLOCK_STATE] === lDetails[DEFER_BLOCK_STATE],\n    ) ?? -1;\n  const dehydratedView =\n    dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS]![dehydratedViewIx] : null;\n  return {dehydratedView, dehydratedViewIx};\n}\n\n/**\n * Applies changes to the DOM to reflect a given state.\n */\nfunction applyDeferBlockState(\n  newState: DeferBlockState,\n  lDetails: LDeferBlockDetails,\n  lContainer: LContainer,\n  tNode: TNode,\n  hostLView: LView<unknown>,\n) {\n  profiler(ProfilerEvent.DeferBlockStateStart);\n\n  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\n\n  if (stateTmplIndex !== null) {\n    lDetails[DEFER_BLOCK_STATE] = newState;\n    const hostTView = hostLView[TVIEW];\n    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\n\n    // The TNode that represents a template that will activated in the defer block\n    const activeBlockTNode = getTNode(hostTView, adjustedIndex) as TContainerNode;\n\n    // There is only 1 view that can be present in an LContainer that\n    // represents a defer block, so always refer to the first one.\n    const viewIndex = 0;\n\n    removeLViewFromLContainer(lContainer, viewIndex);\n\n    let injector: Injector | undefined;\n    if (newState === DeferBlockState.Complete) {\n      // When we render a defer block in completed state, there might be\n      // newly loaded standalone components used within the block, which may\n      // import NgModules with providers. In order to make those providers\n      // available for components declared in that NgModule, we create an instance\n      // of an environment injector to host those providers and pass this injector\n      // to the logic that creates a view.\n      const tDetails = getTDeferBlockDetails(hostTView, tNode);\n      const providers = tDetails.providers;\n      if (providers && providers.length > 0) {\n        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);\n      }\n    }\n    const {dehydratedView, dehydratedViewIx} = findMatchingDehydratedViewForDeferBlock(\n      lContainer,\n      lDetails,\n    );\n\n    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {\n      injector,\n      dehydratedView,\n    });\n    addLViewToLContainer(\n      lContainer,\n      embeddedLView,\n      viewIndex,\n      shouldAddViewToDom(activeBlockTNode, dehydratedView),\n    );\n    markViewDirty(embeddedLView, NotificationSource.DeferBlockStateUpdate);\n\n    if (dehydratedViewIx > -1) {\n      // Erase dehydrated view info in a given LContainer, so that the view is not\n      // removed later by post-hydration cleanup process (which iterates over all\n      // dehydrated views in component tree). This clears only the dehydrated view\n      // that was found for this render, which in most cases will be the only view.\n      // In the case that there was control flow that changed, there may be either\n      // more than one or the views would not match up due to the server rendered\n      // content being a different branch of the control flow.\n      lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);\n    }\n\n    if (\n      (newState === DeferBlockState.Complete || newState === DeferBlockState.Error) &&\n      Array.isArray(lDetails[ON_COMPLETE_FNS])\n    ) {\n      for (const callback of lDetails[ON_COMPLETE_FNS]) {\n        callback();\n      }\n      lDetails[ON_COMPLETE_FNS] = null;\n    }\n  }\n\n  profiler(ProfilerEvent.DeferBlockStateEnd);\n}\n\n/**\n * Extends the `applyDeferBlockState` with timer-based scheduling.\n * This function becomes available on a page if there are defer blocks\n * that use `after` or `minimum` parameters in the `@loading` or\n * `@placeholder` blocks.\n */\nfunction applyDeferBlockStateWithScheduling(\n  newState: DeferBlockState,\n  lDetails: LDeferBlockDetails,\n  lContainer: LContainer,\n  tNode: TNode,\n  hostLView: LView<unknown>,\n) {\n  const now = Date.now();\n  const hostTView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(hostTView, tNode);\n\n  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n\n    const loadingAfter = getLoadingBlockAfter(tDetails);\n    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\n    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\n      // Trying to render loading, but it has an `after` config,\n      // so schedule an update action after a timeout.\n      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n      const cleanupFn = scheduleDeferBlockUpdate(\n        loadingAfter,\n        lDetails,\n        tNode,\n        lContainer,\n        hostLView,\n      );\n      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\n    } else {\n      // If we transition to a complete or an error state and there is a pending\n      // operation to render loading after a timeout - invoke a cleanup operation,\n      // which stops the timer.\n      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\n        lDetails[LOADING_AFTER_CLEANUP_FN]!();\n        lDetails[LOADING_AFTER_CLEANUP_FN] = null;\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n      }\n\n      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\n\n      const duration = getMinimumDurationForState(tDetails, newState);\n      if (duration !== null) {\n        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\n        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\n      }\n    }\n  } else {\n    // We are still rendering the previous state.\n    // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\n    // picked up once it's time to transition to the next state.\n    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n  }\n}\n\n/**\n * Schedules an update operation after a specified timeout.\n */\nfunction scheduleDeferBlockUpdate(\n  timeout: number,\n  lDetails: LDeferBlockDetails,\n  tNode: TNode,\n  lContainer: LContainer,\n  hostLView: LView<unknown>,\n): VoidFunction {\n  const callback = () => {\n    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n    if (nextState !== null) {\n      renderDeferBlockState(nextState, tNode, lContainer);\n    }\n  };\n  return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);\n}\n\n/**\n * Checks whether we can transition to the next state.\n *\n * We transition to the next state if the previous state was represented\n * with a number that is less than the next state. For example, if the current\n * state is \"loading\" (represented as `1`), we should not show a placeholder\n * (represented as `0`), but we can show a completed state (represented as `2`)\n * or an error state (represented as `3`).\n */\nfunction isValidStateChange(\n  currentState: DeferBlockState | DeferBlockInternalState,\n  newState: DeferBlockState,\n): boolean {\n  return currentState < newState;\n}\n\n/** Utility function to render placeholder content (if present) */\nexport function renderPlaceholder(lView: LView, tNode: TNode) {\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n\n  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\n}\n\n/**\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\n * based on the loading results.\n *\n * @param lContainer Represents an instance of a defer block.\n * @param tNode Represents defer block info shared across all instances.\n */\nexport function renderDeferStateAfterResourceLoading(\n  tDetails: TDeferBlockDetails,\n  tNode: TNode,\n  lContainer: LContainer,\n) {\n  ngDevMode &&\n    assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\n\n  tDetails.loadingPromise!.then(() => {\n    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n\n      // Everything is loaded, show the primary block content\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n    }\n  });\n}\n\n/**\n * Reference to the timer-based scheduler implementation of defer block state\n * rendering method. It's used to make timer-based scheduling tree-shakable.\n * If `minimum` or `after` parameters are used, compiler generates an extra\n * argument for the `ɵɵdefer` instruction, which references a timer-based\n * implementation.\n */\nlet applyDeferBlockStateWithSchedulingImpl: typeof applyDeferBlockState | null = null;\n\n/**\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\n * on the `@loading` or `@placeholder` blocks.\n */\nexport function ɵɵdeferEnableTimerScheduling(\n  tView: TView,\n  tDetails: TDeferBlockDetails,\n  placeholderConfigIndex?: number | null,\n  loadingConfigIndex?: number | null,\n) {\n  const tViewConsts = tView.consts;\n  if (placeholderConfigIndex != null) {\n    tDetails.placeholderBlockConfig = getConstant<DeferredPlaceholderBlockConfig>(\n      tViewConsts,\n      placeholderConfigIndex,\n    );\n  }\n  if (loadingConfigIndex != null) {\n    tDetails.loadingBlockConfig = getConstant<DeferredLoadingBlockConfig>(\n      tViewConsts,\n      loadingConfigIndex,\n    );\n  }\n\n  // Enable implementation that supports timer-based scheduling.\n  if (applyDeferBlockStateWithSchedulingImpl === null) {\n    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\n  }\n}\n"]}