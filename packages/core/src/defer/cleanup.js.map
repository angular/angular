{"version":3,"file":"cleanup.js","sourceRoot":"","sources":["cleanup.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EACL,2BAA2B,EAE3B,4BAA4B,EAC5B,mBAAmB,GAEpB,MAAM,cAAc,CAAC;AAEtB;;;GAGG;AACH,MAAM,UAAU,qBAAqB,CACnC,IAAiB,EACjB,QAA4B,EAC5B,SAAuB;IAEvB,MAAM,GAAG,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACxC,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC;QAC3B,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IACA,QAAQ,CAAC,GAAG,CAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACrD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,IAAiB,EAAE,QAA4B;IACrF,MAAM,GAAG,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAmB,CAAC;IACnD,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;QACxB,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,SAAS,EAAE,CAAC;QACd,CAAC;QACD,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IACvB,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,0BAA0B,CAAC,QAA4B;IACrE,uBAAuB,+BAAuB,QAAQ,CAAC,CAAC;IACxD,uBAAuB,8BAAsB,QAAQ,CAAC,CAAC;IACvD,uBAAuB,8BAAsB,QAAQ,CAAC,CAAC;AACzD,CAAC;AAED,SAAS,qBAAqB,CAAC,IAAiB;IAC9C,IAAI,GAAG,GAAG,mBAAmB,CAAC;IAC9B,IAAI,IAAI,iCAAyB,EAAE,CAAC;QAClC,GAAG,GAAG,4BAA4B,CAAC;IACrC,CAAC;SAAM,IAAI,IAAI,gCAAwB,EAAE,CAAC;QACxC,GAAG,GAAG,2BAA2B,CAAC;IACpC,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HYDRATE_TRIGGER_CLEANUP_FNS,\n  LDeferBlockDetails,\n  PREFETCH_TRIGGER_CLEANUP_FNS,\n  TRIGGER_CLEANUP_FNS,\n  TriggerType,\n} from './interfaces';\n\n/**\n * Registers a cleanup function associated with a prefetching trigger\n * or a regular trigger of a defer block.\n */\nexport function storeTriggerCleanupFn(\n  type: TriggerType,\n  lDetails: LDeferBlockDetails,\n  cleanupFn: VoidFunction,\n) {\n  const key = getCleanupFnKeyByType(type);\n  if (lDetails[key] === null) {\n    lDetails[key] = [];\n  }\n  (lDetails[key]! as VoidFunction[]).push(cleanupFn);\n}\n\n/**\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\n */\nexport function invokeTriggerCleanupFns(type: TriggerType, lDetails: LDeferBlockDetails) {\n  const key = getCleanupFnKeyByType(type);\n  const cleanupFns = lDetails[key] as VoidFunction[];\n  if (cleanupFns !== null) {\n    for (const cleanupFn of cleanupFns) {\n      cleanupFn();\n    }\n    lDetails[key] = null;\n  }\n}\n\n/**\n * Invokes registered cleanup functions for prefetch, hydrate, and regular triggers.\n */\nexport function invokeAllTriggerCleanupFns(lDetails: LDeferBlockDetails) {\n  invokeTriggerCleanupFns(TriggerType.Prefetch, lDetails);\n  invokeTriggerCleanupFns(TriggerType.Regular, lDetails);\n  invokeTriggerCleanupFns(TriggerType.Hydrate, lDetails);\n}\n\nfunction getCleanupFnKeyByType(type: TriggerType): number {\n  let key = TRIGGER_CLEANUP_FNS;\n  if (type === TriggerType.Prefetch) {\n    key = PREFETCH_TRIGGER_CLEANUP_FNS;\n  } else if (type === TriggerType.Hydrate) {\n    key = HYDRATE_TRIGGER_CLEANUP_FNS;\n  }\n  return key;\n}\n"]}