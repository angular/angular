{"version":3,"file":"instructions.js","sourceRoot":"","sources":["instructions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '../../primitives/signals';\n\nimport {\n  DEFER_BLOCK_ID,\n  DEFER_BLOCK_STATE as SERIALIZED_DEFER_BLOCK_STATE,\n} from '../hydration/interfaces';\nimport {populateDehydratedViewsInLContainer} from '../linker/view_container_ref';\nimport {bindingUpdated} from '../render3/bindings';\nimport {declareNoDirectiveHostTemplate} from '../render3/instructions/template';\nimport {DEHYDRATED_VIEWS} from '../render3/interfaces/container';\nimport {HEADER_OFFSET, INJECTOR, TVIEW} from '../render3/interfaces/view';\nimport {\n  getCurrentTNode,\n  getLView,\n  getSelectedTNode,\n  getTView,\n  nextBindingIndex,\n} from '../render3/state';\nimport {removeLViewOnDestroy, storeLViewOnDestroy} from '../render3/util/view_utils';\nimport {performanceMarkFeature} from '../util/performance';\nimport {invokeAllTriggerCleanupFns, storeTriggerCleanupFn} from './cleanup';\nimport {onViewportWrapper, registerDomTrigger} from './dom_triggers';\nimport {onHover, onInteraction} from '../../primitives/defer/src/triggers';\nimport {onIdle} from './idle_scheduler';\nimport {\n  DEFER_BLOCK_STATE,\n  DeferBlockInternalState,\n  DeferBlockState,\n  DeferDependenciesLoadingState,\n  DependencyResolverFn,\n  DeferBlockTrigger,\n  LDeferBlockDetails,\n  TDeferBlockDetails,\n  TriggerType,\n  SSR_UNIQUE_ID,\n  TDeferDetailsFlags,\n} from './interfaces';\nimport {onTimer} from './timer_scheduler';\nimport {\n  getLDeferBlockDetails,\n  getTDeferBlockDetails,\n  setLDeferBlockDetails,\n  setTDeferBlockDetails,\n  trackTriggerForDebugging,\n} from './utils';\nimport {DEHYDRATED_BLOCK_REGISTRY, DehydratedBlockRegistry} from './registry';\nimport {assertIncrementalHydrationIsConfigured, assertSsrIdDefined} from '../hydration/utils';\nimport {ɵɵdeferEnableTimerScheduling, renderPlaceholder} from './rendering';\n\nimport {\n  getHydrateTriggers,\n  triggerHydrationFromBlockName,\n  scheduleDelayedHydrating,\n  scheduleDelayedPrefetching,\n  scheduleDelayedTrigger,\n  triggerDeferBlock,\n  triggerPrefetching,\n  triggerResourceLoading,\n  shouldAttachTrigger,\n  hasHydrateTriggers,\n} from './triggering';\nimport {formatRuntimeError, RuntimeErrorCode} from '../errors';\nimport {Console} from '../console';\nimport {Injector} from '../di';\n\n/**\n * Indicates whether we've already produced a warning,\n * prevents the logic from producing it multiple times.\n */\nlet _hmrWarningProduced = false;\n\n/**\n * Logs a message into the console to indicate that `@defer` block\n * dependencies are loaded eagerly when the HMR mode is enabled.\n */\nfunction logHmrWarning(injector: Injector) {\n  if (!_hmrWarningProduced) {\n    _hmrWarningProduced = true;\n    const console = injector.get(Console);\n    // tslint:disable-next-line:no-console\n    console.log(\n      formatRuntimeError(\n        RuntimeErrorCode.DEFER_IN_HMR_MODE,\n        'Angular has detected that this application contains `@defer` blocks ' +\n          'and the hot module replacement (HMR) mode is enabled. All `@defer` ' +\n          'block dependencies will be loaded eagerly.',\n      ),\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for defer blocks.\n *\n * @param index Index of the `defer` instruction.\n * @param primaryTmplIndex Index of the template with the primary block content.\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\n * @param loadingTmplIndex Index of the template with the loading block content.\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\n * @param errorTmplIndex Index of the template with the error block content.\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\n *     block.\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\n *     placeholder block.\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\n * @param flags A set of flags to define a particular behavior (e.g. to indicate that\n *              hydrate triggers are present and regular triggers should be deactivated\n *              in certain scenarios).\n *\n * @codeGenApi\n */\nexport function ɵɵdefer(\n  index: number,\n  primaryTmplIndex: number,\n  dependencyResolverFn?: DependencyResolverFn | null,\n  loadingTmplIndex?: number | null,\n  placeholderTmplIndex?: number | null,\n  errorTmplIndex?: number | null,\n  loadingConfigIndex?: number | null,\n  placeholderConfigIndex?: number | null,\n  enableTimerScheduling?: typeof ɵɵdeferEnableTimerScheduling,\n  flags?: TDeferDetailsFlags | null,\n) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = declareNoDirectiveHostTemplate(lView, tView, index, null, 0, 0);\n  const injector = lView[INJECTOR];\n\n  if (tView.firstCreatePass) {\n    performanceMarkFeature('NgDefer');\n\n    if (ngDevMode) {\n      if (typeof ngHmrMode !== 'undefined' && ngHmrMode) {\n        logHmrWarning(injector);\n      }\n      if (hasHydrateTriggers(flags)) {\n        assertIncrementalHydrationIsConfigured(injector);\n      }\n    }\n\n    const tDetails: TDeferBlockDetails = {\n      primaryTmplIndex,\n      loadingTmplIndex: loadingTmplIndex ?? null,\n      placeholderTmplIndex: placeholderTmplIndex ?? null,\n      errorTmplIndex: errorTmplIndex ?? null,\n      placeholderBlockConfig: null,\n      loadingBlockConfig: null,\n      dependencyResolverFn: dependencyResolverFn ?? null,\n      loadingState: DeferDependenciesLoadingState.NOT_STARTED,\n      loadingPromise: null,\n      providers: null,\n      hydrateTriggers: null,\n      debug: null,\n      flags: flags ?? TDeferDetailsFlags.Default,\n    };\n    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\n    setTDeferBlockDetails(tView, adjustedIndex, tDetails);\n  }\n\n  const lContainer = lView[adjustedIndex];\n\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n\n  let ssrBlockState = null;\n  let ssrUniqueId: string | null = null;\n  if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {\n    const info = lContainer[DEHYDRATED_VIEWS][0].data;\n    ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;\n    ssrBlockState = info[SERIALIZED_DEFER_BLOCK_STATE];\n  }\n\n  // Init instance-specific defer details and store it.\n  const lDetails: LDeferBlockDetails = [\n    null, // NEXT_DEFER_BLOCK_STATE\n    DeferBlockInternalState.Initial, // DEFER_BLOCK_STATE\n    null, // STATE_IS_FROZEN_UNTIL\n    null, // LOADING_AFTER_CLEANUP_FN\n    null, // TRIGGER_CLEANUP_FNS\n    null, // PREFETCH_TRIGGER_CLEANUP_FNS\n    ssrUniqueId, // SSR_UNIQUE_ID\n    ssrBlockState, // SSR_BLOCK_STATE\n    null, // ON_COMPLETE_FNS\n    null, // HYDRATE_TRIGGER_CLEANUP_FNS\n  ];\n  setLDeferBlockDetails(lView, adjustedIndex, lDetails);\n\n  let registry: DehydratedBlockRegistry | null = null;\n  if (ssrUniqueId !== null) {\n    // Store this defer block in the registry, to have an access to\n    // internal data structures from hydration runtime code.\n    registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    registry.add(ssrUniqueId, {lView, tNode, lContainer});\n  }\n\n  const onLViewDestroy = () => {\n    invokeAllTriggerCleanupFns(lDetails);\n    if (ssrUniqueId !== null) {\n      registry?.cleanup([ssrUniqueId]);\n    }\n  };\n\n  // When defer block is triggered - unsubscribe from LView destroy cleanup.\n  storeTriggerCleanupFn(TriggerType.Regular, lDetails, () =>\n    removeLViewOnDestroy(lView, onLViewDestroy),\n  );\n  storeLViewOnDestroy(lView, onLViewDestroy);\n}\n\n/**\n * Loads defer block dependencies when a trigger value becomes truthy.\n * @codeGenApi\n */\nexport function ɵɵdeferWhen(rawValue: unknown) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'when <expression>');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const lDetails = getLDeferBlockDetails(lView, tNode);\n      const renderedState = lDetails[DEFER_BLOCK_STATE];\n      if (value === false && renderedState === DeferBlockInternalState.Initial) {\n        // If nothing is rendered yet, render a placeholder (if defined).\n        renderPlaceholder(lView, tNode);\n      } else if (\n        value === true &&\n        (renderedState === DeferBlockInternalState.Initial ||\n          renderedState === DeferBlockState.Placeholder)\n      ) {\n        triggerDeferBlock(TriggerType.Regular, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\n * Prefetches the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchWhen(rawValue: unknown) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch when <expression>');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const bindingIndex = nextBindingIndex();\n\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const tView = lView[TVIEW];\n      const tDetails = getTDeferBlockDetails(tView, tNode);\n      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        // If loading has not been started yet, trigger it now.\n        triggerPrefetching(tDetails, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\n * Hydrates the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateWhen(rawValue: unknown) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate when <expression>');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  // TODO(incremental-hydration): audit all defer instructions to reduce unnecessary work by\n  // moving function calls inside their relevant control flow blocks\n  const bindingIndex = nextBindingIndex();\n  const tView = getTView();\n  const hydrateTriggers = getHydrateTriggers(tView, tNode);\n  hydrateTriggers.set(DeferBlockTrigger.When, null);\n\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      // We are on the server and SSR for defer blocks is enabled.\n      triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n    } else {\n      const injector = lView[INJECTOR];\n      const prevConsumer = setActiveConsumer(null);\n      try {\n        const value = Boolean(rawValue); // handle truthy or falsy values\n        if (value === true) {\n          // The `when` condition has changed to `true`, trigger defer block loading\n          // if the block is either in initial (nothing is rendered) or a placeholder\n          // state.\n          const lDetails = getLDeferBlockDetails(lView, tNode);\n          const ssrUniqueId = lDetails[SSR_UNIQUE_ID]!;\n          ngDevMode && assertSsrIdDefined(ssrUniqueId);\n          triggerHydrationFromBlockName(injector, ssrUniqueId);\n        }\n      } finally {\n        setActiveConsumer(prevConsumer);\n      }\n    }\n  }\n}\n\n/**\n * Specifies that hydration never occurs.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateNever() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate never');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Never, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n}\n\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on idle');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  scheduleDelayedTrigger(onIdle);\n}\n\n/**\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on idle');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  scheduleDelayedPrefetching(onIdle, DeferBlockTrigger.Idle);\n}\n\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on idle');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Idle, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onIdle, lView, tNode);\n  }\n}\n\n/**\n * Sets up logic to handle the `on immediate` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on immediate');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  // Render placeholder block only if loading template is not present and we're on\n  // the client to avoid content flickering, since it would be immediately replaced\n  // by the loading block.\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  if (tDetails.loadingTmplIndex === null) {\n    renderPlaceholder(lView, tNode);\n  }\n  triggerDeferBlock(TriggerType.Regular, lView, tNode);\n}\n\n/**\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on immediate');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    triggerResourceLoading(tDetails, lView, tNode);\n  }\n}\n\n/**\n * Sets up logic to handle the `on immediate` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on immediate');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Immediate, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  } else {\n    const injector = lView[INJECTOR];\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const ssrUniqueId = lDetails[SSR_UNIQUE_ID]!;\n    ngDevMode && assertSsrIdDefined(ssrUniqueId);\n    triggerHydrationFromBlockName(injector, ssrUniqueId);\n  }\n}\n/**\n * Creates runtime data structures for the `on timer` deferred trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nexport function ɵɵdeferOnTimer(delay: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  scheduleDelayedTrigger(onTimer(delay));\n}\n\n/**\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\n * @param delay Amount of time to wait before prefetching the content.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnTimer(delay: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  scheduleDelayedPrefetching(onTimer(delay), DeferBlockTrigger.Timer);\n}\n\n/**\n * Creates runtime data structures for the `on timer` hydrate trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnTimer(delay: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Timer, {delay});\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onTimer(delay), lView, tNode);\n  }\n}\n\n/**\n * Creates runtime data structures for the `on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnHover(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `on hover${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  renderPlaceholder(lView, tNode);\n\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onHover,\n      () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n      TriggerType.Regular,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnHover(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `prefetch on hover${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onHover,\n      () => triggerPrefetching(tDetails, lView, tNode),\n      TriggerType.Prefetch,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `on hover` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnHover() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on hover');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Hover, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n  // The actual triggering of hydration on hover is handled by JSAction in\n  // event_replay.ts.\n}\n\n/**\n * Creates runtime data structures for the `on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnInteraction(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  renderPlaceholder(lView, tNode);\n\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onInteraction,\n      () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n      TriggerType.Regular,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnInteraction(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `prefetch on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onInteraction,\n      () => triggerPrefetching(tDetails, lView, tNode),\n      TriggerType.Prefetch,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `on interaction` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnInteraction() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on interaction');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Interaction, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n  // The actual triggering of hydration on interaction is handled by JSAction in\n  // event_replay.ts.\n}\n\n/**\n * Creates runtime data structures for the `on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnViewport(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  renderPlaceholder(lView, tNode);\n\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onViewportWrapper,\n      () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n      TriggerType.Regular,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnViewport(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `prefetch on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onViewportWrapper,\n      () => triggerPrefetching(tDetails, lView, tNode),\n      TriggerType.Prefetch,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `on viewport` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnViewport() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on viewport');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Viewport, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n  // The actual triggering of hydration on viewport happens in triggering.ts,\n  // since these instructions won't exist for dehydrated content.\n}\n"]}