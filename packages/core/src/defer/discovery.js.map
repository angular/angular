{"version":3,"file":"discovery.js","sourceRoot":"","sources":["discovery.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,uBAAuB,EAAC,MAAM,iCAAiC,CAAC;AAExE,OAAO,EAAC,YAAY,EAAE,OAAO,EAAC,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAAC,aAAa,EAAE,IAAI,EAAS,KAAK,EAAC,MAAM,4BAA4B,CAAC;AAG7E,OAAO,EAAC,qBAAqB,EAAE,oBAAoB,EAAC,MAAM,SAAS,CAAC;AASpE;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAAC,KAAY,EAAE,WAAgC;IAC3E,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,KAAK,IAAI,CAAC,GAAG,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7D,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,0EAA0E;YAC1E,+EAA+E;YAC/E,yBAAyB;YACzB,MAAM,MAAM,GAAG,CAAC,KAAK,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAU,CAAC;gBACrC,MAAM,QAAQ,GAAG,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACrD,IAAI,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACnC,WAAW,CAAC,IAAI,CAAC,EAAC,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC,CAAC;oBACvD,uDAAuD;oBACvD,6DAA6D;oBAC7D,SAAS;gBACX,CAAC;YACH,CAAC;YAED,sDAAsD;YACtD,mDAAmD;YACnD,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;gBAC9B,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;YAChD,CAAC;YAED,KAAK,IAAI,CAAC,GAAG,uBAAuB,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjE,cAAc,CAAC,UAAU,CAAC,CAAC,CAAU,EAAE,WAAW,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;aAAM,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC7B,+DAA+D;YAC/D,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CONTAINER_HEADER_OFFSET} from '../render3/interfaces/container';\nimport {TNode} from '../render3/interfaces/node';\nimport {isLContainer, isLView} from '../render3/interfaces/type_checks';\nimport {HEADER_OFFSET, HOST, LView, TVIEW} from '../render3/interfaces/view';\n\nimport {DehydratedDeferBlock, TDeferBlockDetails} from './interfaces';\nimport {getTDeferBlockDetails, isTDeferBlockDetails} from './utils';\n\n/**\n * Defer block instance for testing.\n */\nexport interface DeferBlockDetails extends DehydratedDeferBlock {\n  tDetails: TDeferBlockDetails;\n}\n\n/**\n * Retrieves all defer blocks in a given LView.\n *\n * @param lView lView with defer blocks\n * @param deferBlocks defer block aggregator array\n */\nexport function getDeferBlocks(lView: LView, deferBlocks: DeferBlockDetails[]) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      // An LContainer may represent an instance of a defer block, in which case\n      // we store it as a result. Otherwise, keep iterating over LContainer views and\n      // look for defer blocks.\n      const isLast = i === tView.bindingStartIndex - 1;\n      if (!isLast) {\n        const tNode = tView.data[i] as TNode;\n        const tDetails = getTDeferBlockDetails(tView, tNode);\n        if (isTDeferBlockDetails(tDetails)) {\n          deferBlocks.push({lContainer, lView, tNode, tDetails});\n          // This LContainer represents a defer block, so we exit\n          // this iteration and don't inspect views in this LContainer.\n          continue;\n        }\n      }\n\n      // The host can be an `LView` if this is the container\n      // for a component that injects `ViewContainerRef`.\n      if (isLView(lContainer[HOST])) {\n        getDeferBlocks(lContainer[HOST], deferBlocks);\n      }\n\n      for (let j = CONTAINER_HEADER_OFFSET; j < lContainer.length; j++) {\n        getDeferBlocks(lContainer[j] as LView, deferBlocks);\n      }\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `getDeferBlocks` recursively.\n      getDeferBlocks(lView[i], deferBlocks);\n    }\n  }\n}\n"]}