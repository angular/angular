/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */

import {inject, ɵɵdefineInjectable} from '../di';
import {DOCUMENT} from '../document';
import {RendererFactory2} from '../render/api';
import {INJECTOR, LView} from '../render3/interfaces/view';
import {TDeferBlockDetails} from './interfaces';

/**
 * Creates prefetch links for defer blocks.
 *
 */
export function createPrefetchLinkDeferBlocks(lView: LView, tDetails: TDeferBlockDetails) {
  const injector = lView[INJECTOR];
  const preloadService = injector.get(DeferBlockFetchLinkCreator);
  preloadService.generatePrefetchLinks(tDetails);
}

/**
 * This service extracts import paths from defer block dependencies and generates
 * prefetch hints `<link rel="prefetch">` that allow browsers to start downloading JavaScript chunks earlier,
 * reducing the time between user interaction and content display.
 *
 * @internal
 */
export class DeferBlockFetchLinkCreator {
  private readonly document = inject(DOCUMENT);
  private readonly rendererFactory = inject(RendererFactory2);
  private readonly preloadedModules = new Set<string>();
  private readonly renderer = this.rendererFactory.createRenderer(null, null);

  generatePrefetchLinks(tDetails: TDeferBlockDetails): void {
    if (!tDetails.dependencyResolverFn) {
      return;
    }

    const importPaths = this.extractImportPaths(tDetails.dependencyResolverFn);

    for (const importPath of importPaths) {
      if (!this.preloadedModules.has(importPath)) {
        this.createPrefetchLink(importPath);
        this.preloadedModules.add(importPath);
      }
    }
  }

  /**
   * Extracts import paths from a dependency resolver function.
   *
   * The resolver function is generated by the compiler and contains
   * dynamic import statements like: import("./chunk-HASH.js")
   *
   * @param resolverFn The dependency resolver function
   * @returns Array of import paths found in the function
   */
  private extractImportPaths(resolverFn: Function): string[] {
    const fnString = resolverFn.toString();
    const importPaths: string[] = [];

    // Match import("./chunk-HASH.js") pattern
    const importRegex = /import\("\.\/([^"]+)"\)/g;
    let match: RegExpExecArray | null;

    while ((match = importRegex.exec(fnString)) !== null) {
      importPaths.push(match[1]);
    }

    return importPaths;
  }

  /**
   * Creates a single <link rel="prefetch"> element and appends it to <body>.
   * @param href The module URL to prefetch
   */
  private createPrefetchLink(href: string): void {
    const link = this.renderer.createElement('link');
    this.renderer.setAttribute(link, 'rel', 'prefetch');
    this.renderer.setAttribute(link, 'href', href);

    this.renderer.appendChild(this.document.body, link);
  }

  /** @nocollapse */
  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({
    token: DeferBlockFetchLinkCreator,
    providedIn: 'root',
    factory: () => new DeferBlockFetchLinkCreator(),
  });
}
