{"version":3,"file":"error_handler.js","sourceRoot":"","sources":["error_handler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ENVIRONMENT_INITIALIZER} from './di/initializer_token';\nimport {InjectionToken} from './di/injection_token';\nimport {inject} from './di/injector_compatibility';\nimport type {EnvironmentProviders} from './di/interface/provider';\nimport {makeEnvironmentProviders, provideEnvironmentInitializer} from './di/provider_collection';\nimport {EnvironmentInjector} from './di/r3_injector';\nimport {DOCUMENT} from './document';\nimport {RuntimeError, RuntimeErrorCode} from './errors';\nimport {DestroyRef} from './linker/destroy_ref';\nimport {NgZone} from './zone/ng_zone';\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * // Provide in standalone apps\n * bootstrapApplication(AppComponent, {\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n *\n * // Provide in module-based apps\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    this._console.error('ERROR', error);\n  }\n}\n\n/**\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\n */\nexport const INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken<(e: any) => void>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'internal error handler' : '',\n  {\n    providedIn: 'root',\n    factory: () => {\n      // The user's error handler may depend on things that create a circular dependency\n      // so we inject it lazily.\n      const zone = inject(NgZone);\n      const injector = inject(EnvironmentInjector);\n      let userErrorHandler: ErrorHandler;\n      return (e: unknown) => {\n        zone.runOutsideAngular(() => {\n          if (injector.destroyed && !userErrorHandler) {\n            setTimeout(() => {\n              throw e;\n            });\n          } else {\n            userErrorHandler ??= injector.get(ErrorHandler);\n            userErrorHandler.handleError(e);\n          }\n        });\n      };\n    },\n  },\n);\n\nexport const errorHandlerEnvironmentInitializer = {\n  provide: ENVIRONMENT_INITIALIZER,\n  useValue: () => {\n    const handler = inject(ErrorHandler, {optional: true});\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && handler === null) {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP,\n        `A required Injectable was not found in the dependency injection tree. ` +\n          'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.',\n      );\n    }\n  },\n  multi: true,\n};\n\nconst globalErrorListeners = new InjectionToken<void>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'GlobalErrorListeners' : '',\n  {\n    providedIn: 'root',\n    factory: () => {\n      if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n        return;\n      }\n      const window = inject(DOCUMENT).defaultView;\n      if (!window) {\n        return;\n      }\n\n      const errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n      const rejectionListener = (e: PromiseRejectionEvent) => {\n        errorHandler(e.reason);\n        e.preventDefault();\n      };\n      const errorListener = (e: ErrorEvent) => {\n        if (e.error) {\n          errorHandler(e.error);\n        } else {\n          errorHandler(\n            new Error(\n              ngDevMode\n                ? `An ErrorEvent with no error occurred. See Error.cause for details: ${e.message}`\n                : e.message,\n              {cause: e},\n            ),\n          );\n        }\n        e.preventDefault();\n      };\n\n      const setupEventListeners = () => {\n        window.addEventListener('unhandledrejection', rejectionListener);\n        window.addEventListener('error', errorListener);\n      };\n\n      // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\n      // the scope of this functionality.\n      if (typeof Zone !== 'undefined') {\n        Zone.root.run(setupEventListeners);\n      } else {\n        setupEventListeners();\n      }\n\n      inject(DestroyRef).onDestroy(() => {\n        window.removeEventListener('error', errorListener);\n        window.removeEventListener('unhandledrejection', rejectionListener);\n      });\n    },\n  },\n);\n\n/**\n * Provides an environment initializer which forwards unhandled errors to the ErrorHandler.\n *\n * The listeners added are for the window's 'unhandledrejection' and 'error' events.\n *\n * @publicApi\n */\nexport function provideBrowserGlobalErrorListeners(): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    provideEnvironmentInitializer(() => void inject(globalErrorListeners)),\n  ]);\n}\n"]}