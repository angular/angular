{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["interfaces.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAErD;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,cAAc,CACnD,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,EACzE;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,GAAG,EAAE,CAAC,KAAK;CACrB,CACF,CAAC;AAUF;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,cAAc,CACrD,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,EAC1E;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,GAAG,EAAE,CAAC,6BAA6B;CAC7C,CACF,CAAC;AACF,MAAM,6BAA6B,GAAG,IAAI,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {InjectionToken} from '../di/injection_token';\n\n/**\n * A [DI token](api/core/InjectionToken) that enables or disables all enter and leave animations.\n */\nexport const ANIMATIONS_DISABLED = new InjectionToken<boolean>(\n  typeof ngDevMode !== 'undefined' && ngDevMode ? 'AnimationsDisabled' : '',\n  {\n    providedIn: 'root',\n    factory: () => false,\n  },\n);\n\n/**\n * The event type for when `animate.enter` and `animate.leave` are used with function\n * callbacks.\n *\n * @publicApi 20.2\n */\nexport type AnimationCallbackEvent = {target: Element; animationComplete: Function};\n\n/**\n * A [DI token](api/core/InjectionToken) that configures the maximum animation timeout\n * before element removal. The default value mirrors from Chrome's cross document\n * navigation view transition timeout. It's intended to prevent people from accidentally\n * forgetting to call the removal function in their callback. Also serves as a delay\n * for when stylesheets are pruned.\n *\n * @publicApi 20.2\n */\nexport const MAX_ANIMATION_TIMEOUT = new InjectionToken<number>(\n  typeof ngDevMode !== 'undefined' && ngDevMode ? 'MaxAnimationTimeout' : '',\n  {\n    providedIn: 'root',\n    factory: () => MAX_ANIMATION_TIMEOUT_DEFAULT,\n  },\n);\nconst MAX_ANIMATION_TIMEOUT_DEFAULT = 4000;\n\n/**\n * The function type for `animate.enter` and `animate.leave` when they are used with\n * function callbacks.\n *\n * @publicApi 20.2\n */\nexport type AnimationFunction = (event: AnimationCallbackEvent) => void;\n\nexport type AnimationEventFunction = (\n  el: Element,\n  value: AnimationFunction,\n) => AnimationRemoveFunction;\nexport type AnimationClassFunction = (\n  el: Element,\n  value: Set<string> | null,\n  resolvers: Function[] | undefined,\n) => AnimationRemoveFunction;\nexport type AnimationRemoveFunction = (removeFn: VoidFunction) => void;\n\nexport interface AnimationDetails {\n  classes: Set<string> | null;\n  classFns?: Function[];\n  animateFn: AnimationRemoveFunction;\n  isEventBinding: boolean;\n}\n\nexport interface LongestAnimation {\n  animationName: string | undefined;\n  propertyName: string | undefined;\n  duration: number;\n}\n\nexport interface AnimationLViewData {\n  // Enter animations that apply to nodes in this view\n  enter?: Function[];\n\n  // Leave animations that apply to nodes in this view\n  leave?: (() => Promise<void>)[];\n\n  // Leave animations that apply to nodes in this view\n  // We chose to use unknown instead of PromiseSettledResult<void> to avoid requiring the type\n  running?: Promise<unknown>;\n\n  // Skip leave animations\n  // This flag is solely used when move operations occur. DOM Node move\n  // operations occur in lists, like `@for` loops, and use the same code\n  // path during move that detaching or removing does. So to prevent\n  // unexpected disappearing of moving nodes, we use this flag to skip\n  // the animations in that case.\n  skipLeaveAnimations?: boolean;\n}\n"]}