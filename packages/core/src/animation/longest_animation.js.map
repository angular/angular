{"version":3,"file":"longest_animation.js","sourceRoot":"","sources":["longest_animation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LView} from '../render3/interfaces/view';\nimport {LongestAnimation} from './interfaces';\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map((part) => part.trim());\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getLongestComputedTransition(computedStyle: CSSStyleDeclaration): LongestAnimation {\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  const longest = {propertyName: '', duration: 0, animationName: undefined};\n  for (let i = 0; i < transitionedProperties.length; i++) {\n    const duration = parseCssTimeUnitsToMs(rawDelays[i]) + parseCssTimeUnitsToMs(rawDurations[i]);\n    if (duration > longest.duration) {\n      longest.propertyName = transitionedProperties[i];\n      longest.duration = duration;\n    }\n  }\n  return longest;\n}\n\nfunction getLongestComputedAnimation(computedStyle: CSSStyleDeclaration): LongestAnimation {\n  const rawNames = parseCssPropertyValue(computedStyle, 'animation-name');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'animation-delay');\n  const rawDurations = parseCssPropertyValue(computedStyle, 'animation-duration');\n  const longest: LongestAnimation = {animationName: '', propertyName: undefined, duration: 0};\n  for (let i = 0; i < rawNames.length; i++) {\n    const duration = parseCssTimeUnitsToMs(rawDelays[i]) + parseCssTimeUnitsToMs(rawDurations[i]);\n    if (duration > longest.duration) {\n      longest.animationName = rawNames[i];\n      longest.duration = duration;\n    }\n  }\n  return longest;\n}\n\nfunction isShorterThanExistingAnimation(\n  existing: LongestAnimation | undefined,\n  longest: LongestAnimation,\n): boolean {\n  return existing !== undefined && existing.duration > longest.duration;\n}\n\nfunction longestExists(longest: LongestAnimation): boolean {\n  return (\n    (longest.animationName != undefined || longest.propertyName != undefined) &&\n    longest.duration > 0\n  );\n}\n\n/**\n * Determines the longest animation, but with `getComputedStyles` instead of `getAnimations`. This\n * is ultimately safer than getAnimations because it can be used when recalculations are in\n * progress. `getAnimations()` will be empty in that case.\n */\nfunction determineLongestAnimationFromComputedStyles(\n  el: HTMLElement,\n  animationsMap: WeakMap<HTMLElement, LongestAnimation>,\n): void {\n  const computedStyle = getComputedStyle(el);\n\n  const longestAnimation = getLongestComputedAnimation(computedStyle);\n  const longestTransition = getLongestComputedTransition(computedStyle);\n\n  const longest =\n    longestAnimation.duration > longestTransition.duration ? longestAnimation : longestTransition;\n  if (isShorterThanExistingAnimation(animationsMap.get(el), longest)) return;\n  if (longestExists(longest)) {\n    animationsMap.set(el, longest);\n  }\n}\n\n/**\n * Multiple animations can be set on an element. This grabs an element and\n * determines which of those will be the longest duration. If we didn't do\n * this, elements would be removed whenever the first animation completes.\n * This ensures we get the longest running animation and only remove when\n * that animation completes.\n */\nexport function determineLongestAnimation(\n  el: HTMLElement,\n  animationsMap: WeakMap<HTMLElement, LongestAnimation>,\n  areAnimationSupported: boolean,\n): void {\n  if (!areAnimationSupported) return;\n  const animations = el.getAnimations();\n  return animations.length === 0\n    ? // fallback to computed styles if getAnimations is empty. This would happen if styles are\n      // currently recalculating due to a reflow happening elsewhere.\n      determineLongestAnimationFromComputedStyles(el, animationsMap)\n    : determineLongestAnimationFromElementAnimations(el, animationsMap, animations);\n}\n\nfunction determineLongestAnimationFromElementAnimations(\n  el: HTMLElement,\n  animationsMap: WeakMap<HTMLElement, LongestAnimation>,\n  animations: Animation[],\n): void {\n  let longest: LongestAnimation = {\n    animationName: undefined,\n    propertyName: undefined,\n    duration: 0,\n  };\n  for (const animation of animations) {\n    const timing = animation.effect?.getTiming();\n    // duration can be a string 'auto' or a number.\n    const animDuration = typeof timing?.duration === 'number' ? timing.duration : 0;\n    let duration = (timing?.delay ?? 0) + animDuration;\n\n    let propertyName: string | undefined;\n    let animationName: string | undefined;\n\n    if ((animation as CSSAnimation).animationName) {\n      animationName = (animation as CSSAnimation).animationName;\n    } else {\n      // Check for CSSTransition specific property\n      propertyName = (animation as CSSTransition).transitionProperty;\n    }\n\n    if (duration >= longest.duration) {\n      longest = {animationName, propertyName, duration};\n    }\n  }\n  if (isShorterThanExistingAnimation(animationsMap.get(el), longest)) return;\n  if (longestExists(longest)) {\n    animationsMap.set(el, longest);\n  }\n}\n\nexport const allLeavingAnimations = new Set<LView>();\n"]}