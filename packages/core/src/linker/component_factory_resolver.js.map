{"version":3,"file":"component_factory_resolver.js","sourceRoot":"","sources":["component_factory_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAmB,MAAM,WAAW,CAAC;AAEzD,OAAO,EAAC,SAAS,EAAC,MAAM,mBAAmB,CAAC;AAI5C,MAAM,6BAA6B;IACjC,uBAAuB,CAAI,SAAoC;QAC7D,MAAM,IAAI,YAAY,wDAEpB,OAAO,SAAS,KAAK,WAAW;YAC9B,SAAS;YACT,kCAAkC,SAAS,CAAC,SAAS,CAAC,GAAG,CAC5D,CAAC;IACJ,CAAC;CACF;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,OAAgB,wBAAwB;;AACrC,6BAAI,GAA6C,IAAI,6BAA6B,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport type {ComponentFactory} from './component_factory';\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw new RuntimeError(\n      RuntimeErrorCode.NO_COMPONENT_FACTORY_FOUND,\n      typeof ngDevMode !== 'undefined' &&\n        ngDevMode &&\n        `No component factory found for ${stringify(component)}.`,\n    );\n  }\n}\n\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = /* @__PURE__ */ new _NullComponentFactoryResolver();\n  /**\n   * Retrieves the factory object that creates a component of the given type.\n   * @param component The component type.\n   */\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n"]}