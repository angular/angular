{"version":3,"file":"component_factory.js","sourceRoot":"","sources":["component_factory.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAYH;;;;;;GAMG;AACH,MAAM,OAAgB,YAAY;CAsDjC;AAED;;;;;;;;;GASG;AACH,MAAM,OAAgB,gBAAgB;CAqCrC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {ChangeDetectorRef} from '../change_detection/change_detection';\nimport type {Injector} from '../di/injector';\nimport type {EnvironmentInjector} from '../di/r3_injector';\nimport type {Type} from '../interface/type';\nimport type {Binding, DirectiveWithBindings} from '../render3/dynamic_bindings';\n\nimport type {ElementRef} from './element_ref';\nimport type {NgModuleRef} from './ng_module_factory';\nimport type {ViewRef} from './view_ref';\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * Updates a specified input name to a new value. Using this method will properly mark for check\n   * component using the `OnPush` change detection strategy. It will also assure that the\n   * `OnChanges` lifecycle hook runs when a dynamically created component is change-detected.\n   *\n   * @param name The name of an input.\n   * @param value The new value of an input.\n   */\n  abstract setInput(name: string, value: unknown): void;\n\n  /**\n   * The host or anchor element for this component instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The dependency injector for this component instance.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * This component instance.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The host view defined by the template\n   * for this component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The change detector for this component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The type of this component (as created by a `ComponentFactory` class).\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for the component.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with this component. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport abstract class ComponentFactory<C> {\n  /**\n   * The component's HTML selector.\n   */\n  abstract get selector(): string;\n  /**\n   * The type of component the factory will create.\n   */\n  abstract get componentType(): Type<any>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * The inputs of the component.\n   */\n  abstract get inputs(): {\n    propName: string;\n    templateName: string;\n    transform?: (value: any) => any;\n    isSignal: boolean;\n  }[];\n  /**\n   * The outputs of the component.\n   */\n  abstract get outputs(): {propName: string; templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n    injector: Injector,\n    projectableNodes?: any[][],\n    rootSelectorOrNode?: string | any,\n    environmentInjector?: EnvironmentInjector | NgModuleRef<any>,\n    directives?: (Type<unknown> | DirectiveWithBindings<unknown>)[],\n    bindings?: Binding[],\n  ): ComponentRef<C>;\n}\n"]}