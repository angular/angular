{"version":3,"file":"template_ref.js","sourceRoot":"","sources":["template_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,OAAO,EAAC,eAAe,EAAE,QAAQ,EAAC,MAAM,kBAAkB,CAAC;AAC3D,OAAO,EAAC,4BAA4B,EAAC,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAC,OAAO,EAAC,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAC,aAAa,EAAC,MAAM,gBAAgB,CAAC;AAE7C,OAAO,EAAC,gBAAgB,EAAa,MAAM,eAAe,CAAC;AAG3D;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,OAAO,WAAW;IAoBtB,gBAAgB;IAChB,YACU,iBAAwB,EACxB,sBAAsC,EAC9C,UAAsB;QAFd,sBAAiB,GAAjB,iBAAiB,CAAO;QACxB,2BAAsB,GAAtB,sBAAsB,CAAgB;QAG9C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC;IAC1D,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB,CAAC,OAAU,EAAE,QAAmB;QAChD,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED;;;;;;;;OAQG;IACH,sBAAsB,CACpB,OAAU,EACV,QAAmB,EACnB,cAA+C;QAE/C,MAAM,aAAa,GAAG,4BAA4B,CAChD,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,sBAAsB,EAC3B,OAAO,EACP,EAAC,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAC,CACjD,CAAC;QACF,OAAO,IAAI,OAAO,CAAI,aAAa,CAAC,CAAC;IACvC,CAAC;;AAzDD;;;GAGG;AACI,6BAAiB,GAAkC,iBAAiB,CAAC;AAwD9E;;;;GAIG;AACH,MAAM,UAAU,iBAAiB;IAC/B,OAAO,iBAAiB,CAAI,eAAe,EAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,iBAAiB,CAAI,SAAgB,EAAE,SAAgB;IACrE,IAAI,SAAS,CAAC,IAAI,8BAAsB,EAAE,CAAC;QACzC,SAAS,IAAI,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;QACvE,OAAO,IAAI,WAAW,CACpB,SAAS,EACT,SAA2B,EAC3B,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,CACvC,CAAC;IACJ,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport {DehydratedContainerView} from '../hydration/interfaces';\nimport {TContainerNode, TNode, TNodeType} from '../render3/interfaces/node';\nimport {LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {createAndRenderEmbeddedLView} from '../render3/view_manipulation';\nimport {ViewRef} from '../render3/view_ref';\nimport {assertDefined} from '../util/assert';\n\nimport {createElementRef, ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see {@link ViewContainerRef}\n *\n * @publicApi\n */\nexport class TemplateRef<C> {\n  /**\n   * The anchor element in the parent view for this embedded view.\n   *\n   * The data-binding and [injection contexts](guide/di/dependency-injection-context) of embedded\n   * views created from this `TemplateRef` inherit from the contexts of this location.\n   *\n   * Typically new embedded views are attached to the view container of this location, but in\n   * advanced use-cases, the view can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  readonly elementRef: ElementRef;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => TemplateRef<any> | null = injectTemplateRef;\n\n  /** @internal */\n  constructor(\n    private _declarationLView: LView,\n    private _declarationTContainer: TContainerNode,\n    elementRef: ElementRef,\n  ) {\n    this.elementRef = elementRef;\n  }\n\n  /**\n   * Returns an `ssrId` associated with a TView, which was used to\n   * create this instance of the `TemplateRef`.\n   *\n   * @internal\n   */\n  get ssrId(): string | null {\n    return this._declarationTContainer.tView?.ssrId || null;\n  }\n\n  /**\n   * Instantiates an unattached embedded view based on this template.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param injector Injector to be used within the embedded view.\n   * @returns The new embedded view object.\n   */\n  createEmbeddedView(context: C, injector?: Injector): EmbeddedViewRef<C> {\n    return this.createEmbeddedViewImpl(context, injector);\n  }\n\n  /**\n   * Implementation of the `createEmbeddedView` function.\n   *\n   * This implementation is internal and allows framework code\n   * to invoke it with extra parameters (e.g. for hydration) without\n   * affecting public API.\n   *\n   * @internal\n   */\n  createEmbeddedViewImpl(\n    context: C,\n    injector?: Injector,\n    dehydratedView?: DehydratedContainerView | null,\n  ): EmbeddedViewRef<C> {\n    const embeddedLView = createAndRenderEmbeddedLView(\n      this._declarationLView,\n      this._declarationTContainer,\n      context,\n      {embeddedViewInjector: injector, dehydratedView},\n    );\n    return new ViewRef<C>(embeddedLView);\n  }\n}\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(): TemplateRef<T> | null {\n  return createTemplateRef<T>(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nexport function createTemplateRef<T>(hostTNode: TNode, hostLView: LView): TemplateRef<T> | null {\n  if (hostTNode.type & TNodeType.Container) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new TemplateRef(\n      hostLView,\n      hostTNode as TContainerNode,\n      createElementRef(hostTNode, hostLView),\n    );\n  }\n  return null;\n}\n"]}