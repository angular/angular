{"version":3,"file":"bypass.js","sourceRoot":"","sources":["bypass.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAoD3D,MAAe,aAAa;IAC1B,YAAmB,qCAA6C;QAA7C,0CAAqC,GAArC,qCAAqC,CAAQ;IAAG,CAAC;IAIpE,QAAQ;QACN,OAAO,CACL,0CAA0C,IAAI,CAAC,qCAAqC,EAAE;YACtF,SAAS,gBAAgB,GAAG,CAC7B,CAAC;IACJ,CAAC;CACF;AAED,MAAM,YAAa,SAAQ,aAAa;IAC7B,WAAW;QAClB,oCAAuB;IACzB,CAAC;CACF;AACD,MAAM,aAAc,SAAQ,aAAa;IAC9B,WAAW;QAClB,sCAAwB;IAC1B,CAAC;CACF;AACD,MAAM,cAAe,SAAQ,aAAa;IAC/B,WAAW;QAClB,wCAAyB;IAC3B,CAAC;CACF;AACD,MAAM,WAAY,SAAQ,aAAa;IAC5B,WAAW;QAClB,kCAAsB;IACxB,CAAC;CACF;AACD,MAAM,mBAAoB,SAAQ,aAAa;IACpC,WAAW;QAClB,kDAA8B;IAChC,CAAC;CACF;AAID,MAAM,UAAU,eAAe,CAAI,KAAoB;IACrD,OAAO,KAAK,YAAY,aAAa;QACnC,CAAC,CAAE,KAAK,CAAC,qCAAkD;QAC3D,CAAC,CAAE,KAAkB,CAAC;AAC1B,CAAC;AAoBD,MAAM,UAAU,+BAA+B,CAAC,KAAU,EAAE,IAAgB;IAC1E,MAAM,UAAU,GAAG,yBAAyB,CAAC,KAAK,CAAC,CAAC;IACpD,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;QAC9C,sEAAsE;QACtE,IAAI,UAAU,+CAA2B,IAAI,IAAI,+BAAmB;YAAE,OAAO,IAAI,CAAC;QAClF,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,WAAW,UAAU,SAAS,gBAAgB,GAAG,CAAC,CAAC;IAC5F,CAAC;IACD,OAAO,UAAU,KAAK,IAAI,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAU;IAClD,OAAO,CAAC,KAAK,YAAY,aAAa,IAAK,KAAK,CAAC,WAAW,EAAiB,CAAC,IAAI,IAAI,CAAC;AACzF,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,2BAA2B,CAAC,WAAmB;IAC7D,OAAO,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;AACvC,CAAC;AACD;;;;;;;;GAQG;AACH,MAAM,UAAU,4BAA4B,CAAC,YAAoB;IAC/D,OAAO,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC;AACzC,CAAC;AACD;;;;;;;;GAQG;AACH,MAAM,UAAU,6BAA6B,CAAC,aAAqB;IACjE,OAAO,IAAI,cAAc,CAAC,aAAa,CAAC,CAAC;AAC3C,CAAC;AACD;;;;;;;;GAQG;AACH,MAAM,UAAU,0BAA0B,CAAC,UAAkB;IAC3D,OAAO,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC;AACD;;;;;;;;GAQG;AACH,MAAM,UAAU,kCAAkC,CAAC,kBAA0B;IAC3E,OAAO,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;AACrD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\n\nexport const enum BypassType {\n  Url = 'URL',\n  Html = 'HTML',\n  ResourceUrl = 'ResourceURL',\n  Script = 'Script',\n  Style = 'Style',\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {}\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return (\n      `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n      ` (see ${XSS_SECURITY_URL})`\n    );\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  override getTypeName() {\n    return BypassType.Html;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  override getTypeName() {\n    return BypassType.Style;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  override getTypeName() {\n    return BypassType.Script;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  override getTypeName() {\n    return BypassType.Url;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  override getTypeName() {\n    return BypassType.ResourceUrl;\n  }\n}\n\nexport function unwrapSafeValue(value: SafeValue): string;\nexport function unwrapSafeValue<T>(value: T): T;\nexport function unwrapSafeValue<T>(value: T | SafeValue): T {\n  return value instanceof SafeValueImpl\n    ? (value.changingThisBreaksApplicationSecurity as any as T)\n    : (value as any as T);\n}\n\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Html,\n): value is SafeHtml;\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.ResourceUrl,\n): value is SafeResourceUrl;\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Script,\n): value is SafeScript;\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Style,\n): value is SafeStyle;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType.Url): value is SafeUrl;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === BypassType.ResourceUrl && type === BypassType.Url) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\n\nexport function getSanitizationBypassType(value: any): BypassType | null {\n  return (value instanceof SafeValueImpl && (value.getTypeName() as BypassType)) || null;\n}\n\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml: string): SafeHtml {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle: string): SafeStyle {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript: string): SafeScript {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl: string): SafeUrl {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): SafeResourceUrl {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n"]}