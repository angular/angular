{"version":3,"file":"cached_injector_service.js","sourceRoot":"","sources":["cached_injector_service.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,kBAAkB,IAAI,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AAI3E,OAAO,EAAC,yBAAyB,EAAC,MAAM,yBAAyB,CAAC;AAElE;;;;;;GAMG;AACH,MAAM,OAAO,qBAAqB;IAAlC;QACU,oBAAe,GAAG,IAAI,GAAG,EAAuC,CAAC;IAoC3E,CAAC;IAlCC,mBAAmB,CACjB,GAAY,EACZ,cAAmC,EACnC,SAAqB,EACrB,SAAkB;QAElB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YACnC,MAAM,QAAQ,GACZ,SAAS,CAAC,MAAM,GAAG,CAAC;gBAClB,CAAC,CAAC,yBAAyB,CAAC,SAAS,EAAE,cAAc,EAAE,SAAS,CAAC;gBACjE,CAAC,CAAC,IAAI,CAAC;YACX,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;IACxC,CAAC;IAED,WAAW;QACT,IAAI,CAAC;YACH,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC;gBACrD,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;oBACtB,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACrB,CAAC;YACH,CAAC;QACH,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;;AAED,kBAAkB;AACX,2BAAK,GAA6C,gBAAgB,CAAC;IACxE,KAAK,EAAE,qBAAqB;IAC5B,UAAU,EAAE,aAAa;IACzB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,qBAAqB,EAAE;CAC3C,CAAC,AAJU,CAIT","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵɵdefineInjectable as defineInjectable} from './di/interface/defs';\nimport {Provider} from './di/interface/provider';\nimport {EnvironmentInjector} from './di/r3_injector';\nimport {OnDestroy} from './interface/lifecycle_hooks';\nimport {createEnvironmentInjector} from './render3/ng_module_ref';\n\n/**\n * A service used by the framework to create and cache injector instances.\n *\n * This service is used to create a single injector instance for each defer\n * block definition, to avoid creating an injector for each defer block instance\n * of a certain type.\n */\nexport class CachedInjectorService implements OnDestroy {\n  private cachedInjectors = new Map<unknown, EnvironmentInjector | null>();\n\n  getOrCreateInjector(\n    key: unknown,\n    parentInjector: EnvironmentInjector,\n    providers: Provider[],\n    debugName?: string,\n  ) {\n    if (!this.cachedInjectors.has(key)) {\n      const injector =\n        providers.length > 0\n          ? createEnvironmentInjector(providers, parentInjector, debugName)\n          : null;\n      this.cachedInjectors.set(key, injector);\n    }\n    return this.cachedInjectors.get(key)!;\n  }\n\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ defineInjectable({\n    token: CachedInjectorService,\n    providedIn: 'environment',\n    factory: () => new CachedInjectorService(),\n  });\n}\n"]}