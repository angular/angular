{"version":3,"file":"application_init.js","sourceRoot":"","sources":["application_init.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {\n  EnvironmentProviders,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  makeEnvironmentProviders,\n  runInInjectionContext,\n} from '../di';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {isPromise, isSubscribable} from '../util/lang';\n\n/**\n * A DI token that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * @deprecated from v19.0.0, use provideAppInitializer instead\n *\n * @see {@link ApplicationInitStatus}\n * @see {@link provideAppInitializer}\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n * ### Example with NgModule-based application\n * ```ts\n *  function initializeApp(): Promise<any> {\n *    const http = inject(HttpClient);\n *    return firstValueFrom(\n *      http\n *        .get(\"https://someUrl.com/api/user\")\n *        .pipe(tap(user => { ... }))\n *    );\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useValue: initializeApp,\n *     multi: true,\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useValue: initializeApp,\n *       multi: true,\n *     },\n *   ],\n * });\n\n * ```\n *\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ### Example with NgModule-based application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * @NgModule({\n *   imports: [BrowserModule, HttpClientModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useValue: initializeApp,\n *     multi: true,\n *   }]\n * })\n * export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useValue: initializeApp,\n *       multi: true,\n *     },\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nexport const APP_INITIALIZER = new InjectionToken<\n  ReadonlyArray<() => Observable<unknown> | Promise<unknown> | void>\n>(ngDevMode ? 'Application Initializer' : '');\n\n/**\n * @description\n * The provided function is injected at application startup and executed during\n * app initialization. If the function returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a function that loads language data\n * or an external configuration, and provide that function using `provideAppInitializer()`.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `APP_INITIALIZER` token which is now deprecated.\n *\n * @see {@link APP_INITIALIZER}\n *\n * @usageNotes\n * The following example illustrates how to configure an initialization function using\n * `provideAppInitializer()`\n * ```ts\n * bootstrapApplication(App, {\n *   providers: [\n *     provideAppInitializer(() => {\n *       const http = inject(HttpClient);\n *       return firstValueFrom(\n *         http\n *           .get(\"https://someUrl.com/api/user\")\n *           .pipe(tap(user => { ... }))\n *       );\n *     }),\n *     provideHttpClient(),\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nexport function provideAppInitializer(\n  initializerFn: () => Observable<unknown> | Promise<unknown> | void,\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useValue: initializerFn,\n    },\n  ]);\n}\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class ApplicationInitStatus {\n  // Using non null assertion, these fields are defined below\n  // within the `new Promise` callback (synchronously).\n  private resolve!: (...args: any[]) => void;\n  private reject!: (...args: any[]) => void;\n\n  private initialized = false;\n  public readonly done = false;\n  public readonly donePromise: Promise<any> = new Promise((res, rej) => {\n    this.resolve = res;\n    this.reject = rej;\n  });\n\n  private readonly appInits = inject(APP_INITIALIZER, {optional: true}) ?? [];\n  private readonly injector = inject(Injector);\n\n  constructor() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_MULTI_PROVIDER,\n        'Unexpected type of the `APP_INITIALIZER` token value ' +\n          `(expected an array, but got ${typeof this.appInits}). ` +\n          'Please check that the `APP_INITIALIZER` token is configured as a ' +\n          '`multi: true` provider.',\n      );\n    }\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises = [];\n    for (const appInits of this.appInits) {\n      const initResult = runInInjectionContext(this.injector, appInits);\n      if (isPromise(initResult)) {\n        asyncInitPromises.push(initResult);\n      } else if (isSubscribable(initResult)) {\n        const observableAsPromise = new Promise<void>((resolve, reject) => {\n          initResult.subscribe({complete: resolve, error: reject});\n        });\n        asyncInitPromises.push(observableAsPromise);\n      }\n    }\n\n    const complete = () => {\n      // @ts-expect-error overwriting a readonly\n      this.done = true;\n      this.resolve();\n    };\n\n    Promise.all(asyncInitPromises)\n      .then(() => {\n        complete();\n      })\n      .catch((e) => {\n        this.reject(e);\n      });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n"]}