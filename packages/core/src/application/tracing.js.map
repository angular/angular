{"version":3,"file":"tracing.js","sourceRoot":"","sources":["tracing.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAErD,2DAA2D;AAC3D,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,yEAAgB,CAAA;IAChB,2EAAiB,CAAA;AACnB,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB;AAUD;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,cAAc,CAC9C,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CACpE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\n\n/** Actions that are supported by the tracing framework. */\nexport enum TracingAction {\n  CHANGE_DETECTION,\n  AFTER_NEXT_RENDER,\n}\n\n/** A single tracing snapshot. */\nexport interface TracingSnapshot {\n  run<T>(action: TracingAction, fn: () => T): T;\n\n  /** Disposes of the tracing snapshot. Must be run exactly once per TracingSnapshot. */\n  dispose(): void;\n}\n\n/**\n * Injection token for a `TracingService`, optionally provided.\n */\nexport const TracingService = new InjectionToken<TracingService<TracingSnapshot>>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'TracingService' : '',\n);\n\n/**\n * Tracing mechanism which can associate causes (snapshots) with runs of\n * subsequent operations.\n *\n * Not defined by Angular directly, but defined in contexts where tracing is\n * desired.\n */\nexport interface TracingService<T extends TracingSnapshot> {\n  /**\n   * Take a snapshot of the current context which will be stored by Angular and\n   * used when additional work is performed that was scheduled in this context.\n   *\n   * @param linkedSnapshot Optional snapshot to use link to the current context.\n   * The caller is no longer responsible for calling dispose on the linkedSnapshot.\n   *\n   * @return The tracing snapshot. The caller is responsible for diposing of the\n   * snapshot.\n   */\n  snapshot(linkedSnapshot: T | null): T;\n\n  /**\n   * Wrap an event listener bound by the framework for tracing.\n   * @param element Element on which the event is bound.\n   * @param eventName Name of the event.\n   * @param handler Event handler.\n   * @return A new event handler to be bound instead of the original one.\n   */\n  wrapEventListener?<T extends Function>(element: HTMLElement, eventName: string, handler: T): T;\n}\n"]}