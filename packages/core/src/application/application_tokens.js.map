{"version":3,"file":"application_tokens.js","sourceRoot":"","sources":["application_tokens.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ENVIRONMENT_INITIALIZER, inject, StaticProvider} from '../di';\nimport {InjectionToken} from '../di/injection_token';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {getDocument} from '../render3/interfaces/document';\n\n/**\n * A DI token representing a string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated} is being used.\n *\n * The token is needed in cases when multiple applications are bootstrapped on a page\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\n * have different `APP_ID` value setup. For example:\n *\n * ```ts\n * bootstrapApplication(ComponentA, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-a' },\n *     // ... other providers ...\n *   ]\n * });\n *\n * bootstrapApplication(ComponentB, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-b' },\n *     // ... other providers ...\n *   ]\n * });\n * ```\n *\n * By default, when there is only one application bootstrapped, you don't need to provide the\n * `APP_ID` token (the `ng` will be used as an app ID).\n *\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'AppId' : '',\n  {\n    providedIn: 'root',\n    factory: () => DEFAULT_APP_ID,\n  },\n);\n\n/** Default value of the `APP_ID` token. */\nconst DEFAULT_APP_ID = 'ng';\n\n/** Initializer check for the validity of the APP_ID */\nexport const validAppIdInitializer: StaticProvider = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useValue: () => {\n    const appId = inject(APP_ID);\n    const isAlphanumeric = /^[a-zA-Z0-9\\-_]+$/.test(appId);\n\n    if (!isAlphanumeric) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_APP_ID,\n        `APP_ID value \"${appId}\" is not alphanumeric. ` +\n          `The APP_ID must be a string of alphanumeric characters. (a-zA-Z0-9), hyphens (-) and underscores (_) are allowed.`,\n      );\n    }\n  },\n};\n\n/**\n * A function that is executed when a platform is initialized.\n *\n * @deprecated from v19.0.0, use providePlatformInitializer instead\n *\n * @see {@link providePlatformInitializer}\n *\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<ReadonlyArray<() => void>>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'Platform Initializer' : '',\n);\n\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'Platform ID' : '',\n  {\n    providedIn: 'platform',\n    factory: () => 'unknown', // set a default platform name, when none set explicitly\n  },\n);\n\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n\n/**\n * A [DI token](api/core/InjectionToken) that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nexport const ANIMATION_MODULE_TYPE = new InjectionToken<'NoopAnimations' | 'BrowserAnimations'>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'AnimationModuleType' : '',\n);\n\n// TODO(crisbeto): link to CSP guide here.\n/**\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\n * from the `ngCspNonce` attribute of the application root node.\n *\n * @publicApi\n */\nexport const CSP_NONCE = new InjectionToken<string | null>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'CSP nonce' : '',\n  {\n    providedIn: 'root',\n    factory: () => {\n      // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\n      // the root node, but because the token value is used in renderers, it has to be available\n      // *very* early in the bootstrapping process. This should be a fairly shallow search, because\n      // the app won't have been added to the DOM yet. Some approaches that were considered:\n      // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\n      // be enough for our purposes, but the token is injected very early so the `components` array\n      // isn't populated yet.\n      // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\n      // creating the `LView`. This means that no `LView` will have been entered when this factory is\n      // invoked for the root component.\n      // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\n      // the slightly later execution does allow us to get an `LView` reference, but the fact that\n      // it is a function means that it could be executed at *any* time (including immediately) which\n      // may lead to weird bugs.\n      // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\n      // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\n      // node and the nonce value needs to be available when the renderer is created.\n      return getDocument().body?.querySelector('[ngCspNonce]')?.getAttribute('ngCspNonce') || null;\n    },\n  },\n);\n\n/**\n * A configuration object for the image-related options. Contains:\n * - breakpoints: An array of integer breakpoints used to generate\n *      srcsets for responsive images.\n * - disableImageSizeWarning: A boolean value. Setting this to true will\n *      disable console warnings about oversized images.\n * - disableImageLazyLoadWarning: A boolean value. Setting this to true will\n *      disable console warnings about LCP images configured with `loading=\"lazy\"`.\n * Learn more about the responsive image configuration in [the NgOptimizedImage\n * guide](guide/image-optimization).\n * Learn more about image warning options in [the related error page](errors/NG0913).\n * @publicApi\n */\nexport type ImageConfig = {\n  breakpoints?: number[];\n  placeholderResolution?: number;\n  disableImageSizeWarning?: boolean;\n  disableImageLazyLoadWarning?: boolean;\n};\n\nexport const IMAGE_CONFIG_DEFAULTS: ImageConfig = {\n  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  placeholderResolution: 30,\n  disableImageSizeWarning: false,\n  disableImageLazyLoadWarning: false,\n};\n\n/**\n * Injection token that configures the image optimized image functionality.\n * See {@link ImageConfig} for additional information about parameters that\n * can be used.\n *\n * @see {@link NgOptimizedImage}\n * @see {@link ImageConfig}\n * @publicApi\n */\nexport const IMAGE_CONFIG = new InjectionToken<ImageConfig>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'ImageConfig' : '',\n  {\n    providedIn: 'root',\n    factory: () => IMAGE_CONFIG_DEFAULTS,\n  },\n);\n"]}