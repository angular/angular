{"version":3,"file":"ng_reflect.js","sourceRoot":"","sources":["ng_reflect.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAuB,cAAc,EAAE,wBAAwB,EAAC,MAAM,YAAY,CAAC;AAE1F,qEAAqE;AACrE,MAAM,CAAC,MAAM,6BAA6B,GAAG,KAAK,CAAC;AAEnD;;;GAGG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,cAAc,CACrD,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,EACtE;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,GAAG,EAAE,CAAC,6BAA6B;CAC7C,CACF,CAAC;AAEF;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,0BAA0B;IACxC,MAAM,SAAS,GACb,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS;QAC3C,CAAC,CAAC;YACE;gBACE,OAAO,EAAE,qBAAqB;gBAC9B,QAAQ,EAAE,IAAI;aACf;SACF;QACH,CAAC,CAAC,EAAE,CAAC;IACT,OAAO,wBAAwB,CAAC,SAAS,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAY;IACpD,4FAA4F;IAC5F,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;IACvD,OAAO,cAAc,IAAI,EAAE,CAAC;AAC9B,CAAC;AAED,MAAM,iBAAiB,GAAG,UAAU,CAAC;AAErC,SAAS,mBAAmB,CAAC,KAAa;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;AACrF,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,KAAU;IACnD,IAAI,CAAC;QACH,uEAAuE;QACvE,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,uDAAuD,CAAC;IACjE,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentProviders, InjectionToken, makeEnvironmentProviders} from './di/index';\n\n/** Defines the default value of the `NG_REFLECT_ATTRS_FLAG` flag. */\nexport const NG_REFLECT_ATTRS_FLAG_DEFAULT = false;\n\n/**\n * Defines an internal flag that indicates whether the runtime code should be\n * producing `ng-reflect-*` attributes.\n */\nexport const NG_REFLECT_ATTRS_FLAG = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'NG_REFLECT_FLAG' : '',\n  {\n    providedIn: 'root',\n    factory: () => NG_REFLECT_ATTRS_FLAG_DEFAULT,\n  },\n);\n\n/**\n * Enables the logic to produce `ng-reflect-*` attributes on elements with bindings.\n *\n * Note: this is a dev-mode only setting and it will have no effect in production mode.\n * In production mode, the `ng-reflect-*` attributes are *never* produced by Angular.\n *\n * Important: using and relying on the `ng-reflect-*` attributes is not recommended,\n * they are deprecated and only present for backwards compatibility. Angular will stop\n * producing them in one of the future versions.\n *\n * @publicApi\n */\nexport function provideNgReflectAttributes(): EnvironmentProviders {\n  const providers =\n    typeof ngDevMode === 'undefined' || ngDevMode\n      ? [\n          {\n            provide: NG_REFLECT_ATTRS_FLAG,\n            useValue: true,\n          },\n        ]\n      : [];\n  return makeEnvironmentProviders(providers);\n}\n\nexport function normalizeDebugBindingName(name: string) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n\nfunction camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: any[]) => '-' + m[1].toLowerCase());\n}\n\nexport function normalizeDebugBindingValue(value: any): string {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n"]}