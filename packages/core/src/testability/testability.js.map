{"version":3,"file":"testability.js","sourceRoot":"","sources":["testability.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Inject, Injectable, InjectionToken} from '../di';\nimport {isInInjectionContext} from '../di/contextual';\nimport {DestroyRef} from '../linker/destroy_ref';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data?: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: Function;\n  updateCb?: Function;\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nexport const TESTABILITY = new InjectionToken<Testability>('');\n\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nexport const TESTABILITY_GETTER = new InjectionToken<GetTestability>('');\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _isZoneStable: boolean = true;\n  private _callbacks: WaitCallback[] = [];\n\n  private _taskTrackingZone: {macroTasks: Task[]} | null = null;\n\n  private _destroyRef?: DestroyRef;\n\n  constructor(\n    private _ngZone: NgZone,\n    private registry: TestabilityRegistry,\n    @Inject(TESTABILITY_GETTER) testabilityGetter: GetTestability,\n  ) {\n    // Attempt to retrieve a `DestroyRef` optionally.\n    // For backwards compatibility reasons, this cannot be required.\n    if (isInInjectionContext()) {\n      this._destroyRef = inject(DestroyRef, {optional: true}) ?? undefined;\n    }\n\n    // If there was no Testability logic registered in the global scope\n    // before, register the current testability getter as a global one.\n    if (!_testabilityGetter) {\n      setTestabilityGetter(testabilityGetter);\n      testabilityGetter.addToWindow(registry);\n    }\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this._taskTrackingZone =\n        typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    const onUnstableSubscription = this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._isZoneStable = false;\n      },\n    });\n\n    const onStableSubscription = this._ngZone.runOutsideAngular(() =>\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          queueMicrotask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        },\n      }),\n    );\n\n    this._destroyRef?.onDestroy(() => {\n      onUnstableSubscription.unsubscribe();\n      onStableSubscription.unsubscribe();\n    });\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      queueMicrotask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop()!;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb();\n        }\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this._taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this._taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data,\n      };\n    });\n  }\n\n  private addCallback(cb: Function, timeout?: number, updateCb?: Function) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb();\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this._taskTrackingZone) {\n      throw new Error(\n        'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?',\n      );\n    }\n    this.addCallback(doneCb, timeout, updateCb);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  registerApplication(token: any) {\n    this.registry.registerApplication(token, this);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  unregisterApplication(token: any) {\n    this.registry.unregisterApplication(token);\n  }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable({providedIn: 'platform'})\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) {\n    this._applications.delete(token);\n  }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability | null {\n    return this._applications.get(elem) || null;\n  }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] {\n    return Array.from(this._applications.keys());\n  }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability | null {\n    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(\n    registry: TestabilityRegistry,\n    elem: any,\n    findInAncestors: boolean,\n  ): Testability | null;\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability | undefined;\n"]}