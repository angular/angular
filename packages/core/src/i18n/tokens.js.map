{"version":3,"file":"tokens.js","sourceRoot":"","sources":["tokens.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,2CAA2C;AAE3C,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAC,MAAM,EAAC,MAAM,8BAA8B,CAAC;AAEpD,OAAO,EAAC,iBAAiB,EAAE,iBAAiB,EAAC,MAAM,gBAAgB,CAAC;AAIpE;;;;;GAKG;AACH,MAAM,UAAU,eAAe;IAC7B,IACE,OAAO,iBAAiB,KAAK,WAAW;QACxC,iBAAiB;QACjB,OAAO,IAAI,KAAK,WAAW;QAC3B,IAAI,CAAC,MAAM,KAAK,IAAI,EACpB,CAAC;QACD,yEAAyE;QACzE,oFAAoF;QACpF,4BAA4B;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;SAAM,CAAC;QACN,wFAAwF;QACxF,wBAAwB;QACxB,EAAE;QACF,iFAAiF;QACjF,6FAA6F;QAC7F,+BAA+B;QAC/B,EAAE;QACF,+FAA+F;QAC/F,oEAAoE;QACpE,OAAO,CAAC,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,iBAAiB,CAAC;IACrF,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,CAAC,MAAM,SAAS,GAA2B,IAAI,cAAc,CACjE,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAC7D;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,IAAI,eAAe,EAAE;CACxF,CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,cAAc,CACrD,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,EACxE;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,GAAG,EAAE,CAAC,iBAAiB;CACjC,CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,cAAc,CAC5C,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAClE,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,cAAc,CACnD,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CACxE,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAN,IAAY,0BAIX;AAJD,WAAY,0BAA0B;IACpC,6EAAS,CAAA;IACT,iFAAW,CAAA;IACX,+EAAU,CAAA;AACZ,CAAC,EAJW,0BAA0B,KAA1B,0BAA0B,QAIrC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference path=\"../../../goog.d.ts\" />\n\nimport {InjectionToken} from '../di/injection_token';\nimport {inject} from '../di/injector_compatibility';\n\nimport {DEFAULT_LOCALE_ID, USD_CURRENCY_CODE} from './localization';\n\ndeclare const $localize: {locale?: string};\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nexport function getGlobalLocale(): string {\n  if (\n    typeof ngI18nClosureMode !== 'undefined' &&\n    ngI18nClosureMode &&\n    typeof goog !== 'undefined' &&\n    goog.LOCALE !== 'en'\n  ) {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;\n  }\n}\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n/locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n * import { AppModule } from './app/app.module';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * };\n * ```\n *\n * In module based apps:\n * ```ts\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const LOCALE_ID: InjectionToken<string> = new InjectionToken(\n  typeof ngDevMode !== undefined && ngDevMode ? 'LocaleId' : '',\n  {\n    providedIn: 'root',\n    factory: () => inject(LOCALE_ID, {optional: true, skipSelf: true}) || getGlobalLocale(),\n  },\n);\n\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n/locale-id) for more information.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * The default currency code is currently always `USD`.\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * };\n * ```\n *\n * In module based apps:\n * ```ts\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const DEFAULT_CURRENCY_CODE = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'DefaultCurrencyCode' : '',\n  {\n    providedIn: 'root',\n    factory: () => USD_CURRENCY_CODE,\n  },\n);\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n/merge) for more information.\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * };\n * ```\n *\n * In module based apps:\n * ```ts\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'Translations' : '',\n);\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n/merge) for more information.\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * };\n * ```\n *\n * In module based apps: *\n * ```ts\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'TranslationsFormat' : '',\n);\n\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n/merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```ts\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n"]}