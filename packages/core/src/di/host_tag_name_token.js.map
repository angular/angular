{"version":3,"file":"host_tag_name_token.js","sourceRoot":"","sources":["host_tag_name_token.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAmB,MAAM,WAAW,CAAC;AAEzD,OAAO,EAAC,eAAe,EAAC,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAGjD;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,CAAC,MAAM,aAAa,GAA2B,eAAe,CAAC,CAAC,GAAG,EAAE;IACzE,mEAAmE;IACnE,yEAAyE;IACzE,yEAAyE;IACzE,qEAAqE;IACrE,mDAAmD;IACnD,MAAM,mBAAmB,GAAG,IAAI,cAAc,CAC5C,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CACnE,CAAC;IAEF,oFAAoF;IACpF,6EAA6E;IAC7E,uDAAuD;IACtD,mBAA2B,CAAC,iBAAiB,GAAG,CAAC,KAA0B,EAAE,EAAE;QAC9E,MAAM,KAAK,GAAG,eAAe,EAAE,CAAC;QAChC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACnB,MAAM,IAAI,YAAY,qDAEpB,SAAS;gBACP,kEAAkE;oBAChE,mFAAmF,CACxF,CAAC;QACJ,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,4BAAoB,EAAE,CAAC;YACnC,OAAO,KAAK,CAAC,KAAK,CAAC;QACrB,CAAC;QACD,IAAI,KAAK,uCAA+B,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,IAAI,YAAY,qDAEpB,SAAS;YACP,6BAA6B,kBAAkB,CAC7C,KAAK,CACN,wDAAwD;gBACvD,sEAAsE,CAC3E,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,mBAAmB,CAAC;AAC7B,CAAC,CAAC,EAAE,CAAC;AAEL,SAAS,kBAAkB,CAAC,KAAY;IACtC,IAAI,KAAK,CAAC,IAAI,qCAA6B,EAAE,CAAC;QAC5C,OAAO,mBAAmB,CAAC;IAC7B,CAAC;SAAM,IAAI,KAAK,CAAC,IAAI,8BAAsB,EAAE,CAAC;QAC5C,OAAO,kBAAkB,CAAC;IAC5B,CAAC;SAAM,IAAI,KAAK,CAAC,IAAI,qCAA2B,EAAE,CAAC;QACjD,OAAO,qBAAqB,CAAC;IAC/B,CAAC;SAAM,CAAC;QACN,OAAO,QAAQ,CAAC;IAClB,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {TNode, TNodeType} from '../render3/interfaces/node';\nimport {getCurrentTNode} from '../render3/state';\n\nimport {InjectionToken} from './injection_token';\nimport {InternalInjectFlags} from './interface/injector';\n\n/**\n * A token that can be used to inject the tag name of the host node.\n *\n * @usageNotes\n * ### Injecting a tag name that is known to exist\n * ```ts\n * @Directive()\n * class MyDir {\n *   tagName: string = inject(HOST_TAG_NAME);\n * }\n * ```\n *\n * ### Optionally injecting a tag name\n * ```ts\n * @Directive()\n * class MyDir {\n *   tagName: string | null = inject(HOST_TAG_NAME, {optional: true});\n * }\n * ```\n * @publicApi\n */\nexport const HOST_TAG_NAME: InjectionToken<string> = /* @__PURE__ */ (() => {\n  // Wrapped in a `@__PURE__` IIFE so this token stays tree-shakable.\n  // If nothing ever injects `HOST_TAG_NAME`, the IIFE result is unused and\n  // the bundler can drop the whole block. If we set `__NG_ELEMENT_ID__` at\n  // the top level instead, the mutation would look like a side effect,\n  // forcing the bundler to keep it even when unused.\n  const HOST_TAG_NAME_TOKEN = new InjectionToken<string>(\n    typeof ngDevMode !== undefined && ngDevMode ? 'HOST_TAG_NAME' : '',\n  );\n\n  // HOST_TAG_NAME should be resolved at the current node, similar to e.g. ElementRef,\n  // so we manually specify __NG_ELEMENT_ID__ here, instead of using a factory.\n  // tslint:disable-next-line:no-toplevel-property-access\n  (HOST_TAG_NAME_TOKEN as any).__NG_ELEMENT_ID__ = (flags: InternalInjectFlags) => {\n    const tNode = getCurrentTNode();\n    if (tNode === null) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n        ngDevMode &&\n          'HOST_TAG_NAME can only be injected in directives and components ' +\n            'during construction time (in a class constructor or as a class field initializer)',\n      );\n    }\n    if (tNode.type & TNodeType.Element) {\n      return tNode.value;\n    }\n    if (flags & InternalInjectFlags.Optional) {\n      return null;\n    }\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n      ngDevMode &&\n        `HOST_TAG_NAME was used on ${getDevModeNodeName(\n          tNode,\n        )} which doesn't have an underlying element in the DOM. ` +\n          `This is invalid, and so the dependency should be marked as optional.`,\n    );\n  };\n\n  return HOST_TAG_NAME_TOKEN;\n})();\n\nfunction getDevModeNodeName(tNode: TNode) {\n  if (tNode.type & TNodeType.ElementContainer) {\n    return 'an <ng-container>';\n  } else if (tNode.type & TNodeType.Container) {\n    return 'an <ng-template>';\n  } else if (tNode.type & TNodeType.LetDeclaration) {\n    return 'an @let declaration';\n  } else {\n    return 'a node';\n  }\n}\n"]}