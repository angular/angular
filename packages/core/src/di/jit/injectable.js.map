{"version":3,"file":"injectable.js","sourceRoot":"","sources":["injectable.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  getCompilerFacade,\n  JitCompilerUsage,\n  R3InjectableMetadataFacade,\n} from '../../compiler/compiler_facade';\nimport {Type} from '../../interface/type';\nimport {NG_FACTORY_DEF} from '../../render3/fields';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {resolveForwardRef} from '../forward_ref';\nimport type {Injectable} from '../injectable';\nimport {NG_PROV_DEF} from '../interface/defs';\nimport {\n  ClassSansProvider,\n  ExistingSansProvider,\n  FactorySansProvider,\n  ValueProvider,\n  ValueSansProvider,\n} from '../interface/provider';\n\nimport {angularCoreDiEnv} from './environment';\nimport {convertDependencies, reflectDependencies} from './util';\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nexport function compileInjectable(type: Type<any>, meta?: Injectable): void {\n  let ngInjectableDef: any = null;\n  let ngFactoryDef: any = null;\n\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: JitCompilerUsage.Decorator,\n            kind: 'injectable',\n            type,\n          });\n          ngInjectableDef = compiler.compileInjectable(\n            angularCoreDiEnv,\n            `ng:///${type.name}/ɵprov.js`,\n            getInjectableMetadata(type, meta),\n          );\n        }\n        return ngInjectableDef;\n      },\n    });\n  }\n\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: JitCompilerUsage.Decorator,\n            kind: 'injectable',\n            type,\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0, // In JIT mode types are not available nor used.\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable,\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true,\n    });\n  }\n}\n\ntype UseClassProvider = Injectable & ClassSansProvider & {deps?: any[]};\n\nconst USE_VALUE = getClosureSafeProperty<ValueProvider>({\n  provide: String,\n  useValue: getClosureSafeProperty,\n});\n\nfunction isUseClassProvider(meta: Injectable): meta is UseClassProvider {\n  return (meta as UseClassProvider).useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta: Injectable): meta is Injectable & ValueSansProvider {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta: Injectable): meta is Injectable & FactorySansProvider {\n  return (meta as FactorySansProvider).useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta: Injectable): meta is Injectable & ExistingSansProvider {\n  return (meta as ExistingSansProvider).useExisting !== undefined;\n}\n\nfunction getInjectableMetadata(type: Type<any>, srcMeta?: Injectable): R3InjectableMetadataFacade {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta: Injectable = srcMeta || {providedIn: null};\n  const compilerMeta: R3InjectableMetadataFacade = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn,\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n"]}