{"version":3,"file":"contextual.js","sourceRoot":"","sources":["contextual.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAmB,MAAM,WAAW,CAAC;AACzD,OAAO,EAEL,0BAA0B,GAC3B,MAAM,oCAAoC,CAAC;AAE5C,OAAO,EAAC,uBAAuB,EAAE,uBAAuB,EAAC,MAAM,iBAAiB,CAAC;AAEjF,OAAO,EAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAC,MAAM,0BAA0B,CAAC;AACpG,OAAO,EAAC,kBAAkB,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AAG7D;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,qBAAqB,CAAU,QAAkB,EAAE,EAAiB;IAClF,IAAI,gBAAoC,CAAC;IACzC,IAAI,QAAQ,YAAY,UAAU,EAAE,CAAC;QACnC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC7B,gBAAgB,GAAG,QAAQ,CAAC;IAC9B,CAAC;SAAM,CAAC;QACN,gBAAgB,GAAG,IAAI,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,IAAI,2BAAoD,CAAC;IACzD,IAAI,SAAS,EAAE,CAAC;QACd,2BAA2B,GAAG,0BAA0B,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;IACpF,CAAC;IACD,MAAM,YAAY,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IAC1D,MAAM,4BAA4B,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAC;IACxE,IAAI,CAAC;QACH,OAAO,EAAE,EAAE,CAAC;IACd,CAAC;YAAS,CAAC;QACT,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACjC,SAAS,IAAI,0BAA0B,CAAC,2BAA4B,CAAC,CAAC;QACtE,uBAAuB,CAAC,4BAA4B,CAAC,CAAC;IACxD,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB;IAClC,OAAO,uBAAuB,EAAE,KAAK,SAAS,IAAI,kBAAkB,EAAE,IAAI,IAAI,CAAC;AACjF,CAAC;AACD;;;;;;;GAOG;AACH,MAAM,UAAU,wBAAwB,CAAC,OAAiB;IACxD,iGAAiG;IACjG,gEAAgE;IAChE,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC;QAC5B,MAAM,IAAI,YAAY,wDAEpB,SAAS;YACP,OAAO,CAAC,IAAI;gBACV,iKAAiK,CACtK,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {\n  InjectorProfilerContext,\n  setInjectorProfilerContext,\n} from '../render3/debug/injector_profiler';\n\nimport {getInjectImplementation, setInjectImplementation} from './inject_switch';\nimport type {Injector} from './injector';\nimport {getCurrentInjector, setCurrentInjector, RetrievingInjector} from './injector_compatibility';\nimport {assertNotDestroyed, R3Injector} from './r3_injector';\nimport {Injector as PrimitivesInjector} from '@angular/core/primitives/di';\n\n/**\n * Runs the given function in the [context](guide/di/dependency-injection-context) of the given\n * `Injector`.\n *\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\n * any asynchronous callbacks or after any `await` points.\n *\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\n *     is executing\n * @param fn the closure to be run in the context of `injector`\n * @returns the return value of the function, if any\n * @publicApi\n */\nexport function runInInjectionContext<ReturnT>(injector: Injector, fn: () => ReturnT): ReturnT {\n  let internalInjector: PrimitivesInjector;\n  if (injector instanceof R3Injector) {\n    assertNotDestroyed(injector);\n    internalInjector = injector;\n  } else {\n    internalInjector = new RetrievingInjector(injector);\n  }\n\n  let prevInjectorProfilerContext: InjectorProfilerContext;\n  if (ngDevMode) {\n    prevInjectorProfilerContext = setInjectorProfilerContext({injector, token: null});\n  }\n  const prevInjector = setCurrentInjector(internalInjector);\n  const previousInjectImplementation = setInjectImplementation(undefined);\n  try {\n    return fn();\n  } finally {\n    setCurrentInjector(prevInjector);\n    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext!);\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n\n/**\n * Whether the current stack frame is inside an injection context.\n */\nexport function isInInjectionContext(): boolean {\n  return getInjectImplementation() !== undefined || getCurrentInjector() != null;\n}\n/**\n * Asserts that the current stack frame is within an [injection\n * context](guide/di/dependency-injection-context) and has access to `inject`.\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nexport function assertInInjectionContext(debugFn: Function): void {\n  // Taking a `Function` instead of a string name here prevents the unminified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (!isInInjectionContext()) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISSING_INJECTION_CONTEXT,\n      ngDevMode &&\n        debugFn.name +\n          '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`',\n    );\n  }\n}\n"]}