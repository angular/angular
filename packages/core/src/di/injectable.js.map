{"version":3,"file":"injectable.js","sourceRoot":"","sources":["injectable.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,aAAa,EAAgB,MAAM,oBAAoB,CAAC;AAUhE,OAAO,EAAC,iBAAiB,EAAC,MAAM,kBAAkB,CAAC;AAEnD,OAAO,EAAC,iBAAiB,EAAC,CAAC;AA4E3B;;;;;GAKG;AACH,MAAM,CAAC,MAAM,UAAU,GAAwB,aAAa,CAC1D,YAAY,EACZ,SAAS,EACT,SAAS,EACT,SAAS,EACT,CAAC,IAAe,EAAE,IAAgB,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAW,EAAE,IAAI,CAAC,CAC5E,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {makeDecorator, TypeDecorator} from '../util/decorators';\n\nimport {\n  ClassSansProvider,\n  ConstructorSansProvider,\n  ExistingSansProvider,\n  FactorySansProvider,\n  StaticClassSansProvider,\n  ValueSansProvider,\n} from './interface/provider';\nimport {compileInjectable} from './jit/injectable';\n\nexport {compileInjectable};\n\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @publicApi\n */\nexport type InjectableProvider =\n  | ValueSansProvider\n  | ExistingSansProvider\n  | StaticClassSansProvider\n  | ConstructorSansProvider\n  | FactorySansProvider\n  | ClassSansProvider;\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectableDecorator {\n  /**\n   * Decorator that marks a class as available to be\n   * provided and injected as a dependency.\n   *\n   * @see [Introduction to Services and DI](guide/di)\n   * @see [Dependency Injection Guide](guide/di/dependency-injection\n   *\n   * @usageNotes\n   *\n   * Marking a class with `@Injectable` ensures that the compiler\n   * will generate the necessary metadata to create the class's\n   * dependencies when the class is injected.\n   *\n   * The following example shows how a service class is properly\n   *  marked so that a supporting service can be injected upon creation.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n   *\n   */\n  (): TypeDecorator;\n  (\n    options?: {providedIn: Type<any> | 'root' | 'platform' | 'any' | null} & InjectableProvider,\n  ): TypeDecorator;\n  new (): Injectable;\n  new (\n    options?: {providedIn: Type<any> | 'root' | 'platform' | 'any' | null} & InjectableProvider,\n  ): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @publicApi\n */\nexport interface Injectable {\n  /**\n   * Determines which injectors will provide the injectable.\n   *\n   * - `Type<any>` - associates the injectable with an `@NgModule` or other `InjectorType`. This\n   * option is DEPRECATED.\n   * - 'null' : Equivalent to `undefined`. The injectable is not provided in any scope automatically\n   * and must be added to a `providers` array.\n   *\n   * The following options specify that this injectable should be provided in one of the following\n   * injectors:\n   * - 'root' : The application-level injector in most apps.\n   * - 'platform' : A special singleton platform injector shared by all\n   * applications on the page.\n   * - 'any' : Provides a unique instance in each lazy loaded module while all eagerly loaded\n   * modules share one instance. This option is DEPRECATED.\n   *\n   */\n  providedIn?: Type<any> | 'root' | 'platform' | 'any' | null;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Injectable: InjectableDecorator = makeDecorator(\n  'Injectable',\n  undefined,\n  undefined,\n  undefined,\n  (type: Type<any>, meta: Injectable) => compileInjectable(type as any, meta),\n);\n"]}