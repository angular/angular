{"version":3,"file":"definition.js","sourceRoot":"","sources":["definition.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {formatRuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type, Writable} from '../interface/type';\nimport {NgModuleDef} from '../metadata/ng_module_def';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {assertNotEqual} from '../util/assert';\nimport {noSideEffects} from '../util/closure';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../util/empty';\nimport {initNgDevMode} from '../util/ng_dev_mode';\nimport {performanceMarkFeature} from '../util/performance';\nimport {getComponentDef, getDirectiveDef, getPipeDef} from './def_getters';\n\nimport type {\n  ComponentDef,\n  ComponentDefFeature,\n  ComponentTemplate,\n  ContentQueriesFunction,\n  DependencyTypeList,\n  DirectiveDef,\n  DirectiveDefFeature,\n  HostBindingsFunction,\n  InputTransformFunction,\n  PipeDef,\n  TypeOrFactory,\n  ViewQueriesFunction,\n} from './interfaces/definition';\nimport {InputFlags} from './interfaces/input_flags';\nimport type {TAttributes, TConstantsOrFactory} from './interfaces/node';\nimport {CssSelectorList} from './interfaces/projection';\nimport {stringifyCSSSelectorList} from './node_selector_matcher';\nimport {StandaloneService} from './standalone_service';\n\n/**\n * Map of inputs for a given directive/component.\n *\n * Given:\n * ```ts\n * class MyComponent {\n *   @Input()\n *   publicInput1: string;\n *\n *   @Input('publicInput2')\n *   declaredInput2: string;\n *\n *   @Input({transform: (value: boolean) => value ? 1 : 0})\n *   transformedInput3: number;\n *\n *   signalInput = input(3);\n * }\n * ```\n *\n * is described as:\n * ```ts\n * {\n *   publicInput1: 'publicInput1',\n *   declaredInput2: [InputFlags.None, 'declaredInput2', 'publicInput2'],\n *   transformedInput3: [\n *     InputFlags.None,\n *     'transformedInput3',\n *     'transformedInput3',\n *     (value: boolean) => value ? 1 : 0\n *   ],\n *   signalInput: [InputFlags.SignalBased, \"signalInput\"],\n * }\n * ```\n *\n * Which the minifier may translate to:\n * ```ts\n * {\n *   minifiedPublicInput1: 'publicInput1',\n *   minifiedDeclaredInput2: [InputFlags.None, 'publicInput2', 'declaredInput2'],\n *   minifiedTransformedInput3: [\n *     InputFlags.None,\n *     'transformedInput3',\n *     'transformedInput3',\n *     (value: boolean) => value ? 1 : 0\n *   ],\n *   minifiedSignalInput: [InputFlags.SignalBased, \"signalInput\"],\n * }\n * ```\n *\n * This allows the render to re-construct the minified, public, and declared names\n * of properties.\n *\n * NOTE:\n *  - Because declared and public name are usually same we only generate the array\n *    `['declared', 'public']` format when they differ, or there is a transform.\n *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n *    inconsistent behavior in that it uses declared names rather than minified or public.\n */\ntype DirectiveInputs<T> = {\n  [P in keyof T]?:  // Basic case. Mapping minified name to public name.\n    | string\n    // Complex input when there are flags, or differing public name and declared name, or there\n    // is a transform. Such inputs are not as common, so the array form is only generated then.\n    | [\n        flags: InputFlags,\n        publicName: string,\n        declaredName?: string,\n        transform?: InputTransformFunction,\n      ];\n};\n\ninterface DirectiveDefinition<T> {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this directive. */\n  selectors?: CssSelectorList;\n\n  /**\n   * A map of input names.\n   */\n  inputs?: DirectiveInputs<T>;\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n   */\n  features?: DirectiveDefFeature[];\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n   *\n   * Used to calculate the length of the component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  hostVars?: number;\n\n  /**\n   * Assign static attribute values to a host element.\n   *\n   * This property will assign static attribute values as well as class and style\n   * values to a host element. Since attribute values can consist of different types of values,\n   * the `hostAttrs` array must include the values in the following format:\n   *\n   * attrs = [\n   *   // static attributes (like `title`, `name`, `id`...)\n   *   attr1, value1, attr2, value,\n   *\n   *   // a single namespace value (like `x:id`)\n   *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n   *\n   *   // another single namespace value (like `x:name`)\n   *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n   *\n   *   // a series of CSS classes that will be applied to the element (no spaces)\n   *   CLASSES_MARKER, class1, class2, class3,\n   *\n   *   // a series of CSS styles (property + value) that will be applied to the element\n   *   STYLES_MARKER, prop1, value1, prop2, value2\n   * ]\n   *\n   * All non-class and non-style attributes must be defined at the start of the list\n   * first before all class and style values are set. When there is a change in value\n   * type (like when classes and styles are introduced) a marker must be used to separate\n   * the entries. The marker values themselves are set via entries found in the\n   * [AttributeMarker] enum.\n   */\n  hostAttrs?: TAttributes;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ContentQueriesFunction<T>;\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instructions to be inserted into the template function.\n   */\n  viewQuery?: ViewQueriesFunction<T> | null;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Whether this directive/component is standalone.\n   */\n  standalone?: boolean;\n\n  /**\n   * Whether this directive/component is signal-based.\n   */\n  signals?: boolean;\n}\n\ninterface ComponentDefinition<T> extends Omit<DirectiveDefinition<T>, 'features'> {\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  decls: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```ts\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Constants for the nodes in the component's view.\n   * Includes attribute arrays, local definition arrays etc.\n   */\n  consts?: TConstantsOrFactory;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link /api/core/Component Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: {[kind: string]: any};\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives, components, and pipes that may be found in this component's view.\n   *\n   * This property is either an array of types or a function that returns the array of types. This\n   * function may be necessary to support forward declarations.\n   */\n  dependencies?: TypeOrFactory<DependencyTypeList>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the component's template.\n   */\n  schemas?: SchemaMetadata[] | null;\n}\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```ts\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nexport function ɵɵdefineComponent<T>(\n  componentDefinition: ComponentDefinition<T>,\n): ComponentDef<any> {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n    const baseDef = getNgDirectiveDef(componentDefinition as DirectiveDefinition<T>);\n    const def: Writable<ComponentDef<T>> = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null!, // assigned in noSideEffects\n      pipeDefs: null!, // assigned in noSideEffects\n      dependencies: (baseDef.standalone && componentDefinition.dependencies) || null,\n      getStandaloneInjector: baseDef.standalone\n        ? (parentInjector: EnvironmentInjector) => {\n            return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);\n          }\n        : null,\n      getExternalStyles: null,\n      signals: componentDefinition.signals ?? false,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n      id: '',\n    };\n\n    // TODO: Do we still need/want this ?\n    if (baseDef.standalone) {\n      performanceMarkFeature('NgStandalone');\n    }\n\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, extractDirectiveDef);\n    def.pipeDefs = extractDefListOrFactory(dependencies, getPipeDef);\n    def.id = getComponentId(def);\n\n    return def;\n  });\n}\n\nexport function extractDirectiveDef(type: Type<any>): DirectiveDef<any> | ComponentDef<any> | null {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵdefineNgModule<T>(def: {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n\n  /** The set of schemas that declare elements to be allowed in the NgModule. */\n  schemas?: SchemaMetadata[] | null;\n\n  /** Unique ID for the module that is used with `getModuleFactory`. */\n  id?: string | null;\n}): unknown {\n  return noSideEffects(() => {\n    const res: NgModuleDef<T> = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null,\n    };\n    return res;\n  });\n}\n\n/**\n * Converts binding objects from the `DirectiveDefinition` into more efficient\n * lookup dictionaries that are optimized for the framework runtime.\n *\n * This function converts inputs or output directive information into new objects\n * where the public name conveniently maps to the minified internal field name.\n *\n * For inputs, the input flags are additionally persisted into the new data structure,\n * so that those can be quickly retrieved when needed.\n *\n * e.g. for\n *\n * ```ts\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n *\n *   inputSignal = input(3);\n * }\n * ```\n *\n * will be serialized as\n *\n * ```ts\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n *   inputSignal: [InputFlags.SignalBased, 'inputSignal'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```ts\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n *   minifiedInputSignal: [InputFlags.SignalBased, 'inputSignal'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName + isSignal if needed)\n *\n * ```ts\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n *  'inputSignal': ['minifiedInputSignal', InputFlags.SignalBased],\n * }\n * ```\n *\n * Optionally the function can take `declaredInputs` which will result\n * in: (public name => declared name)\n *\n * ```ts\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n *  'inputSignal': 'inputSignal',\n * }\n * ```\n *\n\n */\nfunction parseAndConvertInputsForDefinition<T>(\n  obj: DirectiveDefinition<T>['inputs'],\n  declaredInputs: Record<string, string>,\n) {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: Record<\n    string,\n    [minifiedName: string, flags: InputFlags, transform: InputTransformFunction | null]\n  > = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      const value = obj[minifiedKey]!;\n      let publicName: string;\n      let declaredName: string;\n      let inputFlags: InputFlags;\n      let transform: InputTransformFunction | null;\n\n      if (Array.isArray(value)) {\n        inputFlags = value[0];\n        publicName = value[1];\n        declaredName = value[2] ?? publicName; // declared name might not be set to save bytes.\n        transform = value[3] || null;\n      } else {\n        publicName = value;\n        declaredName = value;\n        inputFlags = InputFlags.None;\n        transform = null;\n      }\n\n      newLookup[publicName] = [minifiedKey, inputFlags, transform];\n      declaredInputs[publicName] = declaredName as string;\n    }\n  }\n  return newLookup;\n}\n\nfunction parseAndConvertOutputsForDefinition<T>(\n  obj: DirectiveDefinition<T>['outputs'],\n): Record<keyof T, string> {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      newLookup[obj[minifiedKey]!] = minifiedKey;\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdefineDirective<T>(\n  directiveDefinition: DirectiveDefinition<T>,\n): DirectiveDef<any> {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n\n    return def;\n  });\n}\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```ts\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nexport function ɵɵdefinePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string;\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>;\n\n  /** Whether the pipe is pure. */\n  pure?: boolean;\n\n  /**\n   * Whether the pipe is standalone.\n   */\n  standalone?: boolean;\n}): unknown {\n  return <PipeDef<T>>{\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone ?? true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null,\n  };\n}\n\nfunction getNgDirectiveDef<T>(directiveDefinition: DirectiveDefinition<T>): DirectiveDef<T> {\n  const declaredInputs: Record<string, string> = {};\n\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs: declaredInputs,\n    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone ?? true,\n    signals: directiveDefinition.signals === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    resolveHostDirectives: null,\n    hostDirectives: null,\n    inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),\n    outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),\n    debugInfo: null,\n  };\n}\n\nfunction initFeatures<T>(definition: DirectiveDef<T> | ComponentDef<T>): void {\n  definition.features?.forEach((fn) => fn(definition));\n}\n\nexport function extractDefListOrFactory<T>(\n  dependencies: TypeOrFactory<DependencyTypeList> | undefined,\n  defExtractor: (type: Type<unknown>) => T | null,\n): (() => T[]) | T[] | null {\n  if (!dependencies) {\n    return null;\n  }\n\n  return () => {\n    const resolvedDependencies = typeof dependencies === 'function' ? dependencies() : dependencies;\n    const result: T[] = [];\n\n    for (const dep of resolvedDependencies) {\n      const definition = defExtractor(dep);\n      if (definition !== null) {\n        result.push(definition);\n      }\n    }\n\n    return result;\n  };\n}\n\n/**\n * A map that contains the generated component IDs and type.\n */\nexport const GENERATED_COMP_IDS = new Map<string, Type<unknown>>();\n\n/**\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\n * algorithm.\n */\nfunction getComponentId<T>(componentDef: ComponentDef<T>): string {\n  let hash = 0;\n\n  // For components with i18n in templates, the `consts` array is generated by the compiler\n  // as a function. If client and server bundles were produced with different minification\n  // configurations, the serializable contents of the function body would be different on\n  // the client and on the server. This might result in different ids generated. To avoid this\n  // issue, we do not take the `consts` contents into account if it's a function.\n  // See https://github.com/angular/angular/issues/58713.\n  const componentDefConsts = typeof componentDef.consts === 'function' ? '' : componentDef.consts;\n\n  // We cannot rely solely on the component selector as the same selector can be used in different\n  // modules.\n  //\n  // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\n  // component styles has no sourcemaps and browsers do.\n  //\n  // Example:\n  // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\n  // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\n  const hashSelectors = [\n    componentDef.selectors,\n    componentDef.ngContentSelectors,\n    componentDef.hostVars,\n    componentDef.hostAttrs,\n    componentDefConsts,\n    componentDef.vars,\n    componentDef.decls,\n    componentDef.encapsulation,\n    componentDef.standalone,\n    componentDef.signals,\n    componentDef.exportAs,\n    JSON.stringify(componentDef.inputs),\n    JSON.stringify(componentDef.outputs),\n    // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\n    // match in the server and browser bundles.\n    Object.getOwnPropertyNames(componentDef.type.prototype),\n    !!componentDef.contentQueries,\n    !!componentDef.viewQuery,\n  ];\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // If client and server bundles were produced with different minification configurations,\n    // the serializable contents of the function body would be different on the client and on\n    // the server. Ensure that we do not accidentally use functions in component id computation.\n    for (const item of hashSelectors) {\n      assertNotEqual(\n        typeof item,\n        'function',\n        'Internal error: attempting to use a function in component id computation logic.',\n      );\n    }\n  }\n\n  for (const char of hashSelectors.join('|')) {\n    hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  const compId = 'c' + hash;\n\n  if (\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n    // Skip the check on the server since we can't guarantee the same component instance between\n    // requests. Note that we can't use DI to check if we're on the server, because the component\n    // hasn't been instantiated yet.\n    (typeof ngServerMode === 'undefined' || !ngServerMode)\n  ) {\n    if (GENERATED_COMP_IDS.has(compId)) {\n      const previousCompDefType = GENERATED_COMP_IDS.get(compId)!;\n      if (previousCompDefType !== componentDef.type) {\n        console.warn(\n          formatRuntimeError(\n            RuntimeErrorCode.COMPONENT_ID_COLLISION,\n            `Component ID generation collision detected. Components '${\n              previousCompDefType.name\n            }' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(\n              componentDef.selectors,\n            )}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`,\n          ),\n        );\n      }\n    } else {\n      GENERATED_COMP_IDS.set(compId, componentDef.type);\n    }\n  }\n\n  return compId;\n}\n"]}