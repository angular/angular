{"version":3,"file":"hmr.js","sourceRoot":"","sources":["hmr.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\nimport {assertLView} from './assert';\nimport {getComponentDef} from './def_getters';\nimport {assertComponentDef} from './errors';\nimport {refreshView} from './instructions/change_detection';\nimport {renderView} from './instructions/render';\nimport {CONTAINER_HEADER_OFFSET} from './interfaces/container';\nimport {ComponentDef} from './interfaces/definition';\nimport {getTrackedLViews} from './interfaces/lview_tracking';\nimport {isTNodeShape, TElementNode, TNodeFlags, TNodeType} from './interfaces/node';\nimport {isLContainer, isLView, isRootView} from './interfaces/type_checks';\nimport {\n  CHILD_HEAD,\n  CHILD_TAIL,\n  CONTEXT,\n  ENVIRONMENT,\n  HEADER_OFFSET,\n  HOST,\n  INJECTOR,\n  LView,\n  NEXT,\n  PARENT,\n  RENDERER,\n  T_HOST,\n  TVIEW,\n} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {destroyLView, removeViewFromDOM} from './node_manipulation';\nimport {RendererFactory} from './interfaces/renderer';\nimport {NgZone} from '../zone';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {NG_COMP_DEF} from './fields';\nimport {\n  createLView,\n  getInitialLViewFlagsFromDef,\n  getOrCreateComponentTView,\n} from './view/construction';\n\n/** Represents `import.meta` plus some information that's not in the built-in types. */\ntype ImportMetaExtended = ImportMeta & {\n  hot?: {\n    send?: (name: string, payload: unknown) => void;\n  };\n};\n\n/**\n * Gets the URL from which the client will fetch a new version of a component's metadata so it\n * can be replaced during hot module reloading.\n * @param id Unique ID for the component, generated during compile time.\n * @param timestamp Time at which the request happened.\n * @param base Base URL against which to resolve relative paths.\n * @codeGenApi\n */\nexport function ɵɵgetReplaceMetadataURL(id: string, timestamp: string, base: string): string {\n  const url = `./@ng/component?c=${id}&t=${encodeURIComponent(timestamp)}`;\n  return new URL(url, base).href;\n}\n\n/**\n * Replaces the metadata of a component type and re-renders all live instances of the component.\n * @param type Class whose metadata will be replaced.\n * @param applyMetadata Callback that will apply a new set of metadata on the `type` when invoked.\n * @param environment Syntehtic namespace imports that need to be passed along to the callback.\n * @param locals Local symbols from the source location that have to be exposed to the callback.\n * @param importMeta `import.meta` from the call site of the replacement function. Optional since\n *   it isn't used internally.\n * @param id ID to the class being replaced. **Not** the same as the component definition ID.\n *   Optional since the ID might not be available internally.\n * @codeGenApi\n */\nexport function ɵɵreplaceMetadata(\n  type: Type<unknown>,\n  applyMetadata: (...args: [Type<unknown>, unknown[], ...unknown[]]) => void,\n  namespaces: unknown[],\n  locals: unknown[],\n  importMeta: ImportMetaExtended | null = null,\n  id: string | null = null,\n) {\n  ngDevMode && assertComponentDef(type);\n  const currentDef = getComponentDef(type)!;\n\n  // The reason `applyMetadata` is a callback that is invoked (almost) immediately is because\n  // the compiler usually produces more code than just the component definition, e.g. there\n  // can be functions for embedded views, the variables for the constant pool and `setClassMetadata`\n  // calls. The callback allows us to keep them isolate from the rest of the app and to invoke\n  // them at the right time.\n  applyMetadata.apply(null, [type, namespaces, ...locals]);\n\n  const {newDef, oldDef} = mergeWithExistingDefinition(currentDef, getComponentDef(type)!);\n\n  // TODO(crisbeto): the `applyMetadata` call above will replace the definition on the type.\n  // Ideally we should adjust the compiler output so the metadata is returned, however that'll\n  // require some internal changes. We re-add the metadata here manually.\n  (type as any)[NG_COMP_DEF] = newDef;\n\n  // If a `tView` hasn't been created yet, it means that this component hasn't been instantianted\n  // before. In this case there's nothing left for us to do aside from patching it in.\n  if (oldDef.tView) {\n    const trackedViews = getTrackedLViews().values();\n    for (const root of trackedViews) {\n      // Note: we have the additional check, because `IsRoot` can also indicate\n      // a component created through something like `createComponent`.\n      if (isRootView(root) && root[PARENT] === null) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, root);\n      }\n    }\n  }\n}\n\n/**\n * Merges two component definitions while preseving the original one in place.\n * @param currentDef Definition that should receive the new metadata.\n * @param newDef Source of the new metadata.\n */\nfunction mergeWithExistingDefinition(\n  currentDef: ComponentDef<unknown>,\n  newDef: ComponentDef<unknown>,\n) {\n  // Clone the current definition since we reference its original data further\n  // down in the replacement process (e.g. when destroying the renderer).\n  const clone = {...currentDef};\n\n  // Assign the new metadata in place while preserving the object literal. It's important to\n  // Keep the object in place, because there can be references to it, for example in the\n  // `directiveDefs` of another definition.\n  const replacement = Object.assign(currentDef, newDef, {\n    // We need to keep the existing directive and pipe defs, because they can get patched on\n    // by a call to `setComponentScope` from a module file. That call won't make it into the\n    // HMR replacement function, because it lives in an entirely different file.\n    directiveDefs: clone.directiveDefs,\n    pipeDefs: clone.pipeDefs,\n\n    // Preserve the old `setInput` function, because it has some state.\n    // This is fine, because the component instance is preserved as well.\n    setInput: clone.setInput,\n\n    // Externally this is redundant since we redeclare the definition using the original type.\n    // Internally we may receive a definition with an alternate, but identical, type so we have\n    // to ensure that the original one is preserved.\n    type: clone.type,\n  });\n\n  ngDevMode && assertEqual(replacement, currentDef, 'Expected definition to be merged in place');\n  return {newDef: replacement, oldDef: clone};\n}\n\n/**\n * Finds all LViews matching a specific component definition and recreates them.\n * @param importMeta `import.meta` information.\n * @param id HMR ID of the component.\n * @param oldDef Component definition to search for.\n * @param rootLView View from which to start the search.\n */\nfunction recreateMatchingLViews(\n  importMeta: ImportMetaExtended | null,\n  id: string | null,\n  newDef: ComponentDef<unknown>,\n  oldDef: ComponentDef<unknown>,\n  rootLView: LView,\n): void {\n  ngDevMode &&\n    assertDefined(\n      oldDef.tView,\n      'Expected a component definition that has been instantiated at least once',\n    );\n\n  const tView = rootLView[TVIEW];\n\n  // Use `tView` to match the LView since `instanceof` can\n  // produce false positives when using inheritance.\n  if (tView === oldDef.tView) {\n    ngDevMode && assertComponentDef(oldDef.type);\n    recreateLView(importMeta, id, newDef, oldDef, rootLView);\n    return;\n  }\n\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const current = rootLView[i];\n\n    if (isLContainer(current)) {\n      // The host can be an LView if a component is injecting `ViewContainerRef`.\n      if (isLView(current[HOST])) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[HOST]);\n      }\n\n      for (let j = CONTAINER_HEADER_OFFSET; j < current.length; j++) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[j]);\n      }\n    } else if (isLView(current)) {\n      recreateMatchingLViews(importMeta, id, newDef, oldDef, current);\n    }\n  }\n}\n\n/**\n * Removes any cached renderers from the factory for the provided type.\n * This is currently used by the HMR logic to ensure Renderers are kept\n * synchronized with any definition metadata updates.\n * @param factory A RendererFactory2 instance.\n * @param def A ComponentDef instance.\n */\nfunction clearRendererCache(factory: RendererFactory, def: ComponentDef<unknown>) {\n  // Cast to read a private field.\n  // NOTE: This must be kept synchronized with the renderer factory implementation in\n  // platform-browser and platform-browser/animations.\n  (factory as {componentReplaced?: (id: string) => void}).componentReplaced?.(def.id);\n}\n\n/**\n * Recreates an LView in-place from a new component definition.\n * @param importMeta `import.meta` information.\n * @param id HMR ID for the component.\n * @param newDef Definition from which to recreate the view.\n * @param oldDef Previous component definition being swapped out.\n * @param lView View to be recreated.\n */\nfunction recreateLView(\n  importMeta: ImportMetaExtended | null,\n  id: string | null,\n  newDef: ComponentDef<unknown>,\n  oldDef: ComponentDef<unknown>,\n  lView: LView<unknown>,\n): void {\n  const instance = lView[CONTEXT];\n  let host = lView[HOST]! as HTMLElement;\n  // In theory the parent can also be an LContainer, but it appears like that's\n  // only the case for embedded views which we won't be replacing here.\n  const parentLView = lView[PARENT] as LView;\n  ngDevMode && assertLView(parentLView);\n  const tNode = lView[T_HOST] as TElementNode;\n  ngDevMode && assertTNodeType(tNode, TNodeType.Element);\n  ngDevMode && assertNotEqual(newDef, oldDef, 'Expected different component definition');\n  const zone = lView[INJECTOR].get(NgZone, null);\n  const recreate = () => {\n    // If we're recreating a component with shadow DOM encapsulation, it will have attached a\n    // shadow root. The browser will throw if we attempt to attach another one and there's no way\n    // to detach it. Our only option is to make a clone only of the root node, replace the node\n    // with the clone and use it for the newly-created LView.\n    if (\n      oldDef.encapsulation === ViewEncapsulation.ShadowDom ||\n      oldDef.encapsulation === ViewEncapsulation.IsolatedShadowDom\n    ) {\n      const newHost = host.cloneNode(false) as HTMLElement;\n      host.replaceWith(newHost);\n      host = newHost;\n    }\n\n    // Recreate the TView since the template might've changed.\n    const newTView = getOrCreateComponentTView(newDef);\n\n    // Create a new LView from the new TView, but reusing the existing TNode and DOM node.\n    const newLView = createLView(\n      parentLView,\n      newTView,\n      instance,\n      getInitialLViewFlagsFromDef(newDef),\n      host,\n      tNode,\n      null,\n      null, // The renderer will be created a bit further down once the old one is destroyed.\n      null,\n      null,\n      null,\n    );\n\n    // Detach the LView from its current place in the tree so we don't\n    // start traversing any siblings and modifying their structure.\n    replaceLViewInTree(parentLView, lView, newLView, tNode.index);\n\n    // Destroy the detached LView.\n    destroyLView(lView[TVIEW], lView);\n\n    // Always force the creation of a new renderer to ensure state captured during construction\n    // stays consistent with the new component definition by clearing any old ached factories.\n    const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n    clearRendererCache(rendererFactory, oldDef);\n\n    // Patch a brand-new renderer onto the new view only after the old\n    // view is destroyed so that the runtime doesn't try to reuse it.\n    newLView[RENDERER] = rendererFactory.createRenderer(host, newDef);\n\n    // Remove the nodes associated with the destroyed LView. This removes the\n    // descendants, but not the host which we want to stay in place.\n    removeViewFromDOM(lView[TVIEW], lView);\n\n    // Reset the content projection state of the TNode before the first render.\n    // Note that this has to happen after the LView has been destroyed or we\n    // risk some projected nodes not being removed correctly.\n    resetProjectionState(tNode);\n\n    // Creation pass for the new view.\n    renderView(newTView, newLView, instance);\n\n    // Update pass for the new view.\n    refreshView(newTView, newLView, newTView.template, instance);\n  };\n\n  // The callback isn't guaranteed to be inside the Zone so we need to bring it in ourselves.\n  if (zone === null) {\n    executeWithInvalidateFallback(importMeta, id, recreate);\n  } else {\n    zone.run(() => executeWithInvalidateFallback(importMeta, id, recreate));\n  }\n}\n\n/**\n * Runs an HMR-related function and falls back to\n * invalidating the HMR data if it throws an error.\n */\nfunction executeWithInvalidateFallback(\n  importMeta: ImportMetaExtended | null,\n  id: string | null,\n  callback: () => void,\n) {\n  try {\n    callback();\n  } catch (e) {\n    const error = e as {message?: string; stack?: string};\n\n    // If we have all the necessary information and APIs to send off the invalidation\n    // request, send it before rethrowing so the dev server can decide what to do.\n    if (id !== null && error.message) {\n      const toLog = error.message + (error.stack ? '\\n' + error.stack : '');\n      importMeta?.hot?.send?.('angular:invalidate', {id, message: toLog, error: true});\n    }\n\n    // Throw the error in case the page doesn't get refreshed.\n    throw e;\n  }\n}\n\n/**\n * Replaces one LView in the tree with another one.\n * @param parentLView Parent of the LView being replaced.\n * @param oldLView LView being replaced.\n * @param newLView Replacement LView to be inserted.\n * @param index Index at which the LView should be inserted.\n */\nfunction replaceLViewInTree(\n  parentLView: LView,\n  oldLView: LView,\n  newLView: LView,\n  index: number,\n): void {\n  // Update the sibling whose `NEXT` pointer refers to the old view.\n  for (let i = HEADER_OFFSET; i < parentLView[TVIEW].bindingStartIndex; i++) {\n    const current = parentLView[i];\n\n    if ((isLView(current) || isLContainer(current)) && current[NEXT] === oldLView) {\n      current[NEXT] = newLView;\n      break;\n    }\n  }\n\n  // Set the new view as the head, if the old view was first.\n  if (parentLView[CHILD_HEAD] === oldLView) {\n    parentLView[CHILD_HEAD] = newLView;\n  }\n\n  // Set the new view as the tail, if the old view was last.\n  if (parentLView[CHILD_TAIL] === oldLView) {\n    parentLView[CHILD_TAIL] = newLView;\n  }\n\n  // Update the `NEXT` pointer to the same as the old view.\n  newLView[NEXT] = oldLView[NEXT];\n\n  // Clear out the `NEXT` of the old view.\n  oldLView[NEXT] = null;\n\n  // Insert the new LView at the correct index.\n  parentLView[index] = newLView;\n}\n\n/**\n * Child nodes mutate the `projection` state of their parent node as they're being projected.\n * This function resets the `project` back to its initial state.\n * @param tNode\n */\nfunction resetProjectionState(tNode: TElementNode): void {\n  // The `projection` is mutated by child nodes as they're being projected. We need to\n  // reset it to the initial state so projection works after the template is swapped out.\n  if (tNode.projection !== null) {\n    for (const current of tNode.projection) {\n      if (isTNodeShape(current)) {\n        // Reset `projectionNext` since it can affect the traversal order during projection.\n        current.projectionNext = null;\n        current.flags &= ~TNodeFlags.isProjected;\n      }\n    }\n    tNode.projection = null;\n  }\n}\n"]}