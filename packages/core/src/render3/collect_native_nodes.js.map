{"version":3,"file":"collect_native_nodes.js","sourceRoot":"","sources":["collect_native_nodes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertParentView} from './assert';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE} from './interfaces/container';\nimport {TIcuContainerNode, TNode, TNodeType} from './interfaces/node';\nimport {RNode} from './interfaces/renderer_dom';\nimport {isLContainer} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, HOST, LView, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getProjectionNodes} from './node_manipulation';\nimport {getLViewParent, unwrapRNode} from './util/view_utils';\n\nexport function collectNativeNodes(\n  tView: TView,\n  lView: LView,\n  tNode: TNode | null,\n  result: any[],\n  isProjection: boolean = false,\n): any[] {\n  while (tNode !== null) {\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === TNodeType.LetDeclaration) {\n      tNode = isProjection ? tNode.projectionNext : tNode.next;\n      continue;\n    }\n\n    ngDevMode &&\n      assertTNodeType(\n        tNode,\n        TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu,\n      );\n\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      collectNativeNodesInLContainer(lNode, result);\n    }\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.ElementContainer) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & TNodeType.Icu) {\n      const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode | null;\n      while ((rNode = nextRNode())) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & TNodeType.Projection) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW])!;\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n\n  return result;\n}\n\n/**\n * Collects all root nodes in all views in a given LContainer.\n */\nexport function collectNativeNodesInLContainer(lContainer: LContainer, result: any[]) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lViewInAContainer = lContainer[i];\n    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n    if (lViewFirstChildTNode !== null) {\n      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n    }\n  }\n\n  // When an LContainer is created, the anchor (comment) node is:\n  // - (1) either reused in case of an ElementContainer (<ng-container>)\n  // - (2) or a new comment node is created\n  // In the first case, the anchor comment node would be added to the final\n  // list by the code in the `collectNativeNodes` function\n  // (see the `result.push(unwrapRNode(lNode))` line), but the second\n  // case requires extra handling: the anchor node needs to be added to the\n  // final list manually. See additional information in the `createAnchorNode`\n  // function in the `view_container_ref.ts`.\n  //\n  // In the first case, the same reference would be stored in the `NATIVE`\n  // and `HOST` slots in an LContainer. Otherwise, this is the second case and\n  // we should add an element to the final list.\n  if (lContainer[NATIVE] !== lContainer[HOST]) {\n    result.push(lContainer[NATIVE]);\n  }\n}\n"]}