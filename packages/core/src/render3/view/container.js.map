{"version":3,"file":"container.js","sourceRoot":"","sources":["container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {addToArray, removeFromArray} from '../../util/array_utils';\nimport {assertDefined, assertEqual} from '../../util/assert';\nimport {assertLContainer, assertLView} from '../assert';\nimport {\n  CONTAINER_HEADER_OFFSET,\n  LContainer,\n  LContainerFlags,\n  MOVED_VIEWS,\n  NATIVE,\n} from '../interfaces/container';\nimport {TNode} from '../interfaces/node';\nimport {RComment, RElement} from '../interfaces/renderer_dom';\nimport {isLView} from '../interfaces/type_checks';\nimport {\n  DECLARATION_COMPONENT_VIEW,\n  DECLARATION_LCONTAINER,\n  FLAGS,\n  HYDRATION,\n  LView,\n  LViewFlags,\n  NEXT,\n  PARENT,\n  QUERIES,\n  RENDERER,\n  T_HOST,\n  TView,\n  TVIEW,\n} from '../interfaces/view';\nimport {\n  addViewToDOM,\n  destroyLView,\n  detachMovedView,\n  getBeforeNodeForView,\n  removeViewFromDOM,\n} from '../node_manipulation';\nimport {updateAncestorTraversalFlagsOnAttach} from '../util/view_utils';\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(\n  hostNative: RElement | RComment | LView,\n  currentView: LView,\n  native: RComment,\n  tNode: TNode,\n): LContainer {\n  ngDevMode && assertLView(currentView);\n  const lContainer: LContainer = [\n    hostNative, // host native\n    true, // Boolean `true` in this position signifies that this is an `LContainer`\n    0, // flags\n    currentView, // parent\n    null, // next\n    tNode, // t_host\n    null, // dehydrated views\n    native, // native,\n    null, // view refs\n    null, // moved views\n  ];\n  ngDevMode &&\n    assertEqual(\n      lContainer.length,\n      CONTAINER_HEADER_OFFSET,\n      'Should allocate correct number of slots for LContainer header.',\n    );\n  return lContainer;\n}\n\nexport function getLViewFromLContainer<T>(\n  lContainer: LContainer,\n  index: number,\n): LView<T> | undefined {\n  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\n  // avoid reading past the array boundaries\n  if (adjustedIndex < lContainer.length) {\n    const lView = lContainer[adjustedIndex];\n    ngDevMode && assertLView(lView);\n    return lView as LView<T>;\n  }\n  return undefined;\n}\n\nexport function addLViewToLContainer(\n  lContainer: LContainer,\n  lView: LView<unknown>,\n  index: number,\n  addToDOM = true,\n): void {\n  const tView = lView[TVIEW];\n\n  // Insert into the view tree so the new view can be change-detected\n  insertView(tView, lView, lContainer, index);\n\n  // Insert elements that belong to this view into the DOM tree\n  if (addToDOM) {\n    const beforeNode = getBeforeNodeForView(index, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = renderer.parentNode(lContainer[NATIVE] as RElement | RComment);\n    if (parentRNode !== null) {\n      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n  }\n\n  // When in hydration mode, reset the pointer to the first child in\n  // the dehydrated view. This indicates that the view was hydrated and\n  // further attaching/detaching should work with this view as normal.\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\n    hydrationInfo.firstChild = null;\n  }\n}\n\nexport function removeLViewFromLContainer(\n  lContainer: LContainer,\n  index: number,\n): LView<unknown> | undefined {\n  const lView = detachView(lContainer, index);\n  if (lView !== undefined) {\n    destroyLView(lView[TVIEW], lView);\n  }\n  return lView;\n}\n\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer: LContainer, removeIndex: number): LView | undefined {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT] as LView;\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\n\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~LViewFlags.Attached;\n  }\n  return viewToDetach;\n}\n\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView: TView, lView: LView, lContainer: LContainer, index: number) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n\n  lView[PARENT] = lContainer;\n\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n\n  updateAncestorTraversalFlagsOnAttach(lView);\n  // Sets the attached flag\n  lView[FLAGS] |= LViewFlags.Attached;\n}\n\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer or attached directly to ApplicationRef.\n */\nexport function trackMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const parent = lView[PARENT]!;\n  ngDevMode && assertDefined(parent, 'missing parent');\n  if (isLView(parent)) {\n    declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;\n  } else {\n    const insertedComponentLView = parent[PARENT]![DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n      // At this point the declaration-component is not same as insertion-component; this means that\n      // this is a transplanted view. Mark the declared lView as having transplanted views so that\n      // those views can participate in CD.\n      declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;\n    }\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\n"]}