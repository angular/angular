{"version":3,"file":"elements.js","sourceRoot":"","sources":["elements.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,qBAAqB,EAAC,MAAM,WAAW,CAAC;AAChD,OAAO,EAAC,sBAAsB,EAAC,MAAM,UAAU,CAAC;AAQhD,OAAO,EAAC,kBAAkB,EAAC,MAAM,2BAA2B,CAAC;AAC7D,OAAO,EAAC,KAAK,EAAyB,MAAM,oBAAoB,CAAC;AACjE,OAAO,EAAC,oBAAoB,EAAC,MAAM,2BAA2B,CAAC;AAC/D,OAAO,EAAC,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAC,cAAc,EAAC,MAAM,qBAAqB,CAAC;AACnD,OAAO,EAAC,WAAW,EAAC,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAC,iBAAiB,EAAgC,MAAM,cAAc,CAAC;AAE9E,MAAM,UAAU,4BAA4B,CAC1C,KAAa,EACb,KAAY,EACZ,IAAoD,EACpD,IAAY,EACZ,gBAA0C,EAC1C,eAAwB,EACxB,UAA0B,EAC1B,cAAuB;IAEvB,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,SAAS,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IACjC,MAAM,KAAK,GAAG,WAAW,CAAc,WAAW,EAAE,UAAU,CAAC,CAAC;IAChE,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAErC,CAAC;IAE1B,IAAI,eAAe,EAAE,CAAC;QACpB,iBAAiB,CACf,KAAK,EACL,KAAK,EACL,KAAK,EACL,WAAW,CAAW,WAAW,EAAE,cAAc,CAAC,EAClD,gBAAgB,CACjB,CAAC;IACJ,CAAC;IAED,wEAAwE;IACxE,KAAK,CAAC,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAEnE,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE,CAAC;QACzB,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,KAAK,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;QAC/B,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI,EAAE,CAAC;QAC3B,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,+BAA+B,CAAC,KAAY,EAAE,KAAY;IACxE,SAAS,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC1C,sBAAsB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACrC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9B,KAAK,CAAC,OAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;AACH,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,KAAa,EACb,KAAY,EACZ,IAAoD,EACpD,IAAY,EACZ,UAA0B,EAC1B,cAAuB;IAEvB,SAAS,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IACjC,MAAM,KAAK,GAAG,WAAW,CAAc,WAAW,EAAE,UAAU,CAAC,CAAC;IAChE,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAErC,CAAC;IAE1B,wEAAwE;IACxE,KAAK,CAAC,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAEnE,IAAI,cAAc,IAAI,IAAI,EAAE,CAAC;QAC3B,MAAM,IAAI,GAAG,WAAW,CAAW,WAAW,EAAE,cAAc,CAAE,CAAC;QACjE,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;QAEtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACxC,2EAA2E;YAC3E,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE,CAAC;QACzB,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,KAAK,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;QAC/B,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI,EAAE,CAAC;QAC3B,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertFirstCreatePass} from '../assert';\nimport {registerPostOrderHooks} from '../hooks';\nimport {\n  TAttributes,\n  TElementContainerNode,\n  TNode,\n  TNodeType,\n  type TElementNode,\n} from '../interfaces/node';\nimport {isContentQueryHost} from '../interfaces/type_checks';\nimport {TVIEW, type LView, type TView} from '../interfaces/view';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\nimport {resolveDirectives, type DirectiveMatcherStrategy} from './directives';\n\nexport function directiveHostFirstCreatePass(\n  index: number,\n  lView: LView,\n  type: TNodeType.Element | TNodeType.ElementContainer,\n  name: string,\n  directiveMatcher: DirectiveMatcherStrategy,\n  bindingsEnabled: boolean,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): TElementNode | TElementContainerNode {\n  const tView = lView[TVIEW];\n  ngDevMode && assertFirstCreatePass(tView);\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, type, name, attrs) as\n    | TElementNode\n    | TElementContainerNode;\n\n  if (bindingsEnabled) {\n    resolveDirectives(\n      tView,\n      lView,\n      tNode,\n      getConstant<string[]>(tViewConsts, localRefsIndex),\n      directiveMatcher,\n    );\n  }\n\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\nexport function directiveHostEndFirstCreatePass(tView: TView, tNode: TNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  registerPostOrderHooks(tView, tNode);\n  if (isContentQueryHost(tNode)) {\n    tView.queries!.elementEnd(tNode);\n  }\n}\n\nexport function domOnlyFirstCreatePass(\n  index: number,\n  tView: TView,\n  type: TNodeType.Element | TNodeType.ElementContainer,\n  name: string,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): TElementNode | TElementContainerNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, type, name, attrs) as\n    | TElementNode\n    | TElementContainerNode;\n\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n\n  if (localRefsIndex != null) {\n    const refs = getConstant<string[]>(tViewConsts, localRefsIndex)!;\n    tNode.localNames = [];\n\n    for (let i = 0; i < refs.length; i += 2) {\n      // Always -1 since DOM-only instructions can only refer to the native node.\n      tNode.localNames.push(refs[i], -1);\n    }\n  }\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n"]}