{"version":3,"file":"construction.js","sourceRoot":"","sources":["construction.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAEL,KAAK,EAGL,IAAI,EACJ,KAAK,EACL,gBAAgB,EAChB,MAAM,EACN,OAAO,EACP,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,EAAE,EACF,SAAS,EACT,sBAAsB,EAEtB,0BAA0B,EAC1B,aAAa,EACb,UAAU,EACV,UAAU,EACV,IAAI,GAEL,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAC,qBAAqB,EAAE,qBAAqB,EAAE,mBAAmB,EAAC,MAAM,WAAW,CAAC;AAC5F,OAAO,EAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAMzE,OAAO,EAAC,gBAAgB,EAAE,sBAAsB,EAAC,MAAM,oBAAoB,CAAC;AAC5E,OAAO,EAAC,gBAAgB,EAAC,MAAM,8BAA8B,CAAC;AAC9D,OAAO,EAAC,SAAS,EAAC,MAAM,WAAW,CAAC;AAWpC;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,WAAW,CACzB,IAAe,EACf,SAAuB,EACvB,UAAyC,EACzC,KAAa,EACb,IAAY,EACZ,UAA4C,EAC5C,KAAkC,EAClC,SAA0C,EAC1C,OAAgC,EAChC,eAA2C,EAC3C,KAAoB;IAEpB,MAAM,iBAAiB,GAAG,aAAa,GAAG,KAAK,CAAC;IAChD,8FAA8F;IAC9F,gGAAgG;IAChG,wFAAwF;IACxF,MAAM,iBAAiB,GAAG,iBAAiB,GAAG,IAAI,CAAC;IACnD,MAAM,SAAS,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;IAC5E,MAAM,MAAM,GAAG,OAAO,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;IAC3F,MAAM,KAAK,GAAG,CAAC,SAAS,CAAC,KAAY,CAAC,GAAG;QACvC,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,UAAU;QACpB,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,SAAS;QACpB,SAAS,EAAE,SAAS;QACpB,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC;QACrD,iBAAiB,EAAE,iBAAiB;QACpC,iBAAiB,EAAE,iBAAiB;QACpC,kBAAkB,EAAE,IAAI;QACxB,eAAe,EAAE,IAAI;QACrB,eAAe,EAAE,IAAI;QACrB,iBAAiB,EAAE,KAAK;QACxB,oBAAoB,EAAE,KAAK;QAC3B,aAAa,EAAE,IAAI;QACnB,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,IAAI;QAClB,iBAAiB,EAAE,IAAI;QACvB,SAAS,EAAE,IAAI;QACf,cAAc,EAAE,IAAI;QACpB,YAAY,EAAE,IAAI;QAClB,OAAO,EAAE,IAAI;QACb,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,IAAI;QAChB,iBAAiB,EAAE,OAAO,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,UAAU;QAC/E,YAAY,EAAE,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK;QAC3D,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,MAAM;QACd,mBAAmB,EAAE,KAAK;QAC1B,KAAK;KACN,CAAC,CAAC;IACH,IAAI,SAAS,EAAE,CAAC;QACd,gGAAgG;QAChG,4FAA4F;QAC5F,6BAA6B;QAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAS,mBAAmB,CAAC,iBAAyB,EAAE,iBAAyB;IAC/E,MAAM,SAAS,GAAG,EAAE,CAAC;IAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3C,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED,OAAO,SAAkB,CAAC;AAC5B,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,yBAAyB,CAAC,GAAsB;IAC9D,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IAExB,oFAAoF;IACpF,qFAAqF;IACrF,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,mBAAmB,EAAE,CAAC;QAChD,2FAA2F;QAC3F,+CAA+C;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,WAAW,8BAE7B,SAAS,EACT,GAAG,CAAC,QAAQ,EACZ,GAAG,CAAC,KAAK,EACT,GAAG,CAAC,IAAI,EACR,GAAG,CAAC,aAAa,EACjB,GAAG,CAAC,QAAQ,EACZ,GAAG,CAAC,SAAS,EACb,GAAG,CAAC,OAAO,EACX,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,EAAE,CACP,CAAC,CAAC;IACL,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,WAAyB,EACzB,KAAY,EACZ,OAAiB,EACjB,KAAiB,EACjB,IAAqB,EACrB,SAAuB,EACvB,WAAoC,EACpC,QAAyB,EACzB,QAAyB,EACzB,oBAAqC,EACrC,aAAoC;IAEpC,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAW,CAAC;IAC/C,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IACnB,KAAK,CAAC,KAAK,CAAC;QACV,KAAK;2CACkB;yCACJ;6CACM;qCACT;6CACM,CAAC;IACzB,IACE,oBAAoB,KAAK,IAAI;QAC7B,CAAC,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,gDAAqC,CAAC,EACxE,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,iDAAsC,CAAC;IACrD,CAAC;IACD,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAC9B,SAAS,IAAI,KAAK,CAAC,SAAS,IAAI,WAAW,IAAI,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACjG,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,gBAAgB,CAAC,GAAG,WAAW,CAAC;IACtD,KAAK,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;IACzB,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC,CAAE,CAAC;IACjF,SAAS,IAAI,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,8BAA8B,CAAC,CAAC;IAC/E,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAE,CAAC;IACxE,SAAS,IAAI,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,sBAAsB,CAAC,CAAC;IACpE,KAAK,CAAC,QAAe,CAAC,GAAG,QAAQ,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC;IACpF,KAAK,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;IAC1B,KAAK,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,CAAC;IAC/B,KAAK,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC;IACjC,KAAK,CAAC,sBAA6B,CAAC,GAAG,oBAAoB,CAAC;IAE5D,SAAS;QACP,WAAW,CACT,KAAK,CAAC,IAAI,8BAAsB,CAAC,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,EAC9D,IAAI,EACJ,sCAAsC,CACvC,CAAC;IACJ,KAAK,CAAC,0BAA0B,CAAC;QAC/B,KAAK,CAAC,IAAI,8BAAsB,CAAC,CAAC,CAAC,WAAY,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACtF,OAAO,KAAiB,CAAC;AAC3B,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,KAAY,EACZ,SAAuB,EACvB,GAAoB;IAEpB,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAa,CAAC;IAC9D,MAAM,KAAK,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;IAE7C,qFAAqF;IACrF,kFAAkF;IAClF,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC;IAC3D,MAAM,aAAa,GAAG,kBAAkB,CACtC,KAAK,EACL,WAAW,CACT,KAAK,EACL,KAAK,EACL,IAAI,EACJ,2BAA2B,CAAC,GAAG,CAAC,EAChC,MAAM,EACN,SAAyB,EACzB,IAAI,EACJ,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,EAC3C,IAAI,EACJ,IAAI,EACJ,IAAI,CACL,CACF,CAAC;IAEF,yEAAyE;IACzE,gEAAgE;IAChE,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,CAAC;AAClD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,2BAA2B,CAAC,GAA0B;IACpE,IAAI,KAAK,kCAAyB,CAAC;IACnC,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;QAChB,KAAK,mCAAwB,CAAC;IAChC,CAAC;SAAM,IAAI,GAAG,CAAC,MAAM,EAAE,CAAC;QACtB,KAAK,4BAAmB,CAAC;IAC3B,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,YAAY,CAC1B,KAAY,EACZ,KAAY,EACZ,eAAuB,EACvB,YAAqB;IAErB,IAAI,eAAe,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC,CAAC;IACrC,IAAI,SAAS,EAAE,CAAC;QACd,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC7B,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,0CAA0C,CAAC,CAAC;QAC5E,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,0CAA0C,CAAC,CAAC;QACzF,WAAW,CACT,KAAK,CAAC,IAAI,CAAC,MAAM,EACjB,KAAK,CAAC,SAAS,CAAC,MAAM,EACtB,8CAA8C,CAC/C,CAAC;QACF,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IACD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC;IAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC;QACzC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACnC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,kBAAkB,CAChC,KAAY,EACZ,iBAAoB;IAEpB,+FAA+F;IAC/F,kGAAkG;IAClG,yFAAyF;IACzF,0DAA0D;IAC1D,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;QACtB,KAAK,CAAC,UAAU,CAAE,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC;IAC/C,CAAC;SAAM,CAAC;QACN,KAAK,CAAC,UAAU,CAAC,GAAG,iBAAiB,CAAC;IACxC,CAAC;IACD,KAAK,CAAC,UAAU,CAAC,GAAG,iBAAiB,CAAC;IACtC,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  TView,\n  TVIEW,\n  LViewFlags,\n  LViewEnvironment,\n  HOST,\n  FLAGS,\n  DECLARATION_VIEW,\n  PARENT,\n  CONTEXT,\n  ENVIRONMENT,\n  RENDERER,\n  INJECTOR,\n  T_HOST,\n  ID,\n  HYDRATION,\n  EMBEDDED_VIEW_INJECTOR,\n  TViewType,\n  DECLARATION_COMPONENT_VIEW,\n  HEADER_OFFSET,\n  CHILD_HEAD,\n  CHILD_TAIL,\n  NEXT,\n  LView,\n} from '../interfaces/view';\nimport {assertFirstCreatePass, assertFirstUpdatePass, assertTNodeForLView} from '../assert';\nimport {assertSame, assertEqual, assertDefined} from '../../util/assert';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {TConstantsOrFactory, TElementNode, TNode} from '../interfaces/node';\nimport {Renderer} from '../interfaces/renderer';\nimport {Injector} from '../../di';\nimport {DehydratedView} from '../../hydration/interfaces';\nimport {getNativeByTNode, resetPreOrderHookFlags} from '../util/view_utils';\nimport {getUniqueLViewId} from '../interfaces/lview_tracking';\nimport {NO_CHANGE} from '../tokens';\nimport {\n  ComponentDef,\n  ComponentTemplate,\n  DirectiveDefListOrFactory,\n  PipeDefListOrFactory,\n  ViewQueriesFunction,\n} from '../interfaces/definition';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {LContainer} from '../interfaces/container';\n\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nexport function createTView(\n  type: TViewType,\n  declTNode: TNode | null,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  directives: DirectiveDefListOrFactory | null,\n  pipes: PipeDefListOrFactory | null,\n  viewQuery: ViewQueriesFunction<any> | null,\n  schemas: SchemaMetadata[] | null,\n  constsOrFactory: TConstantsOrFactory | null,\n  ssrId: string | null,\n): TView {\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = (blueprint[TVIEW as any] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false,\n    ssrId,\n  });\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\n\nfunction createViewBlueprint(bindingStartIndex: number, initialViewLength: number): LView {\n  const blueprint = [];\n\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n\n  return blueprint as LView;\n}\n\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nexport function getOrCreateComponentTView(def: ComponentDef<any>): TView {\n  const tView = def.tView;\n\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return (def.tView = createTView(\n      TViewType.Component,\n      declTNode,\n      def.template,\n      def.decls,\n      def.vars,\n      def.directiveDefs,\n      def.pipeDefs,\n      def.viewQuery,\n      def.schemas,\n      def.consts,\n      def.id,\n    ));\n  }\n\n  return tView;\n}\n\nexport function createLView<T>(\n  parentLView: LView | null,\n  tView: TView,\n  context: T | null,\n  flags: LViewFlags,\n  host: RElement | null,\n  tHostNode: TNode | null,\n  environment: LViewEnvironment | null,\n  renderer: Renderer | null,\n  injector: Injector | null,\n  embeddedViewInjector: Injector | null,\n  hydrationInfo: DehydratedView | null,\n): LView<T> {\n  const lView = tView.blueprint.slice() as LView;\n  lView[HOST] = host;\n  lView[FLAGS] =\n    flags |\n    LViewFlags.CreationMode |\n    LViewFlags.Attached |\n    LViewFlags.FirstLViewPass |\n    LViewFlags.Dirty |\n    LViewFlags.RefreshView;\n  if (\n    embeddedViewInjector !== null ||\n    (parentLView && parentLView[FLAGS] & LViewFlags.HasEmbeddedViewInjector)\n  ) {\n    lView[FLAGS] |= LViewFlags.HasEmbeddedViewInjector;\n  }\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[ENVIRONMENT] = (environment || (parentLView && parentLView[ENVIRONMENT]))!;\n  ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\n  lView[RENDERER] = (renderer || (parentLView && parentLView[RENDERER]))!;\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[INJECTOR as any] = injector || (parentLView && parentLView[INJECTOR]) || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[HYDRATION] = hydrationInfo;\n  lView[EMBEDDED_VIEW_INJECTOR as any] = embeddedViewInjector;\n\n  ngDevMode &&\n    assertEqual(\n      tView.type == TViewType.Embedded ? parentLView !== null : true,\n      true,\n      'Embedded views must have parentLView',\n    );\n  lView[DECLARATION_COMPONENT_VIEW] =\n    tView.type == TViewType.Embedded ? parentLView![DECLARATION_COMPONENT_VIEW] : lView;\n  return lView as LView<T>;\n}\n\nexport function createComponentLView<T>(\n  lView: LView,\n  hostTNode: TElementNode,\n  def: ComponentDef<T>,\n): LView {\n  const native = getNativeByTNode(hostTNode, lView) as RElement;\n  const tView = getOrCreateComponentTView(def);\n\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n  const componentView = addToEndOfViewTree(\n    lView,\n    createLView(\n      lView,\n      tView,\n      null,\n      getInitialLViewFlagsFromDef(def),\n      native,\n      hostTNode as TElementNode,\n      null,\n      rendererFactory.createRenderer(native, def),\n      null,\n      null,\n      null,\n    ),\n  );\n\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  return (lView[hostTNode.index] = componentView);\n}\n\n/**\n * Gets the initial set of LView flags based on the component definition that the LView represents.\n * @param def Component definition from which to determine the flags.\n */\nexport function getInitialLViewFlagsFromDef(def: ComponentDef<unknown>): LViewFlags {\n  let flags = LViewFlags.CheckAlways;\n  if (def.signals) {\n    flags = LViewFlags.SignalView;\n  } else if (def.onPush) {\n    flags = LViewFlags.Dirty;\n  }\n  return flags;\n}\n\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nexport function allocExpando(\n  tView: TView,\n  lView: LView,\n  numSlotsToAlloc: number,\n  initialValue: unknown,\n): number {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(\n      tView.data.length,\n      tView.blueprint.length,\n      'Expecting Blueprint to be same size as TView',\n    );\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToEndOfViewTree<T extends LView | LContainer>(\n  lView: LView,\n  lViewOrLContainer: T,\n): T {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL]![NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n"]}