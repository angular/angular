{"version":3,"file":"static_styling.js","sourceRoot":"","sources":["static_styling.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,sBAAsB,EAAC,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAC,qBAAqB,EAAC,MAAM,WAAW,CAAC;AAGhD,OAAO,EAAC,QAAQ,EAAC,MAAM,UAAU,CAAC;AAElC;;;;;;;;;;GAUG;AACH,MAAM,UAAU,oBAAoB,CAClC,KAAY,EACZ,KAAyB,EACzB,WAAoB;IAEpB,SAAS;QACP,qBAAqB,CAAC,QAAQ,EAAE,EAAE,oDAAoD,CAAC,CAAC;IAC1F,IAAI,MAAM,GAAkB,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9D,IAAI,OAAO,GAAkB,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAChE,IAAI,IAAI,GAAwB,CAAC,CAAC;IAClC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC9B,IAAI,GAAG,KAAK,CAAC;YACf,CAAC;iBAAM,IAAI,IAAI,mCAA2B,EAAE,CAAC;gBAC3C,OAAO,GAAG,sBAAsB,CAAC,OAAO,EAAE,KAAe,CAAC,CAAC;YAC7D,CAAC;iBAAM,IAAI,IAAI,kCAA0B,EAAE,CAAC;gBAC1C,MAAM,KAAK,GAAG,KAAe,CAAC;gBAC9B,MAAM,UAAU,GAAG,KAAK,CAAC,EAAE,CAAC,CAAW,CAAC;gBACxC,MAAM,GAAG,sBAAsB,CAAC,MAAM,EAAE,KAAK,GAAG,IAAI,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;IACH,CAAC;IACD,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC,CAAC;IAC3E,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,kBAAkB,GAAG,OAAO,CAAC,CAAC;AACjF,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {concatStringsWithSpace} from '../../util/stringify';\nimport {assertFirstCreatePass} from '../assert';\nimport {AttributeMarker} from '../interfaces/attribute_marker';\nimport {TAttributes, TNode} from '../interfaces/node';\nimport {getTView} from '../state';\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nexport function computeStaticStyling(\n  tNode: TNode,\n  attrs: TAttributes | null,\n  writeToHost: boolean,\n): void {\n  ngDevMode &&\n    assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles: string | null = writeToHost ? tNode.styles : null;\n  let classes: string | null = writeToHost ? tNode.classes : null;\n  let mode: AttributeMarker | 0 = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == AttributeMarker.Classes) {\n        classes = concatStringsWithSpace(classes, value as string);\n      } else if (mode == AttributeMarker.Styles) {\n        const style = value as string;\n        const styleValue = attrs[++i] as string;\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? (tNode.styles = styles) : (tNode.stylesWithoutHost = styles);\n  writeToHost ? (tNode.classes = classes) : (tNode.classesWithoutHost = classes);\n}\n"]}