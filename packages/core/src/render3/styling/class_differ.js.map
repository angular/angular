{"version":3,"file":"class_differ.js","sourceRoot":"","sources":["class_differ.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAGjD;;;;;;;;;GASG;AACH,MAAM,UAAU,YAAY,CAC1B,SAAiB,EACjB,aAAqB,EACrB,aAAqB;IAErB,SAAS,IAAI,cAAc,CAAC,aAAa,EAAE,EAAE,EAAE,6BAA6B,CAAC,CAAC;IAC9E,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;IAC3B,OAAO,IAAI,EAAE,CAAC;QACZ,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QACnE,IAAI,UAAU,KAAK,CAAC,CAAC;YAAE,OAAO,UAAU,CAAC;QACzC,IAAI,UAAU,KAAK,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,CAAC,2BAAkB,EAAE,CAAC;YAC/E,wCAAwC;YACxC,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;YACpC,IACE,UAAU,GAAG,MAAM,KAAK,GAAG;gBAC3B,SAAS,CAAC,UAAU,CAAC,UAAU,GAAG,MAAM,CAAC,2BAAkB,EAC3D,CAAC;gBACD,yCAAyC;gBACzC,OAAO,UAAU,CAAC;YACpB,CAAC;QACH,CAAC;QACD,yDAAyD;QACzD,aAAa,GAAG,UAAU,GAAG,CAAC,CAAC;IACjC,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertNotEqual} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nexport function classIndexOf(\n  className: string,\n  classToSearch: string,\n  startingIndex: number,\n): number {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= CharCode.SPACE) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (\n        foundIndex + length === end ||\n        className.charCodeAt(foundIndex + length) <= CharCode.SPACE\n      ) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\n"]}