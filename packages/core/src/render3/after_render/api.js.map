{"version":3,"file":"api.js","sourceRoot":"","sources":["api.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * The phase to run an `afterRender` or `afterNextRender` callback in.\n *\n * Callbacks in the same phase run in the order they are registered. Phases run in the\n * following order after each render:\n *\n *   1. `AfterRenderPhase.EarlyRead`\n *   2. `AfterRenderPhase.Write`\n *   3. `AfterRenderPhase.MixedReadWrite`\n *   4. `AfterRenderPhase.Read`\n *\n * Angular is unable to verify or enforce that phases are used correctly, and instead\n * relies on each developer to follow the guidelines documented for each value and\n * carefully choose the appropriate one, refactoring their code if necessary. By doing\n * so, Angular is better able to minimize the performance degradation associated with\n * manual DOM access, ensuring the best experience for the end users of your application\n * or library.\n */\nexport const enum AfterRenderPhase {\n  /**\n   * Use `AfterRenderPhase.EarlyRead` for callbacks that only need to **read** from the\n   * DOM before a subsequent `AfterRenderPhase.Write` callback, for example to perform\n   * custom layout that the browser doesn't natively support. Prefer the\n   * `AfterRenderPhase.Read` phase if reading can wait until after the write phase.\n   * **Never** write to the DOM in this phase.\n   *\n   * <div class=\"docs-alert docs-alert-important\">\n   *\n   * Using this value can degrade performance.\n   * Instead, prefer using built-in browser functionality when possible.\n   *\n   * </div>\n   */\n  EarlyRead,\n\n  /**\n   * Use `AfterRenderPhase.Write` for callbacks that only **write** to the DOM. **Never**\n   * read from the DOM in this phase.\n   */\n  Write,\n\n  /**\n   * Use `AfterRenderPhase.MixedReadWrite` for callbacks that read from or write to the\n   * DOM, that haven't been refactored to use a different phase. **Never** use this phase if\n   * it is possible to divide the work among the other phases instead.\n   *\n   * <div class=\"docs-alert docs-alert-critical\">\n   *\n   * Using this value can **significantly** degrade performance.\n   * Instead, prefer dividing work into the appropriate phase callbacks.\n   *\n   * </div>\n   */\n  MixedReadWrite,\n\n  /**\n   * Use `AfterRenderPhase.Read` for callbacks that only **read** from the DOM. **Never**\n   * write to the DOM in this phase.\n   */\n  Read,\n}\n\n/**\n * A callback that runs after render.\n *\n * @publicApi\n */\nexport interface AfterRenderRef {\n  /**\n   * Shut down the callback, preventing it from being called again.\n   */\n  destroy(): void;\n}\n"]}