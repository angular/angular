{"version":3,"file":"list_reconciliation.js","sourceRoot":"","sources":["list_reconciliation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TrackByFunction} from '../change_detection';\nimport {formatRuntimeError, RuntimeErrorCode} from '../errors';\n\nimport {stringifyForError} from './util/stringify_utils';\n\n/**\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\n * is an adapter class that makes it possible to work with different internal data structures,\n * regardless of the actual values of the incoming collection.\n */\nexport abstract class LiveCollection<T, V> {\n  abstract get length(): number;\n  abstract at(index: number): V;\n  abstract attach(index: number, item: T): void;\n  abstract detach(index: number, skipLeaveAnimations?: boolean): T;\n  abstract create(index: number, value: V): T;\n  destroy(item: T): void {\n    // noop by default\n  }\n  updateValue(index: number, value: V): void {\n    // noop by default\n  }\n\n  // operations below could be implemented on top of the operations defined so far, but having\n  // them explicitly allow clear expression of intent and potentially more performant\n  // implementations\n  swap(index1: number, index2: number): void {\n    const startIdx = Math.min(index1, index2);\n    const endIdx = Math.max(index1, index2);\n    const endItem = this.detach(endIdx);\n    if (endIdx - startIdx > 1) {\n      const startItem = this.detach(startIdx);\n      this.attach(startIdx, endItem);\n      this.attach(endIdx, startItem);\n    } else {\n      this.attach(startIdx, endItem);\n    }\n  }\n  move(prevIndex: number, newIdx: number): void {\n    // For move operations, the detach code path is the same one used for removing\n    // DOM nodes, which would trigger `animate.leave` bindings. We need to skip\n    // those animations in the case of a move operation so the moving elements don't\n    // unexpectedly disappear.\n    this.attach(newIdx, this.detach(prevIndex, true /* skipLeaveAnimations */));\n  }\n}\n\nfunction valuesMatching<V>(\n  liveIdx: number,\n  liveValue: V,\n  newIdx: number,\n  newValue: V,\n  trackBy: TrackByFunction<V>,\n): number {\n  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\n    // matching and no value identity to update\n    return 1;\n  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\n    // matching but requires value identity update\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction recordDuplicateKeys(keyToIdx: Map<unknown, Set<number>>, key: unknown, idx: number): void {\n  const idxSoFar = keyToIdx.get(key);\n\n  if (idxSoFar !== undefined) {\n    idxSoFar.add(idx);\n  } else {\n    keyToIdx.set(key, new Set([idx]));\n  }\n}\n\n/**\n * The live collection reconciliation algorithm that perform various in-place operations, so it\n * reflects the content of the new (incoming) collection.\n *\n * The reconciliation algorithm has 2 code paths:\n * - \"fast\" path that don't require any memory allocation;\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\n * collect additional information about the live collection.\n * It might happen that the algorithm switches between the two modes in question in a single\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\n *\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\n * length of the live collection and m is the length of the incoming collection). Given the problem\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\n * certain situations.\n *\n * @param liveCollection the current, live collection;\n * @param newCollection the new, incoming collection;\n * @param trackByFn key generation function that determines equality between items in the life and\n *     incoming collection;\n */\nexport function reconcile<T, V>(\n  liveCollection: LiveCollection<T, V>,\n  newCollection: Iterable<V> | undefined | null,\n  trackByFn: TrackByFunction<V>,\n): void {\n  let detachedItems: UniqueValueMultiKeyMap<unknown, T> | undefined = undefined;\n  let liveKeysInTheFuture: Set<unknown> | undefined = undefined;\n\n  let liveStartIdx = 0;\n  let liveEndIdx = liveCollection.length - 1;\n\n  const duplicateKeys = ngDevMode ? new Map<unknown, Set<number>>() : undefined;\n\n  if (Array.isArray(newCollection)) {\n    let newEndIdx = newCollection.length - 1;\n\n    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\n      // compare from the beginning\n      const liveStartValue = liveCollection.at(liveStartIdx);\n      const newStartValue = newCollection[liveStartIdx];\n\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys!, trackByFn(liveStartIdx, newStartValue), liveStartIdx);\n      }\n\n      const isStartMatching = valuesMatching(\n        liveStartIdx,\n        liveStartValue,\n        liveStartIdx,\n        newStartValue,\n        trackByFn,\n      );\n      if (isStartMatching !== 0) {\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newStartValue);\n        }\n        liveStartIdx++;\n        continue;\n      }\n\n      // compare from the end\n      // TODO(perf): do _all_ the matching from the end\n      const liveEndValue = liveCollection.at(liveEndIdx);\n      const newEndValue = newCollection[newEndIdx];\n\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys!, trackByFn(newEndIdx, newEndValue), newEndIdx);\n      }\n\n      const isEndMatching = valuesMatching(\n        liveEndIdx,\n        liveEndValue,\n        newEndIdx,\n        newEndValue,\n        trackByFn,\n      );\n      if (isEndMatching !== 0) {\n        if (isEndMatching < 0) {\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n        }\n        liveEndIdx--;\n        newEndIdx--;\n        continue;\n      }\n\n      // Detect swap and moves:\n      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\n      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\n      const newStartKey = trackByFn(liveStartIdx, newStartValue);\n      if (Object.is(newStartKey, liveEndKey)) {\n        const newEndKey = trackByFn(newEndIdx, newEndValue);\n        // detect swap on both ends;\n        if (Object.is(newEndKey, liveStartKey)) {\n          liveCollection.swap(liveStartIdx, liveEndIdx);\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n          newEndIdx--;\n          liveEndIdx--;\n        } else {\n          // the new item is the same as the live item with the end pointer - this is a move forward\n          // to an earlier index;\n          liveCollection.move(liveEndIdx, liveStartIdx);\n        }\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        continue;\n      }\n\n      // Fallback to the slow path: we need to learn more about the content of the live and new\n      // collections.\n      detachedItems ??= new UniqueValueMultiKeyMap();\n      liveKeysInTheFuture ??= initLiveItemsInTheFuture(\n        liveCollection,\n        liveStartIdx,\n        liveEndIdx,\n        trackByFn,\n      );\n\n      // Check if I'm inserting a previously detached item: if so, attach it here\n      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else if (!liveKeysInTheFuture.has(newStartKey)) {\n        // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\n        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\n        liveCollection.attach(liveStartIdx, newItem);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else {\n        // We know that the new item exists later on in old collection but we don't know its index\n        // and as the consequence can't move it (don't know where to find it). Detach the old item,\n        // hoping that it unlocks the fast path again.\n        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\n        liveEndIdx--;\n      }\n    }\n\n    // Final cleanup steps:\n    // - more items in the new collection => insert\n    while (liveStartIdx <= newEndIdx) {\n      createOrAttach(\n        liveCollection,\n        detachedItems,\n        trackByFn,\n        liveStartIdx,\n        newCollection[liveStartIdx],\n      );\n      liveStartIdx++;\n    }\n  } else if (newCollection != null) {\n    // iterable - immediately fallback to the slow path\n    const newCollectionIterator = newCollection[Symbol.iterator]();\n    let newIterationResult = newCollectionIterator.next();\n    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\n      const liveValue = liveCollection.at(liveStartIdx);\n      const newValue = newIterationResult.value;\n\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys!, trackByFn(liveStartIdx, newValue), liveStartIdx);\n      }\n\n      const isStartMatching = valuesMatching(\n        liveStartIdx,\n        liveValue,\n        liveStartIdx,\n        newValue,\n        trackByFn,\n      );\n      if (isStartMatching !== 0) {\n        // found a match - move on, but update value\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n        }\n        liveStartIdx++;\n        newIterationResult = newCollectionIterator.next();\n      } else {\n        detachedItems ??= new UniqueValueMultiKeyMap();\n        liveKeysInTheFuture ??= initLiveItemsInTheFuture(\n          liveCollection,\n          liveStartIdx,\n          liveEndIdx,\n          trackByFn,\n        );\n\n        // Check if I'm inserting a previously detached item: if so, attach it here\n        const newKey = trackByFn(liveStartIdx, newValue);\n        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else if (!liveKeysInTheFuture.has(newKey)) {\n          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else {\n          // it is a move forward - detach the current item without advancing in collections\n          const liveKey = trackByFn(liveStartIdx, liveValue);\n          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\n          liveEndIdx--;\n        }\n      }\n    }\n\n    // this is a new item as we run out of the items in the old collection - create or attach a\n    // previously detached one\n    while (!newIterationResult.done) {\n      createOrAttach(\n        liveCollection,\n        detachedItems,\n        trackByFn,\n        liveCollection.length,\n        newIterationResult.value,\n      );\n      newIterationResult = newCollectionIterator.next();\n    }\n  }\n\n  // Cleanups common to the array and iterable:\n  // - more items in the live collection => delete starting from the end;\n  while (liveStartIdx <= liveEndIdx) {\n    liveCollection.destroy(liveCollection.detach(liveEndIdx--));\n  }\n\n  // - destroy items that were detached but never attached again.\n  detachedItems?.forEach((item) => {\n    liveCollection.destroy(item);\n  });\n\n  // report duplicate keys (dev mode only)\n  if (ngDevMode) {\n    let duplicatedKeysMsg = [];\n    for (const [key, idxSet] of duplicateKeys!) {\n      if (idxSet.size > 1) {\n        const idx = [...idxSet].sort((a, b) => a - b);\n        for (let i = 1; i < idx.length; i++) {\n          duplicatedKeysMsg.push(\n            `key \"${stringifyForError(key)}\" at index \"${idx[i - 1]}\" and \"${idx[i]}\"`,\n          );\n        }\n      }\n    }\n\n    if (duplicatedKeysMsg.length > 0) {\n      const message = formatRuntimeError(\n        RuntimeErrorCode.LOOP_TRACK_DUPLICATE_KEYS,\n        'The provided track expression resulted in duplicated keys for a given collection. ' +\n          'Adjust the tracking expression such that it uniquely identifies all the items in the collection. ' +\n          'Duplicated keys were: \\n' +\n          duplicatedKeysMsg.join(', \\n') +\n          '.',\n      );\n\n      console.warn(message);\n    }\n  }\n}\n\nfunction attachPreviouslyDetached<T, V>(\n  prevCollection: LiveCollection<T, V>,\n  detachedItems: UniqueValueMultiKeyMap<unknown, T> | undefined,\n  index: number,\n  key: unknown,\n): boolean {\n  if (detachedItems !== undefined && detachedItems.has(key)) {\n    prevCollection.attach(index, detachedItems.get(key)!);\n    detachedItems.delete(key);\n    return true;\n  }\n  return false;\n}\n\nfunction createOrAttach<T, V>(\n  liveCollection: LiveCollection<T, V>,\n  detachedItems: UniqueValueMultiKeyMap<unknown, T> | undefined,\n  trackByFn: TrackByFunction<unknown>,\n  index: number,\n  value: V,\n) {\n  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\n    const newItem = liveCollection.create(index, value);\n    liveCollection.attach(index, newItem);\n  } else {\n    liveCollection.updateValue(index, value);\n  }\n}\n\nfunction initLiveItemsInTheFuture<T>(\n  liveCollection: LiveCollection<unknown, unknown>,\n  start: number,\n  end: number,\n  trackByFn: TrackByFunction<unknown>,\n): Set<unknown> {\n  const keys = new Set();\n  for (let i = start; i <= end; i++) {\n    keys.add(trackByFn(i, liveCollection.at(i)));\n  }\n  return keys;\n}\n\n/**\n * A specific, partial implementation of the Map interface with the following characteristics:\n * - allows multiple values for a given key;\n * - maintain FIFO order for multiple values corresponding to a given key;\n * - assumes that all values are unique.\n *\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\n * values (in the entire collection) are unique.\n */\nexport class UniqueValueMultiKeyMap<K, V> {\n  // A map from a key to the first value corresponding to this key.\n  private kvMap = new Map<K, V>();\n  // A map that acts as a linked list of values - each value maps to the next value in this \"linked\n  // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\n  // there are no duplicated values.\n  private _vMap: Map<V, V> | undefined = undefined;\n\n  has(key: K): boolean {\n    return this.kvMap.has(key);\n  }\n\n  delete(key: K): boolean {\n    if (!this.has(key)) return false;\n\n    const value = this.kvMap.get(key)!;\n    if (this._vMap !== undefined && this._vMap.has(value)) {\n      this.kvMap.set(key, this._vMap.get(value)!);\n      this._vMap.delete(value);\n    } else {\n      this.kvMap.delete(key);\n    }\n\n    return true;\n  }\n\n  get(key: K): V | undefined {\n    return this.kvMap.get(key);\n  }\n\n  set(key: K, value: V): void {\n    if (this.kvMap.has(key)) {\n      let prevValue = this.kvMap.get(key)!;\n\n      // Note: we don't use `assertNotSame`, because the value needs to be stringified even if\n      // there is no error which can freeze the browser for large values (see #58509).\n      if (ngDevMode && prevValue === value) {\n        throw new Error(`Detected a duplicated value ${value} for the key ${key}`);\n      }\n\n      if (this._vMap === undefined) {\n        this._vMap = new Map();\n      }\n\n      const vMap = this._vMap;\n      while (vMap.has(prevValue)) {\n        prevValue = vMap.get(prevValue)!;\n      }\n      vMap.set(prevValue, value);\n    } else {\n      this.kvMap.set(key, value);\n    }\n  }\n\n  forEach(cb: (v: V, k: K) => void) {\n    for (let [key, value] of this.kvMap) {\n      cb(value, key);\n      if (this._vMap !== undefined) {\n        const vMap = this._vMap;\n        while (vMap.has(value)) {\n          value = vMap.get(value)!;\n          cb(value, key);\n        }\n      }\n    }\n  }\n}\n"]}