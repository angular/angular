{"version":3,"file":"errors.js","sourceRoot":"","sources":["errors.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\n\nimport {getComponentDef} from './def_getters';\nimport {getDeclarationComponentDef} from './instructions/element_validation';\nimport {TNode} from './interfaces/node';\nimport {LView, TVIEW} from './interfaces/view';\nimport {INTERPOLATION_DELIMITER} from './util/misc_utils';\nimport {stringifyForError} from './util/stringify_utils';\n\n/**\n * The max length of the string representation of a value in an error message\n */\nconst VALUE_STRING_LENGTH_LIMIT = 200;\n\n/** Verifies that a given type is a Standalone Component. */\nexport function assertStandaloneComponentType(type: Type<unknown>) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef(type)!;\n  if (!componentDef.standalone) {\n    throw new RuntimeError(\n      RuntimeErrorCode.TYPE_IS_NOT_STANDALONE,\n      `The ${stringifyForError(type)} component is not marked as standalone, ` +\n        `but Angular expects to have a standalone component here. ` +\n        `Please make sure the ${stringifyForError(type)} component does not have ` +\n        `the \\`standalone: false\\` flag in the decorator.`,\n    );\n  }\n}\n\n/** Verifies whether a given type is a component */\nexport function assertComponentDef(type: Type<unknown>) {\n  if (!getComponentDef(type)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISSING_GENERATED_DEF,\n      `The ${stringifyForError(type)} is not an Angular component, ` +\n        `make sure it has the \\`@Component\\` decorator.`,\n    );\n  }\n}\n\n/** Called when there are multiple component selectors that match a given node */\nexport function throwMultipleComponentError(\n  tNode: TNode,\n  first: Type<unknown>,\n  second: Type<unknown>,\n): never {\n  throw new RuntimeError(\n    RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH,\n    `Multiple components match node with tagname ${tNode.value}: ` +\n      `${stringifyForError(first)} and ` +\n      `${stringifyForError(second)}`,\n  );\n}\n\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nexport function throwErrorIfNoChangesMode(\n  creationMode: boolean,\n  oldValue: any,\n  currValue: any,\n  propName: string | undefined,\n  lView: LView,\n): never {\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(\n    oldValue,\n  )}'. Current value: '${formatValue(currValue)}'.${\n    componentClassName ? ` Expression location: ${componentClassName} component` : ''\n  }`;\n  if (creationMode) {\n    msg +=\n      ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n      ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED, msg);\n}\n\nfunction formatValue(value: unknown): string {\n  let strValue: string = String(value);\n\n  // JSON.stringify will throw on circular references\n  try {\n    if (Array.isArray(value) || strValue === '[object Object]') {\n      strValue = JSON.stringify(value);\n    }\n  } catch (error) {}\n  return strValue.length > VALUE_STRING_LENGTH_LIMIT\n    ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + '…'\n    : strValue;\n}\n\nfunction constructDetailsForInterpolation(\n  lView: LView,\n  rootIndex: number,\n  expressionIndex: number,\n  meta: string,\n  changedValue: any,\n) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n    newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {propName, oldValue, newValue};\n}\n\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nexport function getExpressionChangedErrorDetails(\n  lView: LView,\n  bindingIndex: number,\n  oldValue: any,\n  newValue: any,\n): {propName?: string; oldValue: any; newValue: any} {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(\n        lView,\n        bindingIndex,\n        bindingIndex,\n        metadata,\n        newValue,\n      );\n    }\n    // metadata for property binding\n    return {propName: metadata, oldValue, newValue};\n  }\n\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {propName: undefined, oldValue, newValue};\n}\n"]}