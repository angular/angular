{"version":3,"file":"node_assert.js","sourceRoot":"","sources":["node_assert.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,aAAa,EAAE,UAAU,EAAC,MAAM,gBAAgB,CAAC;AACzD,OAAO,EAAmB,mBAAmB,EAAC,MAAM,mBAAmB,CAAC;AAExE,MAAM,UAAU,eAAe,CAC7B,KAAmB,EACnB,aAAwB,EACxB,OAAgB;IAEhB,aAAa,CAAC,KAAK,EAAE,+BAA+B,CAAC,CAAC;IACtD,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;QACvC,UAAU,CACR,OAAO;YACL,aAAa,mBAAmB,CAAC,aAAa,CAAC,aAAa,mBAAmB,CAC7E,KAAK,CAAC,IAAI,CACX,GAAG,CACP,CAAC;IACJ,CAAC;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,IAAe;IACjD,IACE,CAAC,CACC,IAAI,8BAAsB;QAC1B,IAAI,2BAAmB;QACvB,IAAI,gCAAwB;QAC5B,IAAI,uCAA+B;QACnC,IAAI,2BAAkB;QACtB,IAAI,kCAAyB;QAC7B,IAAI,mCAA0B;QAC9B,IAAI,uCAA6B,CAClC,EACD,CAAC;QACD,UAAU,CACR,mEAAmE,mBAAmB,CACpF,IAAI,CACL,GAAG,CACL,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertDefined, throwError} from '../util/assert';\nimport {TNode, TNodeType, toTNodeTypeAsString} from './interfaces/node';\n\nexport function assertTNodeType(\n  tNode: TNode | null,\n  expectedTypes: TNodeType,\n  message?: string,\n): void {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(\n      message ||\n        `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(\n          tNode.type,\n        )}.`,\n    );\n  }\n}\n\nexport function assertPureTNodeType(type: TNodeType) {\n  if (\n    !(\n      type === TNodeType.Element ||\n      type === TNodeType.Text ||\n      type === TNodeType.Container ||\n      type === TNodeType.ElementContainer ||\n      type === TNodeType.Icu ||\n      type === TNodeType.Projection ||\n      type === TNodeType.Placeholder ||\n      type === TNodeType.LetDeclaration\n    )\n  ) {\n    throwError(\n      `Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(\n        type,\n      )}.`,\n    );\n  }\n}\n"]}