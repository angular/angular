{"version":3,"file":"profiler_types.js","sourceRoot":"","sources":["profiler_types.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// Note: ideally we would roll these types into the `profiler.ts`. During the update to TS 5.5\n// they had to be moved out into a separate file, because `@microsoft/api-extractor` was throwing\n// an error saying `Unable to follow symbol for \"Profiler\"`.\n\n/**\n * Profiler events is an enum used by the profiler to distinguish between different calls of user\n * code invoked throughout the application lifecycle.\n */\nexport const enum ProfilerEvent {\n  /**\n   * Corresponds to the point in time before the runtime has called the template function of a\n   * component with `RenderFlags.Create`.\n   */\n  TemplateCreateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the template function of a\n   * component with `RenderFlags.Create`.\n   */\n  TemplateCreateEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called the template function of a\n   * component with `RenderFlags.Update`.\n   */\n  TemplateUpdateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the template function of a\n   * component with `RenderFlags.Update`.\n   */\n  TemplateUpdateEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called a lifecycle hook of a component\n   * or directive.\n   */\n  LifecycleHookStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called a lifecycle hook of a component\n   * or directive.\n   */\n  LifecycleHookEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has evaluated an expression associated with\n   * an event or an output.\n   */\n  OutputStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has evaluated an expression associated with\n   * an event or an output.\n   */\n  OutputEnd,\n\n  /**\n   * Corresponds to the point in time just before application bootstrap.\n   */\n  BootstrapApplicationStart,\n\n  /**\n   * Corresponds to the point in time after application bootstrap.\n   */\n  BootstrapApplicationEnd,\n\n  /**\n   * Corresponds to the point in time just before root component bootstrap.\n   */\n  BootstrapComponentStart,\n\n  /**\n   * Corresponds to the point in time after root component bootstrap.\n   */\n  BootstrapComponentEnd,\n\n  /**\n   * Corresponds to the point in time just before Angular starts a change detection tick.\n   */\n  ChangeDetectionStart,\n\n  /**\n   * Corresponds to the point in time after Angular ended a change detection tick.\n   */\n  ChangeDetectionEnd,\n\n  /**\n   * Corresponds to the point in time just before Angular starts a new synchronization pass of change detection tick.\n   */\n  ChangeDetectionSyncStart,\n\n  /**\n   * Corresponds to the point in time after Angular ended a synchronization pass.\n   */\n  ChangeDetectionSyncEnd,\n\n  /**\n   * Corresponds to the point in time just before Angular executes after render hooks.\n   */\n  AfterRenderHooksStart,\n\n  /**\n   * Corresponds to the point in time after Angular executed after render hooks.\n   */\n  AfterRenderHooksEnd,\n\n  /**\n   * Corresponds to the point in time just before Angular starts processing a component (create or update).\n   */\n  ComponentStart,\n\n  /**\n   * Corresponds to the point in time after Angular finished processing a component.\n   */\n  ComponentEnd,\n\n  /**\n   * Corresponds to the point in time just before a defer block transitions between states.\n   */\n  DeferBlockStateStart,\n\n  /**\n   * Corresponds to the point in time after a defer block transitioned between states.\n   */\n  DeferBlockStateEnd,\n\n  /**\n   * Corresponds to the point in time just before a component instance is created dynamically.\n   */\n  DynamicComponentStart,\n\n  /**\n   * Corresponds to the point in time after a a component instance is created dynamically.\n   */\n  DynamicComponentEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called the host bindings function\n   * of a directive.\n   */\n  HostBindingsUpdateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the host bindings function\n   * of a directive.\n   */\n  HostBindingsUpdateEnd,\n}\n\n/**\n * Profiler function which the runtime will invoke before and after user code.\n */\nexport interface Profiler {\n  (event: ProfilerEvent, instance?: {} | null, eventFn?: Function): void;\n}\n"]}