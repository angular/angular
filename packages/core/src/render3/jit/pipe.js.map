{"version":3,"file":"pipe.js","sourceRoot":"","sources":["pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EACL,iBAAiB,GAGlB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAC,mBAAmB,EAAC,MAAM,mBAAmB,CAAC;AAGtD,OAAO,EAAC,cAAc,EAAE,WAAW,EAAC,MAAM,WAAW,CAAC;AAEtD,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAE7C,MAAM,UAAU,WAAW,CAAC,IAAe,EAAE,IAAU;IACrD,IAAI,SAAS,GAAQ,IAAI,CAAC;IAC1B,IAAI,YAAY,GAAQ,IAAI,CAAC;IAE7B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;QAC1C,GAAG,EAAE,GAAG,EAAE;YACR,IAAI,YAAY,KAAK,IAAI,EAAE,CAAC;gBAC1B,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC7C,MAAM,QAAQ,GAAG,iBAAiB,CAAC;oBACjC,KAAK,oCAA4B;oBACjC,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB,CAAC,CAAC;gBACH,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,EAAE,SAAS,QAAQ,CAAC,IAAI,UAAU,EAAE;oBACvF,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,iBAAiB,EAAE,CAAC;oBACpB,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC;oBAC/B,MAAM,EAAE,QAAQ,CAAC,aAAa,CAAC,IAAI;iBACpC,CAAC,CAAC;YACL,CAAC;YACD,OAAO,YAAY,CAAC;QACtB,CAAC;QACD,0EAA0E;QAC1E,YAAY,EAAE,CAAC,CAAC,SAAS;KAC1B,CAAC,CAAC;IAEH,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;QACvC,GAAG,EAAE,GAAG,EAAE;YACR,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;gBACvB,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC7C,MAAM,QAAQ,GAAG,iBAAiB,CAAC;oBACjC,KAAK,oCAA4B;oBACjC,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB,CAAC,CAAC;gBACH,SAAS,GAAG,QAAQ,CAAC,WAAW,CAC9B,cAAc,EACd,SAAS,QAAQ,CAAC,IAAI,WAAW,EACjC,QAAQ,CACT,CAAC;YACJ,CAAC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,0EAA0E;QAC1E,YAAY,EAAE,CAAC,CAAC,SAAS;KAC1B,CAAC,CAAC;AACL,CAAC;AAED,SAAS,eAAe,CAAC,IAAe,EAAE,IAAU;IAClD,OAAO;QACL,IAAI,EAAE,IAAI;QACV,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,QAAQ,EAAE,IAAI,CAAC,IAAI;QACnB,IAAI,EAAE,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;QAChD,YAAY,EAAE,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU;KACvE,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  getCompilerFacade,\n  JitCompilerUsage,\n  R3PipeMetadataFacade,\n} from '../../compiler/compiler_facade';\nimport {reflectDependencies} from '../../di/jit/util';\nimport {Type} from '../../interface/type';\nimport type {Pipe} from '../../metadata/directives';\nimport {NG_FACTORY_DEF, NG_PIPE_DEF} from '../fields';\n\nimport {angularCoreEnv} from './environment';\n\nexport function compilePipe(type: Type<any>, meta: Pipe): void {\n  let ngPipeDef: any = null;\n  let ngFactoryDef: any = null;\n\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: JitCompilerUsage.Decorator,\n          kind: 'pipe',\n          type: metadata.type,\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n          name: metadata.name,\n          type: metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Pipe,\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: JitCompilerUsage.Decorator,\n          kind: 'pipe',\n          type: metadata.type,\n        });\n        ngPipeDef = compiler.compilePipe(\n          angularCoreEnv,\n          `ng:///${metadata.name}/ɵpipe.js`,\n          metadata,\n        );\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction getPipeMetadata(type: Type<any>, meta: Pipe): R3PipeMetadataFacade {\n  return {\n    type: type,\n    name: type.name,\n    pipeName: meta.name,\n    pure: meta.pure !== undefined ? meta.pure : true,\n    isStandalone: meta.standalone === undefined ? true : !!meta.standalone,\n  };\n}\n"]}