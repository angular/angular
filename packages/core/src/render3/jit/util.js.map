{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAE,iBAAiB,EAAC,MAAM,sBAAsB,CAAC;AAIrE,OAAO,EAAC,eAAe,EAAE,eAAe,EAAE,UAAU,EAAE,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAE5F,OAAO,EAAC,iBAAiB,EAAC,MAAM,yBAAyB,CAAC;AAE1D,MAAM,UAAU,qBAAqB,CAAC,KAAU;IAC9C,OAAQ,KAA0B,CAAC,QAAQ,KAAK,SAAS,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,UAAU,CAAI,KAAc;IAC1C,OAAO,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,MAAM,CAAI,KAAc;IACtC,OAAO,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,KAAc;IAC3C,OAAO,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,KAAc;IAC3C,OAAO,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAClC,CAAC;AAED,SAAS,yBAAyB,CAAC,IAAe;IAChD,IAAI,eAAe,CAAC,IAAI,CAAC;QAAE,OAAO,WAAW,CAAC;IAC9C,IAAI,eAAe,CAAC,IAAI,CAAC;QAAE,OAAO,WAAW,CAAC;IAC9C,IAAI,UAAU,CAAC,IAAI,CAAC;QAAE,OAAO,MAAM,CAAC;IACpC,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,OAAsB,EAAE,aAA4B;IACzF,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC;QAC1B,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CACb,gDAAgD,iBAAiB,CAC/D,aAAa,CACd,yDACC,iBAAiB,CAAC,OAAO,CAAC,IAAI,OAChC,IAAI,CACL,CAAC;QACJ,CAAC;IACH,CAAC;IAED,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;QACpC,MAAM,GAAG,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;QACxF,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YAChB,gFAAgF;YAChF,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBAChD,MAAM,IAAI,KAAK,CACb,QAAQ,iBAAiB,CAAC,OAAO,CAAC,KAAK,IAAI,oBAAoB,iBAAiB,CAC9E,aAAa,CACd,kCAAkC,IAAI,mCAAmC,CAC3E,CAAC;YACJ,CAAC;QACH,CAAC;aAAM,CAAC;YACN,6EAA6E;YAC7E,IAAI,qBAAqB,CAAC,OAAO,CAAC,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CACb,8CAA8C,iBAAiB,CAC7D,aAAa,CACd,+EAA+E,CACjF,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CACb,QAAQ,iBAAiB,CAAC,OAAO,CAAC,0BAA0B,iBAAiB,CAC3E,aAAa,CACd,kKAAkK,CACpK,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isForwardRef, resolveForwardRef} from '../../di/forward_ref';\nimport {ModuleWithProviders} from '../../di/interface/provider';\nimport {Type} from '../../interface/type';\nimport {NgModuleDef} from '../../metadata/ng_module_def';\nimport {getComponentDef, getDirectiveDef, getPipeDef, getNgModuleDef} from '../def_getters';\nimport type {ComponentType, DirectiveType, PipeType} from '../interfaces/definition';\nimport {stringifyForError} from '../util/stringify_utils';\n\nexport function isModuleWithProviders(value: any): value is ModuleWithProviders<{}> {\n  return (value as {ngModule?: any}).ngModule !== undefined;\n}\n\nexport function isNgModule<T>(value: Type<T>): value is Type<T> & {Éµmod: NgModuleDef<T>} {\n  return !!getNgModuleDef(value);\n}\n\nexport function isPipe<T>(value: Type<T>): value is PipeType<T> {\n  return !!getPipeDef(value);\n}\n\nexport function isDirective<T>(value: Type<T>): value is DirectiveType<T> {\n  return !!getDirectiveDef(value);\n}\n\nexport function isComponent<T>(value: Type<T>): value is ComponentType<T> {\n  return !!getComponentDef(value);\n}\n\nfunction getDependencyTypeForError(type: Type<any>) {\n  if (getComponentDef(type)) return 'component';\n  if (getDirectiveDef(type)) return 'directive';\n  if (getPipeDef(type)) return 'pipe';\n  return 'type';\n}\n\nexport function verifyStandaloneImport(depType: Type<unknown>, importingType: Type<unknown>) {\n  if (isForwardRef(depType)) {\n    depType = resolveForwardRef(depType);\n    if (!depType) {\n      throw new Error(\n        `Expected forwardRef function, imported from \"${stringifyForError(\n          importingType,\n        )}\", to return a standalone entity or NgModule but got \"${\n          stringifyForError(depType) || depType\n        }\".`,\n      );\n    }\n  }\n\n  if (getNgModuleDef(depType) == null) {\n    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef(depType);\n    if (def != null) {\n      // if a component, directive or pipe is imported make sure that it is standalone\n      if (!def.standalone) {\n        const type = getDependencyTypeForError(depType);\n        throw new Error(\n          `The \"${stringifyForError(depType)}\" ${type}, imported from \"${stringifyForError(\n            importingType,\n          )}\", is not standalone. Does the ${type} have the standalone: false flag?`,\n        );\n      }\n    } else {\n      // it can be either a module with provider or an unknown (not annotated) type\n      if (isModuleWithProviders(depType)) {\n        throw new Error(\n          `A module with providers was imported from \"${stringifyForError(\n            importingType,\n          )}\". Modules with providers are not supported in standalone components imports.`,\n        );\n      } else {\n        throw new Error(\n          `The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(\n            importingType,\n          )}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`,\n        );\n      }\n    }\n  }\n}\n"]}