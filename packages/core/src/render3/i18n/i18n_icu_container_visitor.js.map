{"version":3,"file":"i18n_icu_container_visitor.js","sourceRoot":"","sources":["i18n_icu_container_visitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertDomNode, assertNumber, assertNumberInRange} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {assertTIcu, assertTNodeForLView} from '../assert';\nimport {getCurrentICUCaseIndex} from './i18n_util';\nimport {I18nRemoveOpCodes, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView, TVIEW} from '../interfaces/view';\n\ninterface IcuIteratorState {\n  stack: any[];\n  index: number;\n  lView?: LView;\n  removes?: I18nRemoveOpCodes;\n}\n\ntype IcuIterator = () => RNode | null;\n\nfunction enterIcu(state: IcuIteratorState, tIcu: TIcu, lView: LView) {\n  state.index = 0;\n  const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n  if (currentCase !== null) {\n    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n    state.removes = tIcu.remove[currentCase];\n  } else {\n    state.removes = EMPTY_ARRAY as any;\n  }\n}\n\nfunction icuContainerIteratorNext(state: IcuIteratorState): RNode | null {\n  if (state.index < state.removes!.length) {\n    const removeOpCode = state.removes![state.index++] as number;\n    ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n    if (removeOpCode > 0) {\n      const rNode = state.lView![removeOpCode];\n      ngDevMode && assertDomNode(rNode);\n      return rNode;\n    } else {\n      state.stack.push(state.index, state.removes);\n      // ICUs are represented by negative indices\n      const tIcuIndex = ~removeOpCode;\n      const tIcu = state.lView![TVIEW].data[tIcuIndex] as TIcu;\n      ngDevMode && assertTIcu(tIcu);\n      enterIcu(state, tIcu, state.lView!);\n      return icuContainerIteratorNext(state);\n    }\n  } else {\n    if (state.stack.length === 0) {\n      return null;\n    } else {\n      state.removes = state.stack.pop();\n      state.index = state.stack.pop();\n      return icuContainerIteratorNext(state);\n    }\n  }\n}\n\nexport function loadIcuContainerVisitor() {\n  const _state: IcuIteratorState = {\n    stack: [],\n    index: -1,\n  };\n\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```ts\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(\n    tIcuContainerNode: TIcuContainerNode,\n    lView: LView,\n  ): IcuIterator {\n    _state.lView = lView;\n    while (_state.stack.length) _state.stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(_state, tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext.bind(null, _state);\n  }\n\n  return icuContainerIteratorStart;\n}\n\nexport function createIcuIterator(tIcu: TIcu, lView: LView): IcuIterator {\n  const state: IcuIteratorState = {\n    stack: [],\n    index: -1,\n    lView,\n  };\n  ngDevMode && assertTIcu(tIcu);\n  enterIcu(state, tIcu, lView);\n  return icuContainerIteratorNext.bind(null, state);\n}\n"]}