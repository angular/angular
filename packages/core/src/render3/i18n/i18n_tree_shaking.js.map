{"version":3,"file":"i18n_tree_shaking.js","sourceRoot":"","sources":["i18n_tree_shaking.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAaH,IAAI,oBAGmB,CAAC;AAExB;;GAEG;AACH,MAAM,UAAU,mBAAmB,CACjC,iBAAoC,EACpC,KAAY;IAEZ,OAAO,oBAAoB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;AACxD,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,+BAA+B,CAC7C,MAAwF;IAExF,IAAI,oBAAoB,KAAK,SAAS,EAAE,CAAC;QACvC,8FAA8F;QAC9F,iCAAiC;QACjC,oBAAoB,GAAG,MAAM,EAAE,CAAC;IAClC,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @fileoverview\n *\n * This file provides mechanism by which code relevant to the `TIcuContainerNode` is only loaded if\n * ICU is present in the template.\n */\n\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView} from '../interfaces/view';\n\nlet _icuContainerIterate: (\n  tIcuContainerNode: TIcuContainerNode,\n  lView: LView,\n) => () => RNode | null;\n\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nexport function icuContainerIterate(\n  tIcuContainerNode: TIcuContainerNode,\n  lView: LView,\n): () => RNode | null {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nexport function ensureIcuContainerVisitorLoaded(\n  loader: () => (tIcuContainerNode: TIcuContainerNode, lView: LView) => () => RNode | null,\n) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n"]}