{"version":3,"file":"i18n_debug.js","sourceRoot":"","sources":["i18n_debug.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertNumber, assertString} from '../../util/assert';\nimport {\n  ELEMENT_MARKER,\n  I18nCreateOpCode,\n  I18nCreateOpCodes,\n  I18nRemoveOpCodes,\n  I18nUpdateOpCode,\n  I18nUpdateOpCodes,\n  ICU_MARKER,\n  IcuCreateOpCode,\n  IcuCreateOpCodes,\n} from '../interfaces/i18n';\n\nimport {\n  getInstructionFromIcuCreateOpCode,\n  getParentFromIcuCreateOpCode,\n  getRefFromIcuCreateOpCode,\n} from './i18n_util';\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nexport function i18nCreateOpCodesToString(\n  this: I18nCreateOpCodes | void,\n  opcodes?: I18nCreateOpCodes,\n): string[] {\n  const createOpCodes: I18nCreateOpCodes = opcodes || (Array.isArray(this) ? this : ([] as any));\n  let lines: string[] = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++] as any;\n    const text = createOpCodes[i] as string;\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow =\n      (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(\n      `lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(\n        text,\n      )});`,\n    );\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nexport function i18nUpdateOpCodesToString(\n  this: I18nUpdateOpCodes | void,\n  opcodes?: I18nUpdateOpCodes,\n): string[] {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines: string[] = [];\n\n  function consumeOpCode(value: number): string {\n    const ref = value >>> I18nUpdateOpCode.SHIFT_REF;\n    const opCode = value & I18nUpdateOpCode.MASK_OPCODE;\n    switch (opCode) {\n      case I18nUpdateOpCode.Text:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case I18nUpdateOpCode.Attr:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case I18nUpdateOpCode.IcuSwitch:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case I18nUpdateOpCode.IcuUpdate:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements: string[] = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nexport function icuCreateOpCodesToString(\n  this: IcuCreateOpCodes | void,\n  opcodes?: IcuCreateOpCodes,\n): string[] {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines: string[] = [];\n\n  function consumeOpCode(opCode: number): string {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case IcuCreateOpCode.AppendChild:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case IcuCreateOpCode.Attr:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n\n  return lines;\n}\n\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nexport function i18nRemoveOpCodesToString(\n  this: I18nRemoveOpCodes | void,\n  opcodes?: I18nRemoveOpCodes,\n): string[] {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines: string[] = [];\n\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i] as number;\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n\n  return lines;\n}\n\nclass OpCodeParser {\n  i: number = 0;\n  codes: any[];\n\n  constructor(codes: any[]) {\n    this.codes = codes;\n  }\n\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n\n  consumeNumber(): number {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n\n  consumeString(): string {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n\n  consumeFunction(): Function | null {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n\n  consumeNumberOrString(): number | string {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n\n  consumeNumberStringOrMarker(): number | string | ICU_MARKER | ELEMENT_MARKER {\n    let value = this.codes[this.i++];\n    if (\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      value == ICU_MARKER ||\n      value == ELEMENT_MARKER\n    ) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\n"]}