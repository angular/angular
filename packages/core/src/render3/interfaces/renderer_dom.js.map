{"version":3,"file":"renderer_dom.js","sourceRoot":"","sources":["renderer_dom.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../../util/security/trusted_type_defs';\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and then\n * use that at runtime for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n\n/** Subset of API needed for appending elements and text nodes. */\nexport interface RNode {\n  /**\n   * Returns the parent Element, Document, or DocumentFragment\n   */\n  parentNode: RNode | null;\n\n  /**\n   * Returns the parent Element if there is one\n   */\n  parentElement: RElement | null;\n\n  /**\n   * Gets the Node immediately following this one in the parent's childNodes\n   */\n  nextSibling: RNode | null;\n\n  /**\n   * Gets the Node immediately preceding this one in the parent's childNodes\n   */\n  previousSibling: RNode | null;\n\n  /**\n   * Insert a child node.\n   *\n   * Used exclusively for adding View root nodes into ViewAnchor location.\n   */\n  insertBefore(newChild: RNode, refChild: RNode | null, isViewRoot: boolean): void;\n\n  /**\n   * Append a child node.\n   *\n   * Used exclusively for building up DOM which are static (ie not View roots)\n   */\n  appendChild(newChild: RNode): RNode;\n}\n\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n */\nexport interface RElement extends RNode {\n  firstChild: RNode | null;\n  style: RCssStyleDeclaration;\n  classList: RDomTokenList;\n  className: string;\n  tagName: string;\n  textContent: string | null;\n  hasAttribute(name: string): boolean;\n  getAttribute(name: string): string | null;\n  setAttribute(name: string, value: string | TrustedHTML | TrustedScript | TrustedScriptURL): void;\n  removeAttribute(name: string): void;\n  setAttributeNS(\n    namespaceURI: string,\n    qualifiedName: string,\n    value: string | TrustedHTML | TrustedScript | TrustedScriptURL,\n  ): void;\n  addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\n  removeEventListener(type: string, listener?: EventListener, options?: boolean): void;\n  remove(): void;\n  setProperty?(name: string, value: any): void;\n}\n\nexport interface RCssStyleDeclaration {\n  removeProperty(propertyName: string): string;\n  setProperty(propertyName: string, value: string | null, priority?: string): void;\n}\n\nexport interface RDomTokenList {\n  add(token: string): void;\n  remove(token: string): void;\n}\n\nexport interface RText extends RNode {\n  textContent: string | null;\n}\n\nexport interface RComment extends RNode {\n  textContent: string | null;\n}\n\nexport interface RTemplate extends RElement {\n  tagName: 'TEMPLATE';\n  content: RNode;\n}\n"]}