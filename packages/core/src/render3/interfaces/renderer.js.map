{"version":3,"file":"renderer.js","sourceRoot":"","sources":["renderer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RendererStyleFlags2, RendererType2} from '../../render/api_flags';\nimport type {ListenerOptions} from '../../render/api';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../../util/security/trusted_type_defs';\n\nimport {RComment, RElement, RNode, RText} from './renderer_dom';\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and then\n * use that at runtime for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n\nexport type GlobalTargetName = 'document' | 'window' | 'body';\n\nexport type GlobalTargetResolver = (element: any) => EventTarget;\n\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. In practice, this is implemented by `Renderer2`.\n */\nexport interface Renderer {\n  destroy(): void;\n  createComment(value: string): RComment;\n  createElement(name: string, namespace?: string | null): RElement;\n  createText(value: string): RText;\n  /**\n   * This property is allowed to be null / undefined,\n   * in which case the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  destroyNode?: ((node: RNode) => void) | null;\n  appendChild(parent: RElement, newChild: RNode): void;\n  insertBefore(parent: RNode, newChild: RNode, refChild: RNode | null, isMove?: boolean): void;\n  // TODO(thePunderWoman): remove the requireSynchronousElementRemoval flag once the animations package has been deleted after v23.\n  removeChild(\n    parent: RElement | null,\n    oldChild: RNode,\n    isHostElement?: boolean,\n    requireSynchronousElementRemoval?: boolean,\n  ): void;\n  selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): RElement;\n\n  parentNode(node: RNode): RElement | null;\n  nextSibling(node: RNode): RNode | null;\n\n  setAttribute(\n    el: RElement,\n    name: string,\n    value: string | TrustedHTML | TrustedScript | TrustedScriptURL,\n    namespace?: string | null,\n  ): void;\n  removeAttribute(el: RElement, name: string, namespace?: string | null): void;\n  addClass(el: RElement, name: string): void;\n  removeClass(el: RElement, name: string): void;\n  setStyle(el: RElement, style: string, value: any, flags?: RendererStyleFlags2): void;\n  removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2): void;\n  setProperty(el: RElement, name: string, value: any): void;\n  setValue(node: RText | RComment, value: string): void;\n\n  // TODO(misko): Deprecate in favor of addEventListener/removeEventListener\n  listen(\n    target: GlobalTargetName | RNode,\n    eventName: string,\n    callback: (event: any) => boolean | void,\n    options?: ListenerOptions,\n  ): () => void;\n}\n\nexport interface RendererFactory {\n  createRenderer(hostElement: RElement | null, rendererType: RendererType2 | null): Renderer;\n  begin?(): void;\n  end?(): void;\n}\n"]}