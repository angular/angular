{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAC,MAAM,kBAAkB,CAAC;AAI9C;;;;;;;;;GASG;AACH,MAAM,OAAO,QAAQ;IAiBnB,oCAAoC;IACpC,IAAI,KAAK;QACP,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;IACE;;OAEG;IACK,OAAe;IAEvB;;OAEG;IACI,SAAiB;IAExB;;OAEG;IACI,MAAa;QAVZ,YAAO,GAAP,OAAO,CAAQ;QAKhB,cAAS,GAAT,SAAS,CAAQ;QAKjB,WAAM,GAAN,MAAM,CAAO;IACnB,CAAC;CACL","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getLViewById} from './lview_tracking';\nimport {RNode} from './renderer_dom';\nimport {LView} from './view';\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nexport class LContext {\n  /**\n   * The instance of the Component node.\n   */\n  public component: {} | null | undefined;\n\n  /**\n   * The list of active directives that exist on this element.\n   */\n  public directives: any[] | null | undefined;\n\n  /**\n   * The map of local references (local reference name => element or directive instance) that\n   * exist on this element.\n   */\n  public localRefs: {[key: string]: any} | null | undefined;\n\n  /** Component's parent view data. */\n  get lView(): LView | null {\n    return getLViewById(this.lViewId);\n  }\n\n  constructor(\n    /**\n     * ID of the component's parent view data.\n     */\n    private lViewId: number,\n\n    /**\n     * The index instance of the node.\n     */\n    public nodeIndex: number,\n\n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     */\n    public native: RNode,\n  ) {}\n}\n"]}