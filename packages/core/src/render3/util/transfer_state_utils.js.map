{"version":3,"file":"transfer_state_utils.js","sourceRoot":"","sources":["transfer_state_utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,WAAW,EAAC,MAAM,wBAAwB,CAAC;AAEnD,OAAO,EAAC,mCAAmC,EAAC,MAAM,uBAAuB,CAAC;AAC1E,OAAO,EAAC,MAAM,EAAC,MAAM,sCAAsC,CAAC;AAC5D,OAAO,EAAC,wBAAwB,EAAC,MAAM,sBAAsB,CAAC;AAE9D;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAAC,QAAkB;IACjD,MAAM,GAAG,GAAG,WAAW,EAAE,CAAC;IAC1B,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEnC,MAAM,aAAa,GAAG,wBAAwB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAE3D,sBAAsB;IACtB,MAAM,eAAe,GAA4B,EAAE,CAAC;IACpD,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;QACzD,IAAI,CAAC,mCAAmC,CAAC,GAAG,CAAC,EAAE,CAAC;YAC9C,eAAe,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getDocument} from '../interfaces/document';\nimport {Injector} from '../../di';\nimport {isInternalHydrationTransferStateKey} from '../../hydration/utils';\nimport {APP_ID} from '../../application/application_tokens';\nimport {retrieveTransferredState} from '../../transfer_state';\n\n/**\n * Retrieves transfer state data from the DOM using the provided injector to get APP_ID.\n * This approach works by getting the APP_ID from the injector and then finding the\n * corresponding transfer state script tag. Internal framework keys used for hydration\n * are stripped from the result.\n *\n * @param injector - The injector to use for getting APP_ID\n * @returns The transfer state data as an object, or empty object if not available\n */\nexport function getTransferState(injector: Injector): Record<string, unknown> {\n  const doc = getDocument();\n  const appId = injector.get(APP_ID);\n\n  const transferState = retrieveTransferredState(doc, appId);\n\n  // Strip internal keys\n  const filteredEntries: Record<string, unknown> = {};\n  for (const [key, value] of Object.entries(transferState)) {\n    if (!isInternalHydrationTransferStateKey(key)) {\n      filteredEntries[key] = value;\n    }\n  }\n\n  return filteredEntries;\n}\n"]}