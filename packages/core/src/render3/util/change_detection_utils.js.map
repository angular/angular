{"version":3,"file":"change_detection_utils.js","sourceRoot":"","sources":["change_detection_utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,0BAA0B,EAAC,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAC,qBAAqB,EAAC,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAC,aAAa,EAAC,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAAC,KAAK,EAAa,MAAM,oBAAoB,CAAC;AAErD,OAAO,EAAC,iBAAiB,EAAC,MAAM,mBAAmB,CAAC;AAEpD;;;;;;;GAOG;AACH,MAAM,UAAU,YAAY,CAAC,SAAa;IACxC,SAAS,IAAI,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACnD,aAAa,CAAC,0BAA0B,CAAC,SAAS,CAAC,+CAAuC,CAAC;IAC3F,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;AACxF,CAAC;AAED;;;;;;GAMG;AACH,SAAS,aAAa,CAAC,SAAa;IAClC,MAAM,IAAI,GAAG,0BAA0B,CAAC,SAAS,CAAC,CAAC;IACnD,IAAI,CAAC,KAAK,CAAC,qCAA0B,CAAC;IACtC,qBAAqB,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NotificationSource} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {assertDefined} from '../../util/assert';\nimport {getComponentViewByInstance} from '../context_discovery';\nimport {detectChangesInternal} from '../instructions/change_detection';\nimport {markViewDirty} from '../instructions/mark_view_dirty';\nimport {FLAGS, LViewFlags} from '../interfaces/view';\n\nimport {getRootComponents} from './discovery_utils';\n\n/**\n * Marks a component for check (in case of OnPush components) and synchronously\n * performs change detection on the application this component belongs to.\n *\n * @param component Component to {@link /api/core/ChangeDetectorRef#markForCheck mark for check}\n *\n * @publicApi\n */\nexport function applyChanges(component: {}): void {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component), NotificationSource.DebugApplyChanges);\n  getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));\n}\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component: {}): void {\n  const view = getComponentViewByInstance(component);\n  view[FLAGS] |= LViewFlags.RefreshView;\n  detectChangesInternal(view);\n}\n"]}