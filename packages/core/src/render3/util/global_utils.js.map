{"version":3,"file":"global_utils.js","sourceRoot":"","sources":["global_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference path=\"../../../../goog.d.ts\" />\n\nimport {assertDefined} from '../../util/assert';\nimport {global} from '../../util/global';\nimport {setupFrameworkInjectorProfiler} from '../debug/framework_injector_profiler';\nimport {setProfiler} from '../profiler';\nimport {isSignal} from '../reactivity/api';\n\nimport {applyChanges} from './change_detection_utils';\nimport {getDeferBlocks} from './defer';\nimport {\n  DirectiveDebugMetadata,\n  getComponent,\n  getContext,\n  getDirectiveMetadata,\n  getDirectives,\n  getHostElement,\n  getInjector,\n  getListeners,\n  getOwningComponent,\n  getRootComponents,\n} from './discovery_utils';\nimport {\n  getDependenciesFromInjectable,\n  getInjectorMetadata,\n  getInjectorProviders,\n  getInjectorResolutionPath,\n} from './injector_discovery_utils';\nimport {getSignalGraph} from './signal_debug';\n\nimport {enableProfiling} from '../debug/chrome_dev_tools_performance';\nimport {getTransferState} from './transfer_state_utils';\n\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nexport const GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n\n// Typing for externally published global util functions\n// Ideally we should be able to use `NgGlobalPublishUtils` using declaration merging but that doesn't work with API extractor yet.\n// Have included the typings to have type safety when working with editors that support it (VSCode).\nexport interface ExternalGlobalUtils {\n  ɵgetLoadedRoutes(route: any): any;\n  ɵnavigateByUrl(router: any, url: string): any;\n  ɵgetRouterInstance(injector: any): any;\n}\n\nconst globalUtilsFunctions = {\n  /**\n   * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon\n   * in application's code. The contract of those functions might be changed in any release and/or a\n   * function can be removed completely.\n   */\n  'ɵgetDependenciesFromInjectable': getDependenciesFromInjectable,\n  'ɵgetInjectorProviders': getInjectorProviders,\n  'ɵgetInjectorResolutionPath': getInjectorResolutionPath,\n  'ɵgetInjectorMetadata': getInjectorMetadata,\n  'ɵsetProfiler': setProfiler,\n  'ɵgetSignalGraph': getSignalGraph,\n  'ɵgetDeferBlocks': getDeferBlocks,\n  'ɵgetTransferState': getTransferState,\n\n  'getDirectiveMetadata': getDirectiveMetadata,\n  'getComponent': getComponent,\n  'getContext': getContext,\n  'getListeners': getListeners,\n  'getOwningComponent': getOwningComponent,\n  'getHostElement': getHostElement,\n  'getInjector': getInjector,\n  'getRootComponents': getRootComponents,\n  'getDirectives': getDirectives,\n  'applyChanges': applyChanges,\n  'isSignal': isSignal,\n\n  'enableProfiling': enableProfiling,\n};\ntype CoreGlobalUtilsFunctions = keyof typeof globalUtilsFunctions;\n\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nexport function publishDefaultGlobalUtils() {\n  if (!_published) {\n    _published = true;\n\n    if (typeof window !== 'undefined') {\n      // Only configure the injector profiler when running in the browser.\n      setupFrameworkInjectorProfiler();\n    }\n\n    for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {\n      publishGlobalUtil(methodName as CoreGlobalUtilsFunctions, method);\n    }\n  }\n}\n\n/**\n * Default debug tools available under `window.ng`.\n */\nexport type GlobalDevModeUtils = {\n  [GLOBAL_PUBLISH_EXPANDO_KEY]: typeof globalUtilsFunctions;\n};\n\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nexport function publishGlobalUtil<K extends CoreGlobalUtilsFunctions>(\n  name: K,\n  fn: (typeof globalUtilsFunctions)[K],\n): void {\n  publishUtil(name, fn);\n}\n\n/**\n * Defines the framework-agnostic `ng` global type, not just the `@angular/core` implementation.\n *\n * `typeof globalUtilsFunctions` is specifically the `@angular/core` implementation, so we\n * overwrite some properties to make them more framework-agnostic. Longer term, we should define\n * the `ng` global type as an interface implemented by `globalUtilsFunctions` rather than a type\n * derived from it.\n */\nexport type FrameworkAgnosticGlobalUtils = Omit<\n  typeof globalUtilsFunctions,\n  'getDirectiveMetadata'\n> & {\n  getDirectiveMetadata(directiveOrComponentInstance: any): DirectiveDebugMetadata | null;\n} & ExternalGlobalUtils;\n\n/**\n * Publishes the given function to `window.ng` from package other than @angular/core\n * So that it can be used from the browser console when an application is not in production.\n */\nexport function publishExternalGlobalUtil<K extends keyof ExternalGlobalUtils>(\n  name: K,\n  fn: ExternalGlobalUtils[K],\n): void {\n  publishUtil(name, fn);\n}\n\nfunction publishUtil(name: string, fn: Function) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for AngularJS (via `goog.provide('ng....')`).\n    const w = global;\n    ngDevMode && assertDefined(fn, 'function not defined');\n\n    w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {} as any;\n    w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn;\n  }\n}\n"]}