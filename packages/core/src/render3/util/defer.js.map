{"version":3,"file":"defer.js","sourceRoot":"","sources":["defer.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DeferBlockDetails, getDeferBlocks as getDeferBlocksInternal} from '../../defer/discovery';\nimport {\n  DEFER_BLOCK_STATE,\n  DeferBlockInternalState,\n  DeferBlockState,\n  DeferBlockTrigger,\n  LDeferBlockDetails,\n  LOADING_AFTER_SLOT,\n  MINIMUM_SLOT,\n  SSR_UNIQUE_ID,\n  TDeferBlockDetails,\n} from '../../defer/interfaces';\nimport {DEHYDRATED_BLOCK_REGISTRY, DehydratedBlockRegistry} from '../../defer/registry';\nimport {getLDeferBlockDetails} from '../../defer/utils';\nimport {NUM_ROOT_NODES} from '../../hydration/interfaces';\nimport {NGH_DEFER_BLOCKS_KEY} from '../../hydration/utils';\nimport {TransferState} from '../../transfer_state';\nimport {assertLView} from '../assert';\nimport {collectNativeNodes} from '../collect_native_nodes';\nimport {getLContext} from '../context_discovery';\nimport {CONTAINER_HEADER_OFFSET, NATIVE} from '../interfaces/container';\nimport {INJECTOR, LView, TVIEW} from '../interfaces/view';\nimport {getNativeByTNode} from './view_utils';\n\n/** Retrieved information about a `@defer` block. */\nexport interface DeferBlockData {\n  /** Current state of the block. */\n  state: 'placeholder' | 'loading' | 'complete' | 'error' | 'initial';\n\n  /** Hydration state of the block. */\n  incrementalHydrationState: 'not-configured' | 'hydrated' | 'dehydrated';\n\n  /** Wherther the block has a connected `@error` block. */\n  hasErrorBlock: boolean;\n\n  /** Information about the connected `@loading` block. */\n  loadingBlock: {\n    /** Whether the block is defined. */\n    exists: boolean;\n\n    /** Minimum amount of milliseconds that the block should be shown. */\n    minimumTime: number | null;\n\n    /** Amount of time after which the block should be shown. */\n    afterTime: number | null;\n  };\n\n  /** Information about the connected `@placeholder` block. */\n  placeholderBlock: {\n    /** Whether the block is defined. */\n    exists: boolean;\n\n    /** Minimum amount of time that block should be shown. */\n    minimumTime: number | null;\n  };\n\n  /** Stringified version of the block's triggers. */\n  triggers: string[];\n\n  /** Element root nodes that are currently being shown in the block. */\n  rootNodes: Node[];\n}\n\n/**\n * Gets all of the `@defer` blocks that are present inside the specified DOM node.\n * @param node Node in which to look for `@defer` blocks.\n *\n * @publicApi\n */\nexport function getDeferBlocks(node: Node): DeferBlockData[] {\n  const results: DeferBlockData[] = [];\n  const lView = getLContext(node)?.lView;\n\n  if (lView) {\n    findDeferBlocks(node, lView, results);\n  }\n\n  return results;\n}\n\n/**\n * Finds all the `@defer` blocks inside a specific node and view.\n * @param node Node in which to search for blocks.\n * @param lView View within the node in which to search for blocks.\n * @param results Array to which to add blocks once they're found.\n */\nfunction findDeferBlocks(node: Node, lView: LView, results: DeferBlockData[]) {\n  const viewInjector = lView[INJECTOR];\n  const registry = viewInjector.get(DEHYDRATED_BLOCK_REGISTRY, null, {optional: true});\n  const blocks: DeferBlockDetails[] = [];\n  getDeferBlocksInternal(lView, blocks);\n\n  const transferState = viewInjector.get(TransferState);\n  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n\n  for (const details of blocks) {\n    const native = getNativeByTNode(details.tNode, details.lView);\n    const lDetails = getLDeferBlockDetails(details.lView, details.tNode);\n\n    // The LView from `getLContext` might be the view the element is placed in.\n    // Filter out defer blocks that aren't inside the specified root node.\n    if (!node.contains(native as Node)) {\n      continue;\n    }\n\n    const tDetails = details.tDetails;\n    const renderedLView = getRendererLView(details);\n    const rootNodes: Node[] = [];\n    const hydrationState = inferHydrationState(tDetails, lDetails, registry);\n\n    if (renderedLView !== null) {\n      collectNativeNodes(\n        renderedLView[TVIEW],\n        renderedLView,\n        renderedLView[TVIEW].firstChild,\n        rootNodes,\n      );\n    } else if (hydrationState === 'dehydrated') {\n      // We'll find the number of root nodes in the transfer state and\n      // collect that number of elements that precede the defer block comment node.\n\n      const deferId = lDetails[SSR_UNIQUE_ID]!;\n      const deferData = deferBlockParents[deferId];\n      const numberOfRootNodes = deferData[NUM_ROOT_NODES];\n\n      let collectedNodeCount = 0;\n      const deferBlockCommentNode = details.lContainer[NATIVE] as Node;\n      let currentNode: Node | null = deferBlockCommentNode.previousSibling;\n\n      while (collectedNodeCount < numberOfRootNodes && currentNode) {\n        rootNodes.unshift(currentNode);\n        currentNode = currentNode.previousSibling;\n        collectedNodeCount++;\n      }\n    }\n\n    const data: DeferBlockData = {\n      state: stringifyState(lDetails[DEFER_BLOCK_STATE]),\n      incrementalHydrationState: hydrationState,\n      hasErrorBlock: tDetails.errorTmplIndex !== null,\n      loadingBlock: {\n        exists: tDetails.loadingTmplIndex !== null,\n        minimumTime: tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null,\n        afterTime: tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null,\n      },\n      placeholderBlock: {\n        exists: tDetails.placeholderTmplIndex !== null,\n        minimumTime: tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null,\n      },\n      triggers: tDetails.debug?.triggers ? Array.from(tDetails.debug.triggers).sort() : [],\n      rootNodes,\n    };\n\n    results.push(data);\n\n    // `getDeferBlocks` does not resolve nested defer blocks so we have to recurse manually.\n    if (renderedLView !== null) {\n      findDeferBlocks(node, renderedLView, results);\n    }\n  }\n}\n\n/**\n * Turns the `DeferBlockState` into a string which is more readable than the enum form.\n *\n * @param lDetails Information about the\n * @returns\n */\nfunction stringifyState(state: DeferBlockState | DeferBlockInternalState): DeferBlockData['state'] {\n  switch (state) {\n    case DeferBlockState.Complete:\n      return 'complete';\n    case DeferBlockState.Loading:\n      return 'loading';\n    case DeferBlockState.Placeholder:\n      return 'placeholder';\n    case DeferBlockState.Error:\n      return 'error';\n    case DeferBlockInternalState.Initial:\n      return 'initial';\n    default:\n      throw new Error(`Unrecognized state ${state}`);\n  }\n}\n\n/**\n * Infers the hydration state of a specific defer block.\n * @param tDetails Static defer block information.\n * @param lDetails Instance defer block information.\n * @param registry Registry coordinating the hydration of defer blocks.\n */\nfunction inferHydrationState(\n  tDetails: TDeferBlockDetails,\n  lDetails: LDeferBlockDetails,\n  registry: DehydratedBlockRegistry | null,\n): DeferBlockData['incrementalHydrationState'] {\n  if (\n    registry === null ||\n    lDetails[SSR_UNIQUE_ID] === null ||\n    tDetails.hydrateTriggers === null ||\n    tDetails.hydrateTriggers.has(DeferBlockTrigger.Never)\n  ) {\n    return 'not-configured';\n  }\n  return registry.has(lDetails[SSR_UNIQUE_ID]) ? 'dehydrated' : 'hydrated';\n}\n\n/**\n * Gets the current LView that is rendered out in a defer block.\n * @param details Instance information about the block.\n */\nfunction getRendererLView(details: DeferBlockDetails): LView | null {\n  // Defer block containers can only ever contain one view.\n  // If they're empty, it means that nothing is rendered.\n  if (details.lContainer.length <= CONTAINER_HEADER_OFFSET) {\n    return null;\n  }\n\n  const lView = details.lContainer[CONTAINER_HEADER_OFFSET];\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n"]}