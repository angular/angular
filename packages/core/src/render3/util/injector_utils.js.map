{"version":3,"file":"injector_utils.js","sourceRoot":"","sources":["injector_utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,iBAAiB,EAAE,cAAc,EAAE,YAAY,EAAC,MAAM,mBAAmB,CAAC;AAElF,OAAO,EACL,kBAAkB,GAGnB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAC,gBAAgB,EAAE,aAAa,EAAQ,MAAM,oBAAoB,CAAC;AAE1E,yFAAyF;AACzF,MAAM,UAAU,iBAAiB,CAAC,cAAwC;IACxE,OAAO,cAAc,KAAK,kBAAkB,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,cAAwC;IAC7E,IAAI,SAAS,EAAE,CAAC;QACd,YAAY,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;QAChD,cAAc,CAAC,cAAqB,EAAE,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QAChE,MAAM,mBAAmB,GAAG,cAAc,8DAAkD,CAAC;QAE7F,iBAAiB,CACf,mBAAmB,EACnB,aAAa,EACb,sDAAsD,CACvD,CAAC;IACJ,CAAC;IACD,OAAO,cAAc,8DAAkD,CAAC;AAC1E,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,cAAwC;IAClF,OAAO,cAAc,0DAAiD,CAAC;AACzE,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,qBAAqB,CAAC,QAAkC,EAAE,SAAgB;IACxF,IAAI,UAAU,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;IACvD,IAAI,UAAU,GAAG,SAAS,CAAC;IAC3B,wFAAwF;IACxF,2FAA2F;IAC3F,sFAAsF;IACtF,4BAA4B;IAC5B,OAAO,UAAU,GAAG,CAAC,EAAE,CAAC;QACtB,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAE,CAAC;QAC3C,UAAU,EAAE,CAAC;IACf,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {type Injector} from '../../di/injector';\nimport {assertGreaterThan, assertNotEqual, assertNumber} from '../../util/assert';\nimport {ChainedInjector} from '../chained_injector';\nimport {\n  NO_PARENT_INJECTOR,\n  RelativeInjectorLocation,\n  RelativeInjectorLocationFlags,\n} from '../interfaces/injector';\nimport {DECLARATION_VIEW, HEADER_OFFSET, LView} from '../interfaces/view';\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  if (ngDevMode) {\n    assertNumber(parentLocation, 'Number expected');\n    assertNotEqual(parentLocation as any, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & RelativeInjectorLocationFlags.InjectorIndexMask;\n\n    assertGreaterThan(\n      parentInjectorIndex,\n      HEADER_OFFSET,\n      'Parent injector must be pointing past HEADER_OFFSET.',\n    );\n  }\n  return parentLocation & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return parentLocation >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW]!;\n    viewOffset--;\n  }\n  return parentView;\n}\n"]}