{"version":3,"file":"queries_signals.js","sourceRoot":"","sources":["queries_signals.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OAAO,EAAC,kBAAkB,EAAE,eAAe,EAAC,MAAM,kBAAkB,CAAC;AACrE,OAAO,EAAC,iBAAiB,EAAC,MAAM,2BAA2B,CAAC;AAE5D,OAAO,EAAC,oBAAoB,EAAE,oBAAoB,EAAC,MAAM,UAAU,CAAC;AAEpE;;;;;;;;;;GAUG;AACH,MAAM,UAAU,oBAAoB,CAClC,cAAsB,EACtB,MAAiB,EACjB,SAA4C,EAC5C,KAAiB,EACjB,IAAU;IAEV,iBAAiB,CAAC,MAAM,EAAE,kBAAkB,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AACxF,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,iBAAiB,CAC/B,MAAuB,EACvB,SAA4C,EAC5C,KAAiB,EACjB,IAA6B;IAE7B,iBAAiB,CAAC,MAAM,EAAE,eAAe,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AACrE,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,cAAc,CAAC,cAAsB,CAAC;IACpD,oBAAoB,CAAC,oBAAoB,EAAE,GAAG,WAAW,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ProviderToken} from '../../di/provider_token';\nimport {QueryFlags} from '../interfaces/query';\nimport {createContentQuery, createViewQuery} from '../queries/query';\nimport {bindQueryToSignal} from '../queries/query_reactive';\nimport {Signal} from '../reactivity/api';\nimport {getCurrentQueryIndex, setCurrentQueryIndex} from '../state';\n\n/**\n * Creates a new content query and binds it to a signal created by an authoring function.\n *\n * @param directiveIndex Current directive index\n * @param target The target signal to which the query should be bound\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuerySignal<T>(\n  directiveIndex: number,\n  target: Signal<T>,\n  predicate: ProviderToken<unknown> | string[],\n  flags: QueryFlags,\n  read?: any,\n): void {\n  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));\n}\n\n/**\n * Creates a new view query by initializing internal data structures and binding a new query to the\n * target signal.\n *\n * @param target The target signal to assign the query results to.\n * @param predicate The type or label that should match a given query\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuerySignal(\n  target: Signal<unknown>,\n  predicate: ProviderToken<unknown> | string[],\n  flags: QueryFlags,\n  read?: ProviderToken<unknown>,\n): void {\n  bindQueryToSignal(target, createViewQuery(predicate, flags, read));\n}\n\n/**\n * Advances the current query index by a specified offset.\n *\n * Adjusting the current query index is necessary in cases where a given directive has a mix of\n * zone-based and signal-based queries. The signal-based queries don't require tracking of the\n * current index (those are refreshed on demand and not during change detection) so this instruction\n * is only necessary for backward-compatibility.\n *\n * @param index offset to apply to the current query index (defaults to 1)\n *\n * @codeGenApi\n */\nexport function ɵɵqueryAdvance(indexOffset: number = 1): void {\n  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);\n}\n"]}