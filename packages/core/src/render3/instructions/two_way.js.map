{"version":3,"file":"two_way.js","sourceRoot":"","sources":["two_way.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,cAAc,EAAC,MAAM,aAAa,CAAC;AAE3C,OAAO,EAAC,QAAQ,EAAC,MAAM,oBAAoB,CAAC;AAC5C,OAAO,EAAC,gBAAgB,EAAiB,MAAM,sBAAsB,CAAC;AACtE,OAAO,EAAC,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAC,MAAM,UAAU,CAAC;AAEjG,OAAO,EAAC,gBAAgB,EAAC,MAAM,YAAY,CAAC;AAC5C,OAAO,EAAC,oBAAoB,EAAE,4BAA4B,EAAC,MAAM,UAAU,CAAC;AAE5E;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,gBAAgB,CAC9B,QAAgB,EAChB,KAA4B,EAC5B,SAA8B;IAE9B,8EAA8E;IAC9E,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,KAAK,GAAG,KAAK,EAAE,CAAC;IAClB,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,YAAY,GAAG,gBAAgB,EAAE,CAAC;IACxC,IAAI,cAAc,CAAC,KAAK,EAAE,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC;QAC/C,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,gBAAgB,EAAE,CAAC;QACjC,oBAAoB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;QAChF,SAAS,IAAI,4BAA4B,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IACvF,CAAC;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,kBAAkB,CAAI,MAAe,EAAE,KAAQ;IAC7D,MAAM,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC1C,QAAQ,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9B,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,gBAAgB,CAC9B,SAAiB,EACjB,UAAyB;IAEzB,MAAM,KAAK,GAAG,QAAQ,EAAa,CAAC;IACpC,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,eAAe,EAAG,CAAC;IACjC,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAC9E,OAAO,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {EventCallback} from '../../event_delegation_utils';\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {isWritableSignal, WritableSignal} from '../reactivity/signal';\nimport {getCurrentTNode, getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\n\nimport {listenerInternal} from './listener';\nimport {setPropertyAndInputs, storePropertyBindingMetadata} from './shared';\n\n/**\n * Update a two-way bound property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `twoWayProperty('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵtwoWayProperty<T>(\n  propName: string,\n  value: T | WritableSignal<T>,\n  sanitizer?: SanitizerFn | null,\n): typeof ɵɵtwoWayProperty {\n  // TODO(crisbeto): perf impact of re-evaluating this on each change detection?\n  if (isWritableSignal(value)) {\n    value = value();\n  }\n\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n\n  return ɵɵtwoWayProperty;\n}\n\n/**\n * Function used inside two-way listeners to conditionally set the value of the bound expression.\n *\n * @param target Field on which to set the value.\n * @param value Value to be set to the field.\n *\n * @codeGenApi\n */\nexport function ɵɵtwoWayBindingSet<T>(target: unknown, value: T): boolean {\n  const canWrite = isWritableSignal(target);\n  canWrite && target.set(value);\n  return canWrite;\n}\n\n/**\n * Adds an event listener that updates a two-way binding to the current node.\n *\n * @param eventName Name of the event.\n * @param listenerFn The function to be called when event emits.\n *\n * @codeGenApi\n */\nexport function ɵɵtwoWayListener(\n  eventName: string,\n  listenerFn: EventCallback,\n): typeof ɵɵtwoWayListener {\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);\n  return ɵɵtwoWayListener;\n}\n"]}