{"version":3,"file":"element_validation.js","sourceRoot":"","sources":["element_validation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Type} from '../../interface/type';\nimport {CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SchemaMetadata} from '../../metadata/schema';\nimport {throwError} from '../../util/assert';\nimport {getComponentDef} from '../def_getters';\nimport {ComponentDef} from '../interfaces/definition';\nimport {TElementNode, TNode, TNodeType} from '../interfaces/node';\nimport {RComment, RElement} from '../interfaces/renderer_dom';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {CONTEXT, DECLARATION_COMPONENT_VIEW, LView, TVIEW} from '../interfaces/view';\nimport {isAnimationProp} from '../util/attrs_utils';\nimport {getNativeByTNode} from '../util/view_utils';\n\nlet shouldThrowErrorOnUnknownElement = false;\n\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nexport function ɵsetUnknownElementStrictMode(shouldThrow: boolean) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n\n/**\n * Gets the current value of the strict mode.\n */\nexport function ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\n\nlet shouldThrowErrorOnUnknownProperty = false;\n\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nexport function ɵsetUnknownPropertyStrictMode(shouldThrow: boolean) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n\n/**\n * Gets the current value of the strict mode.\n */\nexport function ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param lView An `LView` associated with a template is being rendered\n * @param tNode TNode representing an element to be validated\n */\nexport function validateElementIsKnown(lView: LView, tNode: TElementNode): void {\n  const tView = lView[TVIEW];\n\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (tView.schemas === null) return;\n\n  const tagName = tNode.value;\n\n  // If the element matches any directive, it's considered as valid.\n  if (!isDirectiveHost(tNode) && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n      // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n      // Domino doesn't expose HTMLUnknownElement globally.\n      (typeof HTMLUnknownElement !== 'undefined' &&\n        HTMLUnknownElement &&\n        getNativeByTNode(tNode, lView) instanceof HTMLUnknownElement) ||\n      (typeof customElements !== 'undefined' &&\n        tagName.indexOf('-') > -1 &&\n        !customElements.get(tagName));\n\n    if (isUnknown && !matchingSchemas(tView.schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${\n        isHostStandalone\n          ? \"included in the '@Component.imports' of this component\"\n          : 'a part of an @NgModule where this component is declared'\n      }.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(RuntimeErrorCode.UNKNOWN_ELEMENT, message);\n      } else {\n        console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_ELEMENT, message));\n      }\n    }\n  }\n}\n\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nexport function isPropertyValid(\n  element: RElement | RComment,\n  propName: string,\n  tagName: string | null,\n  schemas: SchemaMetadata[] | null,\n): boolean {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic.\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nexport function handleUnknownPropertyError(\n  propName: string,\n  tagName: string | null,\n  nodeType: TNodeType,\n  lView: LView,\n): void {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === TNodeType.Container) {\n    tagName = 'ng-template';\n  }\n\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone\n    ? \"included in the '@Component.imports' of this component\"\n    : 'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message +=\n      `\\nIf the '${propName}' is an Angular control flow directive, ` +\n      `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message +=\n      `\\n1. If '${tagName}' is an Angular component and it has the ` +\n      `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message +=\n        `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` +\n        `to the ${schemas} of this component to suppress this message.`;\n      message +=\n        `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n        `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message +=\n        `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n        `the ${schemas} of this component.`;\n    }\n  }\n\n  reportUnknownPropertyError(message);\n}\n\nexport function reportUnknownPropertyError(message: string) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(RuntimeErrorCode.UNKNOWN_BINDING, message);\n  } else {\n    console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_BINDING, message));\n  }\n}\n\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nexport function getDeclarationComponentDef(lView: LView): ComponentDef<unknown> | null {\n  !ngDevMode && throwError('Must never be called in production mode');\n\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW] as LView<Type<unknown>>;\n  const context = declarationLView[CONTEXT];\n\n  // Unable to obtain a context.\n  if (!context) return null;\n\n  return context.constructor ? getComponentDef(context.constructor) : null;\n}\n\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nexport function isHostComponentStandalone(lView: LView): boolean {\n  !ngDevMode && throwError('Must never be called in production mode');\n\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!componentDef?.standalone;\n}\n\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nexport function getTemplateLocationDetails(lView: LView): string {\n  !ngDevMode && throwError('Must never be called in production mode');\n\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nexport const KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([\n  ['ngIf', 'NgIf'],\n  ['ngFor', 'NgFor'],\n  ['ngSwitchCase', 'NgSwitchCase'],\n  ['ngSwitchDefault', 'NgSwitchDefault'],\n]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nexport function matchingSchemas(schemas: SchemaMetadata[] | null, tagName: string | null): boolean {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (\n        schema === NO_ERRORS_SCHEMA ||\n        (schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1)\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}