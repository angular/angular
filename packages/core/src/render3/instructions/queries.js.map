{"version":3,"file":"queries.js","sourceRoot":"","sources":["queries.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,gBAAgB,EAAC,MAAM,0BAA0B,CAAC;AAG1D,OAAO,EACL,kBAAkB,EAClB,eAAe,EACf,eAAe,EACf,SAAS,EACT,iBAAiB,GAClB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAC,oBAAoB,EAAE,QAAQ,EAAE,QAAQ,EAAE,oBAAoB,EAAC,MAAM,UAAU,CAAC;AACxF,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAElD;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,cAAc,CAC5B,cAAsB,EACtB,SAAqD,EACrD,KAAiB,EACjB,IAAU;IAEV,kBAAkB,CAAI,cAAc,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAChE,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,WAAW,CACzB,SAAqD,EACrD,KAAiB,EACjB,IAAU;IAEV,eAAe,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1C,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,cAAc,CAAC,SAAyB;IACtD,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,UAAU,GAAG,oBAAoB,EAAE,CAAC;IAE1C,oBAAoB,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAErC,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC5C,IACE,SAAS,CAAC,KAAK;QACf,cAAc,CAAC,KAAK,CAAC;YACnB,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,8BAAsB,CAAC,gCAAwB,CAAC,EACzE,CAAC;QACD,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,EAAE,CAAC;YAC5B,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACtB,CAAC;aAAM,CAAC;YACN,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YAClD,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;YAC1C,SAAS,CAAC,eAAe,EAAE,CAAC;QAC9B,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,WAAW;IACzB,OAAO,iBAAiB,CAAI,QAAQ,EAAE,EAAE,oBAAoB,EAAE,CAAC,CAAC;AAClE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ProviderToken} from '../../di';\nimport {unwrapElementRef} from '../../linker/element_ref';\nimport {QueryList} from '../../linker/query_list';\nimport {QueryFlags} from '../interfaces/query';\nimport {\n  createContentQuery,\n  createViewQuery,\n  getQueryResults,\n  getTQuery,\n  loadQueryInternal,\n} from '../queries/query';\nimport {getCurrentQueryIndex, getLView, getTView, setCurrentQueryIndex} from '../state';\nimport {isCreationMode} from '../util/view_utils';\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuery<T>(\n  directiveIndex: number,\n  predicate: ProviderToken<unknown> | string | string[],\n  flags: QueryFlags,\n  read?: any,\n): void {\n  createContentQuery<T>(directiveIndex, predicate, flags, read);\n}\n\n/**\n * Creates a new view query by initializing internal data structures.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuery<T>(\n  predicate: ProviderToken<unknown> | string | string[],\n  flags: QueryFlags,\n  read?: any,\n): void {\n  createViewQuery(predicate, flags, read);\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nexport function ɵɵqueryRefresh(queryList: QueryList<any>): boolean {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n\n  setCurrentQueryIndex(queryIndex + 1);\n\n  const tQuery = getTQuery(tView, queryIndex);\n  if (\n    queryList.dirty &&\n    isCreationMode(lView) ===\n      ((tQuery.metadata.flags & QueryFlags.isStatic) === QueryFlags.isStatic)\n  ) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = getQueryResults(lView, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nexport function ɵɵloadQuery<T>(): QueryList<T> {\n  return loadQueryInternal<T>(getLView(), getCurrentQueryIndex());\n}\n"]}