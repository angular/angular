{"version":3,"file":"advance.js","sourceRoot":"","sources":["advance.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAC,iBAAiB,EAAC,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAC,sBAAsB,EAAC,MAAM,WAAW,CAAC;AACjD,OAAO,EAAC,iBAAiB,EAAE,wBAAwB,EAAC,MAAM,UAAU,CAAC;AACrE,OAAO,EAAC,KAAK,EAAqC,KAAK,EAAQ,MAAM,oBAAoB,CAAC;AAC1F,OAAO,EACL,QAAQ,EACR,gBAAgB,EAChB,QAAQ,EACR,sBAAsB,EACtB,gBAAgB,GACjB,MAAM,UAAU,CAAC;AAElB;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,UAAU,SAAS,CAAC,QAAgB,CAAC;IACzC,SAAS,IAAI,iBAAiB,CAAC,KAAK,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC;IACrE,mBAAmB,CACjB,QAAQ,EAAE,EACV,QAAQ,EAAE,EACV,gBAAgB,EAAE,GAAG,KAAK,EAC1B,CAAC,CAAC,SAAS,IAAI,sBAAsB,EAAE,CACxC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,KAAY,EACZ,KAAY,EACZ,KAAa,EACb,kBAA2B;IAE3B,SAAS,IAAI,sBAAsB,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAEzD,0FAA0F;IAC1F,sFAAsF;IACtF,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,MAAM,uBAAuB,GAC3B,CAAC,KAAK,CAAC,KAAK,CAAC,wCAAgC,CAAC,8CAAsC,CAAC;QACvF,IAAI,uBAAuB,EAAE,CAAC;YAC5B,MAAM,kBAAkB,GAAG,KAAK,CAAC,kBAAkB,CAAC;YACpD,IAAI,kBAAkB,KAAK,IAAI,EAAE,CAAC;gBAChC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;aAAM,CAAC;YACN,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;YAC1C,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;gBAC3B,wBAAwB,CAAC,KAAK,EAAE,aAAa,6CAAqC,KAAK,CAAC,CAAC;YAC3F,CAAC;QACH,CAAC;IACH,CAAC;IAED,gGAAgG;IAChG,gGAAgG;IAChG,kGAAkG;IAClG,oEAAoE;IACpE,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {assertGreaterThan} from '../../util/assert';\nimport {assertIndexInDeclRange} from '../assert';\nimport {executeCheckHooks, executeInitAndCheckHooks} from '../hooks';\nimport {FLAGS, InitPhaseState, LView, LViewFlags, TVIEW, TView} from '../interfaces/view';\nimport {\n  getLView,\n  getSelectedIndex,\n  getTView,\n  isInCheckNoChangesMode,\n  setSelectedIndex,\n} from '../state';\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nexport function ɵɵadvance(delta: number = 1): void {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(\n    getTView(),\n    getLView(),\n    getSelectedIndex() + delta,\n    !!ngDevMode && isInCheckNoChangesMode(),\n  );\n}\n\nexport function selectIndexInternal(\n  tView: TView,\n  lView: LView,\n  index: number,\n  checkNoChangesMode: boolean,\n) {\n  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\n\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted =\n      (lView[FLAGS] & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, index);\n      }\n    }\n  }\n\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n"]}