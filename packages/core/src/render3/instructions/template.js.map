{"version":3,"file":"template.js","sourceRoot":"","sources":["template.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {validateMatchingNode, validateNodeExists} from '../../hydration/error_handling';\nimport {TEMPLATES} from '../../hydration/interfaces';\nimport {locateNextRNode, siblingAfter} from '../../hydration/node_lookup_utils';\nimport {\n  calcSerializedContainerSize,\n  canHydrateNode,\n  markRNodeAsClaimedByHydration,\n  setSegmentHead,\n} from '../../hydration/utils';\nimport {populateDehydratedViewsInLContainer} from '../../linker/view_container_ref';\nimport {assertEqual} from '../../util/assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {\n  LocalRefExtractor,\n  TAttributes,\n  TContainerNode,\n  TNode,\n  TNodeFlags,\n  TNodeType,\n} from '../interfaces/node';\nimport {RComment} from '../interfaces/renderer_dom';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView, TViewType} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {\n  getBindingsEnabled,\n  getLView,\n  getTView,\n  lastNodeWasCreated,\n  setCurrentTNode,\n  wasLastNodeCreated,\n} from '../state';\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\nimport {addToEndOfViewTree, createTView} from '../view/construction';\nimport {createLContainer} from '../view/container';\nimport {resolveDirectives} from '../view/directives';\n\nimport {\n  createDirectivesInstances,\n  findDirectiveDefMatches,\n  saveResolvedLocalsInData,\n} from './shared';\n\nfunction templateCreate(\n  tNode: TContainerNode,\n  declarationLView: LView,\n  declarationTView: TView,\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  flags?: TNodeFlags,\n) {\n  if (declarationTView.firstCreatePass) {\n    // Merge the template attrs last so that they have the highest priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n\n    const embeddedTView = (tNode.tView = createTView(\n      TViewType.Embedded,\n      tNode,\n      templateFn,\n      decls,\n      vars,\n      declarationTView.directiveRegistry,\n      declarationTView.pipeRegistry,\n      null,\n      declarationTView.schemas,\n      declarationTView.consts,\n      null /* ssrId */,\n    ));\n\n    if (declarationTView.queries !== null) {\n      declarationTView.queries.template(declarationTView, tNode);\n      embeddedTView.queries = declarationTView.queries.embeddedTView(tNode);\n    }\n  }\n\n  if (flags) {\n    tNode.flags |= flags;\n  }\n  setCurrentTNode(tNode, false);\n\n  const comment = _locateOrCreateContainerAnchor(\n    declarationTView,\n    declarationLView,\n    tNode,\n    index,\n  ) as RComment;\n\n  if (wasLastNodeCreated()) {\n    appendChild(declarationTView, declarationLView, comment, tNode);\n  }\n  attachPatchData(comment, declarationLView);\n\n  const lContainer = createLContainer(comment, declarationLView, comment, tNode);\n  declarationLView[index + HEADER_OFFSET] = lContainer;\n  addToEndOfViewTree(declarationLView, lContainer);\n\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);\n}\n\n/**\n * Declares a new template that can have directives on its host node.\n *\n * @param declarationLView LView in which the template was declared.\n * @param declarationTView TView in which the template wa declared.\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nfunction declareDirectiveHostTemplate(\n  declarationLView: LView,\n  declarationTView: TView,\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrs?: TAttributes | null,\n  flags?: TNodeFlags,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor,\n): TNode {\n  const adjustedIndex = index + HEADER_OFFSET;\n  let tNode: TContainerNode;\n\n  if (declarationTView.firstCreatePass) {\n    // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n    tNode = getOrCreateTNode(\n      declarationTView,\n      adjustedIndex,\n      TNodeType.Container,\n      tagName || null,\n      attrs || null,\n    );\n\n    if (getBindingsEnabled()) {\n      resolveDirectives(\n        declarationTView,\n        declarationLView,\n        tNode,\n        getConstant<string[]>(declarationTView.consts, localRefsIndex),\n        findDirectiveDefMatches,\n      );\n    }\n\n    registerPostOrderHooks(declarationTView, tNode);\n  } else {\n    tNode = declarationTView.data[adjustedIndex] as TContainerNode;\n  }\n\n  templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags);\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(declarationTView, declarationLView, tNode);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\n  }\n\n  return tNode;\n}\n\n/**\n * Declares a new template that *cannot& have directives on its host node.\n *\n * @param declarationLView LView in which the template was declared.\n * @param declarationTView TView in which the template wa declared.\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nexport function declareNoDirectiveHostTemplate(\n  declarationLView: LView,\n  declarationTView: TView,\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrs?: TAttributes | null,\n  flags?: TNodeFlags,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor,\n): TNode {\n  const adjustedIndex = index + HEADER_OFFSET;\n  let tNode: TContainerNode;\n\n  if (declarationTView.firstCreatePass) {\n    tNode = getOrCreateTNode(\n      declarationTView,\n      adjustedIndex,\n      TNodeType.Container,\n      tagName || null,\n      attrs || null,\n    );\n\n    if (localRefsIndex != null) {\n      const refs = getConstant<string[]>(declarationTView.consts, localRefsIndex)!;\n      tNode.localNames = [];\n\n      for (let i = 0; i < refs.length; i += 2) {\n        // Always -1 since DOM-only instructions can only refer to the native node.\n        tNode.localNames.push(refs[i], -1);\n      }\n    }\n  } else {\n    tNode = declarationTView.data[adjustedIndex] as TContainerNode;\n  }\n\n  templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags);\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplate(\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrsIndex?: number | null,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor,\n): typeof ɵɵtemplate {\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant<TAttributes>(tView.consts, attrsIndex);\n  declareDirectiveHostTemplate(\n    lView,\n    tView,\n    index,\n    templateFn,\n    decls,\n    vars,\n    tagName,\n    attrs,\n    undefined,\n    localRefsIndex,\n    localRefExtractor,\n  );\n  return ɵɵtemplate;\n}\n\n/**\n * Creates an LContainer for an ng-template that cannot have directives.\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport function ɵɵdomTemplate(\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrsIndex?: number | null,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor,\n): typeof ɵɵdomTemplate {\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant<TAttributes>(tView.consts, attrsIndex);\n  declareNoDirectiveHostTemplate(\n    lView,\n    tView,\n    index,\n    templateFn,\n    decls,\n    vars,\n    tagName,\n    attrs,\n    undefined,\n    localRefsIndex,\n    localRefExtractor,\n  );\n  return ɵɵdomTemplate;\n}\n\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\n\n/**\n * Regular creation mode for LContainers and their anchor (comment) nodes.\n */\nfunction createContainerAnchorImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  index: number,\n): RComment {\n  lastNodeWasCreated(true);\n  return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n}\n\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode for LContainers and their\n * anchor (comment) nodes.\n */\nfunction locateOrCreateContainerAnchorImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  index: number,\n): RComment {\n  const isNodeCreationMode = !canHydrateNode(lView, tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n\n  const ssrId = lView[HYDRATION]?.data[TEMPLATES]?.[index] ?? null;\n\n  // Apply `ssrId` value to the underlying TView if it was not previously set.\n  //\n  // There might be situations when the same component is present in a template\n  // multiple times and some instances are opted-out of using hydration via\n  // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\n  // the `ssrId` might be `null` (if the first component is opted-out of hydration).\n  // The code below makes sure that the `ssrId` is applied to the TView if it's still\n  // `null` and verifies we never try to override it with a different value.\n  if (ssrId !== null && tNode.tView !== null) {\n    if (tNode.tView.ssrId === null) {\n      tNode.tView.ssrId = ssrId;\n    } else {\n      ngDevMode &&\n        assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\n    }\n  }\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createContainerAnchorImpl(tView, lView, tNode, index);\n  }\n\n  const hydrationInfo = lView[HYDRATION]!;\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode)!;\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\n  const comment = siblingAfter<RComment>(viewContainerSize, currentRNode)!;\n\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n\n  return comment;\n}\n\nexport function enableLocateOrCreateContainerAnchorImpl() {\n  _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\n}\n"]}