{"version":3,"file":"attach_source_locations.js","sourceRoot":"","sources":["attach_source_locations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,oBAAoB,CAAC;AAC3D,OAAO,EAAC,eAAe,EAAC,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAC,gBAAgB,EAAE,QAAQ,EAAC,MAAM,oBAAoB,CAAC;AAE9D;;;;;;;;;GASG;AACH,MAAM,UAAU,uBAAuB,CACrC,YAAoB,EACpB,SAA0E;IAE1E,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,aAAa,GAAG,yBAAyB,CAAC;IAEhD,KAAK,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,SAAS,EAAE,CAAC;QACtD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,GAAG,aAAa,CAAC,CAAC;QACrD,kGAAkG;QAClG,SAAS,IAAI,eAAe,CAAC,KAAK,4BAAoB,CAAC;QACvD,MAAM,IAAI,GAAG,gBAAgB,CAAC,KAAK,GAAG,aAAa,EAAE,KAAK,CAAa,CAAC;QAExE,yFAAyF;QACzF,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,CAAC;YACtC,MAAM,cAAc,GAAG,GAAG,YAAY,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,EAAE,CAAC;YAC3E,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TNodeType} from '../interfaces/node';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {HEADER_OFFSET, RENDERER} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {getLView, getTView} from '../state';\nimport {getNativeByIndex, getTNode} from '../util/view_utils';\n\n/**\n * Sets the location within the source template at which\n * each element in the current view was defined.\n *\n * @param index Index at which the DOM node was created.\n * @param templatePath Path to the template at which the node was defined.\n * @param locations Element locations to which to attach the source location.\n *\n * @codeGenApi\n */\nexport function ɵɵattachSourceLocations(\n  templatePath: string,\n  locations: [index: number, offset: number, line: number, column: number][],\n) {\n  const tView = getTView();\n  const lView = getLView();\n  const renderer = lView[RENDERER];\n  const attributeName = 'data-ng-source-location';\n\n  for (const [index, offset, line, column] of locations) {\n    const tNode = getTNode(tView, index + HEADER_OFFSET);\n    // The compiler shouldn't generate the instruction for non-element nodes, but assert just in case.\n    ngDevMode && assertTNodeType(tNode, TNodeType.Element);\n    const node = getNativeByIndex(index + HEADER_OFFSET, lView) as RElement;\n\n    // Set the attribute directly in the DOM so it doesn't participate in directive matching.\n    if (!node.hasAttribute(attributeName)) {\n      const attributeValue = `${templatePath}@o:${offset},l:${line},c:${column}`;\n      renderer.setAttribute(node, attributeName, attributeValue);\n    }\n  }\n}\n"]}