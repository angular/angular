{"version":3,"file":"animation.js","sourceRoot":"","sources":["animation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AnimationCallbackEvent,\n  AnimationFunction,\n  MAX_ANIMATION_TIMEOUT,\n} from '../../animation/interfaces';\nimport {getLView, getCurrentTNode} from '../state';\nimport {RENDERER, INJECTOR, CONTEXT, LView} from '../interfaces/view';\nimport {getNativeByTNode} from '../util/view_utils';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {Renderer} from '../interfaces/renderer';\nimport {NgZone} from '../../zone';\nimport {determineLongestAnimation, allLeavingAnimations} from '../../animation/longest_animation';\nimport {TNode} from '../interfaces/node';\nimport {promiseWithResolvers} from '../../util/promise_with_resolvers';\n\nimport {\n  areAnimationsDisabled,\n  areAnimationSupported,\n  assertAnimationTypes,\n  assertElementNodes,\n  cancelAnimationsIfRunning,\n  cancelLeavingNodes,\n  cleanupEnterClassData,\n  clearLeavingNodes,\n  enterClassMap,\n  getClassListFromValue,\n  getLViewEnterAnimations,\n  getLViewLeaveAnimations,\n  isLongestAnimation,\n  longestAnimations,\n  noOpAnimationComplete,\n  trackEnterClasses,\n  trackLeavingNodes,\n} from '../../animation/utils';\n\n/**\n * Instruction to handle the `animate.enter` behavior for class bindings.\n *\n * @param value The value bound to `animate.enter`, which is a string or a function.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵanimateEnter(value: string | Function): typeof ɵɵanimateEnter {\n  performanceMarkFeature('NgAnimateEnter');\n\n  if ((typeof ngServerMode !== 'undefined' && ngServerMode) || !areAnimationSupported) {\n    return ɵɵanimateEnter;\n  }\n  ngDevMode && assertAnimationTypes(value, 'animate.enter');\n\n  const lView = getLView();\n  if (areAnimationsDisabled(lView)) {\n    return ɵɵanimateEnter;\n  }\n\n  const tNode = getCurrentTNode()!;\n\n  cancelLeavingNodes(tNode, lView);\n\n  getLViewEnterAnimations(lView).push(() => runEnterAnimation(lView, tNode, value));\n\n  return ɵɵanimateEnter; // For chaining\n}\n\nexport function runEnterAnimation(lView: LView, tNode: TNode, value: string | Function): void {\n  const nativeElement = getNativeByTNode(tNode, lView) as HTMLElement;\n\n  ngDevMode && assertElementNodes(nativeElement, 'animate.enter');\n\n  const renderer = lView[RENDERER];\n  const ngZone = lView[INJECTOR]!.get(NgZone);\n\n  // Retrieve the actual class list from the value. This will resolve any resolver functions from\n  // bindings.\n  const activeClasses = getClassListFromValue(value);\n  const cleanupFns: Function[] = [];\n\n  // In the case where multiple animations are happening on the element, we need\n  // to get the longest animation to ensure we don't complete animations early.\n  // This also allows us to setup cancellation of animations in progress if the\n  // gets removed early.\n  const handleEnterAnimationStart = (event: AnimationEvent | TransitionEvent) => {\n    // this early exit case is to prevent issues with bubbling events that are from child element animations\n    if (event.target !== nativeElement) return;\n\n    const eventName = event instanceof AnimationEvent ? 'animationend' : 'transitionend';\n    ngZone.runOutsideAngular(() => {\n      cleanupFns.push(renderer.listen(nativeElement, eventName, handleEnterAnimationEnd));\n    });\n  };\n\n  // When the longest animation ends, we can remove all the classes\n  const handleEnterAnimationEnd = (event: AnimationEvent | TransitionEvent) => {\n    // this early exit case is to prevent issues with bubbling events that are from child element animations\n    if (event.target !== nativeElement) return;\n\n    enterAnimationEnd(event, nativeElement, renderer);\n  };\n\n  // We only need to add these event listeners if there are actual classes to apply\n  if (activeClasses && activeClasses.length > 0) {\n    ngZone.runOutsideAngular(() => {\n      cleanupFns.push(renderer.listen(nativeElement, 'animationstart', handleEnterAnimationStart));\n      cleanupFns.push(renderer.listen(nativeElement, 'transitionstart', handleEnterAnimationStart));\n    });\n\n    trackEnterClasses(nativeElement, activeClasses, cleanupFns);\n\n    for (const klass of activeClasses) {\n      renderer.addClass(nativeElement, klass);\n    }\n    // In the case that the classes added have no animations, we need to remove\n    // the classes right away. This could happen because someone is intentionally\n    // preventing an animation via selector specificity.\n    ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        determineLongestAnimation(nativeElement, longestAnimations, areAnimationSupported);\n        if (!longestAnimations.has(nativeElement)) {\n          for (const klass of activeClasses) {\n            renderer.removeClass(nativeElement, klass);\n          }\n          cleanupEnterClassData(nativeElement);\n        }\n      });\n    });\n  }\n}\n\nfunction enterAnimationEnd(\n  event: AnimationEvent | TransitionEvent,\n  nativeElement: HTMLElement,\n  renderer: Renderer,\n) {\n  const elementData = enterClassMap.get(nativeElement);\n  // this event.target check is to prevent issues with bubbling events that are from child element animations\n  if (event.target !== nativeElement || !elementData) return;\n  if (isLongestAnimation(event, nativeElement)) {\n    // Now that we've found the longest animation, there's no need\n    // to keep bubbling up this event as it's not going to apply to\n    // other elements further up. We don't want it to inadvertently\n    // affect any other animations on the page.\n    event.stopImmediatePropagation();\n    for (const klass of elementData.classList) {\n      renderer.removeClass(nativeElement, klass);\n    }\n    cleanupEnterClassData(nativeElement);\n  }\n}\n\n/**\n * Instruction to handle the `(animate.enter)` behavior for event bindings, aka when\n * a user wants to use a custom animation function rather than a class.\n *\n * @param value The value bound to `(animate.enter)`, an AnimationFunction.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵanimateEnterListener(value: AnimationFunction): typeof ɵɵanimateEnterListener {\n  performanceMarkFeature('NgAnimateEnter');\n\n  if ((typeof ngServerMode !== 'undefined' && ngServerMode) || !areAnimationSupported) {\n    return ɵɵanimateEnterListener;\n  }\n\n  ngDevMode && assertAnimationTypes(value, 'animate.enter');\n\n  const lView = getLView();\n  if (areAnimationsDisabled(lView)) {\n    return ɵɵanimateEnterListener;\n  }\n  const tNode = getCurrentTNode()!;\n\n  cancelLeavingNodes(tNode, lView);\n\n  getLViewEnterAnimations(lView).push(() => runEnterAnimationFunction(lView, tNode, value));\n\n  return ɵɵanimateEnterListener;\n}\n\n/**\n * runs enter animations when a custom function is provided\n */\nfunction runEnterAnimationFunction(lView: LView, tNode: TNode, value: AnimationFunction) {\n  const nativeElement = getNativeByTNode(tNode, lView) as HTMLElement;\n  ngDevMode && assertElementNodes(nativeElement, 'animate.enter');\n\n  value.call(lView[CONTEXT], {target: nativeElement, animationComplete: noOpAnimationComplete});\n}\n\n/**\n * Instruction to handle the `animate.leave` behavior for class animations.\n * It creates a leave animation function that's tracked in the LView to\n * be run before DOM node removal and cleanup.\n *\n * @param value The value bound to `animate.leave`, which can be a string or a function.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵanimateLeave(value: string | Function): typeof ɵɵanimateLeave {\n  performanceMarkFeature('NgAnimateLeave');\n\n  if ((typeof ngServerMode !== 'undefined' && ngServerMode) || !areAnimationSupported) {\n    return ɵɵanimateLeave;\n  }\n\n  ngDevMode && assertAnimationTypes(value, 'animate.leave');\n\n  const lView = getLView();\n  const animationsDisabled = areAnimationsDisabled(lView);\n  if (animationsDisabled) {\n    return ɵɵanimateLeave;\n  }\n\n  const tNode = getCurrentTNode()!;\n\n  getLViewLeaveAnimations(lView).push(() =>\n    runLeaveAnimations(lView, tNode, value, animationsDisabled),\n  );\n\n  return ɵɵanimateLeave; // For chaining\n}\n\nfunction runLeaveAnimations(\n  lView: LView,\n  tNode: TNode,\n  value: string | Function,\n  animationsDisabled: boolean,\n): Promise<void> {\n  const {promise, resolve} = promiseWithResolvers<void>();\n  const nativeElement = getNativeByTNode(tNode, lView) as Element;\n\n  ngDevMode && assertElementNodes(nativeElement, 'animate.leave');\n\n  const renderer = lView[RENDERER];\n  const ngZone = lView[INJECTOR].get(NgZone);\n  allLeavingAnimations.add(lView);\n\n  const activeClasses = getClassListFromValue(value);\n  if (activeClasses && activeClasses.length > 0) {\n    animateLeaveClassRunner(\n      nativeElement as HTMLElement,\n      tNode,\n      activeClasses,\n      renderer,\n      animationsDisabled,\n      ngZone,\n      resolve,\n    );\n  } else {\n    resolve();\n  }\n\n  return promise;\n}\n\n/**\n * This function actually adds the classes that animate element that's leaving the DOM.\n * Once it finishes, it calls the remove function that was provided by the DOM renderer.\n */\nfunction animateLeaveClassRunner(\n  el: HTMLElement,\n  tNode: TNode,\n  classList: string[],\n  renderer: Renderer,\n  animationsDisabled: boolean,\n  ngZone: NgZone,\n  resolver: VoidFunction,\n) {\n  if (animationsDisabled) {\n    longestAnimations.delete(el);\n    resolver();\n    return;\n  }\n\n  cancelAnimationsIfRunning(el, renderer);\n\n  const handleOutAnimationEnd = (event: AnimationEvent | TransitionEvent | CustomEvent) => {\n    // this early exit case is to prevent issues with bubbling events that are from child element animations\n    if (event.target !== el) return;\n    if (event instanceof CustomEvent || isLongestAnimation(event, el)) {\n      // Now that we've found the longest animation, there's no need\n      // to keep bubbling up this event as it's not going to apply to\n      // other elements further up. We don't want it to inadvertently\n      // affect any other animations on the page.\n      event.stopImmediatePropagation();\n      longestAnimations.delete(el);\n      clearLeavingNodes(tNode, el);\n\n      if (Array.isArray(tNode.projection)) {\n        // in the content projection case, the element is not destroyed.\n        // So we need to remove the class at the end so that it isn't left\n        // behind for whenever the item shows up again.\n        for (const item of classList) {\n          renderer.removeClass(el, item);\n        }\n      }\n    }\n    resolver();\n  };\n\n  ngZone.runOutsideAngular(() => {\n    renderer.listen(el, 'animationend', handleOutAnimationEnd);\n    renderer.listen(el, 'transitionend', handleOutAnimationEnd);\n  });\n  trackLeavingNodes(tNode, el);\n  for (const item of classList) {\n    renderer.addClass(el, item);\n  }\n  // In the case that the classes added have no animations, we need to remove\n  // the element right away. This could happen because someone is intentionally\n  // preventing an animation via selector specificity.\n  ngZone.runOutsideAngular(() => {\n    requestAnimationFrame(() => {\n      determineLongestAnimation(el, longestAnimations, areAnimationSupported);\n      if (!longestAnimations.has(el)) {\n        clearLeavingNodes(tNode, el);\n        resolver();\n      }\n    });\n  });\n}\n\n/**\n * Instruction to handle the `(animate.leave)` behavior for event bindings, aka when\n * a user wants to use a custom animation function rather than a class. It registers\n * a leave animation function in the LView to be run at right before removal from the\n * DOM.\n *\n * @param value The value bound to `(animate.leave)`, an AnimationFunction.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵanimateLeaveListener(value: AnimationFunction): typeof ɵɵanimateLeaveListener {\n  performanceMarkFeature('NgAnimateLeave');\n\n  if ((typeof ngServerMode !== 'undefined' && ngServerMode) || !areAnimationSupported) {\n    return ɵɵanimateLeaveListener;\n  }\n\n  ngDevMode && assertAnimationTypes(value, 'animate.leave');\n\n  // Even when animations are disabled, we still need to register the element for removal\n  // to ensure proper cleanup and allow developers to handle element removal in tests\n  // So we don't have an early return here.\n\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n  allLeavingAnimations.add(lView);\n\n  getLViewLeaveAnimations(lView).push(() => runLeaveAnimationFunction(lView, tNode, value));\n\n  return ɵɵanimateLeaveListener; // For chaining\n}\n\n/**\n * runs leave animations when a custom function is provided\n */\nfunction runLeaveAnimationFunction(\n  lView: LView,\n  tNode: TNode,\n  value: AnimationFunction,\n): Promise<void> {\n  const {promise, resolve} = promiseWithResolvers<void>();\n  const nativeElement = getNativeByTNode(tNode, lView) as Element;\n\n  ngDevMode && assertElementNodes(nativeElement, 'animate.leave');\n\n  const renderer = lView[RENDERER];\n  const animationsDisabled = areAnimationsDisabled(lView);\n  const ngZone = lView[INJECTOR]!.get(NgZone);\n  const maxAnimationTimeout = lView[INJECTOR]!.get(MAX_ANIMATION_TIMEOUT);\n\n  if (animationsDisabled) {\n    resolve();\n  } else {\n    const timeoutId = setTimeout(() => {\n      clearLeavingNodes(tNode, nativeElement as HTMLElement);\n      resolve();\n    }, maxAnimationTimeout);\n\n    const event: AnimationCallbackEvent = {\n      target: nativeElement,\n      animationComplete: () => {\n        clearLeavingNodes(tNode, nativeElement as HTMLElement);\n        clearTimeout(timeoutId);\n        resolve();\n      },\n    };\n    trackLeavingNodes(tNode, nativeElement as HTMLElement);\n\n    ngZone.runOutsideAngular(() => {\n      renderer.listen(\n        nativeElement,\n        'animationend',\n        () => {\n          resolve();\n        },\n        {once: true},\n      );\n    });\n    value.call(lView[CONTEXT], event);\n  }\n\n  // Ensure cleanup if the LView is destroyed before the animation runs.\n  return promise;\n}\n"]}