{"version":3,"file":"let_declaration.js","sourceRoot":"","sources":["let_declaration.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAmB,MAAM,cAAc,CAAC;AAC5D,OAAO,EAAC,sBAAsB,EAAC,MAAM,wBAAwB,CAAC;AAE9D,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAC,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,eAAe,EAAC,MAAM,UAAU,CAAC;AAChG,OAAO,EAAC,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAC,IAAI,EAAE,KAAK,EAAC,MAAM,oBAAoB,CAAC;AAE/C,gGAAgG;AAChG,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAE7B;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAAC,KAAa;IACxC,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,aAAa,GAAG,KAAK,GAAG,aAAa,CAAC;IAC5C,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,EAAE,aAAa,sCAA4B,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3F,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9B,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;IACtD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAI,KAAQ;IACpC,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAChC,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,gBAAgB,EAAE,CAAC;IACjC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAClC,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAAI,KAAa;IAC/C,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;IACvC,MAAM,KAAK,GAAG,IAAI,CAAI,YAAY,EAAE,aAAa,GAAG,KAAK,CAAC,CAAC;IAE3D,IAAI,KAAK,KAAK,iBAAiB,EAAE,CAAC;QAChC,MAAM,IAAI,YAAY,sDAEpB,SAAS,IAAI,0EAA0E,CACxF,CAAC;IACJ,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {TNodeType} from '../interfaces/node';\nimport {HEADER_OFFSET} from '../interfaces/view';\nimport {getContextLView, getLView, getSelectedIndex, getTView, setCurrentTNode} from '../state';\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {load, store} from '../util/view_utils';\n\n/** Object that indicates the value of a `@let` declaration that hasn't been initialized yet. */\nconst UNINITIALIZED_LET = {};\n\n/**\n * Declares an `@let` at a specific data slot. Returns itself to allow chaining.\n *\n * @param index Index at which to declare the `@let`.\n *\n * @codeGenApi\n */\nexport function ɵɵdeclareLet(index: number): typeof ɵɵdeclareLet {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = getOrCreateTNode(tView, adjustedIndex, TNodeType.LetDeclaration, null, null);\n  setCurrentTNode(tNode, false);\n  store(tView, lView, adjustedIndex, UNINITIALIZED_LET);\n  return ɵɵdeclareLet;\n}\n\n/**\n * Instruction that stores the value of a `@let` declaration on the current view.\n * Returns the value to allow usage inside variable initializers.\n *\n * @codeGenApi\n */\nexport function ɵɵstoreLet<T>(value: T): T {\n  performanceMarkFeature('NgLet');\n  const tView = getTView();\n  const lView = getLView();\n  const index = getSelectedIndex();\n  store(tView, lView, index, value);\n  return value;\n}\n\n/**\n * Retrieves the value of a `@let` declaration defined in a parent view.\n *\n * @param index Index of the declaration within the view.\n *\n * @codeGenApi\n */\nexport function ɵɵreadContextLet<T>(index: number): T {\n  const contextLView = getContextLView();\n  const value = load<T>(contextLView, HEADER_OFFSET + index);\n\n  if (value === UNINITIALIZED_LET) {\n    throw new RuntimeError(\n      RuntimeErrorCode.UNINITIALIZED_LET_ACCESS,\n      ngDevMode && 'Attempting to access a @let declaration whose value is not available yet',\n    );\n  }\n\n  return value;\n}\n"]}