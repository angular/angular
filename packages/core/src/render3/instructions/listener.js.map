{"version":3,"file":"listener.js","sourceRoot":"","sources":["listener.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {EventCallback, WrappedEventCallback} from '../../event_delegation_utils';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {GlobalTargetResolver, Renderer} from '../interfaces/renderer';\nimport {LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {getCurrentDirectiveDef, getCurrentTNode, getLView, getTView} from '../state';\n\nimport {listenToOutput} from '../view/directive_outputs';\nimport {listenToDomEvent, wrapListener} from '../view/listeners';\nimport {loadComponentRenderer} from './shared';\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵlistener(\n  eventName: string,\n  listenerFn: EventCallback,\n  eventTargetResolver?: GlobalTargetResolver,\n): typeof ɵɵlistener {\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(\n    tView,\n    lView,\n    lView[RENDERER],\n    tNode,\n    eventName,\n    listenerFn,\n    eventTargetResolver,\n  );\n  return ɵɵlistener;\n}\n\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostListener(\n  eventName: string,\n  listenerFn: EventCallback,\n): typeof ɵɵsyntheticHostListener {\n  const tNode = getCurrentTNode()!;\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n\n/**\n * Adds a listener for a DOM event on the current node.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵdomListener(\n  eventName: string,\n  listenerFn: EventCallback,\n  eventTargetResolver?: GlobalTargetResolver,\n): typeof ɵɵdomListener {\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n\n  if (tNode.type & TNodeType.AnyRNode || eventTargetResolver) {\n    listenToDomEvent(\n      tNode,\n      tView,\n      lView,\n      eventTargetResolver,\n      lView[RENDERER],\n      eventName,\n      listenerFn,\n      wrapListener(tNode, lView, listenerFn),\n    );\n  }\n\n  return ɵɵdomListener;\n}\n\nexport function listenerInternal(\n  tView: TView,\n  lView: LView<{} | null>,\n  renderer: Renderer,\n  tNode: TNode,\n  eventName: string,\n  listenerFn: EventCallback,\n  eventTargetResolver?: GlobalTargetResolver,\n): void {\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  let processOutputs = true;\n  let wrappedListener: WrappedEventCallback | null = null;\n\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & TNodeType.AnyRNode || eventTargetResolver) {\n    wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n    const hasCoalescedDomEvent = listenToDomEvent(\n      tNode,\n      tView,\n      lView,\n      eventTargetResolver,\n      renderer,\n      eventName,\n      listenerFn,\n      wrappedListener,\n    );\n\n    // Context: https://github.com/angular/angular/pull/30144\n    if (hasCoalescedDomEvent) {\n      processOutputs = false;\n    }\n  }\n\n  if (processOutputs) {\n    const outputConfig = tNode.outputs?.[eventName];\n    const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];\n\n    if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {\n      for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {\n        const index = hostDirectiveOutputConfig[i] as number;\n        const lookupName = hostDirectiveOutputConfig[i + 1] as string;\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n        listenToOutput(tNode, lView, index, lookupName, eventName, wrappedListener);\n      }\n    }\n\n    if (outputConfig && outputConfig.length) {\n      for (const index of outputConfig) {\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n        listenToOutput(tNode, lView, index, eventName, eventName, wrappedListener);\n      }\n    }\n  }\n}\n"]}