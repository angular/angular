{"version":3,"file":"text.js","sourceRoot":"","sources":["text.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {validateMatchingNode} from '../../hydration/error_handling';\nimport {locateNextRNode} from '../../hydration/node_lookup_utils';\nimport {canHydrateNode, markRNodeAsClaimedByHydration} from '../../hydration/utils';\nimport {assertIndexInRange} from '../../util/assert';\nimport {assertTNodeCreationIndex} from '../assert';\nimport {createTextNode} from '../dom_node_manipulation';\nimport {TElementNode, TNode, TNodeType} from '../interfaces/node';\nimport {RText} from '../interfaces/renderer_dom';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {\n  getLView,\n  getTView,\n  lastNodeWasCreated,\n  setCurrentTNode,\n  wasLastNodeCreated,\n} from '../state';\nimport {getOrCreateTNode} from '../tnode_manipulation';\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nexport function ɵɵtext(index: number, value: string = ''): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode && assertTNodeCreationIndex(lView, index);\n\n  const tNode = tView.firstCreatePass\n    ? getOrCreateTNode(tView, adjustedIndex, TNodeType.Text, value, null)\n    : (tView.data[adjustedIndex] as TElementNode);\n\n  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\n  lView[adjustedIndex] = textNative;\n\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, textNative, tNode);\n  }\n\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n\nlet _locateOrCreateTextNode: typeof locateOrCreateTextNodeImpl = (\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  value: string,\n  index: number,\n) => {\n  lastNodeWasCreated(true);\n  return createTextNode(lView[RENDERER], value);\n};\n\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of text nodes.\n */\nfunction locateOrCreateTextNodeImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  value: string,\n  index: number,\n): RText {\n  const isNodeCreationMode = !canHydrateNode(lView, tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createTextNode(lView[RENDERER], value);\n  }\n\n  // Hydration mode, looking up an existing element in DOM.\n  const hydrationInfo = lView[HYDRATION]!;\n  const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode) as RText;\n\n  ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(textNative);\n\n  return textNative;\n}\n\nexport function enableLocateOrCreateTextNodeImpl() {\n  _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\n}\n"]}