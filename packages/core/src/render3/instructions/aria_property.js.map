{"version":3,"file":"aria_property.js","sourceRoot":"","sources":["aria_property.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAC,cAAc,EAAC,MAAM,aAAa,CAAC;AAG3C,OAAO,EAAC,eAAe,EAAC,MAAM,2BAA2B,CAAC;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,oBAAoB,CAAC;AAC5C,OAAO,EAAC,eAAe,EAAC,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAC,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAC,MAAM,UAAU,CAAC;AAChF,OAAO,EAAC,gBAAgB,EAAC,MAAM,oBAAoB,CAAC;AACpD,OAAO,EACL,iBAAiB,EACjB,uBAAuB,EACvB,mBAAmB,EACnB,sBAAsB,EACtB,4BAA4B,GAC7B,MAAM,UAAU,CAAC;AAElB;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,cAAc,CAAI,IAAY,EAAE,KAAQ;IACtD,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,YAAY,GAAG,gBAAgB,EAAE,CAAC;IACxC,IAAI,cAAc,CAAC,KAAK,EAAE,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC;QAC/C,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,gBAAgB,EAAE,CAAC;QACjC,MAAM,WAAW,GAAG,uBAAuB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAE9E,IAAI,WAAW,EAAE,CAAC;YAChB,eAAe,CAAC,KAAK,CAAC,IAAI,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YAChE,SAAS,IAAI,sBAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACxE,CAAC;aAAM,CAAC;YACN,SAAS,IAAI,eAAe,CAAC,KAAK,4BAAoB,CAAC;YACvD,MAAM,OAAO,GAAG,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAa,CAAC;YAC3D,mBAAmB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;QAED,SAAS,IAAI,4BAA4B,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;IACnF,CAAC;IACD,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {TNodeType} from '../interfaces/node';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isComponentHost} from '../interfaces/type_checks';\nimport {RENDERER} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {getNativeByTNode} from '../util/view_utils';\nimport {\n  markDirtyIfOnPush,\n  setAllInputsForProperty,\n  setElementAttribute,\n  setNgReflectProperties,\n  storePropertyBindingMetadata,\n} from './shared';\n\n/**\n * Update an ARIA attribute on a selected element.\n *\n * If the attribute name also exists as an input property on any of the element's directives, those\n * inputs will be set instead of the element attribute.\n *\n * @param name Name of the ARIA attribute (beginning with `aria-`).\n * @param value New value to write.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵariaProperty<T>(name: string, value: T): typeof ɵɵariaProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const hasSetInput = setAllInputsForProperty(tNode, tView, lView, name, value);\n\n    if (hasSetInput) {\n      isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);\n      ngDevMode && setNgReflectProperties(lView, tView, tNode, name, value);\n    } else {\n      ngDevMode && assertTNodeType(tNode, TNodeType.Element);\n      const element = getNativeByTNode(tNode, lView) as RElement;\n      setElementAttribute(lView[RENDERER], element, null, tNode.value, name, value, null);\n    }\n\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, name, bindingIndex);\n  }\n  return ɵɵariaProperty;\n}\n"]}