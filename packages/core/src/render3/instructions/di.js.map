{"version":3,"file":"di.js","sourceRoot":"","sources":["di.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAC,iBAAiB,EAAC,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAC,kCAAkC,EAAC,MAAM,wBAAwB,CAAC;AAC1E,OAAO,EAAC,QAAQ,EAAC,MAAM,iCAAiC,CAAC;AAIzD,OAAO,EAAC,eAAe,EAAC,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAAC,qBAAqB,EAAC,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAC,eAAe,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AA4BnD,MAAM,UAAU,iBAAiB,CAC/B,KAAuB,EACvB,KAAK,sCAA8B;IAEnC,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,wFAAwF;IACxF,qDAAqD;IACrD,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACnB,kDAAkD;QAClD,SAAS,IAAI,kCAAkC,CAAC,iBAAiB,CAAC,CAAC;QACnE,OAAO,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAChC,CAAC;IACD,MAAM,KAAK,GAAG,eAAe,EAAE,CAAC;IAChC,MAAM,KAAK,GAAG,qBAAqB,CACjC,KAA2B,EAC3B,KAAK,EACL,iBAAiB,CAAC,KAAK,CAAC,EACxB,KAAK,CACN,CAAC;IACF,SAAS,IAAI,eAAe,CAAC,KAAsB,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACnE,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,gBAAgB;IAC9B,MAAM,GAAG,GAAG,SAAS;QACnB,CAAC,CAAC,gEAAgE;QAClE,CAAC,CAAC,SAAS,CAAC;IACd,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AACvB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {resolveForwardRef} from '../../di';\nimport {assertInjectImplementationNotEqual} from '../../di/inject_switch';\nimport {ɵɵinject} from '../../di/injector_compatibility';\nimport {InternalInjectFlags} from '../../di/interface/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {Type} from '../../interface/type';\nimport {emitInjectEvent} from '../debug/injector_profiler';\nimport {getOrCreateInjectable} from '../di';\nimport {TDirectiveHostNode} from '../interfaces/node';\nimport {getCurrentTNode, getLView} from '../state';\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * ```ts\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ɵdir = ɵɵdefineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n *   });\n * }\n * ```\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n *\n * @codeGenApi\n */\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>): T;\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags: InternalInjectFlags): T;\nexport function ɵɵdirectiveInject<T>(\n  token: ProviderToken<T>,\n  flags = InternalInjectFlags.Default,\n): T | null {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  const value = getOrCreateInjectable<T>(\n    tNode as TDirectiveHostNode,\n    lView,\n    resolveForwardRef(token),\n    flags,\n  );\n  ngDevMode && emitInjectEvent(token as Type<unknown>, value, flags);\n  return value;\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactory(): never {\n  const msg = ngDevMode\n    ? `This constructor was not compatible with Dependency Injection.`\n    : 'invalid';\n  throw new Error(msg);\n}\n"]}