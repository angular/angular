{"version":3,"file":"view_effect_runner.js","sourceRoot":"","sources":["view_effect_runner.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,OAAO,EAAE,KAAK,EAAyB,MAAM,oBAAoB,CAAC;AAE1E,MAAM,UAAU,gBAAgB,CAAC,IAAW;IAC1C,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;QAC3B,OAAO;IACT,CAAC;IAED,iGAAiG;IACjG,SAAS;IACT,IAAI,eAAe,GAAG,IAAI,CAAC;IAE3B,OAAO,eAAe,EAAE,CAAC;QACvB,IAAI,gBAAgB,GAAG,KAAK,CAAC;QAC7B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBAClB,SAAS;YACX,CAAC;YACD,gBAAgB,GAAG,IAAI,CAAC;YAExB,2EAA2E;YAC3E,yCAAyC;YACzC,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC;gBACzD,MAAM,CAAC,GAAG,EAAE,CAAC;YACf,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;QAED,2FAA2F;QAC3F,wFAAwF;QACxF,yFAAyF;QACzF,gBAAgB;QAChB,eAAe,GAAG,gBAAgB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,+CAAoC,CAAC,CAAC;IAC5F,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EFFECTS, FLAGS, type LView, LViewFlags} from '../interfaces/view';\n\nexport function runEffectsInView(view: LView): void {\n  if (view[EFFECTS] === null) {\n    return;\n  }\n\n  // Since effects can make other effects dirty, we flush them in a loop until there are no more to\n  // flush.\n  let tryFlushEffects = true;\n\n  while (tryFlushEffects) {\n    let foundDirtyEffect = false;\n    for (const effect of view[EFFECTS]) {\n      if (!effect.dirty) {\n        continue;\n      }\n      foundDirtyEffect = true;\n\n      // `runEffectsInView` is called during change detection, and therefore runs\n      // in the Angular zone if it's available.\n      if (effect.zone === null || Zone.current === effect.zone) {\n        effect.run();\n      } else {\n        effect.zone.run(() => effect.run());\n      }\n    }\n\n    // Check if we need to continue flushing. If we didn't find any dirty effects, then there's\n    // no need to loop back. Otherwise, check the view to see if it was marked for traversal\n    // again. If so, there's a chance that one of the effects we ran caused another effect to\n    // become dirty.\n    tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & LViewFlags.HasChildViewsToRefresh);\n  }\n}\n"]}