{"version":3,"file":"asserts.js","sourceRoot":"","sources":["asserts.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,iBAAiB,EAAC,MAAM,6BAA6B,CAAC;AAE9D,OAAO,EAAC,YAAY,EAAmB,MAAM,cAAc,CAAC;AAE5D;;;;;;;GAOG;AACH,MAAM,UAAU,0BAA0B,CAAC,OAAiB,EAAE,YAAqB;IACjF,kGAAkG;IAClG,gEAAgE;IAChE,IAAI,iBAAiB,EAAE,KAAK,IAAI,EAAE,CAAC;QACjC,MAAM,IAAI,YAAY,oEAEpB,SAAS;YACP,GAAG,OAAO,CAAC,IAAI,sDACb,YAAY,CAAC,CAAC,CAAC,IAAI,YAAY,EAAE,CAAC,CAAC,CAAC,EACtC,EAAE,CACL,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getActiveConsumer} from '../../../primitives/signals';\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\n\n/**\n * Asserts that the current stack frame is not within a reactive context. Useful\n * to disallow certain code from running inside a reactive context (see {@link /api/core/rxjs-interop/toSignal toSignal})\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nexport function assertNotInReactiveContext(debugFn: Function, extraContext?: string): void {\n  // Taking a `Function` instead of a string name here prevents the un-minified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (getActiveConsumer() !== null) {\n    throw new RuntimeError(\n      RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT,\n      ngDevMode &&\n        `${debugFn.name}() cannot be called from within a reactive context.${\n          extraContext ? ` ${extraContext}` : ''\n        }`,\n    );\n  }\n}\n"]}