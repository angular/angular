{"version":3,"file":"query_execution.js","sourceRoot":"","sources":["query_execution.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '../../../primitives/signals';\nimport {LView, TView} from '../interfaces/view';\nimport {DirectiveDef, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {assertDefined} from '../../util/assert';\nimport {setCurrentQueryIndex} from '../state';\nimport {TNode} from '../interfaces/node';\nimport {isContentQueryHost} from '../interfaces/type_checks';\n\n/** Refreshes all content queries declared by directives in a given view */\nexport function refreshContentQueries(tView: TView, lView: LView): void {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      for (let i = 0; i < contentQueries.length; i += 2) {\n        const queryStartIdx = contentQueries[i];\n        const directiveDefIdx = contentQueries[i + 1];\n        if (directiveDefIdx !== -1) {\n          const directiveDef = tView.data[directiveDefIdx] as DirectiveDef<any>;\n          ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n          ngDevMode &&\n            assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n          setCurrentQueryIndex(queryStartIdx);\n          directiveDef.contentQueries!(RenderFlags.Update, lView[directiveDefIdx], directiveDefIdx);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\nexport function executeViewQueryFn<T>(\n  flags: RenderFlags,\n  viewQueryFn: ViewQueriesFunction<T>,\n  component: T,\n): void {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    viewQueryFn(flags, component);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n\nexport function executeContentQueries(tView: TView, tNode: TNode, lView: LView) {\n  if (isContentQueryHost(tNode)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const start = tNode.directiveStart;\n      const end = tNode.directiveEnd;\n      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const def = tView.data[directiveIndex] as DirectiveDef<any>;\n        if (def.contentQueries) {\n          const directiveInstance = lView[directiveIndex];\n          ngDevMode &&\n            assertDefined(\n              directiveIndex,\n              'Incorrect reference to a directive defining a content query',\n            );\n          def.contentQueries(RenderFlags.Create, directiveInstance, directiveIndex);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n"]}