{"version":3,"file":"tnode_manipulation.js","sourceRoot":"","sources":["tnode_manipulation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertEqual, assertGreaterThanOrEqual, assertNotSame} from '../util/assert';\nimport {assertTNodeForTView} from './assert';\nimport {\n  TAttributes,\n  TContainerNode,\n  TElementContainerNode,\n  TElementNode,\n  TIcuContainerNode,\n  TLetDeclarationNode,\n  TNode,\n  TNodeFlags,\n  TNodeType,\n  TProjectionNode,\n} from './interfaces/node';\nimport {TStylingRange} from './interfaces/styling';\nimport {HEADER_OFFSET, TView} from './interfaces/view';\nimport {assertPureTNodeType} from './node_assert';\nimport {\n  getCurrentParentTNode,\n  getCurrentTNodePlaceholderOk,\n  isCurrentTNodeParent,\n  isInI18nBlock,\n  isInSkipHydrationBlock,\n  setCurrentTNode,\n} from './state';\n\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param tView The current `TView`.\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Element | TNodeType.Text,\n  name: string | null,\n  attrs: TAttributes | null,\n): TElementNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Container,\n  name: string | null,\n  attrs: TAttributes | null,\n): TContainerNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Projection,\n  name: null,\n  attrs: TAttributes | null,\n): TProjectionNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.ElementContainer,\n  name: string | null,\n  attrs: TAttributes | null,\n): TElementContainerNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Icu,\n  name: null,\n  attrs: TAttributes | null,\n): TElementContainerNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.LetDeclaration,\n  name: null,\n  attrs: null,\n): TLetDeclarationNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType,\n  name: string | null,\n  attrs: TAttributes | null,\n):\n  | TElementNode\n  | TContainerNode\n  | TElementContainerNode\n  | TProjectionNode\n  | TIcuContainerNode\n  | TLetDeclarationNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType,\n  name: string | null,\n  attrs: TAttributes | null,\n):\n  | TElementNode\n  | TContainerNode\n  | TElementContainerNode\n  | TProjectionNode\n  | TIcuContainerNode\n  | TLetDeclarationNode {\n  ngDevMode &&\n    index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n    // `view_engine_compatibility` for additional context.\n    assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index] as TNode;\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= TNodeFlags.isDetached;\n    }\n  } else if (tNode.type & TNodeType.Placeholder) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode as\n    | TElementNode\n    | TContainerNode\n    | TElementContainerNode\n    | TProjectionNode\n    | TIcuContainerNode;\n}\n\nexport function createTNodeAtIndex(\n  tView: TView,\n  index: number,\n  type: TNodeType,\n  name: string | null,\n  attrs: TAttributes | null,\n) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = (tView.data[index] = createTNode(\n    tView,\n    parent as TElementNode | TContainerNode,\n    type,\n    index,\n    name,\n    attrs,\n  ));\n\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  linkTNodeInTView(tView, tNode, currentTNode, isParent);\n\n  return tNode;\n}\n\nfunction linkTNodeInTView(\n  tView: TView,\n  tNode: TNode,\n  currentTNode: TNode | null,\n  isParent: boolean,\n) {\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n}\n\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param tView `TView` to which this `TNode` belongs\n * @param tParent Parent `TNode`\n * @param type The type of the node\n * @param index The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @returns the TNode object\n */\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Container,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TContainerNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Element | TNodeType.Text,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TElementNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.ElementContainer,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TElementContainerNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Icu,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TIcuContainerNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Projection,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TProjectionNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.LetDeclaration,\n  index: number,\n  tagName: null,\n  attrs: null,\n): TLetDeclarationNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType,\n  index: number,\n  value: string | null,\n  attrs: TAttributes | null,\n): TNode {\n  ngDevMode &&\n    index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n    // `view_engine_compatibility` for additional context.\n    assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  ngDevMode && assertNotSame(attrs, undefined, \"'undefined' is not valid value for 'attrs'\");\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  let flags = 0;\n  if (isInSkipHydrationBlock()) {\n    flags |= TNodeFlags.inSkipHydrationBlock;\n  }\n\n  // TODO: would it be helpful to use a prototypal inheritance here, similar to the way we do so with signals?\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: null,\n    inputs: null,\n    hostDirectiveInputs: null,\n    outputs: null,\n    hostDirectiveOutputs: null,\n    directiveToIndex: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0 as TStylingRange,\n    styleBindings: 0 as TStylingRange,\n  };\n\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n\n  return tNode;\n}\n"]}