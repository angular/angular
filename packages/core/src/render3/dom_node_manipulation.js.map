{"version":3,"file":"dom_node_manipulation.js","sourceRoot":"","sources":["dom_node_manipulation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Renderer} from './interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from './interfaces/renderer_dom';\nimport {escapeCommentText} from '../util/dom';\nimport {assertDefined, assertString} from '../util/assert';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {TNode} from './interfaces/node';\n\nexport function createTextNode(renderer: Renderer, value: string): RText {\n  return renderer.createText(value);\n}\n\nexport function updateTextNode(renderer: Renderer, rNode: RText, value: string): void {\n  renderer.setValue(rNode, value);\n}\n\nexport function createCommentNode(renderer: Renderer, value: string): RComment {\n  return renderer.createComment(escapeCommentText(value));\n}\n\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nexport function createElementNode(\n  renderer: Renderer,\n  name: string,\n  namespace: string | null,\n): RElement {\n  return renderer.createElement(name, namespace);\n}\n\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nexport function nativeInsertBefore(\n  renderer: Renderer,\n  parent: RElement,\n  child: RNode,\n  beforeNode: RNode | null,\n  isMove: boolean,\n): void {\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\n\nexport function nativeAppendChild(renderer: Renderer, parent: RElement, child: RNode): void {\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\n\nexport function nativeAppendOrInsertBefore(\n  renderer: Renderer,\n  parent: RElement,\n  child: RNode,\n  beforeNode: RNode | null,\n  isMove: boolean,\n) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n * @param requireSynchronousElementRemoval A flag indicating if a node requires synchronous\n * removal from the DOM.\n */\nexport function nativeRemoveNode(\n  renderer: Renderer,\n  rNode: RNode,\n  isHostElement?: boolean,\n  requireSynchronousElementRemoval?: boolean,\n): void {\n  renderer.removeChild(null, rNode, isHostElement, requireSynchronousElementRemoval);\n}\n\n/**\n * Clears the contents of a given RElement.\n *\n * @param rElement the native RElement to be cleared\n */\nexport function clearElementContents(rElement: RElement): void {\n  rElement.textContent = '';\n}\n\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer: Renderer, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  renderer.setAttribute(element, 'style', newValue);\n}\n\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer: Renderer, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n}\n\n/** Sets up the static DOM attributes on an `RNode`. */\nexport function setupStaticAttributes(renderer: Renderer, element: RElement, tNode: TNode) {\n  const {mergedAttrs, classes, styles} = tNode;\n\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n"]}