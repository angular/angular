{"version":3,"file":"view_ref.js","sourceRoot":"","sources":["view_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT,\n  UseExhaustiveCheckNoChanges,\n} from '../change_detection/use_exhaustive_check_no_changes';\nimport type {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {NotificationSource} from '../change_detection/scheduling/zoneless_scheduling';\nimport type {ApplicationRef} from '../core';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport type {EmbeddedViewRef} from '../linker/view_ref';\nimport {removeFromArray} from '../util/array_utils';\nimport {assertEqual} from '../util/assert';\n\nimport {collectNativeNodes} from './collect_native_nodes';\nimport {checkNoChangesInternal, detectChangesInternal} from './instructions/change_detection';\nimport {markViewDirty} from './instructions/mark_view_dirty';\nimport {CONTAINER_HEADER_OFFSET, VIEW_REFS} from './interfaces/container';\nimport {isDestroyed, isLContainer, isRootView} from './interfaces/type_checks';\nimport {\n  CONTEXT,\n  DECLARATION_LCONTAINER,\n  FLAGS,\n  INJECTOR,\n  LView,\n  LViewFlags,\n  PARENT,\n  TVIEW,\n} from './interfaces/view';\nimport {destroyLView, detachMovedView, detachViewFromDOM} from './node_manipulation';\nimport {CheckNoChangesMode} from './state';\nimport {\n  markViewForRefresh,\n  storeLViewOnDestroy,\n  updateAncestorTraversalFlagsOnAttach,\n  requiresRefreshOrTraversal,\n} from './util/view_utils';\nimport {detachView, trackMovedView} from './view/container';\n\n// Needed due to tsickle downleveling where multiple `implements` with classes creates\n// multiple @extends in Closure annotations, which is illegal. This workaround fixes\n// the multiple @extends by making the annotation @implements instead\ninterface ChangeDetectorRefInterface extends ChangeDetectorRef {}\n\nexport class ViewRef<T> implements EmbeddedViewRef<T>, ChangeDetectorRefInterface {\n  private _appRef: ApplicationRef | null = null;\n  private _attachedToViewContainer = false;\n  private exhaustive?: boolean;\n\n  get rootNodes(): any[] {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n\n  constructor(\n    /**\n     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n     *\n     * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n     * component.\n     *\n     * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n     * view.\n     *\n     * @internal\n     */\n    public _lView: LView,\n\n    /**\n     * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n     * requested.\n     *\n     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n     */\n    private _cdRefInjectingView?: LView,\n  ) {}\n\n  get context(): T {\n    return this._lView[CONTEXT] as unknown as T;\n  }\n\n  /**\n   * @deprecated Replacing the full context object is not supported. Modify the context\n   *   directly, or consider using a `Proxy` if you need to replace the full object.\n   * // TODO(devversion): Remove this.\n   */\n  set context(value: T) {\n    if (ngDevMode) {\n      // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\n      // up for assignments on the setter. We want to let users know about the deprecated usage.\n      console.warn(\n        'Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.',\n      );\n    }\n\n    this._lView[CONTEXT] = value as unknown as {};\n  }\n\n  get destroyed(): boolean {\n    return isDestroyed(this._lView);\n  }\n\n  destroy(): void {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS] as ViewRef<unknown>[] | null;\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode &&\n            assertEqual(\n              index,\n              parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET,\n              'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.',\n            );\n          detachView(parent, index);\n          removeFromArray(viewRefs!, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n\n  onDestroy(callback: Function) {\n    storeLViewOnDestroy(this._lView, callback as () => void);\n  }\n\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```ts\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck(): void {\n    markViewDirty(this._cdRefInjectingView || this._lView, NotificationSource.MarkForCheck);\n  }\n\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```ts\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     @for(d of dataProvider.data; track $index) {\n   *        <li>Data {{d}}</li>\n   *     }\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach(): void {\n    this._lView[FLAGS] &= ~LViewFlags.Attached;\n  }\n\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```ts\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach(): void {\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n    this._lView[FLAGS] |= LViewFlags.Attached;\n  }\n\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach} for more information.\n   */\n  detectChanges(): void {\n    // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\n    // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\n    // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\n    // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\n    // in the state of the LViewFlags during template execution.\n    this._lView[FLAGS] |= LViewFlags.RefreshView;\n    detectChangesInternal(this._lView);\n  }\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges(): void {\n    // Note: we use `if (ngDevMode) { ... }` instead of an early return.\n    // ESBuild is conservative about removing dead code that follows `return;`\n    // inside a function body, so the block may remain in the bundle.\n    // Using a conditional ensures the dev-only logic is reliably tree-shaken\n    // in production builds.\n    if (ngDevMode) {\n      try {\n        this.exhaustive ??= this._lView[INJECTOR].get(\n          UseExhaustiveCheckNoChanges,\n          USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT,\n        );\n      } catch {\n        this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n      }\n      checkNoChangesInternal(this._lView, this.exhaustive);\n    }\n  }\n\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(\n        RuntimeErrorCode.VIEW_ALREADY_ATTACHED,\n        ngDevMode && 'This view is already attached directly to the ApplicationRef!',\n      );\n    }\n    this._attachedToViewContainer = true;\n  }\n\n  detachFromAppRef() {\n    this._appRef = null;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      detachMovedView(declarationContainer, this._lView);\n    }\n    detachViewFromDOM(this._lView[TVIEW], this._lView);\n  }\n\n  attachToAppRef(appRef: ApplicationRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(\n        RuntimeErrorCode.VIEW_ALREADY_ATTACHED,\n        ngDevMode && 'This view is already attached to a ViewContainer!',\n      );\n    }\n    this._appRef = appRef;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      trackMovedView(declarationContainer, this._lView);\n    }\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n  }\n}\n\n/**\n * Reports whether the given view is considered dirty according to the different marking mechanisms.\n */\nexport function isViewDirty(view: ViewRef<unknown>): boolean {\n  return requiresRefreshOrTraversal(view._lView) || !!(view._lView[FLAGS] & LViewFlags.Dirty);\n}\n\nexport function markForRefresh(view: ViewRef<unknown>): void {\n  // This function is only used by elements where _cdRefInjectingView is the same as _lView\n  markViewForRefresh(view._lView);\n}\n"]}