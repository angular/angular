{"version":3,"file":"ng_onchanges_feature.js","sourceRoot":"","sources":["ng_onchanges_feature.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InputSignalNode} from '../../authoring/input/input_signal_node';\nimport {OnChanges} from '../../interface/lifecycle_hooks';\nimport {SimpleChange, SimpleChanges} from '../../interface/simple_change';\nimport {assertString} from '../../util/assert';\nimport {EMPTY_OBJ} from '../../util/empty';\nimport {applyValueToInputField} from '../apply_value_input_field';\nimport {DirectiveDef, DirectiveDefFeature} from '../interfaces/definition';\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```ts\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nexport const ɵɵNgOnChangesFeature: () => DirectiveDefFeature = /* @__PURE__ */ (() => {\n  const ɵɵNgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;\n\n  // This option ensures that the ngOnChanges lifecycle hook will be inherited\n  // from superclasses (in InheritDefinitionFeature).\n  /** @nocollapse */\n  ɵɵNgOnChangesFeatureImpl.ngInherit = true;\n\n  return ɵɵNgOnChangesFeatureImpl;\n})();\n\nexport function NgOnChangesFeatureImpl<T>(definition: DirectiveDef<T>) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook(this: OnChanges) {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n\n  if (current) {\n    const previous = simpleChangesStore!.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore!.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore!.current = null;\n    this.ngOnChanges(current);\n  }\n}\n\nfunction ngOnChangesSetInput<T>(\n  this: DirectiveDef<T>,\n  instance: T,\n  inputSignalNode: null | InputSignalNode<unknown, unknown>,\n  value: unknown,\n  publicName: string,\n  privateName: string,\n): void {\n  const declaredName = (this.declaredInputs as {[key: string]: string})[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore =\n    getSimpleChangesStore(instance) ||\n    setSimpleChangesStore(instance, {previous: EMPTY_OBJ, current: null});\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(\n    previousChange && previousChange.currentValue,\n    value,\n    previous === EMPTY_OBJ,\n  );\n\n  applyValueToInputField(instance, inputSignalNode, privateName, value);\n}\n\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n\nfunction getSimpleChangesStore(instance: any): null | NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\n\nfunction setSimpleChangesStore(instance: any, store: NgSimpleChangesStore): NgSimpleChangesStore {\n  return (instance[SIMPLE_CHANGES_STORE] = store);\n}\n\n/**\n * Data structure which is monkey-patched on the component instance and used by `ngOnChanges`\n * life-cycle hook to track previous input values.\n */\ninterface NgSimpleChangesStore {\n  previous: SimpleChanges;\n  current: SimpleChanges | null;\n}\n"]}