{"version":3,"file":"chrome_dev_tools_performance.js","sourceRoot":"","sources":["chrome_dev_tools_performance.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isTypeProvider} from '../../di/provider_collection';\nimport {assertDefined, assertEqual} from '../../util/assert';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {setProfiler} from '../profiler';\nimport {Profiler, ProfilerEvent} from '../profiler_types';\nimport {stringifyForError} from '../util/stringify_utils';\nimport {\n  InjectorProfiler,\n  InjectorProfilerEvent,\n  InjectorProfilerEventType,\n  setInjectorProfiler,\n} from './injector_profiler';\n\ntype TimeStampName = string;\ntype DevToolsColor =\n  | 'primary'\n  | 'primary-light'\n  | 'primary-dark'\n  | 'secondary'\n  | 'secondary-light'\n  | 'secondary-dark'\n  | 'tertiary'\n  | 'tertiary-light'\n  | 'tertiary-dark'\n  | 'error';\n\ndeclare global {\n  // Providing custom console.timeStamp overload as the performance-tracking signature it is not standardized yet\n  interface Console {\n    timeStamp(\n      label: string,\n      start: TimeStampName,\n      end?: TimeStampName,\n      trackName?: string,\n      trackGroup?: string,\n      color?: DevToolsColor,\n    ): void;\n  }\n}\n\nlet changeDetectionRuns = 0;\nlet changeDetectionSyncRuns = 0;\n\nlet counter = 0;\ntype stackEntry = [ProfilerEvent | ProfilerDIEvent, number];\nconst eventsStack: stackEntry[] = [];\n\n/**\n * Enum mimicking ProfilerEvent. The idea is to have unique event identifiers for both DI and other profiling events.\n */\nconst enum ProfilerDIEvent {\n  InjectorToCreateInstanceEvent = 100,\n  InstanceCreatedByInjector = 101,\n}\n\nfunction measureStart(startEvent: ProfilerEvent | ProfilerDIEvent) {\n  eventsStack.push([startEvent, counter]);\n  console.timeStamp('Event_' + startEvent + '_' + counter++);\n}\n\nfunction measureEnd(\n  startEvent: ProfilerEvent | ProfilerDIEvent,\n  entryName: string,\n  color: DevToolsColor,\n) {\n  const top = eventsStack.pop();\n\n  assertDefined(top, 'Profiling error: could not find start event entry ' + startEvent);\n  assertEqual(\n    top[0],\n    startEvent,\n    `Profiling error: expected to see ${startEvent} event but got ${top[0]}`,\n  );\n\n  console.timeStamp(\n    entryName,\n    'Event_' + top[0] + '_' + top[1],\n    undefined,\n    '\\u{1F170}\\uFE0F Angular',\n    undefined,\n    color,\n  );\n}\n\nconst chromeDevToolsInjectorProfiler: InjectorProfiler = (event: InjectorProfilerEvent) => {\n  const eventType = event.type;\n  if (eventType === InjectorProfilerEventType.InjectorToCreateInstanceEvent) {\n    measureStart(ProfilerDIEvent.InjectorToCreateInstanceEvent);\n  } else if (eventType === InjectorProfilerEventType.InstanceCreatedByInjector) {\n    const token = event.context.token;\n    measureEnd(\n      ProfilerDIEvent.InjectorToCreateInstanceEvent,\n      getProviderTokenMeasureName(token),\n      'tertiary-dark',\n    );\n  }\n};\n\nconst devToolsProfiler: Profiler = (\n  event: ProfilerEvent,\n  instance?: {} | null,\n  eventFn?: Function,\n) => {\n  switch (event) {\n    case ProfilerEvent.BootstrapApplicationStart:\n    case ProfilerEvent.BootstrapComponentStart:\n    case ProfilerEvent.ChangeDetectionStart:\n    case ProfilerEvent.ChangeDetectionSyncStart:\n    case ProfilerEvent.AfterRenderHooksStart:\n    case ProfilerEvent.ComponentStart:\n    case ProfilerEvent.DeferBlockStateStart:\n    case ProfilerEvent.DynamicComponentStart:\n    case ProfilerEvent.TemplateCreateStart:\n    case ProfilerEvent.LifecycleHookStart:\n    case ProfilerEvent.TemplateUpdateStart:\n    case ProfilerEvent.HostBindingsUpdateStart:\n    case ProfilerEvent.OutputStart: {\n      measureStart(event);\n      break;\n    }\n    case ProfilerEvent.BootstrapApplicationEnd: {\n      measureEnd(ProfilerEvent.BootstrapApplicationStart, 'Bootstrap application', 'primary-dark');\n      break;\n    }\n    case ProfilerEvent.BootstrapComponentEnd: {\n      measureEnd(ProfilerEvent.BootstrapComponentStart, 'Bootstrap component', 'primary-dark');\n      break;\n    }\n    case ProfilerEvent.ChangeDetectionEnd: {\n      changeDetectionSyncRuns = 0;\n      measureEnd(\n        ProfilerEvent.ChangeDetectionStart,\n        'Change detection ' + changeDetectionRuns++,\n        'primary-dark',\n      );\n      break;\n    }\n\n    case ProfilerEvent.ChangeDetectionSyncEnd: {\n      measureEnd(\n        ProfilerEvent.ChangeDetectionSyncStart,\n        'Synchronization ' + changeDetectionSyncRuns++,\n        'primary',\n      );\n      break;\n    }\n    case ProfilerEvent.AfterRenderHooksEnd: {\n      measureEnd(ProfilerEvent.AfterRenderHooksStart, 'After render hooks', 'primary');\n      break;\n    }\n\n    case ProfilerEvent.ComponentEnd: {\n      const typeName = getComponentMeasureName(instance!);\n      measureEnd(ProfilerEvent.ComponentStart, typeName, 'primary-light');\n      break;\n    }\n    case ProfilerEvent.DeferBlockStateEnd: {\n      measureEnd(ProfilerEvent.DeferBlockStateStart, 'Defer block', 'primary-dark');\n      break;\n    }\n    case ProfilerEvent.DynamicComponentEnd: {\n      measureEnd(ProfilerEvent.DynamicComponentStart, 'Dynamic component creation', 'primary-dark');\n      break;\n    }\n    case ProfilerEvent.TemplateUpdateEnd: {\n      measureEnd(\n        ProfilerEvent.TemplateUpdateStart,\n        stringifyForError(eventFn) + ' (update)',\n        'secondary-dark',\n      );\n      break;\n    }\n    case ProfilerEvent.TemplateCreateEnd: {\n      measureEnd(\n        ProfilerEvent.TemplateCreateStart,\n        stringifyForError(eventFn) + ' (create)',\n        'secondary',\n      );\n      break;\n    }\n    case ProfilerEvent.HostBindingsUpdateEnd: {\n      measureEnd(ProfilerEvent.HostBindingsUpdateStart, 'HostBindings', 'secondary-dark');\n      break;\n    }\n    case ProfilerEvent.LifecycleHookEnd: {\n      const typeName = getComponentMeasureName(instance!);\n      measureEnd(\n        ProfilerEvent.LifecycleHookStart,\n        `${typeName}:${stringifyForError(eventFn)}`,\n        'tertiary',\n      );\n      break;\n    }\n    case ProfilerEvent.OutputEnd: {\n      measureEnd(ProfilerEvent.OutputStart, stringifyForError(eventFn), 'tertiary-light');\n      break;\n    }\n    default: {\n      throw new Error('Unexpected profiling event type: ' + event);\n    }\n  }\n};\n\nfunction getComponentMeasureName(instance: {}) {\n  return instance.constructor.name;\n}\n\nfunction getProviderTokenMeasureName<T>(token: any) {\n  if (isTypeProvider(token)) {\n    return token.name;\n  } else if (token.provide != null) {\n    return getProviderTokenMeasureName(token.provide);\n  }\n  return token.toString();\n}\n\n/**\n * Start listening to the Angular's internal performance-related events and route those to the Chrome DevTools performance panel.\n * This enables Angular-specific data visualization when recording a performance profile directly in the Chrome DevTools.\n *\n * Note: integration is enabled in the development mode only, this operation is noop in the production mode.\n *\n * @experimental\n *\n * @returns a function that can be invoked to stop sending profiling data.\n */\nexport function enableProfiling() {\n  performanceMarkFeature('Chrome DevTools profiling');\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const removeInjectorProfiler = setInjectorProfiler(chromeDevToolsInjectorProfiler);\n    const removeProfiler = setProfiler(devToolsProfiler);\n\n    return () => {\n      removeInjectorProfiler();\n      removeProfiler();\n    };\n  }\n  return () => {};\n}\n"]}