{"version":3,"file":"compiler_facade.js","sourceRoot":"","sources":["compiler_facade.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAC,MAAM,EAAC,MAAM,gBAAgB,CAAC;AAEtC,cAAc,6BAA6B,CAAC;AAa5C,MAAM,UAAU,iBAAiB,CAAC,OAAgC;IAChE,MAAM,QAAQ,GAA2B,MAAM,CAAC,IAAI,CAAC,CAAC;IACtD,IAAI,QAAQ,IAAI,QAAQ,CAAC,eAAe,EAAE,CAAC;QACzC,OAAO,QAAQ,CAAC,eAAe,CAAC;IAClC,CAAC;IAED,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE,CAAC;QAClD,wFAAwF;QACxF,WAAW;QACX,OAAO,CAAC,KAAK,CAAC,8BAA8B,OAAO,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QAE1E,IAAI,OAAO,GAAG,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,IAAI,8FAA8F,CAAC;QACtJ,IAAI,OAAO,CAAC,KAAK,gDAAwC,EAAE,CAAC;YAC1D,OAAO,IAAI,OAAO,OAAO,CAAC,IAAI,2DAA2D,CAAC;YAC1F,OAAO,IAAI,4GAA4G,CAAC;YACxH,OAAO,IAAI,IAAI,CAAC;YAChB,OAAO,IAAI,4FAA4F,CAAC;QAC1G,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,6FAA6F,CAAC;QAC3G,CAAC;QACD,OAAO,IAAI,8IAA8I,CAAC;QAC1J,OAAO,IAAI,2FAA2F,CAAC;QACvG,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC9C,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {global} from '../util/global';\nimport {CompilerFacade, ExportedCompilerFacade, Type} from './compiler_facade_interface';\nexport * from './compiler_facade_interface';\n\nexport const enum JitCompilerUsage {\n  Decorator,\n  PartialDeclaration,\n}\n\ninterface JitCompilerUsageRequest {\n  usage: JitCompilerUsage;\n  kind: 'directive' | 'component' | 'pipe' | 'injectable' | 'NgModule';\n  type: Type;\n}\n\nexport function getCompilerFacade(request: JitCompilerUsageRequest): CompilerFacade {\n  const globalNg: ExportedCompilerFacade = global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === JitCompilerUsage.PartialDeclaration) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n"]}