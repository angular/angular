{"version":3,"file":"resource_loading.js","sourceRoot":"","sources":["resource_loading.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\n\nimport type {Component} from './directives';\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```ts\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nexport function resolveComponentResources(\n  resourceResolver: (url: string) => Promise<string | {text(): Promise<string>; status?: number}>,\n): Promise<void> {\n  // Store all promises which are fetching the resources.\n  const componentResolved: Promise<void>[] = [];\n\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map<string, Promise<string>>();\n  function cachedResourceResolve(url: string): Promise<string> {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, (promise = resp.then((res) => unwrapResponse(url, res))));\n    }\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach((component: Component, type: Type<any>) => {\n    const promises: Promise<void>[] = [];\n    if (component.templateUrl) {\n      promises.push(\n        cachedResourceResolve(component.templateUrl).then((template) => {\n          component.template = template;\n        }),\n      );\n    }\n    const styles =\n      typeof component.styles === 'string' ? [component.styles] : component.styles || [];\n    component.styles = styles;\n\n    if (component.styleUrl && component.styleUrls?.length) {\n      throw new Error(\n        '@Component cannot define both `styleUrl` and `styleUrls`. ' +\n          'Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple',\n      );\n    } else if (component.styleUrls?.length) {\n      const styleOffset = component.styles.length;\n      const styleUrls = component.styleUrls;\n      component.styleUrls.forEach((styleUrl, index) => {\n        styles.push(''); // pre-allocate array.\n        promises.push(\n          cachedResourceResolve(styleUrl).then((style) => {\n            styles[styleOffset + index] = style;\n            styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n            if (styleUrls.length == 0) {\n              component.styleUrls = undefined;\n            }\n          }),\n        );\n      });\n    } else if (component.styleUrl) {\n      promises.push(\n        cachedResourceResolve(component.styleUrl).then((style) => {\n          styles.push(style);\n          component.styleUrl = undefined;\n        }),\n      );\n    }\n\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\n\nlet componentResourceResolutionQueue = new Map<Type<any>, Component>();\n\n// Track when existing Éµcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set<Type<any>>();\n\nexport function maybeQueueResolutionOfComponentResources(type: Type<any>, metadata: Component) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\n\nexport function isComponentDefPendingResolution(type: Type<any>): boolean {\n  return componentDefPendingResolution.has(type);\n}\n\nexport function componentNeedsResolution(component: Component): boolean {\n  return !!(\n    (component.templateUrl && !component.hasOwnProperty('template')) ||\n    (component.styleUrls && component.styleUrls.length) ||\n    component.styleUrl\n  );\n}\nexport function clearResolutionOfComponentResourcesQueue(): Map<Type<any>, Component> {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\n\nexport function restoreComponentResolutionQueue(queue: Map<Type<any>, Component>): void {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\n\nexport function isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\n\nfunction unwrapResponse(\n  url: string,\n  response: string | {text(): Promise<string>; status?: number},\n): string | Promise<string> {\n  if (typeof response === 'string') {\n    return response;\n  }\n  if (response.status !== undefined && response.status !== 200) {\n    return Promise.reject(\n      new RuntimeError(\n        RuntimeErrorCode.EXTERNAL_RESOURCE_LOADING_FAILED,\n        ngDevMode && `Could not load resource: ${url}. Response status: ${response.status}`,\n      ),\n    );\n  }\n  return response.text();\n}\n\nfunction componentDefResolved(type: Type<any>): void {\n  componentDefPendingResolution.delete(type);\n}\n"]}