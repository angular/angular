{"version":3,"file":"output_ref.js","sourceRoot":"","sources":["output_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DestroyRef} from '../../linker/destroy_ref';\n\n/**\n * Function that can be used to manually clean up a\n * programmatic {@link OutputRef#subscribe} subscription.\n *\n * Note: Angular will automatically clean up subscriptions\n * when the directive/component of the output is destroyed.\n *\n * @publicAPI\n */\nexport interface OutputRefSubscription {\n  unsubscribe(): void;\n}\n\n/**\n * A reference to an Angular output.\n *\n * @publicAPI\n */\nexport interface OutputRef<T> {\n  /**\n   * Registers a callback that is invoked whenever the output\n   * emits a new value of type `T`.\n   *\n   * Angular will automatically clean up the subscription when\n   * the directive/component of the output is destroyed.\n   */\n  subscribe(callback: (value: T) => void): OutputRefSubscription;\n\n  /**\n   * Reference to the `DestroyRef` of the directive/component declaring\n   * the output. The `DestroyRef` is captured so that helpers like\n   * the `outputToObservable` can complete the observable upon destroy.\n   *\n   * Note: May be `undefined` in cases of `EventEmitter` where\n   * we do not want to add a dependency on an injection context.\n   *\n   * @internal\n   */\n  destroyRef: DestroyRef | undefined;\n}\n"]}