{"version":3,"file":"promise_with_resolvers.js","sourceRoot":"","sources":["promise_with_resolvers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAwBH;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB;IAKlC,IAAI,OAA6C,CAAC;IAClD,IAAI,MAA+B,CAAC;IAEpC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,OAAO,GAAG,GAAG,CAAC;QACd,MAAM,GAAG,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,OAAO,EAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC;AACpC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * TODO(incremental-hydration): Remove this file entirely once PromiseWithResolvers lands in stable\n * node / TS.\n */\nexport interface PromiseWithResolvers<T> {\n  promise: Promise<T>;\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason?: any) => void;\n}\n\nexport interface PromiseConstructor {\n  /**\n   * Creates a new Promise and returns it in an object, along with its resolve and reject functions.\n   * @returns An object with the properties `promise`, `resolve`, and `reject`.\n   *\n   * ```ts\n   * const { promise, resolve, reject } = Promise.withResolvers<T>();\n   * ```\n   */\n  withResolvers<T>(): PromiseWithResolvers<T>;\n}\n\n/**\n * Replace with `Promise.withResolvers()` once it's available.\n * NET September 2026\n *\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers.\n */\nexport function promiseWithResolvers<T>(): {\n  promise: Promise<T>;\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason?: any) => void;\n} {\n  let resolve!: (value: T | PromiseLike<T>) => void;\n  let reject!: (reason?: any) => void;\n\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  return {promise, resolve, reject};\n}\n"]}