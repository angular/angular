{"version":3,"file":"async-stack-tagging.js","sourceRoot":"","sources":["async-stack-tagging.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAcH,MAAM,OAAO,yBAAyB;IAGpC,YACE,UAAkB,EAClB,+BAAwD,OAAc;QAEtE,IAAI,CAAC,IAAI,GAAG,wBAAwB,GAAG,UAAU,CAAC;QAClD,IAAI,CAAC,UAAU,GAAG,4BAA4B,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7E,CAAC;IAKD,cAAc,CACZ,QAAsB,EACtB,QAAc,EACd,MAAY,EACZ,IAAqB;QAErB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACzE,OAAO,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY,CACV,QAAsB,EACtB,YAAkB,EAClB,UAAgB,EAChB,IAAqB,EACrB,SAAc,EACd,SAAiB;QAEjB,IAAI,GAAG,CAAC;QACR,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAChG,CAAC;aAAM,CAAC;YACN,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACpE,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\ninterface ConsoleWithAsyncTagging {\n  createTask(name: string): ConsoleTask;\n}\n\ninterface ConsoleTask {\n  run<T>(f: () => T): T;\n}\n\ninterface ZoneConsoleTask extends Task {\n  consoleTask?: ConsoleTask;\n}\n\nexport class AsyncStackTaggingZoneSpec implements ZoneSpec {\n  createTask: ConsoleWithAsyncTagging['createTask'];\n\n  constructor(\n    namePrefix: string,\n    consoleAsyncStackTaggingImpl: ConsoleWithAsyncTagging = console as any,\n  ) {\n    this.name = 'asyncStackTagging for ' + namePrefix;\n    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\n  }\n\n  // ZoneSpec implementation below.\n  name: string;\n\n  onScheduleTask(\n    delegate: ZoneDelegate,\n    _current: Zone,\n    target: Zone,\n    task: ZoneConsoleTask,\n  ): Task {\n    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n    return delegate.scheduleTask(target, task);\n  }\n\n  onInvokeTask(\n    delegate: ZoneDelegate,\n    _currentZone: Zone,\n    targetZone: Zone,\n    task: ZoneConsoleTask,\n    applyThis: any,\n    applyArgs?: any[],\n  ) {\n    let ret;\n    if (task.consoleTask) {\n      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n    } else {\n      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    }\n    return ret;\n  }\n}\n"]}