{"version":3,"file":"ng_zone_scheduling.js","sourceRoot":"","sources":["ng_zone_scheduling.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subscription} from 'rxjs';\n\nimport {ApplicationRef, ApplicationRefDirtyFlags} from '../../application/application_ref';\nimport {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  inject,\n  Injectable,\n  InjectionToken,\n  makeEnvironmentProviders,\n  StaticProvider,\n} from '../../di';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {PendingTasksInternal} from '../../pending_tasks_internal';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {NgZone} from '../../zone';\nimport {InternalNgZoneOptions} from '../../zone/ng_zone';\n\nimport {\n  ChangeDetectionScheduler,\n  ZONELESS_ENABLED,\n  SCHEDULE_IN_ROOT_ZONE,\n} from './zoneless_scheduling';\nimport {SCHEDULE_IN_ROOT_ZONE_DEFAULT} from './flags';\nimport {INTERNAL_APPLICATION_ERROR_HANDLER} from '../../error_handler';\n\n@Injectable({providedIn: 'root'})\nexport class NgZoneChangeDetectionScheduler {\n  private readonly zone = inject(NgZone);\n  private readonly changeDetectionScheduler = inject(ChangeDetectionScheduler);\n  private readonly applicationRef = inject(ApplicationRef);\n  private readonly applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n\n  private _onMicrotaskEmptySubscription?: Subscription;\n\n  initialize(): void {\n    if (this._onMicrotaskEmptySubscription) {\n      return;\n    }\n\n    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        // `onMicroTaskEmpty` can happen _during_ the zoneless scheduler change detection because\n        // zone.run(() => {}) will result in `checkStable` at the end of the `zone.run` closure\n        // and emit `onMicrotaskEmpty` synchronously if run coalsecing is false.\n        if (this.changeDetectionScheduler.runningTick) {\n          return;\n        }\n        this.zone.run(() => {\n          try {\n            this.applicationRef.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeGlobal;\n            this.applicationRef._tick();\n          } catch (e) {\n            this.applicationErrorHandler(e);\n          }\n        });\n      },\n    });\n  }\n\n  ngOnDestroy() {\n    this._onMicrotaskEmptySubscription?.unsubscribe();\n  }\n}\n\n/**\n * Internal token used to verify that `provideZoneChangeDetection` is not used\n * with the bootstrapModule API.\n */\nexport const PROVIDED_NG_ZONE = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'provideZoneChangeDetection token' : '',\n  {factory: () => false},\n);\n\nexport function internalProvideZoneChangeDetection({\n  ngZoneFactory,\n  scheduleInRootZone,\n}: {\n  ngZoneFactory?: () => NgZone;\n  scheduleInRootZone?: boolean;\n}): StaticProvider[] {\n  ngZoneFactory ??= () =>\n    new NgZone({...getNgZoneOptions(), scheduleInRootZone} as InternalNgZoneOptions);\n  return [\n    {provide: ZONELESS_ENABLED, useValue: false},\n    {provide: NgZone, useFactory: ngZoneFactory},\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {\n          optional: true,\n        });\n        if (\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          ngZoneChangeDetectionScheduler === null\n        ) {\n          throw new RuntimeError(\n            RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP,\n            `A required Injectable was not found in the dependency injection tree. ` +\n              'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.',\n          );\n        }\n        return () => ngZoneChangeDetectionScheduler!.initialize();\n      },\n    },\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const service = inject(ZoneStablePendingTask);\n        return () => {\n          service.initialize();\n        };\n      },\n    },\n    {\n      provide: SCHEDULE_IN_ROOT_ZONE,\n      useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT,\n    },\n  ];\n}\n\n/**\n * Provides `NgZone`-based change detection for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * `NgZone` is already provided in applications by default. This provider allows you to configure\n * options like `eventCoalescing` in the `NgZone`.\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\n * `BootstrapOptions` instead.\n *\n * @usageNotes\n * ```ts\n * bootstrapApplication(MyApp, {providers: [\n *   provideZoneChangeDetection({eventCoalescing: true}),\n * ]});\n * ```\n *\n * @publicApi\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\n * @see {@link NgZoneOptions}\n */\nexport function provideZoneChangeDetection(options?: NgZoneOptions): EnvironmentProviders {\n  const scheduleInRootZone = (options as any)?.scheduleInRootZone;\n  const zoneProviders = internalProvideZoneChangeDetection({\n    ngZoneFactory: () => {\n      const ngZoneOptions = getNgZoneOptions(options);\n      ngZoneOptions.scheduleInRootZone = scheduleInRootZone;\n      if (ngZoneOptions.shouldCoalesceEventChangeDetection) {\n        performanceMarkFeature('NgZone_CoalesceEvent');\n      }\n      return new NgZone(ngZoneOptions);\n    },\n    scheduleInRootZone,\n  });\n  return makeEnvironmentProviders([{provide: PROVIDED_NG_ZONE, useValue: true}, zoneProviders]);\n}\n\n/**\n * Used to configure event and run coalescing with `provideZoneChangeDetection`.\n *\n * @publicApi\n *\n * @see {@link provideZoneChangeDetection}\n */\nexport interface NgZoneOptions {\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * ```html\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   * ```\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to trigger\n   * change detection only once.\n   *\n   * By default, this option is set to false, meaning events will\n   * not be coalesced, and change detection will be triggered multiple times.\n   * If this option is set to true, change detection will be triggered\n   * once in the scenario described above.\n   */\n  eventCoalescing?: boolean;\n\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   * ```ts\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   * ```\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  runCoalescing?: boolean;\n}\n\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nexport function getNgZoneOptions(options?: NgZoneOptions): InternalNgZoneOptions {\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,\n    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false,\n  };\n}\n\n@Injectable({providedIn: 'root'})\nexport class ZoneStablePendingTask {\n  private readonly subscription = new Subscription();\n  private initialized = false;\n  private readonly zone = inject(NgZone);\n  private readonly pendingTasks = inject(PendingTasksInternal);\n\n  initialize() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    let task: number | null = null;\n    if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n      task = this.pendingTasks.add();\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.subscription.add(\n        this.zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          queueMicrotask(() => {\n            if (\n              task !== null &&\n              !this.zone.hasPendingMacrotasks &&\n              !this.zone.hasPendingMicrotasks\n            ) {\n              this.pendingTasks.remove(task);\n              task = null;\n            }\n          });\n        }),\n      );\n    });\n\n    this.subscription.add(\n      this.zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        task ??= this.pendingTasks.add();\n      }),\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n"]}