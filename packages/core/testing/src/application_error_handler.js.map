{"version":3,"file":"application_error_handler.js","sourceRoot":"","sources":["application_error_handler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,mBAAmB,EAAC,MAAM,gBAAgB,CAAC;AAE7F,MAAM,CAAC,MAAM,kCAAkC,GAAG,IAAI,CAAC;AAGhD,IAAM,8BAA8B,GAApC,MAAM,8BAA8B;IAApC;QACY,SAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;QACtB,aAAQ,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAE/C,8BAAyB,GAA8B,IAAI,GAAG,EAAE,CAAC;IAwB5E,CAAC;IAtBC,WAAW,CAAC,CAAU;QACpB,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE;gBAC/B,IAAI,CAAC,gBAAgB,KAArB,IAAI,CAAC,gBAAgB,GAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,EAAC;gBAC1D,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,SAAkB,EAAE,CAAC;YAC5B,CAAC,GAAG,SAAS,CAAC;QAChB,CAAC;QAED,0FAA0F;QAC1F,wEAAwE;QACxE,gDAAgD;QAChD,IAAI,IAAI,CAAC,yBAAyB,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;YAC5C,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,EAAE,CAAC;gBACzD,EAAE,CAAC,CAAC,CAAC,CAAC;YACR,CAAC;YACD,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;QACzC,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;CACF,CAAA;AA5BY,8BAA8B;IAD1C,UAAU,EAAE;GACA,8BAA8B,CA4B1C","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ErrorHandler, inject, NgZone, Injectable, EnvironmentInjector} from '../../src/core';\n\nexport const RETHROW_APPLICATION_ERRORS_DEFAULT = true;\n\n@Injectable()\nexport class TestBedApplicationErrorHandler {\n  private readonly zone = inject(NgZone);\n  private readonly injector = inject(EnvironmentInjector);\n  private userErrorHandler?: ErrorHandler;\n  readonly whenStableRejectFunctions: Set<(e: unknown) => void> = new Set();\n\n  handleError(e: unknown) {\n    try {\n      this.zone.runOutsideAngular(() => {\n        this.userErrorHandler ??= this.injector.get(ErrorHandler);\n        this.userErrorHandler.handleError(e);\n      });\n    } catch (userError: unknown) {\n      e = userError;\n    }\n\n    // Instead of throwing the error when there are outstanding `fixture.whenStable` promises,\n    // reject those promises with the error. This allows developers to write\n    // expectAsync(fix.whenStable()).toBeRejected();\n    if (this.whenStableRejectFunctions.size > 0) {\n      for (const fn of this.whenStableRejectFunctions.values()) {\n        fn(e);\n      }\n      this.whenStableRejectFunctions.clear();\n    } else {\n      throw e;\n    }\n  }\n}\n"]}