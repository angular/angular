{"version":3,"file":"navigation_types.js","sourceRoot":"","sources":["navigation_types.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// TODO: Figure out how to use the types from NPM in the public API\n\nexport interface NavigationEventMap {\n  navigate: NavigateEvent;\n  navigatesuccess: Event;\n  navigateerror: ErrorEvent;\n  currententrychange: NavigationCurrentEntryChangeEvent;\n}\n\nexport interface NavigationResult {\n  committed: Promise<NavigationHistoryEntry>;\n  finished: Promise<NavigationHistoryEntry>;\n}\n\nexport declare class Navigation extends EventTarget {\n  entries(): NavigationHistoryEntry[];\n  readonly currentEntry: NavigationHistoryEntry | null;\n  updateCurrentEntry(options: NavigationUpdateCurrentEntryOptions): void;\n  readonly transition: NavigationTransition | null;\n\n  readonly canGoBack: boolean;\n  readonly canGoForward: boolean;\n\n  navigate(url: string, options?: NavigationNavigateOptions): NavigationResult;\n  reload(options?: NavigationReloadOptions): NavigationResult;\n\n  traverseTo(key: string, options?: NavigationOptions): NavigationResult;\n  back(options?: NavigationOptions): NavigationResult;\n  forward(options?: NavigationOptions): NavigationResult;\n\n  onnavigate: ((this: Navigation, ev: NavigateEvent) => any) | null;\n  onnavigatesuccess: ((this: Navigation, ev: Event) => any) | null;\n  onnavigateerror: ((this: Navigation, ev: ErrorEvent) => any) | null;\n  oncurrententrychange: ((this: Navigation, ev: NavigationCurrentEntryChangeEvent) => any) | null;\n\n  addEventListener<K extends keyof NavigationEventMap>(\n    type: K,\n    listener: (this: Navigation, ev: NavigationEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends keyof NavigationEventMap>(\n    type: K,\n    listener: (this: Navigation, ev: NavigationEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;\n}\n\nexport declare class NavigationTransition {\n  readonly navigationType: NavigationTypeString;\n  readonly from: NavigationHistoryEntry;\n  readonly finished: Promise<void>;\n  readonly committed: Promise<void>;\n}\n\nexport interface NavigationHistoryEntryEventMap {\n  dispose: Event;\n}\n\nexport declare class NavigationHistoryEntry extends EventTarget {\n  readonly key: string;\n  readonly id: string;\n  readonly url: string | null;\n  readonly index: number;\n  readonly sameDocument: boolean;\n\n  getState(): unknown;\n\n  ondispose: ((this: NavigationHistoryEntry, ev: Event) => any) | null;\n\n  addEventListener<K extends keyof NavigationHistoryEntryEventMap>(\n    type: K,\n    listener: (this: NavigationHistoryEntry, ev: NavigationHistoryEntryEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  removeEventListener<K extends keyof NavigationHistoryEntryEventMap>(\n    type: K,\n    listener: (this: NavigationHistoryEntry, ev: NavigationHistoryEntryEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;\n}\n\nexport type NavigationTypeString = 'reload' | 'push' | 'replace' | 'traverse';\n\nexport interface NavigationUpdateCurrentEntryOptions {\n  state: unknown;\n}\n\nexport interface NavigationOptions {\n  info?: unknown;\n}\n\nexport interface NavigationNavigateOptions extends NavigationOptions {\n  state?: unknown;\n  history?: 'auto' | 'push' | 'replace';\n}\n\nexport interface NavigationReloadOptions extends NavigationOptions {\n  state?: unknown;\n}\n\nexport declare class NavigationCurrentEntryChangeEvent extends Event {\n  constructor(type: string, eventInit?: NavigationCurrentEntryChangeEventInit);\n\n  readonly navigationType: NavigationTypeString | null;\n  readonly from: NavigationHistoryEntry;\n}\n\nexport interface NavigationCurrentEntryChangeEventInit extends EventInit {\n  navigationType?: NavigationTypeString | null;\n  from: NavigationHistoryEntry;\n}\n\nexport declare class NavigateEvent extends Event {\n  constructor(type: string, eventInit?: NavigateEventInit);\n\n  readonly navigationType: NavigationTypeString;\n  readonly canIntercept: boolean;\n  readonly userInitiated: boolean;\n  readonly hashChange: boolean;\n  readonly destination: NavigationDestination;\n  readonly signal: AbortSignal;\n  readonly formData: FormData | null;\n  readonly downloadRequest: string | null;\n  readonly info?: unknown;\n\n  intercept(options?: NavigationInterceptOptions): void;\n  scroll(): void;\n}\n\nexport interface NavigateEventInit extends EventInit {\n  navigationType?: NavigationTypeString;\n  canIntercept?: boolean;\n  userInitiated?: boolean;\n  hashChange?: boolean;\n  destination: NavigationDestination;\n  signal: AbortSignal;\n  formData?: FormData | null;\n  downloadRequest?: string | null;\n  info?: unknown;\n}\n\nexport interface NavigationInterceptOptions {\n  handler?: () => Promise<void>;\n  focusReset?: 'after-transition' | 'manual';\n  scroll?: 'after-transition' | 'manual';\n}\n\nexport declare class NavigationDestination {\n  readonly url: string;\n  readonly key: string | null;\n  readonly id: string | null;\n  readonly index: number;\n  readonly sameDocument: boolean;\n\n  getState(): unknown;\n}\n"]}