{"version":3,"file":"a11y_click.js","sourceRoot":"","sources":["a11y_click.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,QAAQ,MAAM,SAAS,CAAC;AACpC,OAAO,KAAK,YAAY,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAC,SAAS,EAAC,MAAM,cAAc,CAAC;AAEvC;;;GAGG;AACH,MAAM,UAAU,2BAA2B,CAAC,SAAiC;IAC3E,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;QACjE,OAAO;IACT,CAAC;IACD,YAAY,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9C,wEAAwE;IACxE,YAAY;IACZ,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CAAC,SAAiC;IAC1E,IACE,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC;QACxC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC1D,CAAC,QAAQ,CAAC,2CAA2C,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAC1F,CAAC;QACD,OAAO;IACT,CAAC;IACD,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CACrC,aAAsB,EACtB,SAAiC,EACjC,SAA8C;IAE9C;IACE,iEAAiE;IACjE,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;QACjC,8CAA8C;QAC9C,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC,KAAK;QACxD,kCAAkC;QAClC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC;QACvC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,SAAS,EAC5C,CAAC;QACD,OAAO;IACT,CAAC;IACD,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;IAC1D,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,SAAS,CAAE,EAAE,aAAa,CAAC,CAAC;AACpF,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as eventLib from './event';\nimport * as eventInfoLib from './event_info';\nimport {EventType} from './event_type';\n\n/**\n * Update `EventInfo` to be `eventType = 'click'` and sets `a11yClickKey` if it\n * is a a11y click.\n */\nexport function updateEventInfoForA11yClick(eventInfo: eventInfoLib.EventInfo) {\n  if (!eventLib.isActionKeyEvent(eventInfoLib.getEvent(eventInfo))) {\n    return;\n  }\n  eventInfoLib.setA11yClickKey(eventInfo, true);\n  // A 'click' triggered by a DOM keypress should be mapped to the 'click'\n  // jsaction.\n  eventInfoLib.setEventType(eventInfo, EventType.CLICK);\n}\n\n/**\n * Call `preventDefault` on an a11y click if it is space key or to prevent the\n * browser's default action for native HTML controls.\n */\nexport function preventDefaultForA11yClick(eventInfo: eventInfoLib.EventInfo) {\n  if (\n    !eventInfoLib.getA11yClickKey(eventInfo) ||\n    (!eventLib.isSpaceKeyEvent(eventInfoLib.getEvent(eventInfo)) &&\n      !eventLib.shouldCallPreventDefaultOnNativeHtmlControl(eventInfoLib.getEvent(eventInfo)))\n  ) {\n    return;\n  }\n  eventLib.preventDefault(eventInfoLib.getEvent(eventInfo));\n}\n\n/**\n * Sets the `action` to `clickonly` for a click event that is not an a11y click\n * and if there is not already a click action.\n */\nexport function populateClickOnlyAction(\n  actionElement: Element,\n  eventInfo: eventInfoLib.EventInfo,\n  actionMap: {[key: string]: string | undefined},\n) {\n  if (\n    // If there's already an action, don't attempt to set a CLICKONLY\n    eventInfoLib.getAction(eventInfo) ||\n    // Only attempt CLICKONLY if the type is CLICK\n    eventInfoLib.getEventType(eventInfo) !== EventType.CLICK ||\n    // a11y clicks are never CLICKONLY\n    eventInfoLib.getA11yClickKey(eventInfo) ||\n    actionMap[EventType.CLICKONLY] === undefined\n  ) {\n    return;\n  }\n  eventInfoLib.setEventType(eventInfo, EventType.CLICKONLY);\n  eventInfoLib.setAction(eventInfo, actionMap[EventType.CLICKONLY]!, actionElement);\n}\n"]}