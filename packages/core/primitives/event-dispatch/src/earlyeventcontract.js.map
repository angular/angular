{"version":3,"file":"earlyeventcontract.js","sourceRoot":"","sources":["earlyeventcontract.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {createEventInfoFromParameters, EventInfo} from './event_info';\n\nexport declare interface EarlyJsactionDataContainer {\n  _ejsa?: EarlyJsactionData;\n  _ejsas?: {[appId: string]: EarlyJsactionData | undefined};\n}\n\ndeclare global {\n  interface Window {\n    _ejsa?: EarlyJsactionData;\n    _ejsas?: {[appId: string]: EarlyJsactionData | undefined};\n  }\n}\n\n/**\n * Defines the early jsaction data types.\n */\nexport declare interface EarlyJsactionData {\n  /** List used to keep track of the early JSAction event types. */\n  et: string[];\n\n  /** List used to keep track of the early JSAction capture event types. */\n  etc: string[];\n\n  /** Early JSAction handler for all events. */\n  h: (event: Event) => void;\n\n  /** Dispatcher handler. Initializes to populating `q`. */\n  d: (eventInfo: EventInfo) => void;\n\n  /** List used to push `EventInfo` objects if the dispatcher is not registered. */\n  q: EventInfo[];\n\n  /** Container for listening to events. */\n  c: HTMLElement;\n}\n\n/**\n * EarlyEventContract intercepts events in the bubbling phase at the\n * boundary of the document body. This mapping will be passed to the\n * late-loaded EventContract.\n */\nexport class EarlyEventContract {\n  constructor(\n    private readonly dataContainer: EarlyJsactionDataContainer = window,\n    container = window.document.documentElement,\n  ) {\n    dataContainer._ejsa = createEarlyJsactionData(container);\n  }\n\n  /**\n   * Installs a list of event types for container .\n   */\n  addEvents(types: string[], capture?: boolean) {\n    addEvents(this.dataContainer._ejsa!, types, capture);\n  }\n}\n\n/** Creates an `EarlyJsactionData` object. */\nexport function createEarlyJsactionData(container: HTMLElement) {\n  const q: EventInfo[] = [];\n  const d = (eventInfo: EventInfo) => {\n    q.push(eventInfo);\n  };\n  const h = (event: Event) => {\n    d(\n      createEventInfoFromParameters(\n        event.type,\n        event,\n        event.target as Element,\n        container,\n        Date.now(),\n      ),\n    );\n  };\n  return {\n    c: container,\n    q,\n    et: [],\n    etc: [],\n    d,\n    h,\n  };\n}\n\n/** Add all the events to the container stored in the `EarlyJsactionData`. */\nexport function addEvents(\n  earlyJsactionData: EarlyJsactionData,\n  types: string[],\n  capture?: boolean,\n) {\n  for (let i = 0; i < types.length; i++) {\n    const eventType = types[i];\n    const eventTypes = capture ? earlyJsactionData.etc : earlyJsactionData.et;\n    eventTypes.push(eventType);\n    earlyJsactionData.c.addEventListener(eventType, earlyJsactionData.h, capture);\n  }\n}\n\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\nexport function getQueuedEventInfos(earlyJsactionData: EarlyJsactionData | undefined) {\n  return earlyJsactionData?.q ?? [];\n}\n\n/** Register a different dispatcher function on the `EarlyJsactionData`. */\nexport function registerDispatcher(\n  earlyJsactionData: EarlyJsactionData | undefined,\n  dispatcher: (eventInfo: EventInfo) => void,\n) {\n  if (!earlyJsactionData) {\n    return;\n  }\n  earlyJsactionData.d = dispatcher;\n}\n\n/** Removes all event listener handlers. */\nexport function removeAllEventListeners(earlyJsactionData: EarlyJsactionData | undefined) {\n  if (!earlyJsactionData) {\n    return;\n  }\n  removeEventListeners(earlyJsactionData.c, earlyJsactionData.et, earlyJsactionData.h);\n  removeEventListeners(earlyJsactionData.c, earlyJsactionData.etc, earlyJsactionData.h, true);\n}\n\nfunction removeEventListeners(\n  container: HTMLElement,\n  eventTypes: string[],\n  earlyEventHandler: (e: Event) => void,\n  capture?: boolean,\n) {\n  for (let i = 0; i < eventTypes.length; i++) {\n    container.removeEventListener(eventTypes[i], earlyEventHandler, /* useCapture */ capture);\n  }\n}\n"]}