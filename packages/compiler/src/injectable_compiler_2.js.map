{"version":3,"file":"injectable_compiler_2.js","sourceRoot":"","sources":["injectable_compiler_2.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FactoryTarget} from './compiler_facade_interface';\nimport * as o from './output/output_ast';\nimport {\n  compileFactoryFunction,\n  R3DependencyMetadata,\n  R3FactoryDelegateType,\n  R3FactoryMetadata,\n} from './render3/r3_factory';\nimport {Identifiers} from './render3/r3_identifiers';\nimport {\n  convertFromMaybeForwardRefExpression,\n  MaybeForwardRefExpression,\n  R3CompiledExpression,\n  R3Reference,\n  typeWithParameters,\n} from './render3/util';\nimport {DefinitionMap} from './render3/view/util';\n\nexport interface R3InjectableMetadata {\n  name: string;\n  type: R3Reference;\n  typeArgumentCount: number;\n  providedIn: MaybeForwardRefExpression;\n  useClass?: MaybeForwardRefExpression;\n  useFactory?: o.Expression;\n  useExisting?: MaybeForwardRefExpression;\n  useValue?: MaybeForwardRefExpression;\n  deps?: R3DependencyMetadata[];\n}\n\nexport function compileInjectable(\n  meta: R3InjectableMetadata,\n  resolveForwardRefs: boolean,\n): R3CompiledExpression {\n  let result: {expression: o.Expression; statements: o.Statement[]} | null = null;\n\n  const factoryMeta: R3FactoryMetadata = {\n    name: meta.name,\n    type: meta.type,\n    typeArgumentCount: meta.typeArgumentCount,\n    deps: [],\n    target: FactoryTarget.Injectable,\n  };\n\n  if (meta.useClass !== undefined) {\n    // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n    // used to instantiate the class with dependencies injected, or deps are not specified and\n    // the factory of the class is used to instantiate it.\n    //\n    // A special case exists for useClass: Type where Type is the injectable type itself and no\n    // deps are specified, in which case 'useClass' is effectively ignored.\n\n    const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);\n    let deps: R3DependencyMetadata[] | undefined = undefined;\n    if (meta.deps !== undefined) {\n      deps = meta.deps;\n    }\n\n    if (deps !== undefined) {\n      // factory: () => new meta.useClass(...deps)\n      result = compileFactoryFunction({\n        ...factoryMeta,\n        delegate: meta.useClass.expression,\n        delegateDeps: deps,\n        delegateType: R3FactoryDelegateType.Class,\n      });\n    } else if (useClassOnSelf) {\n      result = compileFactoryFunction(factoryMeta);\n    } else {\n      result = {\n        statements: [],\n        expression: delegateToFactory(\n          meta.type.value as o.WrappedNodeExpr<any>,\n          meta.useClass.expression as o.WrappedNodeExpr<any>,\n          resolveForwardRefs,\n        ),\n      };\n    }\n  } else if (meta.useFactory !== undefined) {\n    if (meta.deps !== undefined) {\n      result = compileFactoryFunction({\n        ...factoryMeta,\n        delegate: meta.useFactory,\n        delegateDeps: meta.deps || [],\n        delegateType: R3FactoryDelegateType.Function,\n      });\n    } else {\n      result = {statements: [], expression: o.arrowFn([], meta.useFactory.callFn([]))};\n    }\n  } else if (meta.useValue !== undefined) {\n    // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n    // client code because meta.useValue is an Expression which will be defined even if the actual\n    // value is undefined.\n    result = compileFactoryFunction({\n      ...factoryMeta,\n      expression: meta.useValue.expression,\n    });\n  } else if (meta.useExisting !== undefined) {\n    // useExisting is an `inject` call on the existing token.\n    result = compileFactoryFunction({\n      ...factoryMeta,\n      expression: o.importExpr(Identifiers.inject).callFn([meta.useExisting.expression]),\n    });\n  } else {\n    result = {\n      statements: [],\n      expression: delegateToFactory(\n        meta.type.value as o.WrappedNodeExpr<any>,\n        meta.type.value as o.WrappedNodeExpr<any>,\n        resolveForwardRefs,\n      ),\n    };\n  }\n\n  const token = meta.type.value;\n\n  const injectableProps = new DefinitionMap<{\n    token: o.Expression;\n    factory: o.Expression;\n    providedIn: o.Expression;\n  }>();\n  injectableProps.set('token', token);\n  injectableProps.set('factory', result.expression);\n\n  // Only generate providedIn property if it has a non-null value\n  if ((meta.providedIn.expression as o.LiteralExpr).value !== null) {\n    injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));\n  }\n\n  const expression = o\n    .importExpr(Identifiers.ɵɵdefineInjectable)\n    .callFn([injectableProps.toLiteralMap()], undefined, true);\n  return {\n    expression,\n    type: createInjectableType(meta),\n    statements: result.statements,\n  };\n}\n\nexport function createInjectableType(meta: R3InjectableMetadata) {\n  return new o.ExpressionType(\n    o.importExpr(Identifiers.InjectableDeclaration, [\n      typeWithParameters(meta.type.type, meta.typeArgumentCount),\n    ]),\n  );\n}\n\nfunction delegateToFactory(\n  type: o.WrappedNodeExpr<any>,\n  useType: o.WrappedNodeExpr<any>,\n  unwrapForwardRefs: boolean,\n): o.Expression {\n  if (type.node === useType.node) {\n    // The types are the same, so we can simply delegate directly to the type's factory.\n    // ```\n    // factory: type.ɵfac\n    // ```\n    return useType.prop('ɵfac');\n  }\n\n  if (!unwrapForwardRefs) {\n    // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that\n    // accepts a sub-type as an argument.\n    // ```\n    // factory: function(t) { return useType.ɵfac(t); }\n    // ```\n    return createFactoryFunction(useType);\n  }\n\n  // The useType is actually wrapped in a `forwardRef()` so we need to resolve that before\n  // calling its factory.\n  // ```\n  // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }\n  // ```\n  const unwrappedType = o.importExpr(Identifiers.resolveForwardRef).callFn([useType]);\n  return createFactoryFunction(unwrappedType);\n}\n\nfunction createFactoryFunction(type: o.Expression): o.ArrowFunctionExpr {\n  const t = new o.FnParam('__ngFactoryType__', o.DYNAMIC_TYPE);\n  return o.arrowFn([t], type.prop('ɵfac').callFn([o.variable(t.name)]));\n}\n"]}