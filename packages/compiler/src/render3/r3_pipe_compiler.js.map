{"version":3,"file":"r3_pipe_compiler.js","sourceRoot":"","sources":["r3_pipe_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,KAAK,CAAC,MAAM,sBAAsB,CAAC;AAG1C,OAAO,EAAC,WAAW,IAAI,EAAE,EAAC,MAAM,kBAAkB,CAAC;AACnD,OAAO,EAAoC,kBAAkB,EAAC,MAAM,QAAQ,CAAC;AAuC7E,MAAM,UAAU,uBAAuB,CAAC,QAAwB;IAC9D,MAAM,mBAAmB,GAA0D,EAAE,CAAC;IAEtF,wBAAwB;IACxB,mBAAmB,CAAC,IAAI,CAAC;QACvB,GAAG,EAAE,MAAM;QACX,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC;QACpD,MAAM,EAAE,KAAK;KACd,CAAC,CAAC;IAEH,sBAAsB;IACtB,mBAAmB,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;IAEnF,oBAAoB;IACpB,mBAAmB,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;IAExF,IAAI,QAAQ,CAAC,YAAY,KAAK,KAAK,EAAE,CAAC;QACpC,mBAAmB,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;IACxF,CAAC;IAED,MAAM,UAAU,GAAG,CAAC;SACjB,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC;SACzB,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAChE,MAAM,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;IAEtC,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,QAAwB;IACrD,OAAO,IAAI,CAAC,CAAC,cAAc,CACzB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,eAAe,EAAE;QAC/B,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,iBAAiB,CAAC;QAClE,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;KAC/D,CAAC,CACH,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport * as o from '../output/output_ast';\n\nimport {R3DependencyMetadata} from './r3_factory';\nimport {Identifiers as R3} from './r3_identifiers';\nimport {R3CompiledExpression, R3Reference, typeWithParameters} from './util';\n\nexport interface R3PipeMetadata {\n  /**\n   * Name of the pipe type.\n   */\n  name: string;\n\n  /**\n   * An expression representing a reference to the pipe itself.\n   */\n  type: R3Reference;\n\n  /**\n   * Number of generic type parameters of the type itself.\n   */\n  typeArgumentCount: number;\n\n  /**\n   * Name of the pipe.\n   */\n  pipeName: string | null;\n\n  /**\n   * Dependencies of the pipe's constructor.\n   */\n  deps: R3DependencyMetadata[] | null;\n\n  /**\n   * Whether the pipe is marked as pure.\n   */\n  pure: boolean;\n\n  /**\n   * Whether the pipe is standalone.\n   */\n  isStandalone: boolean;\n}\n\nexport function compilePipeFromMetadata(metadata: R3PipeMetadata): R3CompiledExpression {\n  const definitionMapValues: {key: string; quoted: boolean; value: o.Expression}[] = [];\n\n  // e.g. `name: 'myPipe'`\n  definitionMapValues.push({\n    key: 'name',\n    value: o.literal(metadata.pipeName ?? metadata.name),\n    quoted: false,\n  });\n\n  // e.g. `type: MyPipe`\n  definitionMapValues.push({key: 'type', value: metadata.type.value, quoted: false});\n\n  // e.g. `pure: true`\n  definitionMapValues.push({key: 'pure', value: o.literal(metadata.pure), quoted: false});\n\n  if (metadata.isStandalone === false) {\n    definitionMapValues.push({key: 'standalone', value: o.literal(false), quoted: false});\n  }\n\n  const expression = o\n    .importExpr(R3.definePipe)\n    .callFn([o.literalMap(definitionMapValues)], undefined, true);\n  const type = createPipeType(metadata);\n\n  return {expression, type, statements: []};\n}\n\nexport function createPipeType(metadata: R3PipeMetadata): o.Type {\n  return new o.ExpressionType(\n    o.importExpr(R3.PipeDeclaration, [\n      typeWithParameters(metadata.type.type, metadata.typeArgumentCount),\n      new o.ExpressionType(new o.LiteralExpr(metadata.pipeName)),\n      new o.ExpressionType(new o.LiteralExpr(metadata.isStandalone)),\n    ]),\n  );\n}\n"]}