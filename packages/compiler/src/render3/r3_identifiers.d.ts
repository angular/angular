/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
import * as o from '../output/output_ast';
export declare class Identifiers {
    static NEW_METHOD: string;
    static TRANSFORM_METHOD: string;
    static PATCH_DEPS: string;
    static core: o.ExternalReference;
    static namespaceHTML: o.ExternalReference;
    static namespaceMathML: o.ExternalReference;
    static namespaceSVG: o.ExternalReference;
    static element: o.ExternalReference;
    static elementStart: o.ExternalReference;
    static elementEnd: o.ExternalReference;
    static domElement: o.ExternalReference;
    static domElementStart: o.ExternalReference;
    static domElementEnd: o.ExternalReference;
    static domElementContainer: o.ExternalReference;
    static domElementContainerStart: o.ExternalReference;
    static domElementContainerEnd: o.ExternalReference;
    static domTemplate: o.ExternalReference;
    static domListener: o.ExternalReference;
    static advance: o.ExternalReference;
    static syntheticHostProperty: o.ExternalReference;
    static syntheticHostListener: o.ExternalReference;
    static attribute: o.ExternalReference;
    static classProp: o.ExternalReference;
    static elementContainerStart: o.ExternalReference;
    static elementContainerEnd: o.ExternalReference;
    static elementContainer: o.ExternalReference;
    static styleMap: o.ExternalReference;
    static classMap: o.ExternalReference;
    static styleProp: o.ExternalReference;
    static interpolate: o.ExternalReference;
    static interpolate1: o.ExternalReference;
    static interpolate2: o.ExternalReference;
    static interpolate3: o.ExternalReference;
    static interpolate4: o.ExternalReference;
    static interpolate5: o.ExternalReference;
    static interpolate6: o.ExternalReference;
    static interpolate7: o.ExternalReference;
    static interpolate8: o.ExternalReference;
    static interpolateV: o.ExternalReference;
    static nextContext: o.ExternalReference;
    static resetView: o.ExternalReference;
    static templateCreate: o.ExternalReference;
    static defer: o.ExternalReference;
    static deferWhen: o.ExternalReference;
    static deferOnIdle: o.ExternalReference;
    static deferOnImmediate: o.ExternalReference;
    static deferOnTimer: o.ExternalReference;
    static deferOnHover: o.ExternalReference;
    static deferOnInteraction: o.ExternalReference;
    static deferOnViewport: o.ExternalReference;
    static deferPrefetchWhen: o.ExternalReference;
    static deferPrefetchOnIdle: o.ExternalReference;
    static deferPrefetchOnImmediate: o.ExternalReference;
    static deferPrefetchOnTimer: o.ExternalReference;
    static deferPrefetchOnHover: o.ExternalReference;
    static deferPrefetchOnInteraction: o.ExternalReference;
    static deferPrefetchOnViewport: o.ExternalReference;
    static deferHydrateWhen: o.ExternalReference;
    static deferHydrateNever: o.ExternalReference;
    static deferHydrateOnIdle: o.ExternalReference;
    static deferHydrateOnImmediate: o.ExternalReference;
    static deferHydrateOnTimer: o.ExternalReference;
    static deferHydrateOnHover: o.ExternalReference;
    static deferHydrateOnInteraction: o.ExternalReference;
    static deferHydrateOnViewport: o.ExternalReference;
    static deferEnableTimerScheduling: o.ExternalReference;
    static conditionalCreate: o.ExternalReference;
    static conditionalBranchCreate: o.ExternalReference;
    static conditional: o.ExternalReference;
    static repeater: o.ExternalReference;
    static repeaterCreate: o.ExternalReference;
    static repeaterTrackByIndex: o.ExternalReference;
    static repeaterTrackByIdentity: o.ExternalReference;
    static componentInstance: o.ExternalReference;
    static text: o.ExternalReference;
    static enableBindings: o.ExternalReference;
    static disableBindings: o.ExternalReference;
    static getCurrentView: o.ExternalReference;
    static textInterpolate: o.ExternalReference;
    static textInterpolate1: o.ExternalReference;
    static textInterpolate2: o.ExternalReference;
    static textInterpolate3: o.ExternalReference;
    static textInterpolate4: o.ExternalReference;
    static textInterpolate5: o.ExternalReference;
    static textInterpolate6: o.ExternalReference;
    static textInterpolate7: o.ExternalReference;
    static textInterpolate8: o.ExternalReference;
    static textInterpolateV: o.ExternalReference;
    static restoreView: o.ExternalReference;
    static pureFunction0: o.ExternalReference;
    static pureFunction1: o.ExternalReference;
    static pureFunction2: o.ExternalReference;
    static pureFunction3: o.ExternalReference;
    static pureFunction4: o.ExternalReference;
    static pureFunction5: o.ExternalReference;
    static pureFunction6: o.ExternalReference;
    static pureFunction7: o.ExternalReference;
    static pureFunction8: o.ExternalReference;
    static pureFunctionV: o.ExternalReference;
    static pipeBind1: o.ExternalReference;
    static pipeBind2: o.ExternalReference;
    static pipeBind3: o.ExternalReference;
    static pipeBind4: o.ExternalReference;
    static pipeBindV: o.ExternalReference;
    static domProperty: o.ExternalReference;
    static ariaProperty: o.ExternalReference;
    static property: o.ExternalReference;
    static animationEnterListener: o.ExternalReference;
    static animationLeaveListener: o.ExternalReference;
    static animationEnter: o.ExternalReference;
    static animationLeave: o.ExternalReference;
    static i18n: o.ExternalReference;
    static i18nAttributes: o.ExternalReference;
    static i18nExp: o.ExternalReference;
    static i18nStart: o.ExternalReference;
    static i18nEnd: o.ExternalReference;
    static i18nApply: o.ExternalReference;
    static i18nPostprocess: o.ExternalReference;
    static pipe: o.ExternalReference;
    static projection: o.ExternalReference;
    static projectionDef: o.ExternalReference;
    static reference: o.ExternalReference;
    static inject: o.ExternalReference;
    static injectAttribute: o.ExternalReference;
    static directiveInject: o.ExternalReference;
    static invalidFactory: o.ExternalReference;
    static invalidFactoryDep: o.ExternalReference;
    static templateRefExtractor: o.ExternalReference;
    static forwardRef: o.ExternalReference;
    static resolveForwardRef: o.ExternalReference;
    static replaceMetadata: o.ExternalReference;
    static getReplaceMetadataURL: o.ExternalReference;
    static ɵɵdefineInjectable: o.ExternalReference;
    static declareInjectable: o.ExternalReference;
    static InjectableDeclaration: o.ExternalReference;
    static resolveWindow: o.ExternalReference;
    static resolveDocument: o.ExternalReference;
    static resolveBody: o.ExternalReference;
    static getComponentDepsFactory: o.ExternalReference;
    static defineComponent: o.ExternalReference;
    static declareComponent: o.ExternalReference;
    static setComponentScope: o.ExternalReference;
    static ChangeDetectionStrategy: o.ExternalReference;
    static ViewEncapsulation: o.ExternalReference;
    static ComponentDeclaration: o.ExternalReference;
    static FactoryDeclaration: o.ExternalReference;
    static declareFactory: o.ExternalReference;
    static FactoryTarget: o.ExternalReference;
    static defineDirective: o.ExternalReference;
    static declareDirective: o.ExternalReference;
    static DirectiveDeclaration: o.ExternalReference;
    static InjectorDef: o.ExternalReference;
    static InjectorDeclaration: o.ExternalReference;
    static defineInjector: o.ExternalReference;
    static declareInjector: o.ExternalReference;
    static NgModuleDeclaration: o.ExternalReference;
    static ModuleWithProviders: o.ExternalReference;
    static defineNgModule: o.ExternalReference;
    static declareNgModule: o.ExternalReference;
    static setNgModuleScope: o.ExternalReference;
    static registerNgModuleType: o.ExternalReference;
    static PipeDeclaration: o.ExternalReference;
    static definePipe: o.ExternalReference;
    static declarePipe: o.ExternalReference;
    static declareClassMetadata: o.ExternalReference;
    static declareClassMetadataAsync: o.ExternalReference;
    static setClassMetadata: o.ExternalReference;
    static setClassMetadataAsync: o.ExternalReference;
    static setClassDebugInfo: o.ExternalReference;
    static queryRefresh: o.ExternalReference;
    static viewQuery: o.ExternalReference;
    static loadQuery: o.ExternalReference;
    static contentQuery: o.ExternalReference;
    static viewQuerySignal: o.ExternalReference;
    static contentQuerySignal: o.ExternalReference;
    static queryAdvance: o.ExternalReference;
    static twoWayProperty: o.ExternalReference;
    static twoWayBindingSet: o.ExternalReference;
    static twoWayListener: o.ExternalReference;
    static declareLet: o.ExternalReference;
    static storeLet: o.ExternalReference;
    static readContextLet: o.ExternalReference;
    static attachSourceLocations: o.ExternalReference;
    static NgOnChangesFeature: o.ExternalReference;
    static InheritDefinitionFeature: o.ExternalReference;
    static CopyDefinitionFeature: o.ExternalReference;
    static ProvidersFeature: o.ExternalReference;
    static HostDirectivesFeature: o.ExternalReference;
    static ExternalStylesFeature: o.ExternalReference;
    static listener: o.ExternalReference;
    static getInheritedFactory: o.ExternalReference;
    static sanitizeHtml: o.ExternalReference;
    static sanitizeStyle: o.ExternalReference;
    static sanitizeResourceUrl: o.ExternalReference;
    static sanitizeScript: o.ExternalReference;
    static sanitizeUrl: o.ExternalReference;
    static sanitizeUrlOrResourceUrl: o.ExternalReference;
    static trustConstantHtml: o.ExternalReference;
    static trustConstantResourceUrl: o.ExternalReference;
    static validateIframeAttribute: o.ExternalReference;
    static InputSignalBrandWriteType: {
        name: string;
        moduleName: string;
    };
    static UnwrapDirectiveSignalInputs: {
        name: string;
        moduleName: string;
    };
    static unwrapWritableSignal: {
        name: string;
        moduleName: string;
    };
    static assertType: {
        name: string;
        moduleName: string;
    };
}
