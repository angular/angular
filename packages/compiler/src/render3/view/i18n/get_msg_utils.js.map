{"version":3,"file":"get_msg_utils.js","sourceRoot":"","sources":["get_msg_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport * as i18n from '../../../i18n/i18n_ast';\nimport {mapLiteral} from '../../../output/map_util';\nimport * as o from '../../../output/output_ast';\n\nimport {serializeIcuNode} from './icu_serializer';\nimport {i18nMetaToJSDoc} from './meta';\nimport {formatI18nPlaceholderName, formatI18nPlaceholderNamesInMap} from './util';\n\n/** Closure uses `goog.getMsg(message)` to lookup translations */\nconst GOOG_GET_MSG = 'goog.getMsg';\n\n/**\n * Generates a `goog.getMsg()` statement and reassignment. The template:\n *\n * ```html\n * <div i18n>Sent from {{ sender }} to <span class=\"receiver\">{{ receiver }}</span></div>\n * ```\n *\n * Generates:\n *\n * ```ts\n * const MSG_FOO = goog.getMsg(\n *   // Message template.\n *   'Sent from {$interpolation} to {$startTagSpan}{$interpolation_1}{$closeTagSpan}.',\n *   // Placeholder values, set to magic strings which get replaced by the Angular runtime.\n *   {\n *     'interpolation': '\\uFFFD0\\uFFFD',\n *     'startTagSpan': '\\uFFFD1\\uFFFD',\n *     'interpolation_1': '\\uFFFD2\\uFFFD',\n *     'closeTagSpan': '\\uFFFD3\\uFFFD',\n *   },\n *   // Options bag.\n *   {\n *     // Maps each placeholder to the original Angular source code which generates it's value.\n *     original_code: {\n *       'interpolation': '{{ sender }}',\n *       'startTagSpan': '<span class=\"receiver\">',\n *       'interpolation_1': '{{ receiver }}',\n *       'closeTagSpan': '</span>',\n *     },\n *   },\n * );\n * const I18N_0 = MSG_FOO;\n * ```\n */\nexport function createGoogleGetMsgStatements(\n  variable: o.ReadVarExpr,\n  message: i18n.Message,\n  closureVar: o.ReadVarExpr,\n  placeholderValues: {[name: string]: o.Expression},\n): o.Statement[] {\n  const messageString = serializeI18nMessageForGetMsg(message);\n  const args = [o.literal(messageString) as o.Expression];\n  if (Object.keys(placeholderValues).length) {\n    // Message template parameters containing the magic strings replaced by the Angular runtime with\n    // real data, e.g. `{'interpolation': '\\uFFFD0\\uFFFD'}`.\n    args.push(\n      mapLiteral(\n        formatI18nPlaceholderNamesInMap(placeholderValues, true /* useCamelCase */),\n        true /* quoted */,\n      ),\n    );\n\n    // Message options object, which contains original source code for placeholders (as they are\n    // present in a template, e.g.\n    // `{original_code: {'interpolation': '{{ name }}', 'startTagSpan': '<span>'}}`.\n    args.push(\n      mapLiteral({\n        original_code: o.literalMap(\n          Object.keys(placeholderValues).map((param) => ({\n            key: formatI18nPlaceholderName(param),\n            quoted: true,\n            value: message.placeholders[param]\n              ? // Get source span for typical placeholder if it exists.\n                o.literal(message.placeholders[param].sourceSpan.toString())\n              : // Otherwise must be an ICU expression, get it's source span.\n                o.literal(\n                  message.placeholderToMessage[param].nodes\n                    .map((node) => node.sourceSpan.toString())\n                    .join(''),\n                ),\n          })),\n        ),\n      }),\n    );\n  }\n\n  // /**\n  //  * @desc description of message\n  //  * @meaning meaning of message\n  //  */\n  // const MSG_... = goog.getMsg(..);\n  // I18N_X = MSG_...;\n  const googGetMsgStmt = new o.DeclareVarStmt(\n    closureVar.name,\n    o.variable(GOOG_GET_MSG).callFn(args),\n    o.INFERRED_TYPE,\n    o.StmtModifier.Final,\n  );\n  googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));\n  const i18nAssignmentStmt = new o.ExpressionStatement(variable.set(closureVar));\n  return [googGetMsgStmt, i18nAssignmentStmt];\n}\n\n/**\n * This visitor walks over i18n tree and generates its string representation, including ICUs and\n * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.\n */\nclass GetMsgSerializerVisitor implements i18n.Visitor {\n  private formatPh(value: string): string {\n    return `{$${formatI18nPlaceholderName(value)}}`;\n  }\n\n  visitText(text: i18n.Text): any {\n    return text.value;\n  }\n\n  visitContainer(container: i18n.Container): any {\n    return container.children.map((child) => child.visit(this)).join('');\n  }\n\n  visitIcu(icu: i18n.Icu): any {\n    return serializeIcuNode(icu);\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder): any {\n    return ph.isVoid\n      ? this.formatPh(ph.startName)\n      : `${this.formatPh(ph.startName)}${ph.children\n          .map((child) => child.visit(this))\n          .join('')}${this.formatPh(ph.closeName)}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder): any {\n    return this.formatPh(ph.name);\n  }\n\n  visitBlockPlaceholder(ph: i18n.BlockPlaceholder): any {\n    return `${this.formatPh(ph.startName)}${ph.children\n      .map((child) => child.visit(this))\n      .join('')}${this.formatPh(ph.closeName)}`;\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return this.formatPh(ph.name);\n  }\n}\n\nconst serializerVisitor = new GetMsgSerializerVisitor();\n\nexport function serializeI18nMessageForGetMsg(message: i18n.Message): string {\n  return message.nodes.map((node) => node.visit(serializerVisitor, null)).join('');\n}\n"]}