{"version":3,"file":"meta.js","sourceRoot":"","sources":["meta.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {WhitespaceVisitor, visitAllWithSiblings} from '../../../ml_parser/html_whitespaces';\nimport {computeDecimalDigest, computeDigest, decimalDigest} from '../../../i18n/digest';\nimport * as i18n from '../../../i18n/i18n_ast';\nimport {createI18nMessageFactory, VisitNodeFn} from '../../../i18n/i18n_parser';\nimport * as html from '../../../ml_parser/ast';\nimport {\n  DEFAULT_CONTAINER_BLOCKS,\n  DEFAULT_INTERPOLATION_CONFIG,\n  InterpolationConfig,\n} from '../../../ml_parser/defaults';\nimport {ParseTreeResult} from '../../../ml_parser/parser';\nimport * as o from '../../../output/output_ast';\nimport {isTrustedTypesSink} from '../../../schema/trusted_types_sinks';\n\nimport {hasI18nAttrs, I18N_ATTR, I18N_ATTR_PREFIX, icuFromI18nMessage} from './util';\nimport {ParseError} from '../../../parse_util';\n\nexport type I18nMeta = {\n  id?: string;\n  customId?: string;\n  legacyIds?: string[];\n  description?: string;\n  meaning?: string;\n};\n\nconst setI18nRefs = (originalNodeMap: Map<html.Node, html.Node>): VisitNodeFn => {\n  return (trimmedNode, i18nNode) => {\n    // We need to set i18n properties on the original, untrimmed AST nodes. The i18n nodes needs to\n    // use the trimmed content for message IDs to make messages more stable to whitespace changes.\n    // But we don't want to actually trim the content, so we can't use the trimmed HTML AST for\n    // general code gen. Instead we map the trimmed HTML AST back to the original AST and then\n    // attach the i18n nodes so we get trimmed i18n nodes on the original (untrimmed) HTML AST.\n    const originalNode = originalNodeMap.get(trimmedNode) ?? trimmedNode;\n\n    if (originalNode instanceof html.NodeWithI18n) {\n      if (i18nNode instanceof i18n.IcuPlaceholder && originalNode.i18n instanceof i18n.Message) {\n        // This html node represents an ICU but this is a second processing pass, and the legacy id\n        // was computed in the previous pass and stored in the `i18n` property as a message.\n        // We are about to wipe out that property so capture the previous message to be reused when\n        // generating the message for this ICU later. See `_generateI18nMessage()`.\n        i18nNode.previousMessage = originalNode.i18n;\n      }\n      originalNode.i18n = i18nNode;\n    }\n    return i18nNode;\n  };\n};\n\n/**\n * This visitor walks over HTML parse tree and converts information stored in\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\n * stored with other element's and attribute's information.\n */\nexport class I18nMetaVisitor implements html.Visitor {\n  // whether visited nodes contain i18n information\n  public hasI18nMeta: boolean = false;\n  private _errors: ParseError[] = [];\n\n  constructor(\n    private interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG,\n    private keepI18nAttrs = false,\n    private enableI18nLegacyMessageIdFormat = false,\n    private containerBlocks: Set<string> = DEFAULT_CONTAINER_BLOCKS,\n    private readonly preserveSignificantWhitespace: boolean = true,\n\n    // When dropping significant whitespace we need to retain empty tokens or\n    // else we won't be able to reuse source spans because empty tokens would be\n    // removed and cause a mismatch. Unfortunately this still needs to be\n    // configurable and sometimes needs to be set independently in order to make\n    // sure the number of nodes don't change between parses, even when\n    // `preserveSignificantWhitespace` changes.\n    private readonly retainEmptyTokens: boolean = !preserveSignificantWhitespace,\n  ) {}\n\n  private _generateI18nMessage(\n    nodes: html.Node[],\n    meta: string | i18n.I18nMeta = '',\n    visitNodeFn?: VisitNodeFn,\n  ): i18n.Message {\n    const {meaning, description, customId} = this._parseMetadata(meta);\n    const createI18nMessage = createI18nMessageFactory(\n      this.interpolationConfig,\n      this.containerBlocks,\n      this.retainEmptyTokens,\n      /* preserveExpressionWhitespace */ this.preserveSignificantWhitespace,\n    );\n    const message = createI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n    this._setMessageId(message, meta);\n    this._setLegacyIds(message, meta);\n    return message;\n  }\n\n  visitAllWithErrors(nodes: html.Node[]): ParseTreeResult {\n    const result = nodes.map((node) => node.visit(this, null));\n    return new ParseTreeResult(result, this._errors);\n  }\n\n  visitElement(element: html.Element): any {\n    this._visitElementLike(element);\n    return element;\n  }\n\n  visitComponent(component: html.Component, context: any) {\n    this._visitElementLike(component);\n    return component;\n  }\n\n  visitExpansion(expansion: html.Expansion, currentMessage: i18n.Message | null): any {\n    let message;\n    const meta = expansion.i18n;\n    this.hasI18nMeta = true;\n    if (meta instanceof i18n.IcuPlaceholder) {\n      // set ICU placeholder name (e.g. \"ICU_1\"),\n      // generated while processing root element contents,\n      // so we can reference it when we output translation\n      const name = meta.name;\n      message = this._generateI18nMessage([expansion], meta);\n      const icu = icuFromI18nMessage(message);\n      icu.name = name;\n      if (currentMessage !== null) {\n        // Also update the placeholderToMessage map with this new message\n        currentMessage.placeholderToMessage[name] = message;\n      }\n    } else {\n      // ICU is a top level message, try to use metadata from container element if provided via\n      // `context` argument. Note: context may not be available for standalone ICUs (without\n      // wrapping element), so fallback to ICU metadata in this case.\n      message = this._generateI18nMessage([expansion], currentMessage || meta);\n    }\n    expansion.i18n = message;\n    return expansion;\n  }\n\n  visitText(text: html.Text): any {\n    return text;\n  }\n  visitAttribute(attribute: html.Attribute): any {\n    return attribute;\n  }\n  visitComment(comment: html.Comment): any {\n    return comment;\n  }\n  visitExpansionCase(expansionCase: html.ExpansionCase): any {\n    return expansionCase;\n  }\n\n  visitBlock(block: html.Block, context: any) {\n    html.visitAll(this, block.children, context);\n    return block;\n  }\n\n  visitBlockParameter(parameter: html.BlockParameter, context: any) {\n    return parameter;\n  }\n\n  visitLetDeclaration(decl: html.LetDeclaration, context: any) {\n    return decl;\n  }\n\n  visitDirective(directive: html.Directive, context: any) {\n    return directive;\n  }\n\n  private _visitElementLike(node: html.Element | html.Component): void {\n    let message: i18n.Message | undefined = undefined;\n\n    if (hasI18nAttrs(node)) {\n      this.hasI18nMeta = true;\n      const attrs: html.Attribute[] = [];\n      const attrsMeta: {[key: string]: string} = {};\n\n      for (const attr of node.attrs) {\n        if (attr.name === I18N_ATTR) {\n          // root 'i18n' node attribute\n          const i18n = node.i18n || attr.value;\n\n          // Generate a new AST with whitespace trimmed, but also generate a map\n          // to correlate each new node to its original so we can apply i18n\n          // information to the original node based on the trimmed content.\n          //\n          // `WhitespaceVisitor` removes *insignificant* whitespace as well as\n          // significant whitespace. Enabling this visitor should be conditional\n          // on `preserveWhitespace` rather than `preserveSignificantWhitespace`,\n          // however this would be a breaking change for existing behavior where\n          // `preserveWhitespace` was not respected correctly when generating\n          // message IDs. This is really a bug but one we need to keep to maintain\n          // backwards compatibility.\n          const originalNodeMap = new Map<html.Node, html.Node>();\n          const trimmedNodes = this.preserveSignificantWhitespace\n            ? node.children\n            : visitAllWithSiblings(\n                new WhitespaceVisitor(false /* preserveSignificantWhitespace */, originalNodeMap),\n                node.children,\n              );\n          message = this._generateI18nMessage(trimmedNodes, i18n, setI18nRefs(originalNodeMap));\n          if (message.nodes.length === 0) {\n            // Ignore the message if it is empty.\n            message = undefined;\n          }\n          // Store the message on the element\n          node.i18n = message;\n        } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {\n          // 'i18n-*' attributes\n          const name = attr.name.slice(I18N_ATTR_PREFIX.length);\n          let isTrustedType: boolean;\n          if (node instanceof html.Component) {\n            isTrustedType = node.tagName === null ? false : isTrustedTypesSink(node.tagName, name);\n          } else {\n            isTrustedType = isTrustedTypesSink(node.name, name);\n          }\n\n          if (isTrustedType) {\n            this._reportError(\n              attr,\n              `Translating attribute '${name}' is disallowed for security reasons.`,\n            );\n          } else {\n            attrsMeta[name] = attr.value;\n          }\n        } else {\n          // non-i18n attributes\n          attrs.push(attr);\n        }\n      }\n\n      // set i18n meta for attributes\n      if (Object.keys(attrsMeta).length) {\n        for (const attr of attrs) {\n          const meta = attrsMeta[attr.name];\n          // do not create translation for empty attributes\n          if (meta !== undefined && attr.value) {\n            attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n          }\n        }\n      }\n\n      if (!this.keepI18nAttrs) {\n        // update element's attributes,\n        // keeping only non-i18n related ones\n        node.attrs = attrs;\n      }\n    }\n    html.visitAll(this, node.children, message);\n  }\n\n  /**\n   * Parse the general form `meta` passed into extract the explicit metadata needed to create a\n   * `Message`.\n   *\n   * There are three possibilities for the `meta` variable\n   * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.\n   * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.\n   * 4) other: ignore this and just process the message metadata as normal\n   *\n   * @param meta the bucket that holds information about the message\n   * @returns the parsed metadata.\n   */\n  private _parseMetadata(meta: string | i18n.I18nMeta): I18nMeta {\n    return typeof meta === 'string'\n      ? parseI18nMeta(meta)\n      : meta instanceof i18n.Message\n        ? meta\n        : {};\n  }\n\n  /**\n   * Generate (or restore) message id if not specified already.\n   */\n  private _setMessageId(message: i18n.Message, meta: string | i18n.I18nMeta): void {\n    if (!message.id) {\n      message.id = (meta instanceof i18n.Message && meta.id) || decimalDigest(message);\n    }\n  }\n\n  /**\n   * Update the `message` with a `legacyId` if necessary.\n   *\n   * @param message the message whose legacy id should be set\n   * @param meta information about the message being processed\n   */\n  private _setLegacyIds(message: i18n.Message, meta: string | i18n.I18nMeta): void {\n    if (this.enableI18nLegacyMessageIdFormat) {\n      message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];\n    } else if (typeof meta !== 'string') {\n      // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in\n      // `packages/compiler/src/render3/view/template.ts`).\n      // In that case we want to reuse the legacy message generated in the 1st pass (see\n      // `setI18nRefs()`).\n      const previousMessage =\n        meta instanceof i18n.Message\n          ? meta\n          : meta instanceof i18n.IcuPlaceholder\n            ? meta.previousMessage\n            : undefined;\n      message.legacyIds = previousMessage ? previousMessage.legacyIds : [];\n    }\n  }\n\n  private _reportError(node: html.Node, msg: string): void {\n    this._errors.push(new ParseError(node.sourceSpan, msg));\n  }\n}\n\n/** I18n separators for metadata **/\nconst I18N_MEANING_SEPARATOR = '|';\nconst I18N_ID_SEPARATOR = '@@';\n\n/**\n * Parses i18n metas like:\n *  - \"@@id\",\n *  - \"description[@@id]\",\n *  - \"meaning|description[@@id]\"\n * and returns an object with parsed output.\n *\n * @param meta String that represents i18n meta\n * @returns Object with id, meaning and description fields\n */\nexport function parseI18nMeta(meta: string = ''): I18nMeta {\n  let customId: string | undefined;\n  let meaning: string | undefined;\n  let description: string | undefined;\n\n  meta = meta.trim();\n  if (meta) {\n    const idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n    const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n    let meaningAndDesc: string;\n    [meaningAndDesc, customId] =\n      idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n    [meaning, description] =\n      descIndex > -1\n        ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)]\n        : ['', meaningAndDesc];\n  }\n\n  return {customId, meaning, description};\n}\n\n// Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\nexport function i18nMetaToJSDoc(meta: I18nMeta): o.JSDocComment {\n  const tags: o.JSDocTag[] = [];\n  if (meta.description) {\n    tags.push({tagName: o.JSDocTagName.Desc, text: meta.description});\n  } else {\n    // Suppress the JSCompiler warning that a `@desc` was not given for this message.\n    tags.push({tagName: o.JSDocTagName.Suppress, text: '{msgDescriptions}'});\n  }\n  if (meta.meaning) {\n    tags.push({tagName: o.JSDocTagName.Meaning, text: meta.meaning});\n  }\n  return o.jsDocComment(tags);\n}\n"]}