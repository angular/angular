{"version":3,"file":"localize_utils.js","sourceRoot":"","sources":["localize_utils.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,CAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAgB,eAAe,EAAC,MAAM,qBAAqB,CAAC;AAEnE,OAAO,EAAC,gBAAgB,EAAC,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAC,yBAAyB,EAAC,MAAM,QAAQ,CAAC;AAEjD,MAAM,UAAU,wBAAwB,CACtC,QAAuB,EACvB,OAAqB,EACrB,MAAsC;IAEtC,MAAM,EAAC,YAAY,EAAE,YAAY,EAAC,GAAG,+BAA+B,CAAC,OAAO,CAAC,CAAC;IAC9E,MAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IAC1C,MAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,MAAM,eAAe,GAAG,CAAC,CAAC,eAAe,CACvC,OAAO,EACP,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,UAAU,CACX,CAAC;IACF,MAAM,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC7D,OAAO,CAAC,IAAI,CAAC,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC7D,CAAC;AAED;;;;GAIG;AACH,MAAM,yBAAyB;IAC7B,YACU,oBAAsD,EACtD,MAAwB;QADxB,yBAAoB,GAApB,oBAAoB,CAAkC;QACtD,WAAM,GAAN,MAAM,CAAkB;IAC/B,CAAC;IAEJ,SAAS,CAAC,IAAe;QACvB,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,YAAY,EAAE,CAAC;YAClE,iFAAiF;YACjF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;QACzD,CAAC;aAAM,CAAC;YACN,MAAM,UAAU,GAAG,IAAI,eAAe,CACpC,IAAI,CAAC,UAAU,CAAC,SAAS,EACzB,IAAI,CAAC,UAAU,CAAC,GAAG,EACnB,IAAI,CAAC,UAAU,CAAC,SAAS,EACzB,IAAI,CAAC,UAAU,CAAC,OAAO,CACxB,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED,cAAc,CAAC,SAAyB;QACtC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,QAAQ,CAAC,GAAa;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,mBAAmB,CAAC,EAAuB;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,eAAe,IAAI,EAAE,CAAC,UAAU,CAAC,CAC/E,CAAC;QACF,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;YACf,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,UAAU,CAAC,CAC7E,CAAC;QACJ,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,EAAoB;QACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,qBAAqB,CAAC,EAAyB;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,eAAe,IAAI,EAAE,CAAC,UAAU,CAAC,CAC/E,CAAC;QACF,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACjG,CAAC;IAED,mBAAmB,CAAC,EAAuB;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CACxF,CAAC;IACJ,CAAC;IAEO,sBAAsB,CAC5B,IAAY,EACZ,UAA2B,EAC3B,iBAAgC;QAEhC,OAAO,IAAI,CAAC,CAAC,gBAAgB,CAC3B,yBAAyB,CAAC,IAAI,EAAE,kBAAkB,CAAC,KAAK,CAAC,EACzD,UAAU,EACV,iBAAiB,CAClB,CAAC;IACJ,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,+BAA+B,CAAC,OAAqB;IAInE,MAAM,MAAM,GAAqB,EAAE,CAAC;IACpC,MAAM,iBAAiB,GAAG,IAAI,yBAAyB,CAAC,OAAO,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;IAC9F,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC/D,OAAO,oBAAoB,CAAC,MAAM,CAAC,CAAC;AACtC,CAAC;AAED,SAAS,aAAa,CAAC,OAAqB;IAC1C,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACxD,OAAO,IAAI,eAAe,CACxB,SAAS,CAAC,UAAU,CAAC,SAAS,EAC9B,OAAO,CAAC,UAAU,CAAC,GAAG,EACtB,SAAS,CAAC,UAAU,CAAC,SAAS,EAC9B,SAAS,CAAC,UAAU,CAAC,OAAO,CAC7B,CAAC;AACJ,CAAC;AAED;;;;;;;;GAQG;AACH,SAAS,oBAAoB,CAAC,MAAwB;IAIpD,MAAM,YAAY,GAAqB,EAAE,CAAC;IAC1C,MAAM,YAAY,GAAyB,EAAE,CAAC;IAE9C,IAAI,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC5C,qFAAqF;QACrF,YAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACvC,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,IAAI,YAAY,CAAC,CAAC,YAAY,EAAE,CAAC;YACnC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;gBAChD,iFAAiF;gBACjF,YAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;IACH,CAAC;IACD,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC5D,iFAAiF;QACjF,YAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IACtF,CAAC;IACD,OAAO,EAAC,YAAY,EAAE,YAAY,EAAC,CAAC;AACtC,CAAC;AAED,SAAS,sBAAsB,CAAC,QAAuB;IACrD,OAAO,IAAI,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;AACzE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport * as i18n from '../../../i18n/i18n_ast';\nimport * as o from '../../../output/output_ast';\nimport {ParseLocation, ParseSourceSpan} from '../../../parse_util';\n\nimport {serializeIcuNode} from './icu_serializer';\nimport {formatI18nPlaceholderName} from './util';\n\nexport function createLocalizeStatements(\n  variable: o.ReadVarExpr,\n  message: i18n.Message,\n  params: {[name: string]: o.Expression},\n): o.Statement[] {\n  const {messageParts, placeHolders} = serializeI18nMessageForLocalize(message);\n  const sourceSpan = getSourceSpan(message);\n  const expressions = placeHolders.map((ph) => params[ph.text]);\n  const localizedString = o.localizedString(\n    message,\n    messageParts,\n    placeHolders,\n    expressions,\n    sourceSpan,\n  );\n  const variableInitialization = variable.set(localizedString);\n  return [new o.ExpressionStatement(variableInitialization)];\n}\n\n/**\n * This visitor walks over an i18n tree, capturing literal strings and placeholders.\n *\n * The result can be used for generating the `$localize` tagged template literals.\n */\nclass LocalizeSerializerVisitor implements i18n.Visitor {\n  constructor(\n    private placeholderToMessage: {[phName: string]: i18n.Message},\n    private pieces: o.MessagePiece[],\n  ) {}\n\n  visitText(text: i18n.Text): any {\n    if (this.pieces[this.pieces.length - 1] instanceof o.LiteralPiece) {\n      // Two literal pieces in a row means that there was some comment node in-between.\n      this.pieces[this.pieces.length - 1].text += text.value;\n    } else {\n      const sourceSpan = new ParseSourceSpan(\n        text.sourceSpan.fullStart,\n        text.sourceSpan.end,\n        text.sourceSpan.fullStart,\n        text.sourceSpan.details,\n      );\n      this.pieces.push(new o.LiteralPiece(text.value, sourceSpan));\n    }\n  }\n\n  visitContainer(container: i18n.Container): any {\n    container.children.forEach((child) => child.visit(this));\n  }\n\n  visitIcu(icu: i18n.Icu): any {\n    this.pieces.push(new o.LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder): any {\n    this.pieces.push(\n      this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan),\n    );\n    if (!ph.isVoid) {\n      ph.children.forEach((child) => child.visit(this));\n      this.pieces.push(\n        this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan),\n      );\n    }\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder): any {\n    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n  }\n\n  visitBlockPlaceholder(ph: i18n.BlockPlaceholder): any {\n    this.pieces.push(\n      this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan),\n    );\n    ph.children.forEach((child) => child.visit(this));\n    this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder): any {\n    this.pieces.push(\n      this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]),\n    );\n  }\n\n  private createPlaceholderPiece(\n    name: string,\n    sourceSpan: ParseSourceSpan,\n    associatedMessage?: i18n.Message,\n  ): o.PlaceholderPiece {\n    return new o.PlaceholderPiece(\n      formatI18nPlaceholderName(name, /* useCamelCase */ false),\n      sourceSpan,\n      associatedMessage,\n    );\n  }\n}\n\n/**\n * Serialize an i18n message into two arrays: messageParts and placeholders.\n *\n * These arrays will be used to generate `$localize` tagged template literals.\n *\n * @param message The message to be serialized.\n * @returns an object containing the messageParts and placeholders.\n */\nexport function serializeI18nMessageForLocalize(message: i18n.Message): {\n  messageParts: o.LiteralPiece[];\n  placeHolders: o.PlaceholderPiece[];\n} {\n  const pieces: o.MessagePiece[] = [];\n  const serializerVisitor = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);\n  message.nodes.forEach((node) => node.visit(serializerVisitor));\n  return processMessagePieces(pieces);\n}\n\nfunction getSourceSpan(message: i18n.Message): ParseSourceSpan {\n  const startNode = message.nodes[0];\n  const endNode = message.nodes[message.nodes.length - 1];\n  return new ParseSourceSpan(\n    startNode.sourceSpan.fullStart,\n    endNode.sourceSpan.end,\n    startNode.sourceSpan.fullStart,\n    startNode.sourceSpan.details,\n  );\n}\n\n/**\n * Convert the list of serialized MessagePieces into two arrays.\n *\n * One contains the literal string pieces and the other the placeholders that will be replaced by\n * expressions when rendering `$localize` tagged template literals.\n *\n * @param pieces The pieces to process.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction processMessagePieces(pieces: o.MessagePiece[]): {\n  messageParts: o.LiteralPiece[];\n  placeHolders: o.PlaceholderPiece[];\n} {\n  const messageParts: o.LiteralPiece[] = [];\n  const placeHolders: o.PlaceholderPiece[] = [];\n\n  if (pieces[0] instanceof o.PlaceholderPiece) {\n    // The first piece was a placeholder so we need to add an initial empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));\n  }\n\n  for (let i = 0; i < pieces.length; i++) {\n    const part = pieces[i];\n    if (part instanceof o.LiteralPiece) {\n      messageParts.push(part);\n    } else {\n      placeHolders.push(part);\n      if (pieces[i - 1] instanceof o.PlaceholderPiece) {\n        // There were two placeholders in a row, so we need to add an empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));\n      }\n    }\n  }\n  if (pieces[pieces.length - 1] instanceof o.PlaceholderPiece) {\n    // The last piece was a placeholder so we need to add a final empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));\n  }\n  return {messageParts, placeHolders};\n}\n\nfunction createEmptyMessagePart(location: ParseLocation): o.LiteralPiece {\n  return new o.LiteralPiece('', new ParseSourceSpan(location, location));\n}\n"]}