{"version":3,"file":"r3_class_debug_info_compiler.js","sourceRoot":"","sources":["r3_class_debug_info_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,oBAAoB,CAAC;AAC9C,OAAO,KAAK,CAAC,MAAM,sBAAsB,CAAC;AAE1C,OAAO,EAAC,WAAW,IAAI,EAAE,EAAC,MAAM,kBAAkB,CAAC;AACnD,OAAO,EAAC,wBAAwB,EAAC,MAAM,QAAQ,CAAC;AAuChD;;;GAGG;AACH,MAAM,UAAU,qBAAqB,CAAC,SAA2B;IAC/D,MAAM,eAAe,GAKjB;QACF,SAAS,EAAE,SAAS,CAAC,SAAS;KAC/B,CAAC;IAEF,+FAA+F;IAC/F,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;QACvB,eAAe,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QAC9C,eAAe,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;IACpD,CAAC;IAED,oFAAoF;IACpF,IAAI,SAAS,CAAC,qBAAqB,EAAE,CAAC;QACpC,eAAe,CAAC,qBAAqB,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,MAAM,GAAG,CAAC;SACb,UAAU,CAAC,EAAE,CAAC,iBAAiB,CAAC;SAChC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACzD,MAAM,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACxE,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {mapLiteral} from '../output/map_util';\nimport * as o from '../output/output_ast';\n\nimport {Identifiers as R3} from './r3_identifiers';\nimport {devOnlyGuardedExpression} from './util';\n\n/**\n * Info needed for runtime errors related to a class, such as the location in which the class is\n * defined.\n */\nexport interface R3ClassDebugInfo {\n  /** The class identifier */\n  type: o.Expression;\n\n  /**\n   * A string literal containing the original class name as appears in its definition.\n   */\n  className: o.Expression;\n\n  /**\n   * A string literal containing the relative path of the file in which the class is defined.\n   *\n   * The path is relative to the project root. The compiler does the best effort to find the project\n   * root (e.g., using the rootDir of tsconfig), but if it fails this field is set to null,\n   * indicating that the file path was failed to be computed. In this case, the downstream consumers\n   * of the debug info will usually ignore the `lineNumber` field as well and just show the\n   * `className`. For security reasons we never show the absolute file path and prefer to just\n   * return null here.\n   */\n  filePath: o.Expression | null;\n\n  /**\n   * A number literal number containing the line number in which this class is defined.\n   */\n  lineNumber: o.Expression;\n\n  /**\n   * Whether to check if this component is being rendered without its NgModule being loaded into the\n   * browser. Such checks is carried out only in dev mode.\n   */\n  forbidOrphanRendering: boolean;\n}\n\n/**\n * Generate an ngDevMode guarded call to setClassDebugInfo with the debug info about the class\n * (e.g., the file name in which the class is defined)\n */\nexport function compileClassDebugInfo(debugInfo: R3ClassDebugInfo): o.Expression {\n  const debugInfoObject: {\n    className: o.Expression;\n    filePath?: o.Expression;\n    lineNumber?: o.Expression;\n    forbidOrphanRendering?: o.Expression;\n  } = {\n    className: debugInfo.className,\n  };\n\n  // Include file path and line number only if the file relative path is calculated successfully.\n  if (debugInfo.filePath) {\n    debugInfoObject.filePath = debugInfo.filePath;\n    debugInfoObject.lineNumber = debugInfo.lineNumber;\n  }\n\n  // Include forbidOrphanRendering only if it's set to true (to reduce generated code)\n  if (debugInfo.forbidOrphanRendering) {\n    debugInfoObject.forbidOrphanRendering = o.literal(true);\n  }\n\n  const fnCall = o\n    .importExpr(R3.setClassDebugInfo)\n    .callFn([debugInfo.type, mapLiteral(debugInfoObject)]);\n  const iife = o.arrowFn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n  return iife.callFn([]);\n}\n"]}