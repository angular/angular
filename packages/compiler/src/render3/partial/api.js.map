{"version":3,"file":"api.js","sourceRoot":"","sources":["api.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {FactoryTarget} from '../../compiler_facade_interface';\nimport {ChangeDetectionStrategy, ViewEncapsulation} from '../../core';\nimport * as o from '../../output/output_ast';\n\nexport interface R3PartialDeclaration {\n  /**\n   * The minimum version of the compiler that can process this partial declaration.\n   */\n  minVersion: string;\n\n  /**\n   * Version number of the Angular compiler that was used to compile this declaration. The linker\n   * will be able to detect which version a library is using and interpret its metadata accordingly.\n   */\n  version: string;\n\n  /**\n   * A reference to the `@angular/core` ES module, which allows access\n   * to all Angular exports, including Ivy instructions.\n   */\n  ngImport: o.Expression;\n\n  /**\n   * Reference to the decorated class, which is subject to this partial declaration.\n   */\n  type: o.Expression;\n}\n\n// TODO(legacy-partial-output-inputs): Remove in v18.\n// https://github.com/angular/angular/blob/d4b423690210872b5c32a322a6090beda30b05a3/packages/core/src/compiler/compiler_facade_interface.ts#L197-L199\nexport type LegacyInputPartialMapping =\n  | string\n  | [bindingPropertyName: string, classPropertyName: string, transformFunction?: o.Expression];\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareDirective()` function accepts.\n */\nexport interface R3DeclareDirectiveMetadata extends R3PartialDeclaration {\n  /**\n   * Unparsed selector of the directive.\n   */\n  selector?: string;\n\n  /**\n   * A mapping of inputs from class property names to binding property names, or to a tuple of\n   * binding property name and class property name if the names are different.\n   */\n  inputs?: {\n    [fieldName: string]:\n      | {\n          classPropertyName: string;\n          publicName: string;\n          isSignal: boolean;\n          isRequired: boolean;\n          transformFunction: o.Expression | null;\n        }\n      | LegacyInputPartialMapping;\n  };\n\n  /**\n   * A mapping of outputs from class property names to binding property names.\n   */\n  outputs?: {[classPropertyName: string]: string};\n\n  /**\n   * Information about host bindings present on the component.\n   */\n  host?: {\n    /**\n     * A mapping of attribute names to their value expression.\n     */\n    attributes?: {[key: string]: o.Expression};\n\n    /**\n     * A mapping of event names to their unparsed event handler expression.\n     */\n    listeners: {[key: string]: string};\n\n    /**\n     * A mapping of bound properties to their unparsed binding expression.\n     */\n    properties?: {[key: string]: string};\n\n    /**\n     * The value of the class attribute, if present. This is stored outside of `attributes` as its\n     * string value must be known statically.\n     */\n    classAttribute?: string;\n\n    /**\n     * The value of the style attribute, if present. This is stored outside of `attributes` as its\n     * string value must be known statically.\n     */\n    styleAttribute?: string;\n  };\n\n  /**\n   * Information about the content queries made by the directive.\n   */\n  queries?: R3DeclareQueryMetadata[];\n\n  /**\n   * Information about the view queries made by the directive.\n   */\n  viewQueries?: R3DeclareQueryMetadata[];\n\n  /**\n   * The list of providers provided by the directive.\n   */\n  providers?: o.Expression;\n\n  /**\n   * The names by which the directive is exported.\n   */\n  exportAs?: string[];\n\n  /**\n   * Whether the directive has an inheritance clause. Defaults to false.\n   */\n  usesInheritance?: boolean;\n\n  /**\n   * Whether the directive implements the `ngOnChanges` hook. Defaults to false.\n   */\n  usesOnChanges?: boolean;\n\n  /**\n   * Whether the directive is standalone. Defaults to false.\n   */\n  isStandalone?: boolean;\n\n  /**\n   * Whether the directive is a signal-based directive. Defaults to false.\n   */\n  isSignal?: boolean;\n\n  /**\n   * Additional directives applied to the directive host.\n   */\n  hostDirectives?: R3DeclareHostDirectiveMetadata[];\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareComponent()` function accepts.\n */\nexport interface R3DeclareComponentMetadata extends R3DeclareDirectiveMetadata {\n  /**\n   * The component's unparsed template string as opaque expression. The template is represented\n   * using either a string literal or template literal without substitutions, but its value is\n   * not read directly. Instead, the template parser is given the full source file's text and\n   * the range of this expression to parse directly from source.\n   */\n  template: o.Expression;\n\n  /**\n   * Whether the template was inline (using `template`) or external (using `templateUrl`).\n   * Defaults to false.\n   */\n  isInline?: boolean;\n\n  /**\n   * CSS from inline styles and included styleUrls.\n   */\n  styles?: string[];\n\n  /**\n   * List of components which matched in the template, including sufficient\n   * metadata for each directive to attribute bindings and references within\n   * the template to each directive specifically, if the runtime instructions\n   * support this.\n   */\n  components?: R3DeclareDirectiveDependencyMetadata[];\n\n  /**\n   * List of directives which matched in the template, including sufficient\n   * metadata for each directive to attribute bindings and references within\n   * the template to each directive specifically, if the runtime instructions\n   * support this.\n   */\n  directives?: R3DeclareDirectiveDependencyMetadata[];\n\n  /**\n   * List of dependencies which matched in the template, including sufficient\n   * metadata for each directive/pipe to attribute bindings and references within\n   * the template to each directive specifically, if the runtime instructions\n   * support this.\n   */\n  dependencies?: R3DeclareTemplateDependencyMetadata[];\n\n  /**\n   * List of defer block dependency functions, ordered by the appearance\n   * of the corresponding deferred block in the template.\n   */\n  deferBlockDependencies?: o.Expression[];\n\n  /**\n   * A map of pipe names to an expression referencing the pipe type (possibly a forward reference\n   * wrapped in a `forwardRef` invocation) which are used in the template.\n   */\n  pipes?: {[pipeName: string]: o.Expression | (() => o.Expression)};\n\n  /**\n   * The list of view providers defined in the component.\n   */\n  viewProviders?: o.Expression;\n\n  /**\n   * A collection of animation triggers that will be used in the component template.\n   */\n  animations?: o.Expression;\n\n  /**\n   * Strategy used for detecting changes in the component.\n   * Defaults to `ChangeDetectionStrategy.Default`.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * An encapsulation policy for the component's styling.\n   * Defaults to `ViewEncapsulation.Emulated`.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Overrides the default interpolation start and end delimiters. Defaults to {{ and }}.\n   */\n  interpolation?: [string, string];\n\n  /**\n   * Whether whitespace in the template should be preserved. Defaults to false.\n   */\n  preserveWhitespaces?: boolean;\n}\n\nexport type R3DeclareTemplateDependencyMetadata =\n  | R3DeclareDirectiveDependencyMetadata\n  | R3DeclarePipeDependencyMetadata\n  | R3DeclareNgModuleDependencyMetadata;\n\nexport interface R3DeclareDirectiveDependencyMetadata {\n  kind: 'directive' | 'component';\n\n  /**\n   * Selector of the directive.\n   */\n  selector: string;\n\n  /**\n   * Reference to the directive class (possibly a forward reference wrapped in a `forwardRef`\n   * invocation).\n   */\n  type: o.Expression | (() => o.Expression);\n\n  /**\n   * Property names of the directive's inputs.\n   */\n  inputs?: string[];\n\n  /**\n   * Event names of the directive's outputs.\n   */\n  outputs?: string[];\n\n  /**\n   * Names by which this directive exports itself for references.\n   */\n  exportAs?: string[];\n}\n\nexport interface R3DeclarePipeDependencyMetadata {\n  kind: 'pipe';\n\n  name: string;\n\n  /**\n   * Reference to the pipe class (possibly a forward reference wrapped in a `forwardRef`\n   * invocation).\n   */\n  type: o.Expression | (() => o.Expression);\n}\n\nexport interface R3DeclareNgModuleDependencyMetadata {\n  kind: 'ngmodule';\n\n  type: o.Expression | (() => o.Expression);\n}\n\nexport interface R3DeclareQueryMetadata {\n  /**\n   * Name of the property on the class to update with query results.\n   */\n  propertyName: string;\n\n  /**\n   * Whether to read only the first matching result, or an array of results. Defaults to false.\n   */\n  first?: boolean;\n\n  /**\n   * Either an expression representing a type (possibly wrapped in a `forwardRef()`) or\n   * `InjectionToken` for the query predicate, or a set of string selectors.\n   */\n  predicate: o.Expression | string[];\n\n  /**\n   * Whether to include only direct children or all descendants. Defaults to false.\n   */\n  descendants?: boolean;\n\n  /**\n   * True to only fire changes if there are underlying changes to the query.\n   */\n  emitDistinctChangesOnly?: boolean;\n\n  /**\n   * An expression representing a type to read from each matched node, or null if the default value\n   * for a given node is to be returned.\n   */\n  read?: o.Expression;\n\n  /**\n   * Whether or not this query should collect only static results. Defaults to false.\n   *\n   * If static is true, the query's results will be set on the component after nodes are created,\n   * but before change detection runs. This means that any results that relied upon change detection\n   * to run (e.g. results inside *ngIf or *ngFor views) will not be collected. Query results are\n   * available in the ngOnInit hook.\n   *\n   * If static is false, the query's results will be set on the component after change detection\n   * runs. This means that the query results can contain nodes inside *ngIf or *ngFor views, but\n   * the results will not be available in the ngOnInit hook (only in the ngAfterContentInit for\n   * content hooks and ngAfterViewInit for view hooks).\n   */\n  static?: boolean;\n\n  /** Whether the query is signal-based. */\n  isSignal: boolean;\n}\n\n/**\n * Describes the shape of the objects that the `ɵɵngDeclareNgModule()` accepts.\n */\nexport interface R3DeclareNgModuleMetadata extends R3PartialDeclaration {\n  /**\n   * An array of expressions representing the bootstrap components specified by the module.\n   */\n  bootstrap?: o.Expression[];\n\n  /**\n   * An array of expressions representing the directives and pipes declared by the module.\n   */\n  declarations?: o.Expression[];\n\n  /**\n   * An array of expressions representing the imports of the module.\n   */\n  imports?: o.Expression[];\n\n  /**\n   * An array of expressions representing the exports of the module.\n   */\n  exports?: o.Expression[];\n\n  /**\n   * The set of schemas that declare elements to be allowed in the NgModule.\n   */\n  schemas?: o.Expression[];\n\n  /** Unique ID or expression representing the unique ID of an NgModule. */\n  id?: o.Expression;\n}\n\n/**\n * Describes the shape of the objects that the `ɵɵngDeclareInjector()` accepts.\n */\nexport interface R3DeclareInjectorMetadata extends R3PartialDeclaration {\n  /**\n   * The list of providers provided by the injector.\n   */\n  providers?: o.Expression;\n  /**\n   * The list of imports into the injector.\n   */\n  imports?: o.Expression[];\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclarePipe()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclarePipeMetadata extends R3PartialDeclaration {\n  /**\n   * The name to use in templates to refer to this pipe.\n   */\n  name: string;\n\n  /**\n   * Whether this pipe is \"pure\".\n   *\n   * A pure pipe's `transform()` method is only invoked when its input arguments change.\n   *\n   * Default: true.\n   */\n  pure?: boolean;\n\n  /**\n   * Whether the pipe is standalone.\n   *\n   * Default: false.\n   */\n  isStandalone?: boolean;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareFactory()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareFactoryMetadata extends R3PartialDeclaration {\n  /**\n   * A collection of dependencies that this factory relies upon.\n   *\n   * If this is `null`, then the type's constructor is nonexistent and will be inherited from an\n   * ancestor of the type.\n   *\n   * If this is `'invalid'`, then one or more of the parameters wasn't resolvable and any attempt to\n   * use these deps will result in a runtime error.\n   */\n  deps: R3DeclareDependencyMetadata[] | 'invalid' | null;\n\n  /**\n   * Type of the target being created by the factory.\n   */\n  target: FactoryTarget;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareInjectable()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareInjectableMetadata extends R3PartialDeclaration {\n  /**\n   * If provided, specifies that the declared injectable belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * If not provided, then it does not belong to any injector. Must be explicitly listed in the\n   * providers of an injector.\n   */\n  providedIn?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to a class to use when creating an instance of this\n   * injectable.\n   */\n  useClass?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to a function to use when creating an instance of\n   * this injectable.\n   */\n  useFactory?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to a token of another injectable that this injectable\n   * aliases.\n   */\n  useExisting?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to the value of the instance of this injectable.\n   */\n  useValue?: o.Expression;\n\n  /**\n   * An array of dependencies to support instantiating this injectable via `useClass` or\n   * `useFactory`.\n   */\n  deps?: R3DeclareDependencyMetadata[];\n}\n\n/**\n * Metadata indicating how a dependency should be injected into a factory.\n */\nexport interface R3DeclareDependencyMetadata {\n  /**\n   * An expression representing the token or value to be injected, or `null` if the dependency is\n   * not valid.\n   *\n   * If this dependency is due to the `@Attribute()` decorator, then this is an expression\n   * evaluating to the name of the attribute.\n   */\n  token: o.Expression | null;\n\n  /**\n   * Whether the dependency is injecting an attribute value.\n   * Default: false.\n   */\n  attribute?: boolean;\n\n  /**\n   * Whether the dependency has an @Host qualifier.\n   * Default: false,\n   */\n  host?: boolean;\n\n  /**\n   * Whether the dependency has an @Optional qualifier.\n   * Default: false,\n   */\n  optional?: boolean;\n\n  /**\n   * Whether the dependency has an @Self qualifier.\n   * Default: false,\n   */\n  self?: boolean;\n\n  /**\n   * Whether the dependency has an @SkipSelf qualifier.\n   * Default: false,\n   */\n  skipSelf?: boolean;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareClassMetadata()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareClassMetadata extends R3PartialDeclaration {\n  /**\n   * The Angular decorators of the class.\n   */\n  decorators: o.Expression;\n\n  /**\n   * Optionally specifies the constructor parameters, their types and the Angular decorators of each\n   * parameter. This property is omitted if the class does not have a constructor.\n   */\n  ctorParameters?: o.Expression;\n\n  /**\n   * Optionally specifies the Angular decorators applied to the class properties. This property is\n   * omitted if no properties have any decorators.\n   */\n  propDecorators?: o.Expression;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareClassMetadataAsync()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareClassMetadataAsync extends R3PartialDeclaration {\n  /** Function that loads the deferred dependencies associated with the component. */\n  resolveDeferredDeps: o.Expression;\n\n  /**\n   * Function that, when invoked with the resolved deferred\n   * dependencies, will return the class metadata.\n   */\n  resolveMetadata: o.Expression;\n}\n\n/**\n * Describes the shape of the object literal that can be\n * passed in as a part of the `hostDirectives` array.\n */\nexport interface R3DeclareHostDirectiveMetadata {\n  directive: o.Expression;\n  inputs?: string[];\n  outputs?: string[];\n}\n"]}