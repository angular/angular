{"version":3,"file":"shared.js","sourceRoot":"","sources":["shared.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,MAAM,EAAgB,MAAM,UAAU,CAAC;AA4B/C;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAAsB,SAAsB;IAC3E,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,SAAS;QACtB,SAAS;QACT,GAAG,MAAM;KACV,CAAC;AACJ,CAAC;AA4BD;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC9B,IAAY,EACZ,QAA0B,EAC1B,WAAyB,EACzB,KAAoB;IAEpB,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,QAAQ;QACrB,IAAI;QACJ,QAAQ;QACR,WAAW;QACX,KAAK;QACL,GAAG,MAAM;KACV,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,MAAM,MAAM,GAAmD;IACpE,WAAW,EAAE,IAAI;IACjB,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,IAAI;CACX,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../../output/output_ast';\nimport {OpKind, VariableFlags} from '../enums';\nimport {Op, XrefId} from '../operations';\nimport {SemanticVariable} from '../variable';\n\n/**\n * A special `Op` which is used internally in the `OpList` linked list to represent the head and\n * tail nodes of the list.\n *\n * `ListEndOp` is created internally in the `OpList` and should not be instantiated directly.\n */\nexport interface ListEndOp<OpT extends Op<OpT>> extends Op<OpT> {\n  kind: OpKind.ListEnd;\n}\n\n/**\n * An `Op` which directly wraps an output `Statement`.\n *\n * Often `StatementOp`s are the final result of IR processing.\n */\nexport interface StatementOp<OpT extends Op<OpT>> extends Op<OpT> {\n  kind: OpKind.Statement;\n\n  /**\n   * The output statement.\n   */\n  statement: o.Statement;\n}\n\n/**\n * Create a `StatementOp`.\n */\nexport function createStatementOp<OpT extends Op<OpT>>(statement: o.Statement): StatementOp<OpT> {\n  return {\n    kind: OpKind.Statement,\n    statement,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Operation which declares and initializes a `SemanticVariable`, that is valid either in create or\n * update IR.\n */\nexport interface VariableOp<OpT extends Op<OpT>> extends Op<OpT> {\n  kind: OpKind.Variable;\n\n  /**\n   * `XrefId` which identifies this specific variable, and is used to reference this variable from\n   * other parts of the IR.\n   */\n  xref: XrefId;\n\n  /**\n   * The `SemanticVariable` which describes the meaning behind this variable.\n   */\n  variable: SemanticVariable;\n\n  /**\n   * Expression representing the value of the variable.\n   */\n  initializer: o.Expression;\n\n  flags: VariableFlags;\n}\n\n/**\n * Create a `VariableOp`.\n */\nexport function createVariableOp<OpT extends Op<OpT>>(\n  xref: XrefId,\n  variable: SemanticVariable,\n  initializer: o.Expression,\n  flags: VariableFlags,\n): VariableOp<OpT> {\n  return {\n    kind: OpKind.Variable,\n    xref,\n    variable,\n    initializer,\n    flags,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Static structure shared by all operations.\n *\n * Used as a convenience via the spread operator (`...NEW_OP`) when creating new operations, and\n * ensures the fields are always in the same order.\n */\nexport const NEW_OP: Pick<Op<any>, 'debugListId' | 'prev' | 'next'> = {\n  debugListId: null,\n  prev: null,\n  next: null,\n};\n"]}