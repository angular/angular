{"version":3,"file":"create.js","sourceRoot":"","sources":["create.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SecurityContext} from '../../../../../core';\nimport * as i18n from '../../../../../i18n/i18n_ast';\nimport * as o from '../../../../../output/output_ast';\nimport {ParseSourceSpan} from '../../../../../parse_util';\nimport {\n  AnimationKind,\n  BindingKind,\n  DeferOpModifierKind,\n  DeferTriggerKind,\n  I18nContextKind,\n  I18nParamValueFlags,\n  Namespace,\n  OpKind,\n  TDeferDetailsFlags,\n  TemplateKind,\n} from '../enums';\nimport {SlotHandle} from '../handle';\nimport {Op, OpList, XrefId} from '../operations';\nimport {\n  ConsumesSlotOpTrait,\n  ConsumesVarsTrait,\n  TRAIT_CONSUMES_SLOT,\n  TRAIT_CONSUMES_VARS,\n} from '../traits';\n\nimport {ListEndOp, NEW_OP, StatementOp, VariableOp} from './shared';\n\nimport type {Interpolation, UpdateOp} from './update';\n\n/**\n * An operation usable on the creation side of the IR.\n */\nexport type CreateOp =\n  | ListEndOp<CreateOp>\n  | StatementOp<CreateOp>\n  | ElementOp\n  | ElementStartOp\n  | ElementEndOp\n  | ContainerOp\n  | ContainerStartOp\n  | ContainerEndOp\n  | TemplateOp\n  | EnableBindingsOp\n  | DisableBindingsOp\n  | TextOp\n  | ListenerOp\n  | TwoWayListenerOp\n  | PipeOp\n  | VariableOp<CreateOp>\n  | NamespaceOp\n  | ProjectionDefOp\n  | ProjectionOp\n  | ExtractedAttributeOp\n  | DeferOp\n  | DeferOnOp\n  | ConditionalCreateOp\n  | ConditionalBranchCreateOp\n  | RepeaterCreateOp\n  | I18nMessageOp\n  | I18nOp\n  | I18nStartOp\n  | I18nEndOp\n  | IcuStartOp\n  | IcuEndOp\n  | IcuPlaceholderOp\n  | I18nContextOp\n  | I18nAttributesOp\n  | DeclareLetOp\n  | AnimationListenerOp\n  | AnimationStringOp\n  | AnimationOp\n  | SourceLocationOp;\n\n/**\n * An operation representing the creation of an element or container.\n */\nexport type ElementOrContainerOps =\n  | ElementOp\n  | ElementStartOp\n  | ContainerOp\n  | ContainerStartOp\n  | TemplateOp\n  | RepeaterCreateOp\n  | ConditionalCreateOp\n  | ConditionalBranchCreateOp;\n\n/**\n * The set of OpKinds that represent the creation of an element or container\n */\nconst elementContainerOpKinds = new Set([\n  OpKind.Element,\n  OpKind.ElementStart,\n  OpKind.Container,\n  OpKind.ContainerStart,\n  OpKind.Template,\n  OpKind.RepeaterCreate,\n  OpKind.ConditionalCreate,\n  OpKind.ConditionalBranchCreate,\n]);\n\n/**\n * Checks whether the given operation represents the creation of an element or container.\n */\nexport function isElementOrContainerOp(op: CreateOp): op is ElementOrContainerOps {\n  return elementContainerOpKinds.has(op.kind);\n}\n\n/**\n * Representation of a local reference on an element.\n */\nexport interface LocalRef {\n  /**\n   * User-defined name of the local ref variable.\n   */\n  name: string;\n\n  /**\n   * Target of the local reference variable (often `''`).\n   */\n  target: string;\n}\n\n/**\n * Base interface for `Element`, `ElementStart`, and `Template` operations, containing common fields\n * used to represent their element-like nature.\n */\nexport interface ElementOrContainerOpBase extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: ElementOrContainerOps['kind'];\n\n  /**\n   * `XrefId` allocated for this element.\n   *\n   * This ID is used to reference this element from other IR structures.\n   */\n  xref: XrefId;\n\n  /**\n   * Attributes of various kinds on this element. Represented as a `ConstIndex` pointer into the\n   * shared `consts` array of the component compilation.\n   */\n  attributes: ConstIndex | null;\n\n  /**\n   * Local references to this element.\n   *\n   * Before local ref processing, this is an array of `LocalRef` declarations.\n   *\n   * After processing, it's a `ConstIndex` pointer into the shared `consts` array of the component\n   * compilation.\n   */\n  localRefs: LocalRef[] | ConstIndex | null;\n\n  /**\n   * Whether this container is marked `ngNonBindable`, which disabled Angular binding for itself and\n   * all descendants.\n   */\n  nonBindable: boolean;\n\n  /**\n   * The span of the element's start tag.\n   */\n  startSourceSpan: ParseSourceSpan;\n\n  /**\n   * The whole source span of the element, including children.\n   */\n  wholeSourceSpan: ParseSourceSpan;\n}\n\nexport interface ElementOpBase extends ElementOrContainerOpBase {\n  kind:\n    | OpKind.Element\n    | OpKind.ElementStart\n    | OpKind.Template\n    | OpKind.RepeaterCreate\n    | OpKind.ConditionalCreate\n    | OpKind.ConditionalBranchCreate;\n\n  /**\n   * The HTML tag name for this element.\n   */\n  tag: string | null;\n\n  /**\n   * The namespace of this element, which controls the preceding namespace instruction.\n   */\n  namespace: Namespace;\n}\n\n/**\n * Logical operation representing the start of an element in the creation IR.\n */\nexport interface ElementStartOp extends ElementOpBase {\n  kind: OpKind.ElementStart;\n\n  /**\n   * The i18n placeholder data associated with this element.\n   */\n  i18nPlaceholder?: i18n.TagPlaceholder;\n}\n\n/**\n * Create an `ElementStartOp`.\n */\nexport function createElementStartOp(\n  tag: string,\n  xref: XrefId,\n  namespace: Namespace,\n  i18nPlaceholder: i18n.TagPlaceholder | undefined,\n  startSourceSpan: ParseSourceSpan,\n  wholeSourceSpan: ParseSourceSpan,\n): ElementStartOp {\n  return {\n    kind: OpKind.ElementStart,\n    xref,\n    tag,\n    handle: new SlotHandle(),\n    attributes: null,\n    localRefs: [],\n    nonBindable: false,\n    namespace,\n    i18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Logical operation representing an element with no children in the creation IR.\n */\nexport interface ElementOp extends ElementOpBase {\n  kind: OpKind.Element;\n\n  /**\n   * The i18n placeholder data associated with this element.\n   */\n  i18nPlaceholder?: i18n.TagPlaceholder;\n}\n\n/**\n * Logical operation representing an embedded view declaration in the creation IR.\n */\nexport interface TemplateOp extends ElementOpBase {\n  kind: OpKind.Template;\n\n  templateKind: TemplateKind;\n\n  /**\n   * The number of declaration slots used by this template, or `null` if slots have not yet been\n   * assigned.\n   */\n  decls: number | null;\n\n  /**\n   * The number of binding variable slots used by this template, or `null` if binding variables have\n   * not yet been counted.\n   */\n  vars: number | null;\n\n  /**\n   * Suffix to add to the name of the generated template function.\n   */\n  functionNameSuffix: string;\n\n  /**\n   * The i18n placeholder data associated with this template.\n   */\n  i18nPlaceholder?: i18n.TagPlaceholder | i18n.BlockPlaceholder;\n}\n\n/**\n * Create a `TemplateOp`.\n */\nexport function createTemplateOp(\n  xref: XrefId,\n  templateKind: TemplateKind,\n  tag: string | null,\n  functionNameSuffix: string,\n  namespace: Namespace,\n  i18nPlaceholder: i18n.TagPlaceholder | i18n.BlockPlaceholder | undefined,\n  startSourceSpan: ParseSourceSpan,\n  wholeSourceSpan: ParseSourceSpan,\n): TemplateOp {\n  return {\n    kind: OpKind.Template,\n    xref,\n    templateKind,\n    attributes: null,\n    tag,\n    handle: new SlotHandle(),\n    functionNameSuffix,\n    decls: null,\n    vars: null,\n    localRefs: [],\n    nonBindable: false,\n    namespace,\n    i18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that creates a conditional (e.g. a if or switch).\n */\nexport interface ConditionalCreateOp extends ElementOpBase {\n  kind: OpKind.ConditionalCreate;\n\n  templateKind: TemplateKind;\n\n  /**\n   * The number of declaration slots used by this template, or `null` if slots have not yet been\n   * assigned.\n   */\n  decls: number | null;\n\n  /**\n   * The number of binding variable slots used by this template, or `null` if binding variables have\n   * not yet been counted.\n   */\n  vars: number | null;\n\n  /**\n   * Suffix to add to the name of the generated template function.\n   */\n  functionNameSuffix: string;\n\n  /**\n   * The i18n placeholder data associated with this template.\n   */\n  i18nPlaceholder?: i18n.TagPlaceholder | i18n.BlockPlaceholder;\n}\n\nexport function createConditionalCreateOp(\n  xref: XrefId,\n  templateKind: TemplateKind,\n  tag: string | null,\n  functionNameSuffix: string,\n  namespace: Namespace,\n  i18nPlaceholder: i18n.TagPlaceholder | i18n.BlockPlaceholder | undefined,\n  startSourceSpan: ParseSourceSpan,\n  wholeSourceSpan: ParseSourceSpan,\n): ConditionalCreateOp {\n  return {\n    kind: OpKind.ConditionalCreate,\n    xref,\n    templateKind,\n    attributes: null,\n    tag,\n    handle: new SlotHandle(),\n    functionNameSuffix,\n    decls: null,\n    vars: null,\n    localRefs: [],\n    nonBindable: false,\n    namespace,\n    i18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that creates a conditional branch (e.g. an else or case).\n */\nexport interface ConditionalBranchCreateOp extends ElementOpBase {\n  kind: OpKind.ConditionalBranchCreate;\n\n  templateKind: TemplateKind;\n\n  /**\n   * The number of declaration slots used by this template, or `null` if slots have not yet been\n   * assigned.\n   */\n  decls: number | null;\n\n  /**\n   * The number of binding variable slots used by this template, or `null` if binding variables have\n   * not yet been counted.\n   */\n  vars: number | null;\n\n  /**\n   * Suffix to add to the name of the generated template function.\n   */\n  functionNameSuffix: string;\n\n  /**\n   * The i18n placeholder data associated with this template.\n   */\n  i18nPlaceholder?: i18n.TagPlaceholder | i18n.BlockPlaceholder;\n}\n\nexport function createConditionalBranchCreateOp(\n  xref: XrefId,\n  templateKind: TemplateKind,\n  tag: string | null,\n  functionNameSuffix: string,\n  namespace: Namespace,\n  i18nPlaceholder: i18n.TagPlaceholder | i18n.BlockPlaceholder | undefined,\n  startSourceSpan: ParseSourceSpan,\n  wholeSourceSpan: ParseSourceSpan,\n): ConditionalBranchCreateOp {\n  return {\n    kind: OpKind.ConditionalBranchCreate,\n    xref,\n    templateKind,\n    attributes: null,\n    tag,\n    handle: new SlotHandle(),\n    functionNameSuffix,\n    decls: null,\n    vars: null,\n    localRefs: [],\n    nonBindable: false,\n    namespace,\n    i18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that creates a repeater (e.g. a for loop).\n */\nexport interface RepeaterCreateOp extends ElementOpBase, ConsumesVarsTrait {\n  kind: OpKind.RepeaterCreate;\n\n  /**\n   * The number of declaration slots used by this repeater's template, or `null` if slots have not\n   * yet been assigned.\n   */\n  decls: number | null;\n\n  /**\n   * The number of binding variable slots used by this repeater's, or `null` if binding variables\n   * have not yet been counted.\n   */\n  vars: number | null;\n\n  /**\n   * The Xref of the empty view function. (For the primary view function, use the `xref` property).\n   */\n  emptyView: XrefId | null;\n\n  /**\n   * The track expression to use while iterating.\n   */\n  track: o.Expression;\n\n  /**\n   * Some kinds of expressions (e.g. safe reads or nullish coalescing) require additional ops\n   * in order to work. This OpList keeps track of those ops, if they're necessary.\n   */\n  trackByOps: OpList<UpdateOp> | null;\n\n  /**\n   * `null` initially, then an `o.Expression`. Might be a track expression, or might be a reference\n   * into the constant pool.\n   */\n  trackByFn: o.Expression | null;\n\n  /**\n   * Context variables avaialable in this block.\n   */\n  varNames: RepeaterVarNames;\n\n  /**\n   * Whether the repeater track function relies on the component instance.\n   */\n  usesComponentInstance: boolean;\n\n  /**\n   * Suffix to add to the name of the generated template function.\n   */\n  functionNameSuffix: string;\n\n  /**\n   * Tag name for the empty block.\n   */\n  emptyTag: string | null;\n\n  /**\n   * Attributes of various kinds on the empty block. Represented as a `ConstIndex` pointer into the\n   * shared `consts` array of the component compilation.\n   */\n  emptyAttributes: ConstIndex | null;\n\n  /**\n   * The i18n placeholder for the repeated item template.\n   */\n  i18nPlaceholder: i18n.BlockPlaceholder | undefined;\n\n  /**\n   * The i18n placeholder for the empty template.\n   */\n  emptyI18nPlaceholder: i18n.BlockPlaceholder | undefined;\n}\n\n// TODO: add source spans?\nexport interface RepeaterVarNames {\n  $index: Set<string>;\n  $implicit: string;\n}\n\nexport function createRepeaterCreateOp(\n  primaryView: XrefId,\n  emptyView: XrefId | null,\n  tag: string | null,\n  track: o.Expression,\n  varNames: RepeaterVarNames,\n  emptyTag: string | null,\n  i18nPlaceholder: i18n.BlockPlaceholder | undefined,\n  emptyI18nPlaceholder: i18n.BlockPlaceholder | undefined,\n  startSourceSpan: ParseSourceSpan,\n  wholeSourceSpan: ParseSourceSpan,\n): RepeaterCreateOp {\n  return {\n    kind: OpKind.RepeaterCreate,\n    attributes: null,\n    xref: primaryView,\n    handle: new SlotHandle(),\n    emptyView,\n    track,\n    trackByFn: null,\n    trackByOps: null,\n    tag,\n    emptyTag,\n    emptyAttributes: null,\n    functionNameSuffix: 'For',\n    namespace: Namespace.HTML,\n    nonBindable: false,\n    localRefs: [],\n    decls: null,\n    vars: null,\n    varNames,\n    usesComponentInstance: false,\n    i18nPlaceholder,\n    emptyI18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_VARS,\n    numSlotsUsed: emptyView === null ? 2 : 3,\n  };\n}\n\n/**\n * Logical operation representing the end of an element structure in the creation IR.\n *\n * Pairs with an `ElementStart` operation.\n */\nexport interface ElementEndOp extends Op<CreateOp> {\n  kind: OpKind.ElementEnd;\n\n  /**\n   * The `XrefId` of the element declared via `ElementStart`.\n   */\n  xref: XrefId;\n\n  sourceSpan: ParseSourceSpan | null;\n}\n\n/**\n * Create an `ElementEndOp`.\n */\nexport function createElementEndOp(xref: XrefId, sourceSpan: ParseSourceSpan | null): ElementEndOp {\n  return {\n    kind: OpKind.ElementEnd,\n    xref,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Logical operation representing the start of a container in the creation IR.\n */\nexport interface ContainerStartOp extends ElementOrContainerOpBase {\n  kind: OpKind.ContainerStart;\n}\n\n/**\n * Logical operation representing an empty container in the creation IR.\n */\nexport interface ContainerOp extends ElementOrContainerOpBase {\n  kind: OpKind.Container;\n}\n\n/**\n * Logical operation representing the end of a container structure in the creation IR.\n *\n * Pairs with an `ContainerStart` operation.\n */\nexport interface ContainerEndOp extends Op<CreateOp> {\n  kind: OpKind.ContainerEnd;\n\n  /**\n   * The `XrefId` of the element declared via `ContainerStart`.\n   */\n  xref: XrefId;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Logical operation causing binding to be disabled in descendents of a non-bindable container.\n */\nexport interface DisableBindingsOp extends Op<CreateOp> {\n  kind: OpKind.DisableBindings;\n\n  /**\n   * `XrefId` of the element that was marked non-bindable.\n   */\n  xref: XrefId;\n}\n\nexport function createDisableBindingsOp(xref: XrefId): DisableBindingsOp {\n  return {\n    kind: OpKind.DisableBindings,\n    xref,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Logical operation causing binding to be re-enabled after visiting descendants of a\n * non-bindable container.\n */\nexport interface EnableBindingsOp extends Op<CreateOp> {\n  kind: OpKind.EnableBindings;\n\n  /**\n   * `XrefId` of the element that was marked non-bindable.\n   */\n  xref: XrefId;\n}\n\nexport function createEnableBindingsOp(xref: XrefId): EnableBindingsOp {\n  return {\n    kind: OpKind.EnableBindings,\n    xref,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Logical operation representing a text node in the creation IR.\n */\nexport interface TextOp extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.Text;\n\n  /**\n   * `XrefId` used to reference this text node in other IR structures.\n   */\n  xref: XrefId;\n\n  /**\n   * The static initial value of the text node.\n   */\n  initialValue: string;\n\n  /**\n   * The placeholder for this text in its parent ICU. If this text is not part of an ICU, the\n   * placeholder is null.\n   */\n  icuPlaceholder: string | null;\n\n  sourceSpan: ParseSourceSpan | null;\n}\n\n/**\n * Create a `TextOp`.\n */\nexport function createTextOp(\n  xref: XrefId,\n  initialValue: string,\n  icuPlaceholder: string | null,\n  sourceSpan: ParseSourceSpan | null,\n): TextOp {\n  return {\n    kind: OpKind.Text,\n    xref,\n    handle: new SlotHandle(),\n    initialValue,\n    icuPlaceholder,\n    sourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n  };\n}\n\n/**\n * A logical operation representing binding to an animation in the create IR.\n */\nexport interface AnimationStringOp extends Op<CreateOp> {\n  kind: OpKind.AnimationString;\n\n  target: XrefId;\n\n  /**\n   * The name of the extracted attribute.\n   */\n  name: string;\n\n  /**\n   * Kind of animation (enter or leave).\n   */\n  animationKind: AnimationKind;\n\n  /**\n   * Expression which is bound to the property.\n   */\n  expression: o.Expression | Interpolation;\n\n  i18nMessage: XrefId | null;\n\n  /**\n   * The security context of the binding.\n   */\n  securityContext: SecurityContext | SecurityContext[];\n\n  /**\n   * The sanitizer for this property.\n   */\n  sanitizer: o.Expression | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Create an `AnimationOp`.\n */\nexport function createAnimationStringOp(\n  name: string,\n  target: XrefId,\n  animationKind: AnimationKind,\n  expression: o.Expression | Interpolation,\n  securityContext: SecurityContext | SecurityContext[],\n  sourceSpan: ParseSourceSpan,\n): AnimationStringOp {\n  return {\n    kind: OpKind.AnimationString,\n    name,\n    target,\n    animationKind,\n    expression,\n    i18nMessage: null,\n    securityContext,\n    sanitizer: null,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * A logical operation representing binding to an animation in the create IR.\n */\nexport interface AnimationOp extends Op<CreateOp> {\n  kind: OpKind.Animation;\n\n  target: XrefId;\n\n  /**\n   * The name of the extracted attribute.\n   */\n  name: string;\n\n  /**\n   * Kind of animation (enter or leave).\n   */\n  animationKind: AnimationKind;\n\n  /**\n   * A list of `UpdateOp`s representing the body of the callback function.\n   */\n  handlerOps: OpList<UpdateOp>;\n\n  /**\n   * Name of the function\n   */\n  handlerFnName: string | null;\n\n  i18nMessage: XrefId | null;\n\n  /**\n   * The security context of the binding.\n   */\n  securityContext: SecurityContext | SecurityContext[];\n\n  /**\n   * The sanitizer for this property.\n   */\n  sanitizer: o.Expression | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Create an `AnimationOp`.\n */\nexport function createAnimationOp(\n  name: string,\n  target: XrefId,\n  animationKind: AnimationKind,\n  callbackOps: Array<UpdateOp>,\n  securityContext: SecurityContext | SecurityContext[],\n  sourceSpan: ParseSourceSpan,\n): AnimationOp {\n  const handlerOps = new OpList<UpdateOp>();\n  handlerOps.push(callbackOps);\n  return {\n    kind: OpKind.Animation,\n    name,\n    target,\n    animationKind,\n    handlerOps,\n    handlerFnName: null,\n    i18nMessage: null,\n    securityContext,\n    sanitizer: null,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Logical operation representing an event listener on an element in the creation IR.\n */\nexport interface ListenerOp extends Op<CreateOp> {\n  kind: OpKind.Listener;\n\n  target: XrefId;\n  targetSlot: SlotHandle;\n\n  /**\n   * Whether this listener is from a host binding.\n   */\n  hostListener: boolean;\n\n  /**\n   * Name of the event which is being listened to.\n   */\n  name: string;\n\n  /**\n   * Tag name of the element on which this listener is placed. Might be null, if this listener\n   * belongs to a host binding.\n   */\n  tag: string | null;\n\n  /**\n   * A list of `UpdateOp`s representing the body of the event listener.\n   */\n  handlerOps: OpList<UpdateOp>;\n\n  /**\n   * Name of the function\n   */\n  handlerFnName: string | null;\n\n  /**\n   * Whether this listener is known to consume `$event` in its body.\n   */\n  consumesDollarEvent: boolean;\n\n  /**\n   * Whether the listener is listening for an animation event.\n   */\n  isLegacyAnimationListener: boolean;\n\n  /**\n   * The animation phase of the listener.\n   */\n  legacyAnimationPhase: string | null;\n\n  /**\n   * Some event listeners can have a target, e.g. in `document:dragover`.\n   */\n  eventTarget: string | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Create a `ListenerOp`. Host bindings reuse all the listener logic.\n */\nexport function createListenerOp(\n  target: XrefId,\n  targetSlot: SlotHandle,\n  name: string,\n  tag: string | null,\n  handlerOps: Array<UpdateOp>,\n  legacyAnimationPhase: string | null,\n  eventTarget: string | null,\n  hostListener: boolean,\n  sourceSpan: ParseSourceSpan,\n): ListenerOp {\n  const handlerList = new OpList<UpdateOp>();\n  handlerList.push(handlerOps);\n  return {\n    kind: OpKind.Listener,\n    target,\n    targetSlot,\n    tag,\n    hostListener,\n    name,\n    handlerOps: handlerList,\n    handlerFnName: null,\n    consumesDollarEvent: false,\n    isLegacyAnimationListener: legacyAnimationPhase !== null,\n    legacyAnimationPhase: legacyAnimationPhase,\n    eventTarget,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\nexport interface AnimationListenerOp extends Op<CreateOp> {\n  kind: OpKind.AnimationListener;\n\n  target: XrefId;\n  targetSlot: SlotHandle;\n\n  /**\n   * Whether this listener is from a host binding.\n   */\n  hostListener: boolean;\n\n  /**\n   * Name of the event which is being listened to.\n   */\n  name: string;\n\n  /**\n   * Whether the event is on enter or leave\n   */\n  animationKind: AnimationKind;\n\n  /**\n   * Tag name of the element on which this listener is placed. Might be null, if this listener\n   * belongs to a host binding.\n   */\n  tag: string | null;\n\n  /**\n   * A list of `UpdateOp`s representing the body of the event listener.\n   */\n  handlerOps: OpList<UpdateOp>;\n\n  /**\n   * Name of the function\n   */\n  handlerFnName: string | null;\n\n  /**\n   * Whether this listener is known to consume `$event` in its body.\n   */\n  consumesDollarEvent: boolean;\n\n  /**\n   * Some event listeners can have a target, e.g. in `document:dragover`.\n   */\n  eventTarget: string | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Create a `ListenerOp`. Host bindings reuse all the listener logic.\n */\nexport function createAnimationListenerOp(\n  target: XrefId,\n  targetSlot: SlotHandle,\n  name: string,\n  tag: string | null,\n  handlerOps: Array<UpdateOp>,\n  animationKind: AnimationKind,\n  eventTarget: string | null,\n  hostListener: boolean,\n  sourceSpan: ParseSourceSpan,\n): AnimationListenerOp {\n  const handlerList = new OpList<UpdateOp>();\n  handlerList.push(handlerOps);\n  return {\n    kind: OpKind.AnimationListener,\n    target,\n    targetSlot,\n    tag,\n    hostListener,\n    name,\n    animationKind,\n    handlerOps: handlerList,\n    handlerFnName: null,\n    consumesDollarEvent: false,\n    eventTarget,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Logical operation representing the event side of a two-way binding on an element\n * in the creation IR.\n */\nexport interface TwoWayListenerOp extends Op<CreateOp> {\n  kind: OpKind.TwoWayListener;\n\n  target: XrefId;\n  targetSlot: SlotHandle;\n\n  /**\n   * Name of the event which is being listened to.\n   */\n  name: string;\n\n  /**\n   * Tag name of the element on which this listener is placed.\n   */\n  tag: string | null;\n\n  /**\n   * A list of `UpdateOp`s representing the body of the event listener.\n   */\n  handlerOps: OpList<UpdateOp>;\n\n  /**\n   * Name of the function\n   */\n  handlerFnName: string | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Create a `TwoWayListenerOp`.\n */\nexport function createTwoWayListenerOp(\n  target: XrefId,\n  targetSlot: SlotHandle,\n  name: string,\n  tag: string | null,\n  handlerOps: Array<UpdateOp>,\n  sourceSpan: ParseSourceSpan,\n): TwoWayListenerOp {\n  const handlerList = new OpList<UpdateOp>();\n  handlerList.push(handlerOps);\n  return {\n    kind: OpKind.TwoWayListener,\n    target,\n    targetSlot,\n    tag,\n    name,\n    handlerOps: handlerList,\n    handlerFnName: null,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\nexport interface PipeOp extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.Pipe;\n  xref: XrefId;\n  name: string;\n}\n\nexport function createPipeOp(xref: XrefId, slot: SlotHandle, name: string): PipeOp {\n  return {\n    kind: OpKind.Pipe,\n    xref,\n    handle: slot,\n    name,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT,\n  };\n}\n\n/**\n * An op corresponding to a namespace instruction, for switching between HTML, SVG, and MathML.\n */\nexport interface NamespaceOp extends Op<CreateOp> {\n  kind: OpKind.Namespace;\n  active: Namespace;\n}\n\nexport function createNamespaceOp(namespace: Namespace): NamespaceOp {\n  return {\n    kind: OpKind.Namespace,\n    active: namespace,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that creates a content projection slot.\n */\nexport interface ProjectionDefOp extends Op<CreateOp> {\n  kind: OpKind.ProjectionDef;\n\n  // The parsed selector information for this projection def.\n  def: o.Expression | null;\n}\n\nexport function createProjectionDefOp(def: o.Expression | null): ProjectionDefOp {\n  return {\n    kind: OpKind.ProjectionDef,\n    def,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that creates a content projection slot.\n */\nexport interface ProjectionOp extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.Projection;\n\n  xref: XrefId;\n\n  projectionSlotIndex: number;\n\n  attributes: null | o.LiteralArrayExpr;\n\n  localRefs: string[];\n\n  selector: string;\n\n  i18nPlaceholder?: i18n.TagPlaceholder;\n\n  sourceSpan: ParseSourceSpan;\n\n  fallbackView: XrefId | null;\n\n  fallbackViewI18nPlaceholder?: i18n.BlockPlaceholder;\n}\n\nexport function createProjectionOp(\n  xref: XrefId,\n  selector: string,\n  i18nPlaceholder: i18n.TagPlaceholder | undefined,\n  fallbackView: XrefId | null,\n  sourceSpan: ParseSourceSpan,\n): ProjectionOp {\n  return {\n    kind: OpKind.Projection,\n    xref,\n    handle: new SlotHandle(),\n    selector,\n    i18nPlaceholder,\n    fallbackView,\n    projectionSlotIndex: 0,\n    attributes: null,\n    localRefs: [],\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT,\n    numSlotsUsed: fallbackView === null ? 1 : 2,\n  };\n}\n\n/**\n * Represents an attribute that has been extracted for inclusion in the consts array.\n */\nexport interface ExtractedAttributeOp extends Op<CreateOp> {\n  kind: OpKind.ExtractedAttribute;\n\n  /**\n   * The `XrefId` of the template-like element the extracted attribute will belong to.\n   */\n  target: XrefId;\n\n  /**\n   *  The kind of binding represented by this extracted attribute.\n   */\n  bindingKind: BindingKind;\n\n  /**\n   * The namespace of the attribute (or null if none).\n   */\n  namespace: string | null;\n\n  /**\n   * The name of the extracted attribute.\n   */\n  name: string;\n\n  /**\n   * The value expression of the extracted attribute.\n   */\n  expression: o.Expression | null;\n\n  /**\n   * If this attribute has a corresponding i18n attribute (e.g. `i18n-foo=\"m:d\"`), then this is the\n   * i18n context for it.\n   */\n  i18nContext: XrefId | null;\n\n  /**\n   * The security context of the binding.\n   */\n  securityContext: SecurityContext | SecurityContext[];\n\n  /**\n   * The trusted value function for this property.\n   */\n  trustedValueFn: o.Expression | null;\n\n  i18nMessage: i18n.Message | null;\n}\n\n/**\n * Create an `ExtractedAttributeOp`.\n */\nexport function createExtractedAttributeOp(\n  target: XrefId,\n  bindingKind: BindingKind,\n  namespace: string | null,\n  name: string,\n  expression: o.Expression | null,\n  i18nContext: XrefId | null,\n  i18nMessage: i18n.Message | null,\n  securityContext: SecurityContext | SecurityContext[],\n): ExtractedAttributeOp {\n  return {\n    kind: OpKind.ExtractedAttribute,\n    target,\n    bindingKind,\n    namespace,\n    name,\n    expression,\n    i18nContext,\n    i18nMessage,\n    securityContext,\n    trustedValueFn: null,\n    ...NEW_OP,\n  };\n}\n\nexport interface DeferOp extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.Defer;\n\n  /**\n   * The xref of this defer op.\n   */\n  xref: XrefId;\n\n  /**\n   * The xref of the main view.\n   */\n  mainView: XrefId;\n\n  mainSlot: SlotHandle;\n\n  /**\n   * Secondary loading block associated with this defer op.\n   */\n  loadingView: XrefId | null;\n\n  loadingSlot: SlotHandle | null;\n\n  /**\n   * Secondary placeholder block associated with this defer op.\n   */\n  placeholderView: XrefId | null;\n\n  placeholderSlot: SlotHandle | null;\n\n  /**\n   * Secondary error block associated with this defer op.\n   */\n  errorView: XrefId | null;\n\n  errorSlot: SlotHandle | null;\n\n  placeholderMinimumTime: number | null;\n  loadingMinimumTime: number | null;\n  loadingAfterTime: number | null;\n\n  placeholderConfig: o.Expression | null;\n  loadingConfig: o.Expression | null;\n\n  /**\n   * Depending on the compilation mode, there can be either one dependency resolution function\n   * per deferred block or one for the entire template. This field contains the function that\n   * belongs specifically to the current deferred block.\n   */\n  ownResolverFn: o.Expression | null;\n\n  /**\n   * After processing, the resolver function for the defer deps will be extracted to the constant\n   * pool, and a reference to that function will be populated here.\n   */\n  resolverFn: o.Expression | null;\n\n  /**\n   * Specifies defer block flags, which should be used for all\n   * instances of a given defer block (the flags that should be\n   * placed into the `TDeferDetails` at runtime).\n   */\n  flags: TDeferDetailsFlags | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\nexport function createDeferOp(\n  xref: XrefId,\n  main: XrefId,\n  mainSlot: SlotHandle,\n  ownResolverFn: o.Expression | null,\n  resolverFn: o.Expression | null,\n  sourceSpan: ParseSourceSpan,\n): DeferOp {\n  return {\n    kind: OpKind.Defer,\n    xref,\n    handle: new SlotHandle(),\n    mainView: main,\n    mainSlot,\n    loadingView: null,\n    loadingSlot: null,\n    loadingConfig: null,\n    loadingMinimumTime: null,\n    loadingAfterTime: null,\n    placeholderView: null,\n    placeholderSlot: null,\n    placeholderConfig: null,\n    placeholderMinimumTime: null,\n    errorView: null,\n    errorSlot: null,\n    ownResolverFn,\n    resolverFn,\n    flags: null,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT,\n    numSlotsUsed: 2,\n  };\n}\ninterface DeferTriggerBase {\n  kind: DeferTriggerKind;\n}\n\ninterface DeferTriggerWithTargetBase extends DeferTriggerBase {\n  targetName: string | null;\n\n  /**\n   * The Xref of the targeted name. May be in a different view.\n   */\n  targetXref: XrefId | null;\n\n  /**\n   * The slot index of the named reference, inside the view provided below. This slot may not be\n   * inside the current view, and is handled specially as a result.\n   */\n  targetSlot: SlotHandle | null;\n\n  targetView: XrefId | null;\n\n  /**\n   * Number of steps to walk up or down the view tree to find the target localRef.\n   */\n  targetSlotViewSteps: number | null;\n}\n\ninterface DeferIdleTrigger extends DeferTriggerBase {\n  kind: DeferTriggerKind.Idle;\n}\n\ninterface DeferImmediateTrigger extends DeferTriggerBase {\n  kind: DeferTriggerKind.Immediate;\n}\n\ninterface DeferNeverTrigger extends DeferTriggerBase {\n  kind: DeferTriggerKind.Never;\n}\n\ninterface DeferHoverTrigger extends DeferTriggerWithTargetBase {\n  kind: DeferTriggerKind.Hover;\n}\n\ninterface DeferTimerTrigger extends DeferTriggerBase {\n  kind: DeferTriggerKind.Timer;\n\n  delay: number;\n}\n\ninterface DeferInteractionTrigger extends DeferTriggerWithTargetBase {\n  kind: DeferTriggerKind.Interaction;\n}\n\ninterface DeferViewportTrigger extends DeferTriggerWithTargetBase {\n  kind: DeferTriggerKind.Viewport;\n}\n\n/**\n * The union type of all defer trigger interfaces.\n */\nexport type DeferTrigger =\n  | DeferIdleTrigger\n  | DeferImmediateTrigger\n  | DeferTimerTrigger\n  | DeferHoverTrigger\n  | DeferInteractionTrigger\n  | DeferViewportTrigger\n  | DeferNeverTrigger;\n\nexport interface DeferOnOp extends Op<CreateOp> {\n  kind: OpKind.DeferOn;\n\n  defer: XrefId;\n\n  /**\n   * The trigger for this defer op (e.g. idle, hover, etc).\n   */\n  trigger: DeferTrigger;\n\n  /**\n   * Modifier set on the trigger by the user (e.g. `hydrate`, `prefetch` etc).\n   */\n  modifier: DeferOpModifierKind;\n\n  sourceSpan: ParseSourceSpan;\n}\n\nexport function createDeferOnOp(\n  defer: XrefId,\n  trigger: DeferTrigger,\n  modifier: DeferOpModifierKind,\n  sourceSpan: ParseSourceSpan,\n): DeferOnOp {\n  return {\n    kind: OpKind.DeferOn,\n    defer,\n    trigger,\n    modifier,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Op that reserves a slot during creation time for a `@let` declaration.\n */\nexport interface DeclareLetOp extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.DeclareLet;\n  xref: XrefId;\n  sourceSpan: ParseSourceSpan;\n  declaredName: string;\n}\n\n/**\n * Creates a `DeclareLetOp`.\n */\nexport function createDeclareLetOp(\n  xref: XrefId,\n  declaredName: string,\n  sourceSpan: ParseSourceSpan,\n): DeclareLetOp {\n  return {\n    kind: OpKind.DeclareLet,\n    xref,\n    declaredName,\n    sourceSpan,\n    handle: new SlotHandle(),\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n  };\n}\n\n/**\n * Represents a single value in an i18n param map. Each placeholder in the map may have multiple of\n * these values associated with it.\n */\nexport interface I18nParamValue {\n  /**\n   * The value. This can be either a slot number, special string, or compound-value consisting of an\n   * element slot number and template slot number.\n   */\n  value: string | number | {element: number; template: number};\n\n  /**\n   * The sub-template index associated with the value.\n   */\n  subTemplateIndex: number | null;\n\n  /**\n   * Flags associated with the value.\n   */\n  flags: I18nParamValueFlags;\n}\n\n/**\n * Represents an i18n message that has been extracted for inclusion in the consts array.\n */\nexport interface I18nMessageOp extends Op<CreateOp> {\n  kind: OpKind.I18nMessage;\n\n  /**\n   * An id used to reference this message.\n   */\n  xref: XrefId;\n\n  /**\n   * The context from which this message was extracted\n   * TODO: remove this, and add another property here instead to match ExtractedAttributes\n   */\n  i18nContext: XrefId;\n\n  /**\n   * A reference to the i18n op this message was extracted from.\n   *\n   * This might be null, which means this message is not associated with a block. This probably\n   * means it is an i18n attribute's message.\n   */\n  i18nBlock: XrefId | null;\n\n  /**\n   * The i18n message represented by this op.\n   */\n  message: i18n.Message;\n\n  /**\n   * The placeholder used for this message when it is referenced in another message.\n   * For a top-level message that isn't referenced from another message, this will be null.\n   */\n  messagePlaceholder: string | null;\n\n  /**\n   * Whether this message needs post-processing.\n   */\n  needsPostprocessing: boolean;\n\n  /**\n   * The param map, with placeholders represented as an `Expression`.\n   */\n  params: Map<string, o.Expression>;\n\n  /**\n   * The post-processing param map, with placeholders represented as an `Expression`.\n   */\n  postprocessingParams: Map<string, o.Expression>;\n\n  /**\n   * A list of sub-messages that are referenced by this message.\n   */\n  subMessages: XrefId[];\n}\n\n/**\n * Create an `ExtractedMessageOp`.\n */\nexport function createI18nMessageOp(\n  xref: XrefId,\n  i18nContext: XrefId,\n  i18nBlock: XrefId | null,\n  message: i18n.Message,\n  messagePlaceholder: string | null,\n  params: Map<string, o.Expression>,\n  postprocessingParams: Map<string, o.Expression>,\n  needsPostprocessing: boolean,\n): I18nMessageOp {\n  return {\n    kind: OpKind.I18nMessage,\n    xref,\n    i18nContext,\n    i18nBlock,\n    message,\n    messagePlaceholder,\n    params,\n    postprocessingParams,\n    needsPostprocessing,\n    subMessages: [],\n    ...NEW_OP,\n  };\n}\n\nexport interface I18nOpBase extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.I18nStart | OpKind.I18n;\n\n  /**\n   * `XrefId` allocated for this i18n block.\n   */\n  xref: XrefId;\n\n  /**\n   * A reference to the root i18n block that this one belongs to. For a root i18n block, this is\n   * the same as xref.\n   */\n  root: XrefId;\n\n  /**\n   * The i18n metadata associated with this op.\n   */\n  message: i18n.Message;\n\n  /**\n   * The index in the consts array where the message i18n message is stored.\n   */\n  messageIndex: ConstIndex | null;\n\n  /**\n   * The index of this sub-block in the i18n message. For a root i18n block, this is null.\n   */\n  subTemplateIndex: number | null;\n\n  /**\n   * The i18n context generated from this block. Initially null, until the context is created.\n   */\n  context: XrefId | null;\n\n  sourceSpan: ParseSourceSpan | null;\n}\n\n/**\n * Represents an empty i18n block.\n */\nexport interface I18nOp extends I18nOpBase {\n  kind: OpKind.I18n;\n}\n\n/**\n * Represents the start of an i18n block.\n */\nexport interface I18nStartOp extends I18nOpBase {\n  kind: OpKind.I18nStart;\n}\n\n/**\n * Create an `I18nStartOp`.\n */\nexport function createI18nStartOp(\n  xref: XrefId,\n  message: i18n.Message,\n  root: XrefId | undefined,\n  sourceSpan: ParseSourceSpan | null,\n): I18nStartOp {\n  return {\n    kind: OpKind.I18nStart,\n    xref,\n    handle: new SlotHandle(),\n    root: root ?? xref,\n    message,\n    messageIndex: null,\n    subTemplateIndex: null,\n    context: null,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT,\n  };\n}\n\n/**\n * Represents the end of an i18n block.\n */\nexport interface I18nEndOp extends Op<CreateOp> {\n  kind: OpKind.I18nEnd;\n\n  /**\n   * The `XrefId` of the `I18nStartOp` that created this block.\n   */\n  xref: XrefId;\n\n  sourceSpan: ParseSourceSpan | null;\n}\n\n/**\n * Create an `I18nEndOp`.\n */\nexport function createI18nEndOp(xref: XrefId, sourceSpan: ParseSourceSpan | null): I18nEndOp {\n  return {\n    kind: OpKind.I18nEnd,\n    xref,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that represents the start of an ICU expression.\n */\nexport interface IcuStartOp extends Op<CreateOp> {\n  kind: OpKind.IcuStart;\n\n  /**\n   * The ID of the ICU.\n   */\n  xref: XrefId;\n\n  /**\n   * The i18n message for this ICU.\n   */\n  message: i18n.Message;\n\n  /**\n   * Placeholder used to reference this ICU in other i18n messages.\n   */\n  messagePlaceholder: string;\n\n  /**\n   * A reference to the i18n context for this op. Initially null, until the context is created.\n   */\n  context: XrefId | null;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Creates an ICU start op.\n */\nexport function createIcuStartOp(\n  xref: XrefId,\n  message: i18n.Message,\n  messagePlaceholder: string,\n  sourceSpan: ParseSourceSpan,\n): IcuStartOp {\n  return {\n    kind: OpKind.IcuStart,\n    xref,\n    message,\n    messagePlaceholder,\n    context: null,\n    sourceSpan,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that represents the end of an ICU expression.\n */\nexport interface IcuEndOp extends Op<CreateOp> {\n  kind: OpKind.IcuEnd;\n\n  /**\n   * The ID of the corresponding IcuStartOp.\n   */\n  xref: XrefId;\n}\n\n/**\n * Creates an ICU end op.\n */\nexport function createIcuEndOp(xref: XrefId): IcuEndOp {\n  return {\n    kind: OpKind.IcuEnd,\n    xref,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An op that represents a placeholder in an ICU expression.\n */\nexport interface IcuPlaceholderOp extends Op<CreateOp> {\n  kind: OpKind.IcuPlaceholder;\n\n  /**\n   * The ID of the ICU placeholder.\n   */\n  xref: XrefId;\n\n  /**\n   * The name of the placeholder in the ICU expression.\n   */\n  name: string;\n\n  /**\n   * The static strings to be combined with dynamic expression values to form the text. This works\n   * like interpolation, but the strings are combined at compile time, using special placeholders\n   * for the dynamic expressions, and put into the translated message.\n   */\n  strings: string[];\n\n  /**\n   * Placeholder values for the i18n expressions to be combined with the static strings to form the\n   * full placeholder value.\n   */\n  expressionPlaceholders: I18nParamValue[];\n}\n\n/**\n * Creates an ICU placeholder op.\n */\nexport function createIcuPlaceholderOp(\n  xref: XrefId,\n  name: string,\n  strings: string[],\n): IcuPlaceholderOp {\n  return {\n    kind: OpKind.IcuPlaceholder,\n    xref,\n    name,\n    strings,\n    expressionPlaceholders: [],\n    ...NEW_OP,\n  };\n}\n\n/**\n * An i18n context that is used to generate a translated i18n message. A separate context is created\n * for three different scenarios:\n *\n * 1. For each top-level i18n block.\n * 2. For each ICU referenced as a sub-message. ICUs that are referenced as a sub-message will be\n *    used to generate a separate i18n message, but will not be extracted directly into the consts\n *    array. Instead they will be pulled in as part of the initialization statements for the message\n *    that references them.\n * 3. For each i18n attribute.\n *\n * Child i18n blocks, resulting from the use of an ng-template inside of a parent i18n block, do not\n * generate a separate context. Instead their content is included in the translated message for\n * their root block.\n */\nexport interface I18nContextOp extends Op<CreateOp> {\n  kind: OpKind.I18nContext;\n\n  contextKind: I18nContextKind;\n\n  /**\n   * The id of this context.\n   */\n  xref: XrefId;\n\n  /**\n   * A reference to the I18nStartOp or I18nOp this context belongs to.\n   *\n   * It is possible for multiple contexts to belong to the same block, since both the block and any\n   * ICUs inside the block will each get their own context.\n   *\n   * This might be `null`, in which case the context is not associated with an i18n block. This\n   * probably means that it belongs to an i18n attribute.\n   */\n  i18nBlock: XrefId | null;\n\n  /**\n   * The i18n message associated with this context.\n   */\n  message: i18n.Message;\n\n  /**\n   * The param map for this context.\n   */\n  params: Map<string, I18nParamValue[]>;\n\n  /**\n   * The post-processing param map for this context.\n   */\n  postprocessingParams: Map<string, I18nParamValue[]>;\n\n  sourceSpan: ParseSourceSpan;\n}\n\nexport function createI18nContextOp(\n  contextKind: I18nContextKind,\n  xref: XrefId,\n  i18nBlock: XrefId | null,\n  message: i18n.Message,\n  sourceSpan: ParseSourceSpan,\n): I18nContextOp {\n  if (i18nBlock === null && contextKind !== I18nContextKind.Attr) {\n    throw new Error('AssertionError: i18nBlock must be provided for non-attribute contexts.');\n  }\n\n  return {\n    kind: OpKind.I18nContext,\n    contextKind,\n    xref,\n    i18nBlock,\n    message,\n    sourceSpan,\n    params: new Map(),\n    postprocessingParams: new Map(),\n    ...NEW_OP,\n  };\n}\n\nexport interface I18nAttributesOp extends Op<CreateOp>, ConsumesSlotOpTrait {\n  kind: OpKind.I18nAttributes;\n\n  /**\n   * The element targeted by these attributes.\n   */\n  target: XrefId;\n\n  /**\n   * I18nAttributes instructions correspond to a const array with configuration information.\n   */\n  i18nAttributesConfig: ConstIndex | null;\n}\n\nexport function createI18nAttributesOp(\n  xref: XrefId,\n  handle: SlotHandle,\n  target: XrefId,\n): I18nAttributesOp {\n  return {\n    kind: OpKind.I18nAttributes,\n    xref,\n    handle,\n    target,\n    i18nAttributesConfig: null,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT,\n  };\n}\n\n/** Describes a location at which an element is defined within a template. */\nexport interface ElementSourceLocation {\n  targetSlot: SlotHandle;\n  offset: number;\n  line: number;\n  column: number;\n}\n\n/**\n * Op that attaches the location at which each element is defined within the source template.\n */\nexport interface SourceLocationOp extends Op<CreateOp> {\n  kind: OpKind.SourceLocation;\n  templatePath: string;\n  locations: ElementSourceLocation[];\n}\n\n/** Create a `SourceLocationOp`. */\nexport function createSourceLocationOp(\n  templatePath: string,\n  locations: ElementSourceLocation[],\n): SourceLocationOp {\n  return {\n    kind: OpKind.SourceLocation,\n    templatePath,\n    locations,\n    ...NEW_OP,\n  };\n}\n\n/**\n * An index into the `consts` array which is shared across the compilation of all views in a\n * component.\n */\nexport type ConstIndex = number & {__brand: 'ConstIndex'};\n"]}