{"version":3,"file":"enums.js","sourceRoot":"","sources":["enums.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Distinguishes different kinds of IR operations.\n *\n * Includes both creation and update operations.\n */\nexport enum OpKind {\n  /**\n   * A special operation type which is used to represent the beginning and end nodes of a linked\n   * list of operations.\n   */\n  ListEnd,\n\n  /**\n   * An operation which wraps an output AST statement.\n   */\n  Statement,\n\n  /**\n   * An operation which declares and initializes a `SemanticVariable`.\n   */\n  Variable,\n\n  /**\n   * An operation to begin rendering of an element.\n   */\n  ElementStart,\n\n  /**\n   * An operation to render an element with no children.\n   */\n  Element,\n\n  /**\n   * An operation which declares an embedded view.\n   */\n  Template,\n\n  /**\n   * An operation to end rendering of an element previously started with `ElementStart`.\n   */\n  ElementEnd,\n\n  /**\n   * An operation to begin an `ng-container`.\n   */\n  ContainerStart,\n\n  /**\n   * An operation for an `ng-container` with no children.\n   */\n  Container,\n\n  /**\n   * An operation to end an `ng-container`.\n   */\n  ContainerEnd,\n\n  /**\n   * An operation disable binding for subsequent elements, which are descendants of a non-bindable\n   * node.\n   */\n  DisableBindings,\n\n  /**\n   * Create a conditional creation instruction op.\n   */\n  ConditionalCreate,\n\n  /**\n   * Create a conditional branch creation instruction op.\n   */\n  ConditionalBranchCreate,\n\n  /**\n   * An op to conditionally render a template.\n   */\n  Conditional,\n\n  /**\n   * An operation to re-enable binding, after it was previously disabled.\n   */\n  EnableBindings,\n\n  /**\n   * An operation to render a text node.\n   */\n  Text,\n\n  /**\n   * An operation declaring an event listener for an element.\n   */\n  Listener,\n\n  /**\n   * An operation to interpolate text into a text node.\n   */\n  InterpolateText,\n\n  /**\n   * An intermediate binding op, that has not yet been processed into an individual property,\n   * attribute, style, etc.\n   */\n  Binding,\n\n  /**\n   * An operation to bind an expression to a property of an element.\n   */\n  Property,\n\n  /**\n   * An operation to bind an expression to a style property of an element.\n   */\n  StyleProp,\n\n  /**\n   * An operation to bind an expression to a class property of an element.\n   */\n  ClassProp,\n\n  /**\n   * An operation to bind an expression to the styles of an element.\n   */\n  StyleMap,\n\n  /**\n   * An operation to bind an expression to the classes of an element.\n   */\n  ClassMap,\n\n  /**\n   * An operation to advance the runtime's implicit slot context during the update phase of a view.\n   */\n  Advance,\n\n  /**\n   * An operation to instantiate a pipe.\n   */\n  Pipe,\n\n  /**\n   * An operation to associate an attribute with an element.\n   */\n  Attribute,\n\n  /**\n   * An attribute that has been extracted for inclusion in the consts array.\n   */\n  ExtractedAttribute,\n\n  /**\n   * An operation that configures a `@defer` block.\n   */\n  Defer,\n\n  /**\n   * An operation that controls when a `@defer` loads.\n   */\n  DeferOn,\n\n  /**\n   * An operation that controls when a `@defer` loads, using a custom expression as the condition.\n   */\n  DeferWhen,\n\n  /**\n   * An i18n message that has been extracted for inclusion in the consts array.\n   */\n  I18nMessage,\n\n  /**\n   * A binding to a native DOM property.\n   */\n  DomProperty,\n\n  /**\n   * A namespace change, which causes the subsequent elements to be processed as either HTML or SVG.\n   */\n  Namespace,\n\n  /**\n   * Configure a content projeciton definition for the view.\n   */\n  ProjectionDef,\n\n  /**\n   * Create a content projection slot.\n   */\n  Projection,\n\n  /**\n   * Create a repeater creation instruction op.\n   */\n  RepeaterCreate,\n\n  /**\n   * An update up for a repeater.\n   */\n  Repeater,\n\n  /**\n   * An operation to bind an expression to the property side of a two-way binding.\n   */\n  TwoWayProperty,\n\n  /**\n   * An operation declaring the event side of a two-way binding.\n   */\n  TwoWayListener,\n\n  /**\n   * A creation-time operation that initializes the slot for a `@let` declaration.\n   */\n  DeclareLet,\n\n  /**\n   * An update-time operation that stores the current value of a `@let` declaration.\n   */\n  StoreLet,\n\n  /**\n   * The start of an i18n block.\n   */\n  I18nStart,\n\n  /**\n   * A self-closing i18n on a single element.\n   */\n  I18n,\n\n  /**\n   * The end of an i18n block.\n   */\n  I18nEnd,\n\n  /**\n   * An expression in an i18n message.\n   */\n  I18nExpression,\n\n  /**\n   * An instruction that applies a set of i18n expressions.\n   */\n  I18nApply,\n\n  /**\n   * An instruction to create an ICU expression.\n   */\n  IcuStart,\n\n  /**\n   * An instruction to update an ICU expression.\n   */\n  IcuEnd,\n\n  /**\n   * An instruction representing a placeholder in an ICU expression.\n   */\n  IcuPlaceholder,\n\n  /**\n   * An i18n context containing information needed to generate an i18n message.\n   */\n  I18nContext,\n\n  /**\n   * A creation op that corresponds to i18n attributes on an element.\n   */\n  I18nAttributes,\n\n  /**\n   * Creation op that attaches the location at which an element was defined in a template to it.\n   */\n  SourceLocation,\n\n  /**\n   * An operation to bind animation css classes to an element.\n   */\n  Animation,\n\n  /**\n   * An operation to bind animation css classes to an element.\n   */\n  AnimationString,\n\n  /**\n   * An operation to bind animation css classes to an element.\n   */\n  AnimationBinding,\n\n  /**\n   * An operation to bind animation events to an element.\n   */\n  AnimationListener,\n}\n\n/**\n * Distinguishes different kinds of IR expressions.\n */\nexport enum ExpressionKind {\n  /**\n   * Read of a variable in a lexical scope.\n   */\n  LexicalRead,\n\n  /**\n   * A reference to the current view context.\n   */\n  Context,\n\n  /**\n   * A reference to the view context, for use inside a track function.\n   */\n  TrackContext,\n\n  /**\n   * Read of a variable declared in a `VariableOp`.\n   */\n  ReadVariable,\n\n  /**\n   * Runtime operation to navigate to the next view context in the view hierarchy.\n   */\n  NextContext,\n\n  /**\n   * Runtime operation to retrieve the value of a local reference.\n   */\n  Reference,\n\n  /**\n   * A call storing the value of a `@let` declaration.\n   */\n  StoreLet,\n\n  /**\n   * A reference to a `@let` declaration read from the context view.\n   */\n  ContextLetReference,\n\n  /**\n   * Runtime operation to snapshot the current view context.\n   */\n  GetCurrentView,\n\n  /**\n   * Runtime operation to restore a snapshotted view.\n   */\n  RestoreView,\n\n  /**\n   * Runtime operation to reset the current view context after `RestoreView`.\n   */\n  ResetView,\n\n  /**\n   * Defines and calls a function with change-detected arguments.\n   */\n  PureFunctionExpr,\n\n  /**\n   * Indicates a positional parameter to a pure function definition.\n   */\n  PureFunctionParameterExpr,\n\n  /**\n   * Binding to a pipe transformation.\n   */\n  PipeBinding,\n\n  /**\n   * Binding to a pipe transformation with a variable number of arguments.\n   */\n  PipeBindingVariadic,\n\n  /*\n   * A safe property read requiring expansion into a null check.\n   */\n  SafePropertyRead,\n\n  /**\n   * A safe keyed read requiring expansion into a null check.\n   */\n  SafeKeyedRead,\n\n  /**\n   * A safe function call requiring expansion into a null check.\n   */\n  SafeInvokeFunction,\n\n  /**\n   * An intermediate expression that will be expanded from a safe read into an explicit ternary.\n   */\n  SafeTernaryExpr,\n\n  /**\n   * An empty expression that will be stipped before generating the final output.\n   */\n  EmptyExpr,\n\n  /*\n   * An assignment to a temporary variable.\n   */\n  AssignTemporaryExpr,\n\n  /**\n   * A reference to a temporary variable.\n   */\n  ReadTemporaryExpr,\n\n  /**\n   * An expression that will cause a literal slot index to be emitted.\n   */\n  SlotLiteralExpr,\n\n  /**\n   * A test expression for a conditional op.\n   */\n  ConditionalCase,\n\n  /**\n   * An expression that will be automatically extracted to the component const array.\n   */\n  ConstCollected,\n\n  /**\n   * Operation that sets the value of a two-way binding.\n   */\n  TwoWayBindingSet,\n}\n\nexport enum VariableFlags {\n  None = 0b0000,\n\n  /**\n   * Always inline this variable, regardless of the number of times it's used.\n   * An `AlwaysInline` variable may not depend on context, because doing so may cause side effects\n   * that are illegal when multi-inlined. (The optimizer will enforce this constraint.)\n   */\n  AlwaysInline = 0b0001,\n}\n/**\n * Distinguishes between different kinds of `SemanticVariable`s.\n */\nexport enum SemanticVariableKind {\n  /**\n   * Represents the context of a particular view.\n   */\n  Context,\n\n  /**\n   * Represents an identifier declared in the lexical scope of a view.\n   */\n  Identifier,\n\n  /**\n   * Represents a saved state that can be used to restore a view in a listener handler function.\n   */\n  SavedView,\n\n  /**\n   * An alias generated by a special embedded view type (e.g. a `@for` block).\n   */\n  Alias,\n}\n\n/**\n * Whether to compile in compatibilty mode. In compatibility mode, the template pipeline will\n * attempt to match the output of `TemplateDefinitionBuilder` as exactly as possible, at the cost\n * of producing quirky or larger code in some cases.\n */\nexport enum CompatibilityMode {\n  Normal,\n  TemplateDefinitionBuilder,\n}\n\n/**\n * Enumeration of the types of attributes which can be applied to an element.\n */\nexport enum BindingKind {\n  /**\n   * Static attributes.\n   */\n  Attribute,\n\n  /**\n   * Class bindings.\n   */\n  ClassName,\n\n  /**\n   * Style bindings.\n   */\n  StyleProperty,\n\n  /**\n   * Dynamic property bindings.\n   */\n  Property,\n\n  /**\n   * Property or attribute bindings on a template.\n   */\n  Template,\n\n  /**\n   * Internationalized attributes.\n   */\n  I18n,\n\n  /**\n   * Legacy animation property bindings.\n   */\n  LegacyAnimation,\n\n  /**\n   * Property side of a two-way binding.\n   */\n  TwoWayProperty,\n\n  /**\n   * Property side of an animation binding.\n   */\n  Animation,\n}\n\n/**\n * Enumeration of possible times i18n params can be resolved.\n */\nexport enum I18nParamResolutionTime {\n  /**\n   * Param is resolved at message creation time. Most params should be resolved at message creation\n   * time. However, ICU params need to be handled in post-processing.\n   */\n  Creation,\n\n  /**\n   * Param is resolved during post-processing. This should be used for params whose value comes from\n   * an ICU.\n   */\n  Postproccessing,\n}\n\n/**\n * The contexts in which an i18n expression can be used.\n */\nexport enum I18nExpressionFor {\n  /**\n   * This expression is used as a value (i.e. inside an i18n block).\n   */\n  I18nText,\n\n  /**\n   * This expression is used in a binding.\n   */\n  I18nAttribute,\n}\n\n/**\n * Flags that describe what an i18n param value. These determine how the value is serialized into\n * the final map.\n */\nexport enum I18nParamValueFlags {\n  None = 0b0000,\n\n  /**\n   *  This value represents an element tag.\n   */\n  ElementTag = 0b1,\n\n  /**\n   * This value represents a template tag.\n   */\n  TemplateTag = 0b10,\n\n  /**\n   * This value represents the opening of a tag.\n   */\n  OpenTag = 0b0100,\n\n  /**\n   * This value represents the closing of a tag.\n   */\n  CloseTag = 0b1000,\n\n  /**\n   * This value represents an i18n expression index.\n   */\n  ExpressionIndex = 0b10000,\n}\n\n/**\n * Whether the active namespace is HTML, MathML, or SVG mode.\n */\nexport enum Namespace {\n  HTML,\n  SVG,\n  Math,\n}\n\n/**\n * The type of a `@defer` trigger, for use in the ir.\n */\nexport enum DeferTriggerKind {\n  Idle,\n  Immediate,\n  Timer,\n  Hover,\n  Interaction,\n  Viewport,\n  Never,\n}\n\n/**\n * Kinds of i18n contexts. They can be created because of root i18n blocks, or ICUs.\n */\nexport enum I18nContextKind {\n  RootI18n,\n  Icu,\n  Attr,\n}\n\nexport enum TemplateKind {\n  NgTemplate,\n  Structural,\n  Block,\n}\n\n/**\n * Kinds of animations\n */\nexport const enum AnimationKind {\n  ENTER = 'enter',\n  LEAVE = 'leave',\n}\n\n/**\n * Kinds of animations\n */\nexport const enum AnimationBindingKind {\n  STRING,\n  VALUE,\n}\n\n/**\n * Kinds of modifiers for a defer block.\n */\nexport const enum DeferOpModifierKind {\n  NONE = 'none',\n  PREFETCH = 'prefetch',\n  HYDRATE = 'hydrate',\n}\n\n/**\n * Specifies defer block flags, which should be used for all\n * instances of a given defer block (the flags that should be\n * placed into the `TDeferDetails` at runtime).\n */\nexport const enum TDeferDetailsFlags {\n  Default = 0,\n\n  /**\n   * Whether or not the defer block has hydrate triggers.\n   */\n  HasHydrateTriggers = 1 << 0,\n}\n"]}