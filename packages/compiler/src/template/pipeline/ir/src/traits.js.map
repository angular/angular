{"version":3,"file":"traits.js","sourceRoot":"","sources":["traits.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAQH;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAkB,MAAM,CAAC,cAAc,CAAC,CAAC;AAElE;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAkB,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAElF;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAkB,MAAM,CAAC,cAAc,CAAC,CAAC;AAEvE;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAkB,MAAM,CAAC,eAAe,CAAC,CAAC;AAkEpE;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAiD;IAC/E,CAAC,YAAY,CAAC,EAAE,IAAI;IACpB,YAAY,EAAE,CAAC;CACP,CAAC;AAEX;;;GAGG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAGtC;IACF,CAAC,oBAAoB,CAAC,EAAE,IAAI;CACpB,CAAC;AAEX;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAsB;IACpD,CAAC,iBAAiB,CAAC,EAAE,IAAI;CACjB,CAAC;AAEX;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAClC,EAAO;IAEP,OAAQ,EAAmC,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;AACrE,CAAC;AAWD,MAAM,UAAU,4BAA4B,CAAC,KAAU;IACrD,OAAQ,KAA8C,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC;AACxF,CAAC;AASD,MAAM,UAAU,oBAAoB,CAAC,KAAU;IAC7C,OAAQ,KAAoC,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC;AAC3E,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB,CACnC,IAAW;IAEX,OAAQ,IAAoC,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC;AACvE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {ParseSourceSpan} from '../../../../parse_util';\nimport type {Expression} from './expression';\nimport * as o from '../../../../output/output_ast';\nimport type {Op, XrefId} from './operations';\nimport {SlotHandle} from './handle';\n\n/**\n * Marker symbol for `ConsumesSlotOpTrait`.\n */\nexport const ConsumesSlot: unique symbol = Symbol('ConsumesSlot');\n\n/**\n * Marker symbol for `DependsOnSlotContextOpTrait`.\n */\nexport const DependsOnSlotContext: unique symbol = Symbol('DependsOnSlotContext');\n\n/**\n * Marker symbol for `ConsumesVars` trait.\n */\nexport const ConsumesVarsTrait: unique symbol = Symbol('ConsumesVars');\n\n/**\n * Marker symbol for `UsesVarOffset` trait.\n */\nexport const UsesVarOffset: unique symbol = Symbol('UsesVarOffset');\n\n/**\n * Marks an operation as requiring allocation of one or more data slots for storage.\n */\nexport interface ConsumesSlotOpTrait {\n  readonly [ConsumesSlot]: true;\n\n  /**\n   * Assigned data slot (the starting index, if more than one slot is needed) for this operation, or\n   * `null` if slots have not yet been assigned.\n   */\n  handle: SlotHandle;\n\n  /**\n   * The number of slots which will be used by this operation. By default 1, but can be increased if\n   * necessary.\n   */\n  numSlotsUsed: number;\n\n  /**\n   * `XrefId` of this operation (e.g. the element stored in the assigned slot). This `XrefId` is\n   * used to link this `ConsumesSlotOpTrait` operation with `DependsOnSlotContextTrait` or\n   * `UsesSlotIndexExprTrait` implementors and ensure that the assigned slot is propagated through\n   * the IR to all consumers.\n   */\n  xref: XrefId;\n}\n\n/**\n * Marks an operation as depending on the runtime's implicit slot context being set to a particular\n * slot.\n *\n * The runtime has an implicit slot context which is adjusted using the `advance()` instruction\n * during the execution of template update functions. This trait marks an operation as requiring\n * this implicit context to be `advance()`'d to point at a particular slot prior to execution.\n */\nexport interface DependsOnSlotContextOpTrait {\n  readonly [DependsOnSlotContext]: true;\n\n  /**\n   * `XrefId` of the `ConsumesSlotOpTrait` which the implicit slot context must reference before\n   * this operation can be executed.\n   */\n  target: XrefId;\n\n  sourceSpan: ParseSourceSpan;\n}\n\n/**\n * Marker trait indicating that an operation or expression consumes variable storage space.\n */\nexport interface ConsumesVarsTrait {\n  [ConsumesVarsTrait]: true;\n}\n\n/**\n * Marker trait indicating that an expression requires knowledge of the number of variable storage\n * slots used prior to it.\n */\nexport interface UsesVarOffsetTrait {\n  [UsesVarOffset]: true;\n\n  varOffset: number | null;\n}\n\n/**\n * Default values for most `ConsumesSlotOpTrait` fields (used with the spread operator to initialize\n * implementors of the trait).\n */\nexport const TRAIT_CONSUMES_SLOT: Omit<ConsumesSlotOpTrait, 'xref' | 'handle'> = {\n  [ConsumesSlot]: true,\n  numSlotsUsed: 1,\n} as const;\n\n/**\n * Default values for most `DependsOnSlotContextOpTrait` fields (used with the spread operator to\n * initialize implementors of the trait).\n */\nexport const TRAIT_DEPENDS_ON_SLOT_CONTEXT: Omit<\n  DependsOnSlotContextOpTrait,\n  'target' | 'sourceSpan'\n> = {\n  [DependsOnSlotContext]: true,\n} as const;\n\n/**\n * Default values for `UsesVars` fields (used with the spread operator to initialize\n * implementors of the trait).\n */\nexport const TRAIT_CONSUMES_VARS: ConsumesVarsTrait = {\n  [ConsumesVarsTrait]: true,\n} as const;\n\n/**\n * Test whether an operation implements `ConsumesSlotOpTrait`.\n */\nexport function hasConsumesSlotTrait<OpT extends Op<OpT>>(\n  op: OpT,\n): op is OpT & ConsumesSlotOpTrait {\n  return (op as Partial<ConsumesSlotOpTrait>)[ConsumesSlot] === true;\n}\n\n/**\n * Test whether an operation implements `DependsOnSlotContextOpTrait`.\n */\nexport function hasDependsOnSlotContextTrait<ExprT extends o.Expression>(\n  expr: ExprT,\n): expr is ExprT & DependsOnSlotContextOpTrait;\nexport function hasDependsOnSlotContextTrait<OpT extends Op<OpT>>(\n  op: OpT,\n): op is OpT & DependsOnSlotContextOpTrait;\nexport function hasDependsOnSlotContextTrait(value: any): boolean {\n  return (value as Partial<DependsOnSlotContextOpTrait>)[DependsOnSlotContext] === true;\n}\n\n/**\n * Test whether an operation implements `ConsumesVarsTrait`.\n */\nexport function hasConsumesVarsTrait<ExprT extends Expression>(\n  expr: ExprT,\n): expr is ExprT & ConsumesVarsTrait;\nexport function hasConsumesVarsTrait<OpT extends Op<OpT>>(op: OpT): op is OpT & ConsumesVarsTrait;\nexport function hasConsumesVarsTrait(value: any): boolean {\n  return (value as Partial<ConsumesVarsTrait>)[ConsumesVarsTrait] === true;\n}\n\n/**\n * Test whether an expression implements `UsesVarOffsetTrait`.\n */\nexport function hasUsesVarOffsetTrait<ExprT extends Expression>(\n  expr: ExprT,\n): expr is ExprT & UsesVarOffsetTrait {\n  return (expr as Partial<UsesVarOffsetTrait>)[UsesVarOffset] === true;\n}\n"]}