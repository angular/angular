{"version":3,"file":"compilation.js","sourceRoot":"","sources":["compilation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ConstantPool} from '../../../constant_pool';\nimport * as o from '../../../output/output_ast';\nimport {R3ComponentDeferMetadata} from '../../../render3/view/api';\nimport * as ir from '../ir';\n\nexport enum CompilationJobKind {\n  Tmpl,\n  Host,\n  Both, // A special value used to indicate that some logic applies to both compilation types\n}\n\n/** Possible modes in which a component's template can be compiled. */\nexport enum TemplateCompilationMode {\n  /** Supports the full instruction set, including directives. */\n  Full,\n\n  /** Uses a narrower instruction set that doesn't support directives and allows optimizations. */\n  DomOnly,\n}\n\n/**\n * An entire ongoing compilation, which will result in one or more template functions when complete.\n * Contains one or more corresponding compilation units.\n */\nexport abstract class CompilationJob {\n  constructor(\n    readonly componentName: string,\n    readonly pool: ConstantPool,\n    readonly compatibility: ir.CompatibilityMode,\n    readonly mode: TemplateCompilationMode,\n  ) {}\n\n  kind: CompilationJobKind = CompilationJobKind.Both;\n\n  /**\n   * A compilation job will contain one or more compilation units.\n   */\n  abstract get units(): Iterable<CompilationUnit>;\n\n  /**\n   * The root compilation unit, such as the component's template, or the host binding's compilation\n   * unit.\n   */\n  abstract root: CompilationUnit;\n\n  /**\n   * A unique string used to identify this kind of job, and generate the template function (as a\n   * suffix of the name).\n   */\n  abstract fnSuffix: string;\n\n  /**\n   * Generate a new unique `ir.XrefId` in this job.\n   */\n  allocateXrefId(): ir.XrefId {\n    return this.nextXrefId++ as ir.XrefId;\n  }\n\n  /**\n   * Tracks the next `ir.XrefId` which can be assigned as template structures are ingested.\n   */\n  private nextXrefId: ir.XrefId = 0 as ir.XrefId;\n}\n\n/**\n * Compilation-in-progress of a whole component's template, including the main template and any\n * embedded views or host bindings.\n */\nexport class ComponentCompilationJob extends CompilationJob {\n  constructor(\n    componentName: string,\n    pool: ConstantPool,\n    compatibility: ir.CompatibilityMode,\n    mode: TemplateCompilationMode,\n    readonly relativeContextFilePath: string,\n    readonly i18nUseExternalIds: boolean,\n    readonly deferMeta: R3ComponentDeferMetadata,\n    readonly allDeferrableDepsFn: o.ReadVarExpr | null,\n    readonly relativeTemplatePath: string | null,\n    readonly enableDebugLocations: boolean,\n  ) {\n    super(componentName, pool, compatibility, mode);\n    this.root = new ViewCompilationUnit(this, this.allocateXrefId(), null);\n    this.views.set(this.root.xref, this.root);\n  }\n\n  override kind = CompilationJobKind.Tmpl;\n\n  override readonly fnSuffix: string = 'Template';\n\n  /**\n   * The root view, representing the component's template.\n   */\n  override readonly root: ViewCompilationUnit;\n\n  readonly views = new Map<ir.XrefId, ViewCompilationUnit>();\n\n  /**\n   * Causes ngContentSelectors to be emitted, for content projection slots in the view. Possibly a\n   * reference into the constant pool.\n   */\n  public contentSelectors: o.Expression | null = null;\n\n  /**\n   * Add a `ViewCompilation` for a new embedded view to this compilation.\n   */\n  allocateView(parent: ir.XrefId): ViewCompilationUnit {\n    const view = new ViewCompilationUnit(this, this.allocateXrefId(), parent);\n    this.views.set(view.xref, view);\n    return view;\n  }\n\n  override get units(): Iterable<ViewCompilationUnit> {\n    return this.views.values();\n  }\n\n  /**\n   * Add a constant `o.Expression` to the compilation and return its index in the `consts` array.\n   */\n  addConst(newConst: o.Expression, initializers?: o.Statement[]): ir.ConstIndex {\n    for (let idx = 0; idx < this.consts.length; idx++) {\n      if (this.consts[idx].isEquivalent(newConst)) {\n        return idx as ir.ConstIndex;\n      }\n    }\n    const idx = this.consts.length;\n    this.consts.push(newConst);\n    if (initializers) {\n      this.constsInitializers.push(...initializers);\n    }\n    return idx as ir.ConstIndex;\n  }\n\n  /**\n   * Constant expressions used by operations within this component's compilation.\n   *\n   * This will eventually become the `consts` array in the component definition.\n   */\n  readonly consts: o.Expression[] = [];\n\n  /**\n   * Initialization statements needed to set up the consts.\n   */\n  readonly constsInitializers: o.Statement[] = [];\n}\n\n/**\n * A compilation unit is compiled into a template function. Some example units are views and host\n * bindings.\n */\nexport abstract class CompilationUnit {\n  constructor(readonly xref: ir.XrefId) {}\n\n  /**\n   * List of creation operations for this view.\n   *\n   * Creation operations may internally contain other operations, including update operations.\n   */\n  readonly create = new ir.OpList<ir.CreateOp>();\n\n  /**\n   * List of update operations for this view.\n   */\n  readonly update = new ir.OpList<ir.UpdateOp>();\n\n  /**\n   * The enclosing job, which might contain several individual compilation units.\n   */\n  abstract readonly job: CompilationJob;\n\n  /**\n   * Name of the function which will be generated for this unit.\n   *\n   * May be `null` if not yet determined.\n   */\n  fnName: string | null = null;\n\n  /**\n   * Number of variable slots used within this view, or `null` if variables have not yet been\n   * counted.\n   */\n  vars: number | null = null;\n\n  /**\n   * Iterate over all `ir.Op`s within this view.\n   *\n   * Some operations may have child operations, which this iterator will visit.\n   */\n  *ops(): Generator<ir.CreateOp | ir.UpdateOp> {\n    for (const op of this.create) {\n      yield op;\n      if (\n        op.kind === ir.OpKind.Listener ||\n        op.kind === ir.OpKind.Animation ||\n        op.kind === ir.OpKind.AnimationListener ||\n        op.kind === ir.OpKind.TwoWayListener\n      ) {\n        for (const listenerOp of op.handlerOps) {\n          yield listenerOp;\n        }\n      } else if (op.kind === ir.OpKind.RepeaterCreate && op.trackByOps !== null) {\n        for (const trackOp of op.trackByOps) {\n          yield trackOp;\n        }\n      }\n    }\n    for (const op of this.update) {\n      yield op;\n    }\n  }\n}\n\n/**\n * Compilation-in-progress of an individual view within a template.\n */\nexport class ViewCompilationUnit extends CompilationUnit {\n  constructor(\n    readonly job: ComponentCompilationJob,\n    xref: ir.XrefId,\n    readonly parent: ir.XrefId | null,\n  ) {\n    super(xref);\n  }\n\n  /**\n   * Map of declared variables available within this view to the property on the context object\n   * which they alias.\n   */\n  readonly contextVariables = new Map<string, string>();\n\n  /**\n   * Set of aliases available within this view. An alias is a variable whose provided expression is\n   * inlined at every location it is used. It may also depend on context variables, by name.\n   */\n  readonly aliases = new Set<ir.AliasVariable>();\n\n  /**\n   * Number of declaration slots used within this view, or `null` if slots have not yet been\n   * allocated.\n   */\n  decls: number | null = null;\n}\n\n/**\n * Compilation-in-progress of a host binding, which contains a single unit for that host binding.\n */\nexport class HostBindingCompilationJob extends CompilationJob {\n  constructor(\n    componentName: string,\n    pool: ConstantPool,\n    compatibility: ir.CompatibilityMode,\n    mode: TemplateCompilationMode,\n  ) {\n    super(componentName, pool, compatibility, mode);\n    this.root = new HostBindingCompilationUnit(this);\n  }\n\n  override kind = CompilationJobKind.Host;\n\n  override readonly fnSuffix: string = 'HostBindings';\n\n  override readonly root: HostBindingCompilationUnit;\n\n  override get units(): Iterable<HostBindingCompilationUnit> {\n    return [this.root];\n  }\n}\n\nexport class HostBindingCompilationUnit extends CompilationUnit {\n  constructor(readonly job: HostBindingCompilationJob) {\n    super(0 as ir.XrefId);\n  }\n\n  /**\n   * Much like an element can have attributes, so can a host binding function.\n   */\n  attributes: o.LiteralArrayExpr | null = null;\n}\n"]}