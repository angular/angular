{"version":3,"file":"pure_function_extraction.js","sourceRoot":"","sources":["pure_function_extraction.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAA2B,MAAM,2BAA2B,CAAC;AACjF,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAI/B,MAAM,UAAU,oBAAoB,CAAC,GAAmB;IACtD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5B,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;gBACnC,IAAI,CAAC,CAAC,IAAI,YAAY,EAAE,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;oBACjE,OAAO;gBACT,CAAC;gBAED,MAAM,WAAW,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,oBAAqB,SAAQ,YAAY;IAC7C,YAAoB,OAAe;QACjC,KAAK,EAAE,CAAC;QADU,YAAO,GAAP,OAAO,CAAQ;IAEnC,CAAC;IAEQ,KAAK,CAAC,IAAkB;QAC/B,IAAI,IAAI,YAAY,EAAE,CAAC,yBAAyB,EAAE,CAAC;YACjD,OAAO,SAAS,IAAI,CAAC,KAAK,GAAG,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,6DAA6D;IAC7D,2BAA2B,CAAC,QAAgB,EAAE,OAAqB;QACjE,MAAM,QAAQ,GAAgB,EAAE,CAAC;QACjC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC;YAC5C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;QAC1C,CAAC;QAED,4FAA4F;QAC5F,gGAAgG;QAChG,MAAM,UAAU,GAAG,EAAE,CAAC,gCAAgC,CACpD,OAAO,EACP,CAAC,IAAI,EAAE,EAAE;YACP,IAAI,CAAC,CAAC,IAAI,YAAY,EAAE,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBACpD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAC3B,CAAC;QAEF,OAAO,IAAI,CAAC,CAAC,cAAc,CACzB,QAAQ,EACR,IAAI,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,EAC7C,SAAS,EACT,CAAC,CAAC,YAAY,CAAC,KAAK,CACrB,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {GenericKeyFn, SharedConstantDefinition} from '../../../../constant_pool';\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\n\nimport type {CompilationJob} from '../compilation';\n\nexport function extractPureFunctions(job: CompilationJob): void {\n  for (const view of job.units) {\n    for (const op of view.ops()) {\n      ir.visitExpressionsInOp(op, (expr) => {\n        if (!(expr instanceof ir.PureFunctionExpr) || expr.body === null) {\n          return;\n        }\n\n        const constantDef = new PureFunctionConstant(expr.args.length);\n        expr.fn = job.pool.getSharedConstant(constantDef, expr.body);\n        expr.body = null;\n      });\n    }\n  }\n}\n\nclass PureFunctionConstant extends GenericKeyFn implements SharedConstantDefinition {\n  constructor(private numArgs: number) {\n    super();\n  }\n\n  override keyOf(expr: o.Expression): string {\n    if (expr instanceof ir.PureFunctionParameterExpr) {\n      return `param(${expr.index})`;\n    } else {\n      return super.keyOf(expr);\n    }\n  }\n\n  // TODO: Use the new pool method `getSharedFunctionReference`\n  toSharedConstantDeclaration(declName: string, keyExpr: o.Expression): o.Statement {\n    const fnParams: o.FnParam[] = [];\n    for (let idx = 0; idx < this.numArgs; idx++) {\n      fnParams.push(new o.FnParam('a' + idx));\n    }\n\n    // We will never visit `ir.PureFunctionParameterExpr`s that don't belong to us, because this\n    // transform runs inside another visitor which will visit nested pure functions before this one.\n    const returnExpr = ir.transformExpressionsInExpression(\n      keyExpr,\n      (expr) => {\n        if (!(expr instanceof ir.PureFunctionParameterExpr)) {\n          return expr;\n        }\n\n        return o.variable('a' + expr.index);\n      },\n      ir.VisitorContextFlag.None,\n    );\n\n    return new o.DeclareVarStmt(\n      declName,\n      new o.ArrowFunctionExpr(fnParams, returnExpr),\n      undefined,\n      o.StmtModifier.Final,\n    );\n  }\n}\n"]}