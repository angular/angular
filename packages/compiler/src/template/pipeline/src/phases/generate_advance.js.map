{"version":3,"file":"generate_advance.js","sourceRoot":"","sources":["generate_advance.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,GAAmB;IACjD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,qFAAqF;QACrF,MAAM,OAAO,GAAG,IAAI,GAAG,EAAqB,CAAC;QAC7C,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,EAAE,CAAC;gBACjC,SAAS;YACX,CAAC;iBAAM,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CACb,yFAAyF,CAC1F,CAAC;YACJ,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAED,8FAA8F;QAC9F,4FAA4F;QAC5F,wCAAwC;QACxC,EAAE;QACF,8FAA8F;QAC9F,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,QAAQ,GAA0C,IAAI,CAAC;YAE3D,IAAI,EAAE,CAAC,4BAA4B,CAAC,EAAE,CAAC,EAAE,CAAC;gBACxC,QAAQ,GAAG,EAAE,CAAC;YAChB,CAAC;iBAAM,CAAC;gBACN,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;oBACnC,IAAI,QAAQ,KAAK,IAAI,IAAI,EAAE,CAAC,4BAA4B,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC/D,QAAQ,GAAG,IAAI,CAAC;oBAClB,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;gBACtB,SAAS;YACX,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClC,4FAA4F;gBAC5F,iBAAiB;gBACjB,MAAM,IAAI,KAAK,CAAC,wDAAwD,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAC7F,CAAC;YAED,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAE,CAAC;YAE3C,6CAA6C;YAC7C,IAAI,WAAW,KAAK,IAAI,EAAE,CAAC;gBACzB,4DAA4D;gBAC5D,MAAM,KAAK,GAAG,IAAI,GAAG,WAAW,CAAC;gBACjC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;oBACd,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gBACtF,CAAC;gBAED,EAAE,CAAC,MAAM,CAAC,YAAY,CAAc,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;gBACxF,WAAW,GAAG,IAAI,CAAC;YACrB,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {CompilationJob} from '../compilation';\n\n/**\n * Generate `ir.AdvanceOp`s in between `ir.UpdateOp`s that ensure the runtime's implicit slot\n * context will be advanced correctly.\n */\nexport function generateAdvance(job: CompilationJob): void {\n  for (const unit of job.units) {\n    // First build a map of all of the declarations in the view that have assigned slots.\n    const slotMap = new Map<ir.XrefId, number>();\n    for (const op of unit.create) {\n      if (!ir.hasConsumesSlotTrait(op)) {\n        continue;\n      } else if (op.handle.slot === null) {\n        throw new Error(\n          `AssertionError: expected slots to have been allocated before generating advance() calls`,\n        );\n      }\n\n      slotMap.set(op.xref, op.handle.slot);\n    }\n\n    // Next, step through the update operations and generate `ir.AdvanceOp`s as required to ensure\n    // the runtime's implicit slot counter will be set to the correct slot before executing each\n    // update operation which depends on it.\n    //\n    // To do that, we track what the runtime's slot counter will be through the update operations.\n    let slotContext = 0;\n    for (const op of unit.update) {\n      let consumer: ir.DependsOnSlotContextOpTrait | null = null;\n\n      if (ir.hasDependsOnSlotContextTrait(op)) {\n        consumer = op;\n      } else {\n        ir.visitExpressionsInOp(op, (expr) => {\n          if (consumer === null && ir.hasDependsOnSlotContextTrait(expr)) {\n            consumer = expr;\n          }\n        });\n      }\n\n      if (consumer === null) {\n        continue;\n      }\n\n      if (!slotMap.has(consumer.target)) {\n        // We expect ops that _do_ depend on the slot counter to point at declarations that exist in\n        // the `slotMap`.\n        throw new Error(`AssertionError: reference to unknown slot for target ${consumer.target}`);\n      }\n\n      const slot = slotMap.get(consumer.target)!;\n\n      // Does the slot counter need to be adjusted?\n      if (slotContext !== slot) {\n        // If so, generate an `ir.AdvanceOp` to advance the counter.\n        const delta = slot - slotContext;\n        if (delta < 0) {\n          throw new Error(`AssertionError: slot counter should never need to move backwards`);\n        }\n\n        ir.OpList.insertBefore<ir.UpdateOp>(ir.createAdvanceOp(delta, consumer.sourceSpan), op);\n        slotContext = slot;\n      }\n    }\n  }\n}\n"]}