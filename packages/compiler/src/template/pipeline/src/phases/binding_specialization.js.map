{"version":3,"file":"binding_specialization.js","sourceRoot":"","sources":["binding_specialization.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,WAAW,EAAC,MAAM,4BAA4B,CAAC;AACvD,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAC/B,OAAO,EAAiB,kBAAkB,EAAE,uBAAuB,EAAC,MAAM,gBAAgB,CAAC;AAC3F,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAEnD;;GAEG;AACH,SAAS,aAAa,CACpB,QAAkD,EAClD,IAAe;IAEf,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,GAAmB;IACpD,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAuC,CAAC;IAChE,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,CAAC,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,EAAE,CAAC;gBACnC,SAAS;YACX,CAAC;YACD,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5B,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBAClC,SAAS;YACX,CAAC;YACD,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvB,KAAK,EAAE,CAAC,WAAW,CAAC,SAAS;oBAC3B,IAAI,EAAE,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;wBAChC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,EAAE,CAAC,CAAC;wBAClC,MAAM,MAAM,GAAG,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;wBAClD,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;oBAC5B,CAAC;yBAAM,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;wBAC1C,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,wBAAwB,CACzB,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,MAAM,EACT,EAAE,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,sCAAwB,CAAC,qCAAuB,EAC7E,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,UAAU,yCAEd,CACF,CAAC;oBACJ,CAAC;yBAAM,CAAC;wBACN,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;wBAC/C,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,iBAAiB,CAClB,EAAE,CAAC,MAAM,EACT,SAAS,EACT,IAAI,EACJ,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,6BAA6B,EAChC,EAAE,CAAC,YAAY,EACf,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,UAAU,CACd,CACF,CAAC;oBACJ,CAAC;oBACD,MAAM;gBACR,KAAK,EAAE,CAAC,WAAW,CAAC,SAAS;oBAC3B,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,wBAAwB,CACzB,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,MAAM,EACT,EAAE,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,sCAAwB,CAAC,qCAAuB,EAC7E,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,UAAU,wCAEd,CACF,CAAC;oBACF,MAAM;gBACR,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC;gBAC7B,KAAK,EAAE,CAAC,WAAW,CAAC,eAAe;oBACjC,qFAAqF;oBACrF,0FAA0F;oBAC1F,6DAA6D;oBAC7D,IAAI,GAAG,CAAC,IAAI,KAAK,uBAAuB,CAAC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC7E,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,iBAAiB,CAClB,EAAE,CAAC,MAAM;wBACT,gBAAgB,CAAC,IAAI,EACrB,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,eAAe;wBAClB,sBAAsB,CAAC,KAAK,EAC5B,EAAE,CAAC,6BAA6B,EAChC,EAAE,CAAC,YAAY,EACf,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,UAAU,CACd,CACF,CAAC;oBACJ,CAAC;yBAAM,IAAI,GAAG,CAAC,IAAI,KAAK,kBAAkB,CAAC,IAAI,EAAE,CAAC;wBAChD,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,mBAAmB,CACpB,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,UAAU,CACd,CACF,CAAC;oBACJ,CAAC;yBAAM,CAAC;wBACN,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,gBAAgB,CACjB,EAAE,CAAC,MAAM,EACT,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,6BAA6B,EAChC,EAAE,CAAC,YAAY,EACf,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,UAAU,CACd,CACF,CAAC;oBACJ,CAAC;oBACD,MAAM;gBACR,KAAK,EAAE,CAAC,WAAW,CAAC,cAAc;oBAChC,IAAI,CAAC,CAAC,EAAE,CAAC,UAAU,YAAY,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;wBAC7C,sFAAsF;wBACtF,iFAAiF;wBACjF,qCAAqC;wBACrC,MAAM,IAAI,KAAK,CACb,+CAA+C,EAAE,CAAC,IAAI,uBAAuB,CAC9E,CAAC;oBACJ,CAAC;oBAED,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,sBAAsB,CACvB,EAAE,CAAC,MAAM,EACT,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,eAAe,EAClB,EAAE,CAAC,6BAA6B,EAChC,EAAE,CAAC,YAAY,EACf,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,WAAW,EACd,EAAE,CAAC,UAAU,CACd,CACF,CAAC;oBACF,MAAM;gBACR,KAAK,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;gBACzB,KAAK,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC;gBAC9B,KAAK,EAAE,CAAC,WAAW,CAAC,aAAa;oBAC/B,MAAM,IAAI,KAAK,CAAC,6BAA6B,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACnF,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {splitNsName} from '../../../../ml_parser/tags';\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport {CompilationJob, CompilationJobKind, TemplateCompilationMode} from '../compilation';\nimport {isAriaAttribute} from '../util/attributes';\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement(\n  elements: Map<ir.XrefId, ir.ElementOrContainerOps>,\n  xref: ir.XrefId,\n): ir.ElementOrContainerOps {\n  const el = elements.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an element-like target.');\n  }\n  return el;\n}\n\nexport function specializeBindings(job: CompilationJob): void {\n  const elements = new Map<ir.XrefId, ir.ElementOrContainerOps>();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (!ir.isElementOrContainerOp(op)) {\n        continue;\n      }\n      elements.set(op.xref, op);\n    }\n  }\n\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      if (op.kind !== ir.OpKind.Binding) {\n        continue;\n      }\n      switch (op.bindingKind) {\n        case ir.BindingKind.Attribute:\n          if (op.name === 'ngNonBindable') {\n            ir.OpList.remove<ir.UpdateOp>(op);\n            const target = lookupElement(elements, op.target);\n            target.nonBindable = true;\n          } else if (op.name.startsWith('animate.')) {\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createAnimationBindingOp(\n                op.name,\n                op.target,\n                op.name === 'animate.enter' ? ir.AnimationKind.ENTER : ir.AnimationKind.LEAVE,\n                op.expression,\n                op.securityContext,\n                op.sourceSpan,\n                ir.AnimationBindingKind.STRING,\n              ),\n            );\n          } else {\n            const [namespace, name] = splitNsName(op.name);\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createAttributeOp(\n                op.target,\n                namespace,\n                name,\n                op.expression,\n                op.securityContext,\n                op.isTextAttribute,\n                op.isStructuralTemplateAttribute,\n                op.templateKind,\n                op.i18nMessage,\n                op.sourceSpan,\n              ),\n            );\n          }\n          break;\n        case ir.BindingKind.Animation:\n          ir.OpList.replace<ir.UpdateOp>(\n            op,\n            ir.createAnimationBindingOp(\n              op.name,\n              op.target,\n              op.name === 'animate.enter' ? ir.AnimationKind.ENTER : ir.AnimationKind.LEAVE,\n              op.expression,\n              op.securityContext,\n              op.sourceSpan,\n              ir.AnimationBindingKind.VALUE,\n            ),\n          );\n          break;\n        case ir.BindingKind.Property:\n        case ir.BindingKind.LegacyAnimation:\n          // Convert a property binding targeting an ARIA attribute (e.g. [aria-label]) into an\n          // attribute binding when we know it can't also target an input. Note that a `Host` job is\n          // always `DomOnly`, so this condition must be checked first.\n          if (job.mode === TemplateCompilationMode.DomOnly && isAriaAttribute(op.name)) {\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createAttributeOp(\n                op.target,\n                /* namespace= */ null,\n                op.name,\n                op.expression,\n                op.securityContext,\n                /* isTextAttribute= */ false,\n                op.isStructuralTemplateAttribute,\n                op.templateKind,\n                op.i18nMessage,\n                op.sourceSpan,\n              ),\n            );\n          } else if (job.kind === CompilationJobKind.Host) {\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createDomPropertyOp(\n                op.name,\n                op.expression,\n                op.bindingKind,\n                op.i18nContext,\n                op.securityContext,\n                op.sourceSpan,\n              ),\n            );\n          } else {\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createPropertyOp(\n                op.target,\n                op.name,\n                op.expression,\n                op.bindingKind,\n                op.securityContext,\n                op.isStructuralTemplateAttribute,\n                op.templateKind,\n                op.i18nContext,\n                op.i18nMessage,\n                op.sourceSpan,\n              ),\n            );\n          }\n          break;\n        case ir.BindingKind.TwoWayProperty:\n          if (!(op.expression instanceof o.Expression)) {\n            // We shouldn't be able to hit this code path since interpolations in two-way bindings\n            // result in a parser error. We assert here so that downstream we can assume that\n            // the value is always an expression.\n            throw new Error(\n              `Expected value of two-way property binding \"${op.name}\" to be an expression`,\n            );\n          }\n\n          ir.OpList.replace<ir.UpdateOp>(\n            op,\n            ir.createTwoWayPropertyOp(\n              op.target,\n              op.name,\n              op.expression,\n              op.securityContext,\n              op.isStructuralTemplateAttribute,\n              op.templateKind,\n              op.i18nContext,\n              op.i18nMessage,\n              op.sourceSpan,\n            ),\n          );\n          break;\n        case ir.BindingKind.I18n:\n        case ir.BindingKind.ClassName:\n        case ir.BindingKind.StyleProperty:\n          throw new Error(`Unhandled binding of kind ${ir.BindingKind[op.bindingKind]}`);\n      }\n    }\n  }\n}\n"]}