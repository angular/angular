{"version":3,"file":"const_collection.js","sourceRoot":"","sources":["const_collection.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as core from '../../../../core';\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\n\nimport {\n  ComponentCompilationJob,\n  HostBindingCompilationJob,\n  type CompilationJob,\n} from '../compilation';\nimport {literalOrArrayLiteral} from '../conversion';\n\n/**\n * Converts the semantic attributes of element-like operations (elements, templates) into constant\n * array expressions, and lifts them into the overall component `consts`.\n */\nexport function collectElementConsts(job: CompilationJob): void {\n  // Collect all extracted attributes.\n  const allElementAttributes = new Map<ir.XrefId, ElementAttributes>();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === ir.OpKind.ExtractedAttribute) {\n        const attributes =\n          allElementAttributes.get(op.target) || new ElementAttributes(job.compatibility);\n        allElementAttributes.set(op.target, attributes);\n        attributes.add(op.bindingKind, op.name, op.expression, op.namespace, op.trustedValueFn);\n        ir.OpList.remove<ir.CreateOp>(op);\n      }\n    }\n  }\n\n  // Serialize the extracted attributes into the const array.\n  if (job instanceof ComponentCompilationJob) {\n    for (const unit of job.units) {\n      for (const op of unit.create) {\n        // TODO: Simplify and combine these cases.\n        if (op.kind == ir.OpKind.Projection) {\n          const attributes = allElementAttributes.get(op.xref);\n          if (attributes !== undefined) {\n            const attrArray = serializeAttributes(attributes);\n            if (attrArray.entries.length > 0) {\n              op.attributes = attrArray;\n            }\n          }\n        } else if (ir.isElementOrContainerOp(op)) {\n          op.attributes = getConstIndex(job, allElementAttributes, op.xref);\n\n          // TODO(dylhunn): `@for` loops with `@empty` blocks need to be special-cased here,\n          // because the slot consumer trait currently only supports one slot per consumer and we\n          // need two. This should be revisited when making the refactors mentioned in:\n          // https://github.com/angular/angular/pull/53620#discussion_r1430918822\n          if (op.kind === ir.OpKind.RepeaterCreate && op.emptyView !== null) {\n            op.emptyAttributes = getConstIndex(job, allElementAttributes, op.emptyView);\n          }\n        }\n      }\n    }\n  } else if (job instanceof HostBindingCompilationJob) {\n    // TODO: If the host binding case further diverges, we may want to split it into its own\n    // phase.\n    for (const [xref, attributes] of allElementAttributes.entries()) {\n      if (xref !== job.root.xref) {\n        throw new Error(\n          `An attribute would be const collected into the host binding's template function, but is not associated with the root xref.`,\n        );\n      }\n      const attrArray = serializeAttributes(attributes);\n      if (attrArray.entries.length > 0) {\n        job.root.attributes = attrArray;\n      }\n    }\n  }\n}\n\nfunction getConstIndex(\n  job: ComponentCompilationJob,\n  allElementAttributes: Map<ir.XrefId, ElementAttributes>,\n  xref: ir.XrefId,\n): ir.ConstIndex | null {\n  const attributes = allElementAttributes.get(xref);\n  if (attributes !== undefined) {\n    const attrArray = serializeAttributes(attributes);\n    if (attrArray.entries.length > 0) {\n      return job.addConst(attrArray);\n    }\n  }\n  return null;\n}\n\n/**\n * Shared instance of an empty array to avoid unnecessary array allocations.\n */\nconst FLYWEIGHT_ARRAY: ReadonlyArray<o.Expression> = Object.freeze<o.Expression[]>([]);\n\n/**\n * Container for all of the various kinds of attributes which are applied on an element.\n */\nclass ElementAttributes {\n  private known = new Map<ir.BindingKind, Set<string>>();\n  private byKind = new Map<\n    // Property bindings are excluded here, because they need to be tracked in the same\n    // array to maintain their order. They're tracked in the `propertyBindings` array.\n    Exclude<ir.BindingKind, ir.BindingKind.Property | ir.BindingKind.TwoWayProperty>,\n    o.Expression[]\n  >();\n  private propertyBindings: o.Expression[] | null = null;\n\n  projectAs: string | null = null;\n\n  get attributes(): ReadonlyArray<o.Expression> {\n    return this.byKind.get(ir.BindingKind.Attribute) ?? FLYWEIGHT_ARRAY;\n  }\n\n  get classes(): ReadonlyArray<o.Expression> {\n    return this.byKind.get(ir.BindingKind.ClassName) ?? FLYWEIGHT_ARRAY;\n  }\n\n  get styles(): ReadonlyArray<o.Expression> {\n    return this.byKind.get(ir.BindingKind.StyleProperty) ?? FLYWEIGHT_ARRAY;\n  }\n\n  get bindings(): ReadonlyArray<o.Expression> {\n    return this.propertyBindings ?? FLYWEIGHT_ARRAY;\n  }\n\n  get template(): ReadonlyArray<o.Expression> {\n    return this.byKind.get(ir.BindingKind.Template) ?? FLYWEIGHT_ARRAY;\n  }\n\n  get i18n(): ReadonlyArray<o.Expression> {\n    return this.byKind.get(ir.BindingKind.I18n) ?? FLYWEIGHT_ARRAY;\n  }\n\n  constructor(private compatibility: ir.CompatibilityMode) {}\n\n  private isKnown(kind: ir.BindingKind, name: string) {\n    const nameToValue = this.known.get(kind) ?? new Set<string>();\n    this.known.set(kind, nameToValue);\n    if (nameToValue.has(name)) {\n      return true;\n    }\n    nameToValue.add(name);\n    return false;\n  }\n\n  add(\n    kind: ir.BindingKind,\n    name: string,\n    value: o.Expression | null,\n    namespace: string | null,\n    trustedValueFn: o.Expression | null,\n  ): void {\n    // TemplateDefinitionBuilder puts duplicate attribute, class, and style values into the consts\n    // array. This seems inefficient, we can probably keep just the first one or the last value\n    // (whichever actually gets applied when multiple values are listed for the same attribute).\n    const allowDuplicates =\n      this.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder &&\n      (kind === ir.BindingKind.Attribute ||\n        kind === ir.BindingKind.ClassName ||\n        kind === ir.BindingKind.StyleProperty);\n    if (!allowDuplicates && this.isKnown(kind, name)) {\n      return;\n    }\n\n    // TODO: Can this be its own phase\n    if (name === 'ngProjectAs') {\n      if (\n        value === null ||\n        !(value instanceof o.LiteralExpr) ||\n        value.value == null ||\n        typeof value.value?.toString() !== 'string'\n      ) {\n        throw Error('ngProjectAs must have a string literal value');\n      }\n      this.projectAs = value.value.toString();\n      // TODO: TemplateDefinitionBuilder allows `ngProjectAs` to also be assigned as a literal\n      // attribute. Is this sane?\n    }\n\n    const array = this.arrayFor(kind);\n    array.push(...getAttributeNameLiterals(namespace, name));\n    if (kind === ir.BindingKind.Attribute || kind === ir.BindingKind.StyleProperty) {\n      if (value === null) {\n        throw Error('Attribute, i18n attribute, & style element attributes must have a value');\n      }\n      if (trustedValueFn !== null) {\n        if (!ir.isStringLiteral(value)) {\n          throw Error('AssertionError: extracted attribute value should be string literal');\n        }\n        array.push(\n          o.taggedTemplate(\n            trustedValueFn,\n            new o.TemplateLiteralExpr([new o.TemplateLiteralElementExpr(value.value)], []),\n            undefined,\n            value.sourceSpan,\n          ),\n        );\n      } else {\n        array.push(value);\n      }\n    }\n  }\n\n  private arrayFor(kind: ir.BindingKind): o.Expression[] {\n    if (kind === ir.BindingKind.Property || kind === ir.BindingKind.TwoWayProperty) {\n      this.propertyBindings ??= [];\n      return this.propertyBindings;\n    } else {\n      if (!this.byKind.has(kind)) {\n        this.byKind.set(kind, []);\n      }\n      return this.byKind.get(kind)!;\n    }\n  }\n}\n\n/**\n * Gets an array of literal expressions representing the attribute's namespaced name.\n */\nfunction getAttributeNameLiterals(namespace: string | null, name: string): o.LiteralExpr[] {\n  const nameLiteral = o.literal(name);\n\n  if (namespace) {\n    return [o.literal(core.AttributeMarker.NamespaceURI), o.literal(namespace), nameLiteral];\n  }\n\n  return [nameLiteral];\n}\n\n/**\n * Serializes an ElementAttributes object into an array expression.\n */\nfunction serializeAttributes({\n  attributes,\n  bindings,\n  classes,\n  i18n,\n  projectAs,\n  styles,\n  template,\n}: ElementAttributes): o.LiteralArrayExpr {\n  const attrArray = [...attributes];\n\n  if (projectAs !== null) {\n    // Parse the attribute value into a CssSelectorList. Note that we only take the\n    // first selector, because we don't support multiple selectors in ngProjectAs.\n    const parsedR3Selector = core.parseSelectorToR3Selector(projectAs)[0];\n    attrArray.push(\n      o.literal(core.AttributeMarker.ProjectAs),\n      literalOrArrayLiteral(parsedR3Selector),\n    );\n  }\n  if (classes.length > 0) {\n    attrArray.push(o.literal(core.AttributeMarker.Classes), ...classes);\n  }\n  if (styles.length > 0) {\n    attrArray.push(o.literal(core.AttributeMarker.Styles), ...styles);\n  }\n  if (bindings.length > 0) {\n    attrArray.push(o.literal(core.AttributeMarker.Bindings), ...bindings);\n  }\n  if (template.length > 0) {\n    attrArray.push(o.literal(core.AttributeMarker.Template), ...template);\n  }\n  if (i18n.length > 0) {\n    attrArray.push(o.literal(core.AttributeMarker.I18n), ...i18n);\n  }\n  return o.literalArr(attrArray);\n}\n"]}