{"version":3,"file":"parse_extracted_styles.js","sourceRoot":"","sources":["parse_extracted_styles.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SecurityContext} from '../../../../core';\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\n\nimport type {CompilationJob} from '../compilation';\n\n// Any changes here should be ported to the Angular Domino fork.\n// https://github.com/angular/domino/blob/main/lib/style_parser.js\n\nconst enum Char {\n  OpenParen = 40,\n  CloseParen = 41,\n  Colon = 58,\n  Semicolon = 59,\n  BackSlash = 92,\n  QuoteNone = 0, // indicating we are not inside a quote\n  QuoteDouble = 34,\n  QuoteSingle = 39,\n}\n\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\n * 'auto']`\n */\nexport function parse(value: string): string[] {\n  // we use a string array here instead of a string map\n  // because a string-map is not guaranteed to retain the\n  // order of the entries whereas a string array can be\n  // constructed in a [key, value, key, value] format.\n  const styles: string[] = [];\n\n  let i = 0;\n  let parenDepth = 0;\n  let quote: Char = Char.QuoteNone;\n  let valueStart = 0;\n  let propStart = 0;\n  let currentProp: string | null = null;\n  while (i < value.length) {\n    const token = value.charCodeAt(i++) as Char;\n    switch (token) {\n      case Char.OpenParen:\n        parenDepth++;\n        break;\n      case Char.CloseParen:\n        parenDepth--;\n        break;\n      case Char.QuoteSingle:\n        // valueStart needs to be there since prop values don't\n        // have quotes in CSS\n        if (quote === Char.QuoteNone) {\n          quote = Char.QuoteSingle;\n        } else if (quote === Char.QuoteSingle && value.charCodeAt(i - 1) !== Char.BackSlash) {\n          quote = Char.QuoteNone;\n        }\n        break;\n      case Char.QuoteDouble:\n        // same logic as above\n        if (quote === Char.QuoteNone) {\n          quote = Char.QuoteDouble;\n        } else if (quote === Char.QuoteDouble && value.charCodeAt(i - 1) !== Char.BackSlash) {\n          quote = Char.QuoteNone;\n        }\n        break;\n      case Char.Colon:\n        if (!currentProp && parenDepth === 0 && quote === Char.QuoteNone) {\n          // TODO: Do not hyphenate CSS custom property names like: `--intentionallyCamelCase`\n          currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n          valueStart = i;\n        }\n        break;\n      case Char.Semicolon:\n        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === Char.QuoteNone) {\n          const styleVal = value.substring(valueStart, i - 1).trim();\n          styles.push(currentProp, styleVal);\n          propStart = i;\n          valueStart = 0;\n          currentProp = null;\n        }\n        break;\n    }\n  }\n\n  if (currentProp && valueStart) {\n    const styleVal = value.slice(valueStart).trim();\n    styles.push(currentProp, styleVal);\n  }\n\n  return styles;\n}\n\nexport function hyphenate(value: string): string {\n  return value\n    .replace(/[a-z][A-Z]/g, (v) => {\n      return v.charAt(0) + '-' + v.charAt(1);\n    })\n    .toLowerCase();\n}\n\n/**\n * Parses extracted style and class attributes into separate ExtractedAttributeOps per style or\n * class property.\n */\nexport function parseExtractedStyles(job: CompilationJob) {\n  const elements = new Map<ir.XrefId, ir.CreateOp>();\n\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (ir.isElementOrContainerOp(op)) {\n        elements.set(op.xref, op);\n      }\n    }\n  }\n\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (\n        op.kind === ir.OpKind.ExtractedAttribute &&\n        op.bindingKind === ir.BindingKind.Attribute &&\n        ir.isStringLiteral(op.expression!)\n      ) {\n        const target = elements.get(op.target)!;\n\n        if (\n          target !== undefined &&\n          (target.kind === ir.OpKind.Template ||\n            target.kind === ir.OpKind.ConditionalCreate ||\n            target.kind === ir.OpKind.ConditionalBranchCreate) &&\n          target.templateKind === ir.TemplateKind.Structural\n        ) {\n          // TemplateDefinitionBuilder will not apply class and style bindings to structural\n          // directives; instead, it will leave them as attributes.\n          // (It's not clear what that would mean, anyway -- classes and styles on a structural\n          // element should probably be a parse error.)\n          // TODO: We may be able to remove this once Template Pipeline is the default.\n          continue;\n        }\n\n        if (op.name === 'style') {\n          const parsedStyles = parse(op.expression.value);\n          for (let i = 0; i < parsedStyles.length - 1; i += 2) {\n            ir.OpList.insertBefore<ir.CreateOp>(\n              ir.createExtractedAttributeOp(\n                op.target,\n                ir.BindingKind.StyleProperty,\n                null,\n                parsedStyles[i],\n                o.literal(parsedStyles[i + 1]),\n                null,\n                null,\n                SecurityContext.STYLE,\n              ),\n              op,\n            );\n          }\n          ir.OpList.remove<ir.CreateOp>(op);\n        } else if (op.name === 'class') {\n          const parsedClasses = op.expression.value.trim().split(/\\s+/g);\n          for (const parsedClass of parsedClasses) {\n            ir.OpList.insertBefore<ir.CreateOp>(\n              ir.createExtractedAttributeOp(\n                op.target,\n                ir.BindingKind.ClassName,\n                null,\n                parsedClass,\n                null,\n                null,\n                null,\n                SecurityContext.NONE,\n              ),\n              op,\n            );\n          }\n          ir.OpList.remove<ir.CreateOp>(op);\n        }\n      }\n    }\n  }\n}\n"]}