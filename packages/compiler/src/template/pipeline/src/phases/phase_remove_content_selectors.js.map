{"version":3,"file":"phase_remove_content_selectors.js","sourceRoot":"","sources":["phase_remove_content_selectors.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAE/B,OAAO,EAAC,eAAe,EAAC,MAAM,kBAAkB,CAAC;AAEjD;;;GAGG;AACH,MAAM,UAAU,sBAAsB,CAAC,GAAmB;IACxD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;QACvC,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5B,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;gBAChB,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO;oBACpB,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;oBACpD,IAAI,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;wBACvE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,EAAE,CAAC,CAAC;oBACpC,CAAC;oBACD,MAAM;YACV,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACrC,OAAO,IAAI,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC;AACzC,CAAC;AAED;;GAEG;AACH,SAAS,eAAe,CACtB,GAAyD,EACzD,IAAe;IAEf,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACzB,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;IACrE,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {CompilationJob} from '../compilation';\nimport {createOpXrefMap} from '../util/elements';\n\n/**\n * Attributes of `ng-content` named 'select' are specifically removed, because they control which\n * content matches as a property of the `projection`, and are not a plain attribute.\n */\nexport function removeContentSelectors(job: CompilationJob): void {\n  for (const unit of job.units) {\n    const elements = createOpXrefMap(unit);\n    for (const op of unit.ops()) {\n      switch (op.kind) {\n        case ir.OpKind.Binding:\n          const target = lookupInXrefMap(elements, op.target);\n          if (isSelectAttribute(op.name) && target.kind === ir.OpKind.Projection) {\n            ir.OpList.remove<ir.UpdateOp>(op);\n          }\n          break;\n      }\n    }\n  }\n}\n\nfunction isSelectAttribute(name: string) {\n  return name.toLowerCase() === 'select';\n}\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupInXrefMap(\n  map: Map<ir.XrefId, ir.ConsumesSlotOpTrait & ir.CreateOp>,\n  xref: ir.XrefId,\n): ir.ConsumesSlotOpTrait & ir.CreateOp {\n  const el = map.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an slottable target.');\n  }\n  return el;\n}\n"]}