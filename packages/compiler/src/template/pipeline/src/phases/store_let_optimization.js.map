{"version":3,"file":"store_let_optimization.js","sourceRoot":"","sources":["store_let_optimization.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,GAAmB;IAClD,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAa,CAAC;IAC/C,MAAM,aAAa,GAAG,IAAI,GAAG,EAA8B,CAAC;IAE5D,sEAAsE;IACtE,sEAAsE;IACtE,sDAAsD;IACtD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5B,0FAA0F;YAC1F,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACrC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACjC,CAAC;YAED,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;gBACnC,IAAI,IAAI,YAAY,EAAE,CAAC,uBAAuB,EAAE,CAAC;oBAC/C,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,EAAE,CAAC,wBAAwB,CACzB,EAAE,EACF,CAAC,IAAI,EAAE,EAAE;gBACP,yEAAyE;gBACzE,IAAI,IAAI,YAAY,EAAE,CAAC,YAAY,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC3E,kFAAkF;oBAClF,mFAAmF;oBACnF,4CAA4C;oBAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;wBACnB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,CAAC;oBACjE,CAAC;oBACD,OAAO,IAAI,CAAC,KAAK,CAAC;gBACpB,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAC3B,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC;AAED,6DAA6D;AAC7D,SAAS,OAAO,CAAC,IAAqB;IACpC,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,EAAE,CAAC,gCAAgC,CACjC,IAAI,EACJ,CAAC,IAAI,EAAE,EAAE;QACP,IAAI,IAAI,YAAY,EAAE,CAAC,eAAe,IAAI,IAAI,YAAY,EAAE,CAAC,uBAAuB,EAAE,CAAC;YACrF,MAAM,GAAG,IAAI,CAAC;QAChB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAC3B,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport {CompilationJob} from '../compilation';\n\n/**\n * Removes any `storeLet` calls that aren't referenced outside of the current view.\n */\nexport function optimizeStoreLet(job: CompilationJob): void {\n  const letUsedExternally = new Set<ir.XrefId>();\n  const declareLetOps = new Map<ir.XrefId, ir.DeclareLetOp>();\n\n  // Since `@let` declarations can be referenced in child views, both in\n  // the creation block (via listeners) and in the update block, we have\n  // to look through all the ops to find the references.\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      // Take advantage that we're already looking through all the ops and track some more info.\n      if (op.kind === ir.OpKind.DeclareLet) {\n        declareLetOps.set(op.xref, op);\n      }\n\n      ir.visitExpressionsInOp(op, (expr) => {\n        if (expr instanceof ir.ContextLetReferenceExpr) {\n          letUsedExternally.add(expr.target);\n        }\n      });\n    }\n  }\n\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      ir.transformExpressionsInOp(\n        op,\n        (expr) => {\n          // If a @let isn't used in other views, we don't have to store its value.\n          if (expr instanceof ir.StoreLetExpr && !letUsedExternally.has(expr.target)) {\n            // Furthermore, if the @let isn't using pipes, we can also drop its declareLet op.\n            // We need to keep the declareLet if there are pipes, because they can use DI which\n            // requires the TNode created by declareLet.\n            if (!hasPipe(expr)) {\n              ir.OpList.remove<ir.CreateOp>(declareLetOps.get(expr.target)!);\n            }\n            return expr.value;\n          }\n          return expr;\n        },\n        ir.VisitorContextFlag.None,\n      );\n    }\n  }\n}\n\n/** Determines if a `storeLet` expression contains a pipe. */\nfunction hasPipe(root: ir.StoreLetExpr): boolean {\n  let result = false;\n\n  ir.transformExpressionsInExpression(\n    root,\n    (expr) => {\n      if (expr instanceof ir.PipeBindingExpr || expr instanceof ir.PipeBindingVariadicExpr) {\n        result = true;\n      }\n      return expr;\n    },\n    ir.VisitorContextFlag.None,\n  );\n\n  return result;\n}\n"]}