{"version":3,"file":"track_fn_optimization.js","sourceRoot":"","sources":["track_fn_optimization.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport {Identifiers} from '../../../../render3/r3_identifiers';\nimport * as ir from '../../ir';\n\nimport type {CompilationJob} from '../compilation';\n\n/**\n * `track` functions in `for` repeaters can sometimes be \"optimized,\" i.e. transformed into inline\n * expressions, in lieu of an external function call. For example, tracking by `$index` can be be\n * optimized into an inline `trackByIndex` reference. This phase checks track expressions for\n * optimizable cases.\n */\nexport function optimizeTrackFns(job: CompilationJob): void {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind !== ir.OpKind.RepeaterCreate) {\n        continue;\n      }\n      if (op.track instanceof o.ReadVarExpr && op.track.name === '$index') {\n        // Top-level access of `$index` uses the built in `repeaterTrackByIndex`.\n        op.trackByFn = o.importExpr(Identifiers.repeaterTrackByIndex);\n      } else if (op.track instanceof o.ReadVarExpr && op.track.name === '$item') {\n        // Top-level access of the item uses the built in `repeaterTrackByIdentity`.\n        op.trackByFn = o.importExpr(Identifiers.repeaterTrackByIdentity);\n      } else if (isTrackByFunctionCall(job.root.xref, op.track)) {\n        // Mark the function as using the component instance to play it safe\n        // since the method might be using `this` internally (see #53628).\n        op.usesComponentInstance = true;\n\n        // Top-level method calls in the form of `fn($index, item)` can be passed in directly.\n        if (op.track.receiver.receiver.view === unit.xref) {\n          // TODO: this may be wrong\n          op.trackByFn = op.track.receiver;\n        } else {\n          // This is a plain method call, but not in the component's root view.\n          // We need to get the component instance, and then call the method on it.\n          op.trackByFn = o\n            .importExpr(Identifiers.componentInstance)\n            .callFn([])\n            .prop(op.track.receiver.name);\n          // Because the context is not avaiable (without a special function), we don't want to\n          // try to resolve it later. Let's get rid of it by overwriting the original track\n          // expression (which won't be used anyway).\n          op.track = op.trackByFn;\n        }\n      } else {\n        // The track function could not be optimized.\n        // Replace context reads with a special IR expression, since context reads in a track\n        // function are emitted specially.\n        op.track = ir.transformExpressionsInExpression(\n          op.track,\n          (expr) => {\n            if (expr instanceof ir.PipeBindingExpr || expr instanceof ir.PipeBindingVariadicExpr) {\n              throw new Error(`Illegal State: Pipes are not allowed in this context`);\n            } else if (expr instanceof ir.ContextExpr) {\n              op.usesComponentInstance = true;\n              return new ir.TrackContextExpr(expr.view);\n            }\n            return expr;\n          },\n          ir.VisitorContextFlag.None,\n        );\n\n        // Also create an OpList for the tracking expression since it may need\n        // additional ops when generating the final code (e.g. temporary variables).\n        const trackOpList = new ir.OpList<ir.UpdateOp>();\n        trackOpList.push(\n          ir.createStatementOp(new o.ReturnStatement(op.track, op.track.sourceSpan)),\n        );\n        op.trackByOps = trackOpList;\n      }\n    }\n  }\n}\n\nfunction isTrackByFunctionCall(\n  rootView: ir.XrefId,\n  expr: o.Expression,\n): expr is o.InvokeFunctionExpr & {\n  receiver: o.ReadPropExpr & {\n    receiver: ir.ContextExpr;\n  };\n} {\n  if (!(expr instanceof o.InvokeFunctionExpr) || expr.args.length === 0 || expr.args.length > 2) {\n    return false;\n  }\n\n  if (\n    !(\n      expr.receiver instanceof o.ReadPropExpr && expr.receiver.receiver instanceof ir.ContextExpr\n    ) ||\n    expr.receiver.receiver.view !== rootView\n  ) {\n    return false;\n  }\n\n  const [arg0, arg1] = expr.args;\n  if (!(arg0 instanceof o.ReadVarExpr) || arg0.name !== '$index') {\n    return false;\n  } else if (expr.args.length === 1) {\n    return true;\n  }\n  if (!(arg1 instanceof o.ReadVarExpr) || arg1.name !== '$item') {\n    return false;\n  }\n  return true;\n}\n"]}