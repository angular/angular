{"version":3,"file":"resolve_dollar_event.js","sourceRoot":"","sources":["resolve_dollar_event.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAAC,GAAmB;IACpD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;AACH,CAAC;AAED,SAAS,oBAAoB,CAAC,GAAoD;IAChF,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,IACE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ;YAC9B,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc;YACpC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,iBAAiB,EACvC,CAAC;YACD,EAAE,CAAC,wBAAwB,CACzB,EAAE,EACF,CAAC,IAAI,EAAE,EAAE;gBACP,IAAI,IAAI,YAAY,EAAE,CAAC,eAAe,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBACjE,qEAAqE;oBACrE,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;wBAC9E,EAAE,CAAC,mBAAmB,GAAG,IAAI,CAAC;oBAChC,CAAC;oBACD,OAAO,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtC,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,gBAAgB,CACvC,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport type {CompilationJob} from '../compilation';\n\n/**\n * Any variable inside a listener with the name `$event` will be transformed into a output lexical\n * read immediately, and does not participate in any of the normal logic for handling variables.\n */\nexport function resolveDollarEvent(job: CompilationJob): void {\n  for (const unit of job.units) {\n    transformDollarEvent(unit.create);\n    transformDollarEvent(unit.update);\n  }\n}\n\nfunction transformDollarEvent(ops: ir.OpList<ir.CreateOp> | ir.OpList<ir.UpdateOp>): void {\n  for (const op of ops) {\n    if (\n      op.kind === ir.OpKind.Listener ||\n      op.kind === ir.OpKind.TwoWayListener ||\n      op.kind === ir.OpKind.AnimationListener\n    ) {\n      ir.transformExpressionsInOp(\n        op,\n        (expr) => {\n          if (expr instanceof ir.LexicalReadExpr && expr.name === '$event') {\n            // Two-way listeners always consume `$event` so they omit this field.\n            if (op.kind === ir.OpKind.Listener || op.kind === ir.OpKind.AnimationListener) {\n              op.consumesDollarEvent = true;\n            }\n            return new o.ReadVarExpr(expr.name);\n          }\n          return expr;\n        },\n        ir.VisitorContextFlag.InChildOperation,\n      );\n    }\n  }\n}\n"]}