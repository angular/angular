{"version":3,"file":"next_context_merging.js","sourceRoot":"","sources":["next_context_merging.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAI/B;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,2BAA2B,CAAC,GAAmB;IAC7D,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IACE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ;gBAC9B,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS;gBAC/B,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,iBAAiB;gBACvC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc,EACpC,CAAC;gBACD,sBAAsB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;QACD,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAED,SAAS,sBAAsB,CAAC,GAA2B;IACzD,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,iDAAiD;QACjD,IACE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS;YAC/B,CAAC,CAAC,EAAE,CAAC,SAAS,YAAY,CAAC,CAAC,mBAAmB,CAAC;YAChD,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,YAAY,EAAE,CAAC,eAAe,CAAC,EAClD,CAAC;YACD,SAAS;QACX,CAAC;QAED,MAAM,UAAU,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;QAE3C,0CAA0C;QAC1C,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,KACE,IAAI,SAAS,GAAG,EAAE,CAAC,IAAK,EACxB,SAAS,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO,IAAI,UAAU,EAClD,SAAS,GAAG,SAAS,CAAC,IAAK,EAC3B,CAAC;YACD,EAAE,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBACjD,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;oBAC7B,OAAO,IAAI,CAAC;gBACd,CAAC;gBAED,IAAI,CAAC,UAAU,EAAE,CAAC;oBAChB,mDAAmD;oBACnD,OAAO;gBACT,CAAC;gBAED,IAAI,KAAK,GAAG,EAAE,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;oBACnD,yCAAyC;oBACzC,OAAO;gBACT,CAAC;gBAED,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;oBAClB,KAAK,EAAE,CAAC,cAAc,CAAC,WAAW;wBAChC,yDAAyD;wBACzD,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC;wBACzB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAiB,CAAC,CAAC;wBACpC,UAAU,GAAG,KAAK,CAAC;wBACnB,MAAM;oBACR,KAAK,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC;oBACtC,KAAK,EAAE,CAAC,cAAc,CAAC,SAAS,CAAC;oBACjC,KAAK,EAAE,CAAC,cAAc,CAAC,mBAAmB;wBACxC,gDAAgD;wBAChD,UAAU,GAAG,KAAK,CAAC;wBACnB,MAAM;gBACV,CAAC;gBACD,OAAO;YACT,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\n\nimport type {CompilationJob} from '../compilation';\n\n/**\n * Merges logically sequential `NextContextExpr` operations.\n *\n * `NextContextExpr` can be referenced repeatedly, \"popping\" the runtime's context stack each time.\n * When two such expressions appear back-to-back, it's possible to merge them together into a single\n * `NextContextExpr` that steps multiple contexts. This merging is possible if all conditions are\n * met:\n *\n *   * The result of the `NextContextExpr` that's folded into the subsequent one is not stored (that\n *     is, the call is purely side-effectful).\n *   * No operations in between them uses the implicit context.\n */\nexport function mergeNextContextExpressions(job: CompilationJob): void {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (\n        op.kind === ir.OpKind.Listener ||\n        op.kind === ir.OpKind.Animation ||\n        op.kind === ir.OpKind.AnimationListener ||\n        op.kind === ir.OpKind.TwoWayListener\n      ) {\n        mergeNextContextsInOps(op.handlerOps);\n      }\n    }\n    mergeNextContextsInOps(unit.update);\n  }\n}\n\nfunction mergeNextContextsInOps(ops: ir.OpList<ir.UpdateOp>): void {\n  for (const op of ops) {\n    // Look for a candidate operation to maybe merge.\n    if (\n      op.kind !== ir.OpKind.Statement ||\n      !(op.statement instanceof o.ExpressionStatement) ||\n      !(op.statement.expr instanceof ir.NextContextExpr)\n    ) {\n      continue;\n    }\n\n    const mergeSteps = op.statement.expr.steps;\n\n    // Try to merge this `ir.NextContextExpr`.\n    let tryToMerge = true;\n    for (\n      let candidate = op.next!;\n      candidate.kind !== ir.OpKind.ListEnd && tryToMerge;\n      candidate = candidate.next!\n    ) {\n      ir.visitExpressionsInOp(candidate, (expr, flags) => {\n        if (!ir.isIrExpression(expr)) {\n          return expr;\n        }\n\n        if (!tryToMerge) {\n          // Either we've already merged, or failed to merge.\n          return;\n        }\n\n        if (flags & ir.VisitorContextFlag.InChildOperation) {\n          // We cannot merge into child operations.\n          return;\n        }\n\n        switch (expr.kind) {\n          case ir.ExpressionKind.NextContext:\n            // Merge the previous `ir.NextContextExpr` into this one.\n            expr.steps += mergeSteps;\n            ir.OpList.remove(op as ir.UpdateOp);\n            tryToMerge = false;\n            break;\n          case ir.ExpressionKind.GetCurrentView:\n          case ir.ExpressionKind.Reference:\n          case ir.ExpressionKind.ContextLetReference:\n            // Can't merge past a dependency on the context.\n            tryToMerge = false;\n            break;\n        }\n        return;\n      });\n    }\n  }\n}\n"]}