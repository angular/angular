{"version":3,"file":"save_restore_view.js","sourceRoot":"","sources":["save_restore_view.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;;;GAIG;AACH,MAAM,UAAU,kBAAkB,CAAC,GAA4B;IAC7D,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAClB,EAAE,CAAC,gBAAgB,CACjB,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,EACzB;gBACE,IAAI,EAAE,EAAE,CAAC,oBAAoB,CAAC,SAAS;gBACvC,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI,CAAC,IAAI;aAChB,EACD,IAAI,EAAE,CAAC,kBAAkB,EAAE,EAC3B,EAAE,CAAC,aAAa,CAAC,IAAI,CACtB;SACF,CAAC,CAAC;QAEH,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IACE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ;gBAC9B,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc;gBACpC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS;gBAC/B,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,iBAAiB,EACvC,CAAC;gBACD,SAAS;YACX,CAAC;YAED,8DAA8D;YAC9D,IAAI,gBAAgB,GAAG,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC;YAEzC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACtB,KAAK,MAAM,SAAS,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC;oBACtC,EAAE,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;wBAC1C,IAAI,IAAI,YAAY,EAAE,CAAC,aAAa,IAAI,IAAI,YAAY,EAAE,CAAC,uBAAuB,EAAE,CAAC;4BACnF,+EAA+E;4BAC/E,gBAAgB,GAAG,IAAI,CAAC;wBAC1B,CAAC;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,IAAI,gBAAgB,EAAE,CAAC;gBACrB,qCAAqC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAED,SAAS,qCAAqC,CAC5C,IAAyB,EACzB,EAAiF;IAEjF,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;QACpB,EAAE,CAAC,gBAAgB,CACjB,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,EACzB;YACE,IAAI,EAAE,EAAE,CAAC,oBAAoB,CAAC,OAAO;YACrC,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,EACD,IAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EACjC,EAAE,CAAC,aAAa,CAAC,IAAI,CACtB;KACF,CAAC,CAAC;IAEH,wFAAwF;IACxF,0FAA0F;IAC1F,+DAA+D;IAC/D,KAAK,MAAM,SAAS,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC;QACtC,IACE,SAAS,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS;YACtC,SAAS,CAAC,SAAS,YAAY,CAAC,CAAC,eAAe,EAChD,CAAC;YACD,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport type {ComponentCompilationJob, ViewCompilationUnit} from '../compilation';\n\n/**\n * When inside of a listener, we may need access to one or more enclosing views. Therefore, each\n * view should save the current view, and each listener must have the ability to restore the\n * appropriate view. We eagerly generate all save view variables; they will be optimized away later.\n */\nexport function saveAndRestoreView(job: ComponentCompilationJob): void {\n  for (const unit of job.units) {\n    unit.create.prepend([\n      ir.createVariableOp<ir.CreateOp>(\n        unit.job.allocateXrefId(),\n        {\n          kind: ir.SemanticVariableKind.SavedView,\n          name: null,\n          view: unit.xref,\n        },\n        new ir.GetCurrentViewExpr(),\n        ir.VariableFlags.None,\n      ),\n    ]);\n\n    for (const op of unit.create) {\n      if (\n        op.kind !== ir.OpKind.Listener &&\n        op.kind !== ir.OpKind.TwoWayListener &&\n        op.kind !== ir.OpKind.Animation &&\n        op.kind !== ir.OpKind.AnimationListener\n      ) {\n        continue;\n      }\n\n      // Embedded views always need the save/restore view operation.\n      let needsRestoreView = unit !== job.root;\n\n      if (!needsRestoreView) {\n        for (const handlerOp of op.handlerOps) {\n          ir.visitExpressionsInOp(handlerOp, (expr) => {\n            if (expr instanceof ir.ReferenceExpr || expr instanceof ir.ContextLetReferenceExpr) {\n              // Listeners that reference() a local ref need the save/restore view operation.\n              needsRestoreView = true;\n            }\n          });\n        }\n      }\n\n      if (needsRestoreView) {\n        addSaveRestoreViewOperationToListener(unit, op);\n      }\n    }\n  }\n}\n\nfunction addSaveRestoreViewOperationToListener(\n  unit: ViewCompilationUnit,\n  op: ir.ListenerOp | ir.TwoWayListenerOp | ir.AnimationOp | ir.AnimationListenerOp,\n) {\n  op.handlerOps.prepend([\n    ir.createVariableOp<ir.UpdateOp>(\n      unit.job.allocateXrefId(),\n      {\n        kind: ir.SemanticVariableKind.Context,\n        name: null,\n        view: unit.xref,\n      },\n      new ir.RestoreViewExpr(unit.xref),\n      ir.VariableFlags.None,\n    ),\n  ]);\n\n  // The \"restore view\" operation in listeners requires a call to `resetView` to reset the\n  // context prior to returning from the listener operation. Find any `return` statements in\n  // the listener body and wrap them in a call to reset the view.\n  for (const handlerOp of op.handlerOps) {\n    if (\n      handlerOp.kind === ir.OpKind.Statement &&\n      handlerOp.statement instanceof o.ReturnStatement\n    ) {\n      handlerOp.statement.value = new ir.ResetViewExpr(handlerOp.statement.value);\n    }\n  }\n}\n"]}