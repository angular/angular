{"version":3,"file":"pipe_creation.js","sourceRoot":"","sources":["pipe_creation.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;;;;;GAMG;AACH,MAAM,UAAU,WAAW,CAAC,GAAmB;IAC7C,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,yBAAyB,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;AACH,CAAC;AAED,SAAS,yBAAyB,CAAC,IAAqB;IACtD,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,EAAE,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAChD,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC7B,OAAO;YACT,CAAC;YAED,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;gBAChD,OAAO;YACT,CAAC;YAED,IAAI,KAAK,GAAG,EAAE,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;gBACnD,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;YAC1F,CAAC;YAED,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;gBAC3B,8EAA8E;gBAC9E,MAAM,UAAU,GAAI,QAAgB,CAAC,MAAM,CAAC;gBAC5C,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC;oBAC5B,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;gBAC3F,CAAC;gBACD,sBAAsB,CAAC,IAAI,EAAG,QAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC/D,CAAC;iBAAM,CAAC;gBACN,4FAA4F;gBAC5F,mFAAmF;gBACnF,gBAAgB;gBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7E,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,SAAS,sBAAsB,CAC7B,IAAqB,EACrB,eAA0B,EAC1B,OAA2B;IAE3B,oEAAoE;IACpE,+FAA+F;IAC/F,6BAA6B;IAC7B,KAAK,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAK,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,CAAC,IAAK,EAAE,CAAC;QACnF,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAc,EAAE,CAAC,EAAE,CAAC;YAC9C,SAAS;QACX,CAAC;QAED,IAAI,EAAE,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;YAChC,SAAS;QACX,CAAC;QAED,+FAA+F;QAC/F,sBAAsB;QACtB,OAAO,EAAE,CAAC,IAAK,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACxC,EAAE,GAAG,EAAE,CAAC,IAAK,CAAC;QAChB,CAAC;QAED,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,IAAI,CAAgB,CAAC;QAC9F,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,IAAK,CAAC,CAAC;QAEvC,wDAAwD;QACxD,OAAO;IACT,CAAC;IAED,qEAAqE;IACrE,MAAM,IAAI,KAAK,CAAC,2DAA2D,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAC7F,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {CompilationJob, CompilationUnit} from '../compilation';\n\n/**\n * This phase generates pipe creation instructions. We do this based on the pipe bindings found in\n * the update block, in the order we see them.\n *\n * When not in compatibility mode, we can simply group all these creation instructions together, to\n * maximize chaining opportunities.\n */\nexport function createPipes(job: CompilationJob): void {\n  for (const unit of job.units) {\n    processPipeBindingsInView(unit);\n  }\n}\n\nfunction processPipeBindingsInView(unit: CompilationUnit): void {\n  for (const updateOp of unit.update) {\n    ir.visitExpressionsInOp(updateOp, (expr, flags) => {\n      if (!ir.isIrExpression(expr)) {\n        return;\n      }\n\n      if (expr.kind !== ir.ExpressionKind.PipeBinding) {\n        return;\n      }\n\n      if (flags & ir.VisitorContextFlag.InChildOperation) {\n        throw new Error(`AssertionError: pipe bindings should not appear in child expressions`);\n      }\n\n      if (unit.job.compatibility) {\n        // TODO: We can delete this cast and check once compatibility mode is removed.\n        const slotHandle = (updateOp as any).target;\n        if (slotHandle == undefined) {\n          throw new Error(`AssertionError: expected slot handle to be assigned for pipe creation`);\n        }\n        addPipeToCreationBlock(unit, (updateOp as any).target, expr);\n      } else {\n        // When not in compatibility mode, we just add the pipe to the end of the create block. This\n        // is not only simpler and faster, but allows more chaining opportunities for other\n        // instructions.\n        unit.create.push(ir.createPipeOp(expr.target, expr.targetSlot, expr.name));\n      }\n    });\n  }\n}\n\nfunction addPipeToCreationBlock(\n  unit: CompilationUnit,\n  afterTargetXref: ir.XrefId,\n  binding: ir.PipeBindingExpr,\n): void {\n  // Find the appropriate point to insert the Pipe creation operation.\n  // We're looking for `afterTargetXref` (and also want to insert after any other pipe operations\n  // which might be beyond it).\n  for (let op = unit.create.head.next!; op.kind !== ir.OpKind.ListEnd; op = op.next!) {\n    if (!ir.hasConsumesSlotTrait<ir.CreateOp>(op)) {\n      continue;\n    }\n\n    if (op.xref !== afterTargetXref) {\n      continue;\n    }\n\n    // We've found a tentative insertion point; however, we also want to skip past any _other_ pipe\n    // operations present.\n    while (op.next!.kind === ir.OpKind.Pipe) {\n      op = op.next!;\n    }\n\n    const pipe = ir.createPipeOp(binding.target, binding.targetSlot, binding.name) as ir.CreateOp;\n    ir.OpList.insertBefore(pipe, op.next!);\n\n    // This completes adding the pipe to the creation block.\n    return;\n  }\n\n  // At this point, we've failed to add the pipe to the creation block.\n  throw new Error(`AssertionError: unable to find insertion point for pipe ${binding.name}`);\n}\n"]}