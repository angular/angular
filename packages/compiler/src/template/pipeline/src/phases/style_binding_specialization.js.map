{"version":3,"file":"style_binding_specialization.js","sourceRoot":"","sources":["style_binding_specialization.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,GAAmB;IACzD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBAClC,SAAS;YACX,CAAC;YAED,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;gBACvB,KAAK,EAAE,CAAC,WAAW,CAAC,SAAS;oBAC3B,IAAI,EAAE,CAAC,UAAU,YAAY,EAAE,CAAC,aAAa,EAAE,CAAC;wBAC9C,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;oBACnE,CAAC;oBACD,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,CACvE,CAAC;oBACF,MAAM;gBACR,KAAK,EAAE,CAAC,WAAW,CAAC,aAAa;oBAC/B,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,CAChF,CAAC;oBACF,MAAM;gBACR,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC;gBAC7B,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ;oBAC1B,IAAI,EAAE,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;wBACxB,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,CAC7D,CAAC;oBACJ,CAAC;yBAAM,IAAI,EAAE,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;wBAC/B,EAAE,CAAC,MAAM,CAAC,OAAO,CACf,EAAE,EACF,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,CAC7D,CAAC;oBACJ,CAAC;oBACD,MAAM;YACV,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {CompilationJob} from '../compilation';\n\n/**\n * Transforms special-case bindings with 'style' or 'class' in their names. Must run before the\n * main binding specialization pass.\n */\nexport function specializeStyleBindings(job: CompilationJob): void {\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      if (op.kind !== ir.OpKind.Binding) {\n        continue;\n      }\n\n      switch (op.bindingKind) {\n        case ir.BindingKind.ClassName:\n          if (op.expression instanceof ir.Interpolation) {\n            throw new Error(`Unexpected interpolation in ClassName binding`);\n          }\n          ir.OpList.replace<ir.UpdateOp>(\n            op,\n            ir.createClassPropOp(op.target, op.name, op.expression, op.sourceSpan),\n          );\n          break;\n        case ir.BindingKind.StyleProperty:\n          ir.OpList.replace<ir.UpdateOp>(\n            op,\n            ir.createStylePropOp(op.target, op.name, op.expression, op.unit, op.sourceSpan),\n          );\n          break;\n        case ir.BindingKind.Property:\n        case ir.BindingKind.Template:\n          if (op.name === 'style') {\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createStyleMapOp(op.target, op.expression, op.sourceSpan),\n            );\n          } else if (op.name === 'class') {\n            ir.OpList.replace<ir.UpdateOp>(\n              op,\n              ir.createClassMapOp(op.target, op.expression, op.sourceSpan),\n            );\n          }\n          break;\n      }\n    }\n  }\n}\n"]}