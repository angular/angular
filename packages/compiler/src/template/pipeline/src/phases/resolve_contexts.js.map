{"version":3,"file":"resolve_contexts.js","sourceRoot":"","sources":["resolve_contexts.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,GAAmB;IACjD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;AACH,CAAC;AAED,SAAS,mBAAmB,CAC1B,IAAqB,EACrB,GAAyC;IAEzC,8FAA8F;IAC9F,oBAAoB;IACpB,MAAM,KAAK,GAAG,IAAI,GAAG,EAA2B,CAAC;IAEjD,oEAAoE;IACpE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAExC,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;YAChB,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ;gBACrB,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACzB,KAAK,EAAE,CAAC,oBAAoB,CAAC,OAAO;wBAClC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC9D,MAAM;gBACV,CAAC;gBACD,MAAM;YACR,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC;YACzB,KAAK,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC;YACjC,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YACxB,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc;gBAC3B,mBAAmB,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC;gBACzC,MAAM;YACR,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc;gBAC3B,IAAI,EAAE,CAAC,UAAU,KAAK,IAAI,EAAE,CAAC;oBAC3B,mBAAmB,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC;gBAC3C,CAAC;gBACD,MAAM;QACV,CAAC;IACH,CAAC;IAED,IAAI,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAC3B,2FAA2F;QAC3F,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,EAAE,CAAC,wBAAwB,CACzB,EAAE,EACF,CAAC,IAAI,EAAE,EAAE;YACP,IAAI,IAAI,YAAY,EAAE,CAAC,WAAW,EAAE,CAAC;gBACnC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;oBAC1B,MAAM,IAAI,KAAK,CACb,0CAA0C,IAAI,CAAC,IAAI,cAAc,IAAI,CAAC,IAAI,EAAE,CAC7E,CAAC;gBACJ,CAAC;gBACD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC;YAC/B,CAAC;iBAAM,CAAC;gBACN,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAC3B,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport {CompilationJob, CompilationUnit} from '../compilation';\n\n/**\n * Resolves `ir.ContextExpr` expressions (which represent embedded view or component contexts) to\n * either the `ctx` parameter to component functions (for the current view context) or to variables\n * that store those contexts (for contexts accessed via the `nextContext()` instruction).\n */\nexport function resolveContexts(job: CompilationJob): void {\n  for (const unit of job.units) {\n    processLexicalScope(unit, unit.create);\n    processLexicalScope(unit, unit.update);\n  }\n}\n\nfunction processLexicalScope(\n  view: CompilationUnit,\n  ops: ir.OpList<ir.CreateOp | ir.UpdateOp>,\n): void {\n  // Track the expressions used to access all available contexts within the current view, by the\n  // view `ir.XrefId`.\n  const scope = new Map<ir.XrefId, o.Expression>();\n\n  // The current view's context is accessible via the `ctx` parameter.\n  scope.set(view.xref, o.variable('ctx'));\n\n  for (const op of ops) {\n    switch (op.kind) {\n      case ir.OpKind.Variable:\n        switch (op.variable.kind) {\n          case ir.SemanticVariableKind.Context:\n            scope.set(op.variable.view, new ir.ReadVariableExpr(op.xref));\n            break;\n        }\n        break;\n      case ir.OpKind.Animation:\n      case ir.OpKind.AnimationListener:\n      case ir.OpKind.Listener:\n      case ir.OpKind.TwoWayListener:\n        processLexicalScope(view, op.handlerOps);\n        break;\n      case ir.OpKind.RepeaterCreate:\n        if (op.trackByOps !== null) {\n          processLexicalScope(view, op.trackByOps);\n        }\n        break;\n    }\n  }\n\n  if (view === view.job.root) {\n    // Prefer `ctx` of the root view to any variables which happen to contain the root context.\n    scope.set(view.xref, o.variable('ctx'));\n  }\n\n  for (const op of ops) {\n    ir.transformExpressionsInOp(\n      op,\n      (expr) => {\n        if (expr instanceof ir.ContextExpr) {\n          if (!scope.has(expr.view)) {\n            throw new Error(\n              `No context found for reference to view ${expr.view} from view ${view.xref}`,\n            );\n          }\n          return scope.get(expr.view)!;\n        } else {\n          return expr;\n        }\n      },\n      ir.VisitorContextFlag.None,\n    );\n  }\n}\n"]}