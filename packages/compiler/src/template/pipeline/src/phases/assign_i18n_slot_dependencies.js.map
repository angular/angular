{"version":3,"file":"assign_i18n_slot_dependencies.js","sourceRoot":"","sources":["assign_i18n_slot_dependencies.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport {CompilationJob} from '../compilation';\n\ninterface BlockState {\n  blockXref: ir.XrefId;\n  lastSlotConsumer: ir.XrefId;\n}\n\n/**\n * Updates i18n expression ops to target the last slot in their owning i18n block, and moves them\n * after the last update instruction that depends on that slot.\n */\nexport function assignI18nSlotDependencies(job: CompilationJob) {\n  for (const unit of job.units) {\n    // The first update op.\n    let updateOp = unit.update.head;\n\n    // I18n expressions currently being moved during the iteration.\n    let i18nExpressionsInProgress: ir.I18nExpressionOp[] = [];\n\n    // Non-null  while we are iterating through an i18nStart/i18nEnd pair\n    let state: BlockState | null = null;\n\n    for (const createOp of unit.create) {\n      if (createOp.kind === ir.OpKind.I18nStart) {\n        state = {\n          blockXref: createOp.xref,\n          lastSlotConsumer: createOp.xref,\n        };\n      } else if (createOp.kind === ir.OpKind.I18nEnd) {\n        for (const op of i18nExpressionsInProgress) {\n          op.target = state!.lastSlotConsumer;\n          ir.OpList.insertBefore(op as ir.UpdateOp, updateOp!);\n        }\n        i18nExpressionsInProgress.length = 0;\n        state = null;\n      }\n\n      if (ir.hasConsumesSlotTrait(createOp)) {\n        if (state !== null) {\n          state.lastSlotConsumer = createOp.xref;\n        }\n\n        while (true) {\n          if (updateOp.next === null) {\n            break;\n          }\n\n          if (\n            state !== null &&\n            updateOp.kind === ir.OpKind.I18nExpression &&\n            updateOp.usage === ir.I18nExpressionFor.I18nText &&\n            updateOp.i18nOwner === state.blockXref\n          ) {\n            const opToRemove = updateOp;\n            updateOp = updateOp.next!;\n            ir.OpList.remove<ir.UpdateOp>(opToRemove);\n            i18nExpressionsInProgress.push(opToRemove);\n            continue;\n          }\n\n          let hasDifferentTarget = false;\n          if (ir.hasDependsOnSlotContextTrait(updateOp) && updateOp.target !== createOp.xref) {\n            hasDifferentTarget = true;\n          } else if (\n            // Some expressions may consume slots as well (e.g. `storeLet`).\n            updateOp.kind === ir.OpKind.Statement ||\n            updateOp.kind === ir.OpKind.Variable\n          ) {\n            ir.visitExpressionsInOp(updateOp, (expr) => {\n              if (\n                !hasDifferentTarget &&\n                ir.hasDependsOnSlotContextTrait(expr) &&\n                expr.target !== createOp.xref\n              ) {\n                hasDifferentTarget = true;\n              }\n            });\n          }\n\n          if (hasDifferentTarget) {\n            break;\n          }\n\n          updateOp = updateOp.next!;\n        }\n      }\n    }\n  }\n}\n"]}