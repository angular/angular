{"version":3,"file":"expand_safe_reads.js","sourceRoot":"","sources":["expand_safe_reads.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport {CompilationJob} from '../compilation';\n\ninterface SafeTransformContext {\n  job: CompilationJob;\n}\n\n/**\n * Safe read expressions such as `a?.b` have different semantics in Angular templates as\n * compared to JavaScript. In particular, they default to `null` instead of `undefined`. This phase\n * finds all unresolved safe read expressions, and converts them into the appropriate output AST\n * reads, guarded by null checks. We generate temporaries as needed, to avoid re-evaluating the same\n * sub-expression multiple times.\n */\nexport function expandSafeReads(job: CompilationJob): void {\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      ir.transformExpressionsInOp(op, (e) => safeTransform(e, {job}), ir.VisitorContextFlag.None);\n      ir.transformExpressionsInOp(op, ternaryTransform, ir.VisitorContextFlag.None);\n    }\n  }\n}\n\n// A lookup set of all the expression kinds that require a temporary variable to be generated.\nconst requiresTemporary = [\n  o.InvokeFunctionExpr,\n  o.LiteralArrayExpr,\n  o.LiteralMapExpr,\n  o.ParenthesizedExpr,\n  ir.SafeInvokeFunctionExpr,\n  ir.PipeBindingExpr,\n].map((e) => e.constructor.name);\n\nfunction needsTemporaryInSafeAccess(e: o.Expression): boolean {\n  // TODO: We probably want to use an expression visitor to recursively visit all descendents.\n  // However, that would potentially do a lot of extra work (because it cannot short circuit), so we\n  // implement the logic ourselves for now.\n  if (e instanceof o.UnaryOperatorExpr) {\n    return needsTemporaryInSafeAccess(e.expr);\n  } else if (e instanceof o.BinaryOperatorExpr) {\n    return needsTemporaryInSafeAccess(e.lhs) || needsTemporaryInSafeAccess(e.rhs);\n  } else if (e instanceof o.ConditionalExpr) {\n    if (e.falseCase && needsTemporaryInSafeAccess(e.falseCase)) return true;\n    return needsTemporaryInSafeAccess(e.condition) || needsTemporaryInSafeAccess(e.trueCase);\n  } else if (e instanceof o.NotExpr) {\n    return needsTemporaryInSafeAccess(e.condition);\n  } else if (e instanceof ir.AssignTemporaryExpr) {\n    return needsTemporaryInSafeAccess(e.expr);\n  } else if (e instanceof o.ReadPropExpr) {\n    return needsTemporaryInSafeAccess(e.receiver);\n  } else if (e instanceof o.ReadKeyExpr) {\n    return needsTemporaryInSafeAccess(e.receiver) || needsTemporaryInSafeAccess(e.index);\n  } else if (e instanceof o.ParenthesizedExpr) {\n    return needsTemporaryInSafeAccess(e.expr);\n  }\n  // TODO: Switch to a method which is exhaustive of newly added expression subtypes.\n  return (\n    e instanceof o.InvokeFunctionExpr ||\n    e instanceof o.LiteralArrayExpr ||\n    e instanceof o.LiteralMapExpr ||\n    e instanceof ir.SafeInvokeFunctionExpr ||\n    e instanceof ir.PipeBindingExpr\n  );\n}\n\nfunction temporariesIn(e: o.Expression): Set<ir.XrefId> {\n  const temporaries = new Set<ir.XrefId>();\n  // TODO: Although it's not currently supported by the transform helper, we should be able to\n  // short-circuit exploring the tree to do less work. In particular, we don't have to penetrate\n  // into the subexpressions of temporary assignments.\n  ir.transformExpressionsInExpression(\n    e,\n    (e) => {\n      if (e instanceof ir.AssignTemporaryExpr) {\n        temporaries.add(e.xref);\n      }\n      return e;\n    },\n    ir.VisitorContextFlag.None,\n  );\n  return temporaries;\n}\n\nfunction eliminateTemporaryAssignments(\n  e: o.Expression,\n  tmps: Set<ir.XrefId>,\n  ctx: SafeTransformContext,\n): o.Expression {\n  // TODO: We can be more efficient than the transform helper here. We don't need to visit any\n  // descendents of temporary assignments.\n  ir.transformExpressionsInExpression(\n    e,\n    (e) => {\n      if (e instanceof ir.AssignTemporaryExpr && tmps.has(e.xref)) {\n        const read = new ir.ReadTemporaryExpr(e.xref);\n        // `TemplateDefinitionBuilder` has the (accidental?) behavior of generating assignments of\n        // temporary variables to themselves. This happens because some subexpression that the\n        // temporary refers to, possibly through nested temporaries, has a function call. We copy that\n        // behavior here.\n        return ctx.job.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder\n          ? new ir.AssignTemporaryExpr(read, read.xref)\n          : read;\n      }\n      return e;\n    },\n    ir.VisitorContextFlag.None,\n  );\n  return e;\n}\n\n/**\n * Creates a safe ternary guarded by the input expression, and with a body generated by the provided\n * callback on the input expression. Generates a temporary variable assignment if needed, and\n * deduplicates nested temporary assignments if needed.\n */\nfunction safeTernaryWithTemporary(\n  guard: o.Expression,\n  body: (e: o.Expression) => o.Expression,\n  ctx: SafeTransformContext,\n): ir.SafeTernaryExpr {\n  let result: [o.Expression, o.Expression];\n  if (needsTemporaryInSafeAccess(guard)) {\n    const xref = ctx.job.allocateXrefId();\n    result = [new ir.AssignTemporaryExpr(guard, xref), new ir.ReadTemporaryExpr(xref)];\n  } else {\n    result = [guard, guard.clone()];\n    // Consider an expression like `a?.[b?.c()]?.d`. The `b?.c()` will be transformed first,\n    // introducing a temporary assignment into the key. Then, as part of expanding the `?.d`. That\n    // assignment will be duplicated into both the guard and expression sides. We de-duplicate it,\n    // by transforming it from an assignment into a read on the expression side.\n    eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);\n  }\n  return new ir.SafeTernaryExpr(result[0], body(result[1]));\n}\n\nfunction isSafeAccessExpression(\n  e: o.Expression,\n): e is ir.SafePropertyReadExpr | ir.SafeKeyedReadExpr | ir.SafeInvokeFunctionExpr {\n  return (\n    e instanceof ir.SafePropertyReadExpr ||\n    e instanceof ir.SafeKeyedReadExpr ||\n    e instanceof ir.SafeInvokeFunctionExpr\n  );\n}\n\nfunction isUnsafeAccessExpression(\n  e: o.Expression,\n): e is o.ReadPropExpr | o.ReadKeyExpr | o.InvokeFunctionExpr {\n  return (\n    e instanceof o.ReadPropExpr || e instanceof o.ReadKeyExpr || e instanceof o.InvokeFunctionExpr\n  );\n}\n\nfunction isAccessExpression(\n  e: o.Expression,\n): e is\n  | o.ReadPropExpr\n  | ir.SafePropertyReadExpr\n  | o.ReadKeyExpr\n  | ir.SafeKeyedReadExpr\n  | o.InvokeFunctionExpr\n  | ir.SafeInvokeFunctionExpr {\n  return isSafeAccessExpression(e) || isUnsafeAccessExpression(e);\n}\n\nfunction deepestSafeTernary(e: o.Expression): ir.SafeTernaryExpr | null {\n  if (isAccessExpression(e) && e.receiver instanceof ir.SafeTernaryExpr) {\n    let st = e.receiver;\n    while (st.expr instanceof ir.SafeTernaryExpr) {\n      st = st.expr;\n    }\n    return st;\n  }\n  return null;\n}\n\n// TODO: When strict compatibility with TemplateDefinitionBuilder is not required, we can use `&&`\n// instead to save some code size.\nfunction safeTransform(e: o.Expression, ctx: SafeTransformContext): o.Expression {\n  if (!isAccessExpression(e)) {\n    return e;\n  }\n\n  const dst = deepestSafeTernary(e);\n\n  if (dst) {\n    if (e instanceof o.InvokeFunctionExpr) {\n      dst.expr = dst.expr.callFn(e.args);\n      return e.receiver;\n    }\n    if (e instanceof o.ReadPropExpr) {\n      dst.expr = dst.expr.prop(e.name);\n      return e.receiver;\n    }\n    if (e instanceof o.ReadKeyExpr) {\n      dst.expr = dst.expr.key(e.index);\n      return e.receiver;\n    }\n    if (e instanceof ir.SafeInvokeFunctionExpr) {\n      dst.expr = safeTernaryWithTemporary(dst.expr, (r: o.Expression) => r.callFn(e.args), ctx);\n      return e.receiver;\n    }\n    if (e instanceof ir.SafePropertyReadExpr) {\n      dst.expr = safeTernaryWithTemporary(dst.expr, (r: o.Expression) => r.prop(e.name), ctx);\n      return e.receiver;\n    }\n    if (e instanceof ir.SafeKeyedReadExpr) {\n      dst.expr = safeTernaryWithTemporary(dst.expr, (r: o.Expression) => r.key(e.index), ctx);\n      return e.receiver;\n    }\n  } else {\n    if (e instanceof ir.SafeInvokeFunctionExpr) {\n      return safeTernaryWithTemporary(e.receiver, (r: o.Expression) => r.callFn(e.args), ctx);\n    }\n    if (e instanceof ir.SafePropertyReadExpr) {\n      return safeTernaryWithTemporary(e.receiver, (r: o.Expression) => r.prop(e.name), ctx);\n    }\n    if (e instanceof ir.SafeKeyedReadExpr) {\n      return safeTernaryWithTemporary(e.receiver, (r: o.Expression) => r.key(e.index), ctx);\n    }\n  }\n\n  return e;\n}\n\nfunction ternaryTransform(e: o.Expression): o.Expression {\n  if (!(e instanceof ir.SafeTernaryExpr)) {\n    return e;\n  }\n  return new o.ParenthesizedExpr(\n    new o.ConditionalExpr(\n      new o.BinaryOperatorExpr(o.BinaryOperator.Equals, e.guard, o.NULL_EXPR),\n      o.NULL_EXPR,\n      e.expr,\n    ),\n  );\n}\n"]}