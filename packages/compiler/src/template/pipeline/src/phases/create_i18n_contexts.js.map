{"version":3,"file":"create_i18n_contexts.js","sourceRoot":"","sources":["create_i18n_contexts.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as i18n from '../../../../i18n/i18n_ast';\nimport * as ir from '../../ir';\nimport {CompilationJob} from '../compilation';\n\n/**\n * Create one helper context op per i18n block (including generate descending blocks).\n *\n * Also, if an ICU exists inside an i18n block that also contains other localizable content (such as\n * string), create an additional helper context op for the ICU.\n *\n * These context ops are later used for generating i18n messages. (Although we generate at least one\n * context op per nested view, we will collect them up the tree later, to generate a top-level\n * message.)\n */\nexport function createI18nContexts(job: CompilationJob) {\n  // Create i18n context ops for i18n attrs.\n  const attrContextByMessage = new Map<i18n.Message, ir.XrefId>();\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      switch (op.kind) {\n        case ir.OpKind.Binding:\n        case ir.OpKind.Property:\n        case ir.OpKind.Attribute:\n        case ir.OpKind.ExtractedAttribute:\n          if (op.i18nMessage === null) {\n            continue;\n          }\n          if (!attrContextByMessage.has(op.i18nMessage)) {\n            const i18nContext = ir.createI18nContextOp(\n              ir.I18nContextKind.Attr,\n              job.allocateXrefId(),\n              null,\n              op.i18nMessage,\n              null!,\n            );\n            unit.create.push(i18nContext);\n            attrContextByMessage.set(op.i18nMessage, i18nContext.xref);\n          }\n          op.i18nContext = attrContextByMessage.get(op.i18nMessage)!;\n          break;\n      }\n    }\n  }\n\n  // Create i18n context ops for root i18n blocks.\n  const blockContextByI18nBlock = new Map<ir.XrefId, ir.I18nContextOp>();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case ir.OpKind.I18nStart:\n          if (op.xref === op.root) {\n            const contextOp = ir.createI18nContextOp(\n              ir.I18nContextKind.RootI18n,\n              job.allocateXrefId(),\n              op.xref,\n              op.message,\n              null!,\n            );\n            unit.create.push(contextOp);\n            op.context = contextOp.xref;\n            blockContextByI18nBlock.set(op.xref, contextOp);\n          }\n          break;\n      }\n    }\n  }\n\n  // Assign i18n contexts for child i18n blocks. These don't need their own conext, instead they\n  // should inherit from their root i18n block.\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === ir.OpKind.I18nStart && op.xref !== op.root) {\n        const rootContext = blockContextByI18nBlock.get(op.root);\n        if (rootContext === undefined) {\n          throw Error('AssertionError: Root i18n block i18n context should have been created.');\n        }\n        op.context = rootContext.xref;\n        blockContextByI18nBlock.set(op.xref, rootContext);\n      }\n    }\n  }\n\n  // Create or assign i18n contexts for ICUs.\n  let currentI18nOp: ir.I18nStartOp | null = null;\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case ir.OpKind.I18nStart:\n          currentI18nOp = op;\n          break;\n        case ir.OpKind.I18nEnd:\n          currentI18nOp = null;\n          break;\n        case ir.OpKind.IcuStart:\n          if (currentI18nOp === null) {\n            throw Error('AssertionError: Unexpected ICU outside of an i18n block.');\n          }\n          if (op.message.id !== currentI18nOp.message.id) {\n            // This ICU is a sub-message inside its parent i18n block message. We need to give it\n            // its own context.\n            const contextOp = ir.createI18nContextOp(\n              ir.I18nContextKind.Icu,\n              job.allocateXrefId(),\n              currentI18nOp.root,\n              op.message,\n              null!,\n            );\n            unit.create.push(contextOp);\n            op.context = contextOp.xref;\n          } else {\n            // This ICU is the only translatable content in its parent i18n block. We need to\n            // convert the parent's context into an ICU context.\n            op.context = currentI18nOp.context;\n            blockContextByI18nBlock.get(currentI18nOp.xref)!.contextKind = ir.I18nContextKind.Icu;\n          }\n          break;\n      }\n    }\n  }\n}\n"]}