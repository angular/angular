{"version":3,"file":"track_variables.js","sourceRoot":"","sources":["track_variables.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAI/B;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,GAAmB;IACxD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;gBACzC,SAAS;YACX,CAAC;YAED,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,gCAAgC,CAC5C,EAAE,CAAC,KAAK,EACR,CAAC,IAAI,EAAE,EAAE;gBACP,IAAI,IAAI,YAAY,EAAE,CAAC,eAAe,EAAE,CAAC;oBACvC,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;wBACtC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;yBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;wBAC/C,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBAC7B,CAAC;oBAED,+DAA+D;gBACjE,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAC3B,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\n\nimport type {CompilationJob} from '../compilation';\n\n/**\n * Inside the `track` expression on a `for` repeater, the `$index` and `$item` variables are\n * ambiently available. In this phase, we find those variable usages, and replace them with the\n * appropriate output read.\n */\nexport function generateTrackVariables(job: CompilationJob): void {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind !== ir.OpKind.RepeaterCreate) {\n        continue;\n      }\n\n      op.track = ir.transformExpressionsInExpression(\n        op.track,\n        (expr) => {\n          if (expr instanceof ir.LexicalReadExpr) {\n            if (op.varNames.$index.has(expr.name)) {\n              return o.variable('$index');\n            } else if (expr.name === op.varNames.$implicit) {\n              return o.variable('$item');\n            }\n\n            // TODO: handle prohibited context variables (emit as globals?)\n          }\n          return expr;\n        },\n        ir.VisitorContextFlag.None,\n      );\n    }\n  }\n}\n"]}