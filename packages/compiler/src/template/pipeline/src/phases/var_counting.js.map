{"version":3,"file":"var_counting.js","sourceRoot":"","sources":["var_counting.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport {CompilationJob, ComponentCompilationJob} from '../compilation';\n\n/**\n * Counts the number of variable slots used within each view, and stores that on the view itself, as\n * well as propagates it to the `ir.TemplateOp` for embedded views.\n */\nexport function countVariables(job: CompilationJob): void {\n  // First, count the vars used in each view, and update the view-level counter.\n  for (const unit of job.units) {\n    let varCount = 0;\n\n    // Count variables on top-level ops first. Don't explore nested expressions just yet.\n    for (const op of unit.ops()) {\n      if (ir.hasConsumesVarsTrait(op)) {\n        varCount += varsUsedByOp(op);\n      }\n    }\n\n    // Count variables on expressions inside ops. We do this later because some of these expressions\n    // might be conditional (e.g. `pipeBinding` inside of a ternary), and we don't want to interfere\n    // with indices for top-level binding slots (e.g. `property`).\n    for (const op of unit.ops()) {\n      ir.visitExpressionsInOp(op, (expr) => {\n        if (!ir.isIrExpression(expr)) {\n          return;\n        }\n\n        // TemplateDefinitionBuilder assigns variable offsets for everything but pure functions\n        // first, and then assigns offsets to pure functions lazily. We emulate that behavior by\n        // assigning offsets in two passes instead of one, only in compatibility mode.\n        if (\n          job.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder &&\n          expr instanceof ir.PureFunctionExpr\n        ) {\n          return;\n        }\n\n        // Some expressions require knowledge of the number of variable slots consumed.\n        if (ir.hasUsesVarOffsetTrait(expr)) {\n          expr.varOffset = varCount;\n        }\n\n        if (ir.hasConsumesVarsTrait(expr)) {\n          varCount += varsUsedByIrExpression(expr);\n        }\n      });\n    }\n\n    // Compatibility mode pass for pure function offsets (as explained above).\n    if (job.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder) {\n      for (const op of unit.ops()) {\n        ir.visitExpressionsInOp(op, (expr) => {\n          if (!ir.isIrExpression(expr) || !(expr instanceof ir.PureFunctionExpr)) {\n            return;\n          }\n\n          // Some expressions require knowledge of the number of variable slots consumed.\n          if (ir.hasUsesVarOffsetTrait(expr)) {\n            expr.varOffset = varCount;\n          }\n\n          if (ir.hasConsumesVarsTrait(expr)) {\n            varCount += varsUsedByIrExpression(expr);\n          }\n        });\n      }\n    }\n\n    unit.vars = varCount;\n  }\n\n  if (job instanceof ComponentCompilationJob) {\n    // Add var counts for each view to the `ir.TemplateOp` which declares that view (if the view is\n    // an embedded view).\n    for (const unit of job.units) {\n      for (const op of unit.create) {\n        if (\n          op.kind !== ir.OpKind.Template &&\n          op.kind !== ir.OpKind.RepeaterCreate &&\n          op.kind !== ir.OpKind.ConditionalCreate &&\n          op.kind !== ir.OpKind.ConditionalBranchCreate\n        ) {\n          continue;\n        }\n\n        const childView = job.views.get(op.xref)!;\n        op.vars = childView.vars;\n\n        // TODO: currently we handle the vars for the RepeaterCreate empty template in the reify\n        // phase. We should handle that here instead.\n      }\n    }\n  }\n}\n\n/**\n * Different operations that implement `ir.UsesVarsTrait` use different numbers of variables, so\n * count the variables used by any particular `op`.\n */\nfunction varsUsedByOp(op: (ir.CreateOp | ir.UpdateOp) & ir.ConsumesVarsTrait): number {\n  let slots: number;\n  switch (op.kind) {\n    case ir.OpKind.Attribute:\n      // All of these bindings use 1 variable slot, plus 1 slot for every interpolated expression,\n      // if any.\n      slots = 1;\n      if (op.expression instanceof ir.Interpolation && !isSingletonInterpolation(op.expression)) {\n        slots += op.expression.expressions.length;\n      }\n      return slots;\n    case ir.OpKind.Property:\n    case ir.OpKind.DomProperty:\n      slots = 1;\n\n      // We need to assign a slot even for singleton interpolations, because the\n      // runtime needs to store both the raw value and the stringified one.\n      if (op.expression instanceof ir.Interpolation) {\n        slots += op.expression.expressions.length;\n      }\n      return slots;\n    case ir.OpKind.TwoWayProperty:\n      // Two-way properties can only have expressions so they only need one variable slot.\n      return 1;\n    case ir.OpKind.StyleProp:\n    case ir.OpKind.ClassProp:\n    case ir.OpKind.StyleMap:\n    case ir.OpKind.ClassMap:\n      // Style & class bindings use 2 variable slots, plus 1 slot for every interpolated expression,\n      // if any.\n      slots = 2;\n      if (op.expression instanceof ir.Interpolation) {\n        slots += op.expression.expressions.length;\n      }\n      return slots;\n    case ir.OpKind.InterpolateText:\n      // `ir.InterpolateTextOp`s use a variable slot for each dynamic expression.\n      return op.interpolation.expressions.length;\n    case ir.OpKind.I18nExpression:\n    case ir.OpKind.Conditional:\n    case ir.OpKind.DeferWhen:\n    case ir.OpKind.StoreLet:\n      return 1;\n    case ir.OpKind.RepeaterCreate:\n      // Repeaters may require an extra variable binding slot, if they have an empty view, for the\n      // empty block tracking.\n      // TODO: It's a bit odd to have a create mode instruction consume variable slots. Maybe we can\n      // find a way to use the Repeater update op instead.\n      return op.emptyView ? 1 : 0;\n    default:\n      throw new Error(`Unhandled op: ${ir.OpKind[op.kind]}`);\n  }\n}\n\nexport function varsUsedByIrExpression(expr: ir.Expression & ir.ConsumesVarsTrait): number {\n  switch (expr.kind) {\n    case ir.ExpressionKind.PureFunctionExpr:\n      return 1 + expr.args.length;\n    case ir.ExpressionKind.PipeBinding:\n      return 1 + expr.args.length;\n    case ir.ExpressionKind.PipeBindingVariadic:\n      return 1 + expr.numArgs;\n    case ir.ExpressionKind.StoreLet:\n      return 1;\n    default:\n      throw new Error(\n        `AssertionError: unhandled ConsumesVarsTrait expression ${expr.constructor.name}`,\n      );\n  }\n}\n\nfunction isSingletonInterpolation(expr: ir.Interpolation): boolean {\n  if (expr.expressions.length !== 1 || expr.strings.length !== 2) {\n    return false;\n  }\n  if (expr.strings[0] !== '' || expr.strings[1] !== '') {\n    return false;\n  }\n  return true;\n}\n"]}