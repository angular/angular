{"version":3,"file":"regular_expression_optimization.js","sourceRoot":"","sources":["regular_expression_optimization.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAA2B,MAAM,2BAA2B,CAAC;AACjF,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAI/B,yDAAyD;AACzD,MAAM,UAAU,0BAA0B,CAAC,GAAmB;IAC5D,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5B,EAAE,CAAC,wBAAwB,CACzB,EAAE,EACF,CAAC,IAAI,EAAE,EAAE;gBACP,IACE,IAAI,YAAY,CAAC,CAAC,wBAAwB;oBAC1C,8DAA8D;oBAC9D,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAClD,CAAC;oBACD,OAAO,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,yBAAyB,EAAE,EAAE,IAAI,CAAC,CAAC;gBAC3E,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,EACD,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAC3B,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,yBAA0B,SAAQ,YAAY;IAClD,2BAA2B,CAAC,QAAgB,EAAE,OAAqB;QACjE,OAAO,IAAI,CAAC,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAClF,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {GenericKeyFn, SharedConstantDefinition} from '../../../../constant_pool';\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\n\nimport type {CompilationJob} from '../compilation';\n\n/** Optimizes regular expressions used in expressions. */\nexport function optimizeRegularExpressions(job: CompilationJob): void {\n  for (const view of job.units) {\n    for (const op of view.ops()) {\n      ir.transformExpressionsInOp(\n        op,\n        (expr) => {\n          if (\n            expr instanceof o.RegularExpressionLiteral &&\n            // We can't optimize global regexes, because they're stateful.\n            (expr.flags === null || !expr.flags.includes('g'))\n          ) {\n            return job.pool.getSharedConstant(new RegularExpressionConstant(), expr);\n          }\n          return expr;\n        },\n        ir.VisitorContextFlag.None,\n      );\n    }\n  }\n}\n\nclass RegularExpressionConstant extends GenericKeyFn implements SharedConstantDefinition {\n  toSharedConstantDeclaration(declName: string, keyExpr: o.Expression): o.Statement {\n    return new o.DeclareVarStmt(declName, keyExpr, undefined, o.StmtModifier.Final);\n  }\n}\n"]}