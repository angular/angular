{"version":3,"file":"chaining.js","sourceRoot":"","sources":["chaining.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport {Identifiers as R3} from '../../../../render3/r3_identifiers';\nimport * as ir from '../../ir';\nimport {CompilationJob} from '../compilation';\n\nconst CHAIN_COMPATIBILITY = new Map<o.ExternalReference, o.ExternalReference>([\n  [R3.ariaProperty, R3.ariaProperty],\n  [R3.attribute, R3.attribute],\n  [R3.classProp, R3.classProp],\n  [R3.element, R3.element],\n  [R3.elementContainer, R3.elementContainer],\n  [R3.elementContainerEnd, R3.elementContainerEnd],\n  [R3.elementContainerStart, R3.elementContainerStart],\n  [R3.elementEnd, R3.elementEnd],\n  [R3.elementStart, R3.elementStart],\n  [R3.domProperty, R3.domProperty],\n  [R3.i18nExp, R3.i18nExp],\n  [R3.listener, R3.listener],\n  [R3.listener, R3.listener],\n  [R3.property, R3.property],\n  [R3.styleProp, R3.styleProp],\n  [R3.syntheticHostListener, R3.syntheticHostListener],\n  [R3.syntheticHostProperty, R3.syntheticHostProperty],\n  [R3.templateCreate, R3.templateCreate],\n  [R3.twoWayProperty, R3.twoWayProperty],\n  [R3.twoWayListener, R3.twoWayListener],\n  [R3.declareLet, R3.declareLet],\n  [R3.conditionalCreate, R3.conditionalBranchCreate],\n  [R3.conditionalBranchCreate, R3.conditionalBranchCreate],\n  [R3.domElement, R3.domElement],\n  [R3.domElementStart, R3.domElementStart],\n  [R3.domElementEnd, R3.domElementEnd],\n  [R3.domElementContainer, R3.domElementContainer],\n  [R3.domElementContainerStart, R3.domElementContainerStart],\n  [R3.domElementContainerEnd, R3.domElementContainerEnd],\n  [R3.domListener, R3.domListener],\n  [R3.domTemplate, R3.domTemplate],\n  [R3.animationEnter, R3.animationEnter],\n  [R3.animationLeave, R3.animationLeave],\n  [R3.animationEnterListener, R3.animationEnterListener],\n  [R3.animationLeaveListener, R3.animationLeaveListener],\n]);\n\n/**\n * Chaining results in repeated call expressions, causing a deep AST of receiver expressions. To prevent running out of\n * stack depth the maximum number of chained instructions is limited to this threshold, which has been selected\n * arbitrarily.\n */\nconst MAX_CHAIN_LENGTH = 256;\n\n/**\n * Post-process a reified view compilation and convert sequential calls to chainable instructions\n * into chain calls.\n *\n * For example, two `elementStart` operations in sequence:\n *\n * ```ts\n * elementStart(0, 'div');\n * elementStart(1, 'span');\n * ```\n *\n * Can be called as a chain instead:\n *\n * ```ts\n * elementStart(0, 'div')(1, 'span');\n * ```\n */\nexport function chain(job: CompilationJob): void {\n  for (const unit of job.units) {\n    chainOperationsInList(unit.create);\n    chainOperationsInList(unit.update);\n  }\n}\n\nfunction chainOperationsInList(opList: ir.OpList<ir.CreateOp | ir.UpdateOp>): void {\n  let chain: Chain | null = null;\n  for (const op of opList) {\n    if (op.kind !== ir.OpKind.Statement || !(op.statement instanceof o.ExpressionStatement)) {\n      // This type of statement isn't chainable.\n      chain = null;\n      continue;\n    }\n    if (\n      !(op.statement.expr instanceof o.InvokeFunctionExpr) ||\n      !(op.statement.expr.fn instanceof o.ExternalExpr)\n    ) {\n      // This is a statement, but not an instruction-type call, so not chainable.\n      chain = null;\n      continue;\n    }\n\n    const instruction = op.statement.expr.fn.value;\n    if (!CHAIN_COMPATIBILITY.has(instruction)) {\n      // This instruction isn't chainable.\n      chain = null;\n      continue;\n    }\n\n    // This instruction can be chained. It can either be added on to the previous chain (if\n    // compatible) or it can be the start of a new chain.\n    if (\n      chain !== null &&\n      CHAIN_COMPATIBILITY.get(chain.instruction) === instruction &&\n      chain.length < MAX_CHAIN_LENGTH\n    ) {\n      // This instruction can be added onto the previous chain.\n      const expression = chain.expression.callFn(\n        op.statement.expr.args,\n        op.statement.expr.sourceSpan,\n        op.statement.expr.pure,\n      );\n      chain.expression = expression;\n      chain.op.statement = expression.toStmt();\n      chain.length++;\n      ir.OpList.remove(op as ir.Op<ir.CreateOp | ir.UpdateOp>);\n    } else {\n      // Leave this instruction alone for now, but consider it the start of a new chain.\n      chain = {\n        op,\n        instruction,\n        expression: op.statement.expr,\n        length: 1,\n      };\n    }\n  }\n}\n\n/**\n * Structure representing an in-progress chain.\n */\ninterface Chain {\n  /**\n   * The statement which holds the entire chain.\n   */\n  op: ir.StatementOp<ir.CreateOp | ir.UpdateOp>;\n\n  /**\n   * The expression representing the whole current chained call.\n   *\n   * This should be the same as `op.statement.expression`, but is extracted here for convenience\n   * since the `op` type doesn't capture the fact that `op.statement` is an `o.ExpressionStatement`.\n   */\n  expression: o.Expression;\n\n  /**\n   * The instruction that is being chained.\n   */\n  instruction: o.ExternalReference;\n\n  /**\n   * The number of instructions that have been collected into this chain.\n   */\n  length: number;\n}\n"]}