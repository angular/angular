{"version":3,"file":"empty_elements.js","sourceRoot":"","sources":["empty_elements.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B,MAAM,YAAY,GAAG,IAAI,GAAG,CAAoC;IAC9D,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACzE,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;CAC3D,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAEnD;;;GAGG;AACH,MAAM,UAAU,yBAAyB,CAAC,GAAmB;IAC3D,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,8CAA8C;YAC9C,MAAM,cAAc,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,cAAc,KAAK,SAAS,EAAE,CAAC;gBACjC,SAAS;YACX,CAAC;YACD,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,cAAc,CAAC;YAE/C,wCAAwC;YACxC,IAAI,MAAM,GAAuB,EAAE,CAAC,IAAI,CAAC;YACzC,OAAO,MAAM,KAAK,IAAI,IAAI,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC5D,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;YACvB,CAAC;YAED,kEAAkE;YAClE,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBACjD,0FAA0F;gBAC1F,yCAAyC;gBACxC,MAA6B,CAAC,IAAI,GAAG,UAAU,CAAC;gBAEjD,8BAA8B;gBAC9B,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,EAAE,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {CompilationJob} from '../compilation';\n\nconst REPLACEMENTS = new Map<ir.OpKind, [ir.OpKind, ir.OpKind]>([\n  [ir.OpKind.ElementEnd, [ir.OpKind.ElementStart, ir.OpKind.Element]],\n  [ir.OpKind.ContainerEnd, [ir.OpKind.ContainerStart, ir.OpKind.Container]],\n  [ir.OpKind.I18nEnd, [ir.OpKind.I18nStart, ir.OpKind.I18n]],\n]);\n\n/**\n * Op kinds that should not prevent merging of start/end ops.\n */\nconst IGNORED_OP_KINDS = new Set([ir.OpKind.Pipe]);\n\n/**\n * Replace sequences of mergable instructions (e.g. `ElementStart` and `ElementEnd`) with a\n * consolidated instruction (e.g. `Element`).\n */\nexport function collapseEmptyInstructions(job: CompilationJob): void {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      // Find end ops that may be able to be merged.\n      const opReplacements = REPLACEMENTS.get(op.kind);\n      if (opReplacements === undefined) {\n        continue;\n      }\n      const [startKind, mergedKind] = opReplacements;\n\n      // Locate the previous (non-ignored) op.\n      let prevOp: ir.CreateOp | null = op.prev;\n      while (prevOp !== null && IGNORED_OP_KINDS.has(prevOp.kind)) {\n        prevOp = prevOp.prev;\n      }\n\n      // If the previous op is the corresponding start op, we can megre.\n      if (prevOp !== null && prevOp.kind === startKind) {\n        // Transmute the start instruction to the merged version. This is safe as they're designed\n        // to be identical apart from the `kind`.\n        (prevOp as ir.Op<ir.CreateOp>).kind = mergedKind;\n\n        // Remove the end instruction.\n        ir.OpList.remove<ir.CreateOp>(op);\n      }\n    }\n  }\n}\n"]}