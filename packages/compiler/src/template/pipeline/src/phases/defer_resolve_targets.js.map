{"version":3,"file":"defer_resolve_targets.js","sourceRoot":"","sources":["defer_resolve_targets.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {ComponentCompilationJob, ViewCompilationUnit} from '../compilation';\n\n/**\n * Some `defer` conditions can reference other elements in the template, using their local reference\n * names. However, the semantics are quite different from the normal local reference system: in\n * particular, we need to look at local reference names in enclosing views. This phase resolves\n * all such references to actual xrefs.\n */\nexport function resolveDeferTargetNames(job: ComponentCompilationJob): void {\n  const scopes = new Map<ir.XrefId, Scope>();\n\n  function getScopeForView(view: ViewCompilationUnit): Scope {\n    if (scopes.has(view.xref)) {\n      return scopes.get(view.xref)!;\n    }\n\n    const scope = new Scope();\n    for (const op of view.create) {\n      // add everything that can be referenced.\n      if (!ir.isElementOrContainerOp(op) || op.localRefs === null) {\n        continue;\n      }\n      if (!Array.isArray(op.localRefs)) {\n        throw new Error(\n          'LocalRefs were already processed, but were needed to resolve defer targets.',\n        );\n      }\n\n      for (const ref of op.localRefs) {\n        if (ref.target !== '') {\n          continue;\n        }\n        scope.targets.set(ref.name, {xref: op.xref, slot: op.handle});\n      }\n    }\n\n    scopes.set(view.xref, scope);\n    return scope;\n  }\n\n  function resolveTrigger(\n    deferOwnerView: ViewCompilationUnit,\n    op: ir.DeferOnOp,\n    placeholderView: ir.XrefId | null,\n  ): void {\n    switch (op.trigger.kind) {\n      case ir.DeferTriggerKind.Idle:\n      case ir.DeferTriggerKind.Never:\n      case ir.DeferTriggerKind.Immediate:\n      case ir.DeferTriggerKind.Timer:\n        return;\n      case ir.DeferTriggerKind.Hover:\n      case ir.DeferTriggerKind.Interaction:\n      case ir.DeferTriggerKind.Viewport:\n        if (op.trigger.targetName === null) {\n          // A `null` target name indicates we should default to the first element in the\n          // placeholder block.\n          if (placeholderView === null) {\n            throw new Error('defer on trigger with no target name must have a placeholder block');\n          }\n          const placeholder = job.views.get(placeholderView);\n          if (placeholder == undefined) {\n            throw new Error('AssertionError: could not find placeholder view for defer on trigger');\n          }\n          for (const placeholderOp of placeholder.create) {\n            if (\n              ir.hasConsumesSlotTrait(placeholderOp) &&\n              (ir.isElementOrContainerOp(placeholderOp) ||\n                placeholderOp.kind === ir.OpKind.Projection)\n            ) {\n              op.trigger.targetXref = placeholderOp.xref;\n              op.trigger.targetView = placeholderView;\n              op.trigger.targetSlotViewSteps = -1;\n              op.trigger.targetSlot = placeholderOp.handle;\n              return;\n            }\n          }\n          return;\n        }\n        let view: ViewCompilationUnit | null =\n          placeholderView !== null ? job.views.get(placeholderView)! : deferOwnerView;\n        let step = placeholderView !== null ? -1 : 0;\n\n        while (view !== null) {\n          const scope = getScopeForView(view);\n          if (scope.targets.has(op.trigger.targetName)) {\n            const {xref, slot} = scope.targets.get(op.trigger.targetName)!;\n\n            op.trigger.targetXref = xref;\n            op.trigger.targetView = view.xref;\n            op.trigger.targetSlotViewSteps = step;\n            op.trigger.targetSlot = slot;\n            return;\n          }\n\n          view = view.parent !== null ? job.views.get(view.parent)! : null;\n          step++;\n        }\n        break;\n      default:\n        throw new Error(`Trigger kind ${(op.trigger as any).kind} not handled`);\n    }\n  }\n\n  // Find the defer ops, and assign the data about their targets.\n  for (const unit of job.units) {\n    const defers = new Map<ir.XrefId, ir.DeferOp>();\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case ir.OpKind.Defer:\n          defers.set(op.xref, op);\n          break;\n        case ir.OpKind.DeferOn:\n          const deferOp = defers.get(op.defer)!;\n          resolveTrigger(\n            unit,\n            op,\n            op.modifier === ir.DeferOpModifierKind.HYDRATE\n              ? deferOp.mainView\n              : deferOp.placeholderView,\n          );\n          break;\n      }\n    }\n  }\n}\n\nclass Scope {\n  targets = new Map<string, {xref: ir.XrefId; slot: ir.SlotHandle}>();\n}\n"]}