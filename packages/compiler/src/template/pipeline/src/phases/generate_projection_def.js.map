{"version":3,"file":"generate_projection_def.js","sourceRoot":"","sources":["generate_projection_def.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,yBAAyB,EAAC,MAAM,kBAAkB,CAAC;AAE3D,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAE/B,OAAO,EAAC,qBAAqB,EAAC,MAAM,eAAe,CAAC;AAEpD;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,GAA4B;IACjE,oEAAoE;IACpE,MAAM,KAAK,GAAG,GAAG,CAAC,aAAa,KAAK,EAAE,CAAC,iBAAiB,CAAC,yBAAyB,CAAC;IAEnF,kGAAkG;IAClG,0CAA0C;IAC1C,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,IAAI,mBAAmB,GAAG,CAAC,CAAC;IAC5B,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACrC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBAC5B,EAAE,CAAC,mBAAmB,GAAG,mBAAmB,EAAE,CAAC;YACjD,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACzB,+FAA+F;QAC/F,8CAA8C;QAC9C,IAAI,OAAO,GAAwB,IAAI,CAAC;QACxC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACjD,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjF,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QACxE,CAAC;QAED,0CAA0C;QAC1C,GAAG,CAAC,gBAAgB,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC;QAEzF,oFAAoF;QACpF,6BAA6B;QAC7B,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {parseSelectorToR3Selector} from '../../../../core';\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport type {ComponentCompilationJob} from '../compilation';\nimport {literalOrArrayLiteral} from '../conversion';\n\n/**\n * Locate projection slots, populate the each component's `ngContentSelectors` literal field,\n * populate `project` arguments, and generate the required `projectionDef` instruction for the job's\n * root view.\n */\nexport function generateProjectionDefs(job: ComponentCompilationJob): void {\n  // TODO: Why does TemplateDefinitionBuilder force a shared constant?\n  const share = job.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder;\n\n  // Collect all selectors from this component, and its nested views. Also, assign each projection a\n  // unique ascending projection slot index.\n  const selectors = [];\n  let projectionSlotIndex = 0;\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === ir.OpKind.Projection) {\n        selectors.push(op.selector);\n        op.projectionSlotIndex = projectionSlotIndex++;\n      }\n    }\n  }\n\n  if (selectors.length > 0) {\n    // Create the projectionDef array. If we only found a single wildcard selector, then we use the\n    // default behavior with no arguments instead.\n    let defExpr: o.Expression | null = null;\n    if (selectors.length > 1 || selectors[0] !== '*') {\n      const def = selectors.map((s) => (s === '*' ? s : parseSelectorToR3Selector(s)));\n      defExpr = job.pool.getConstLiteral(literalOrArrayLiteral(def), share);\n    }\n\n    // Create the ngContentSelectors constant.\n    job.contentSelectors = job.pool.getConstLiteral(literalOrArrayLiteral(selectors), share);\n\n    // The projection def instruction goes at the beginning of the root view, before any\n    // `projection` instructions.\n    job.root.create.prepend([ir.createProjectionDefOp(defExpr)]);\n  }\n}\n"]}