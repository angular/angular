{"version":3,"file":"nonbindable.js","sourceRoot":"","sources":["nonbindable.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;GAEG;AACH,SAAS,aAAa,CACpB,QAAkD,EAClD,IAAe;IAEf,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,GAAmB;IACjD,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAuC,CAAC;IAChE,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,CAAC,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,EAAE,CAAC;gBACnC,SAAS;YACX,CAAC;YACD,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,IACE,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC;gBAC5E,EAAE,CAAC,WAAW,EACd,CAAC;gBACD,EAAE,CAAC,MAAM,CAAC,WAAW,CAAc,EAAE,CAAC,uBAAuB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9E,CAAC;YACD,IACE,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC;gBACxE,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,WAAW,EAC5C,CAAC;gBACD,EAAE,CAAC,MAAM,CAAC,YAAY,CAAc,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9E,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as ir from '../../ir';\nimport type {CompilationJob} from '../compilation';\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement(\n  elements: Map<ir.XrefId, ir.ElementOrContainerOps>,\n  xref: ir.XrefId,\n): ir.ElementOrContainerOps {\n  const el = elements.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an element-like target.');\n  }\n  return el;\n}\n\n/**\n * When a container is marked with `ngNonBindable`, the non-bindable characteristic also applies to\n * all descendants of that container. Therefore, we must emit `disableBindings` and `enableBindings`\n * instructions for every such container.\n */\nexport function disableBindings(job: CompilationJob): void {\n  const elements = new Map<ir.XrefId, ir.ElementOrContainerOps>();\n  for (const view of job.units) {\n    for (const op of view.create) {\n      if (!ir.isElementOrContainerOp(op)) {\n        continue;\n      }\n      elements.set(op.xref, op);\n    }\n  }\n\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (\n        (op.kind === ir.OpKind.ElementStart || op.kind === ir.OpKind.ContainerStart) &&\n        op.nonBindable\n      ) {\n        ir.OpList.insertAfter<ir.CreateOp>(ir.createDisableBindingsOp(op.xref), op);\n      }\n      if (\n        (op.kind === ir.OpKind.ElementEnd || op.kind === ir.OpKind.ContainerEnd) &&\n        lookupElement(elements, op.xref).nonBindable\n      ) {\n        ir.OpList.insertBefore<ir.CreateOp>(ir.createEnableBindingsOp(op.xref), op);\n      }\n    }\n  }\n}\n"]}