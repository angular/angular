{"version":3,"file":"extract_i18n_messages.js","sourceRoot":"","sources":["extract_i18n_messages.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,CAAC,MAAM,+BAA+B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,UAAU,CAAC;AAG/B;;GAEG;AACH,MAAM,MAAM,GAAG,QAAQ,CAAC;AAExB;;GAEG;AACH,MAAM,cAAc,GAAG,GAAG,CAAC;AAE3B;;GAEG;AACH,MAAM,eAAe,GAAG,GAAG,CAAC;AAE5B;;GAEG;AACH,MAAM,gBAAgB,GAAG,GAAG,CAAC;AAE7B;;GAEG;AACH,MAAM,cAAc,GAAG,GAAG,CAAC;AAE3B;;GAEG;AACH,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAE9B;;GAEG;AACH,MAAM,eAAe,GAAG,GAAG,CAAC;AAE5B;;GAEG;AACH,MAAM,cAAc,GAAG,GAAG,CAAC;AAE3B;;;GAGG;AACH,MAAM,UAAU,mBAAmB,CAAC,GAAmB;IACrD,2CAA2C;IAC3C,4EAA4E;IAC5E,MAAM,qBAAqB,GAAG,IAAI,GAAG,EAA+B,CAAC;IACrE,MAAM,UAAU,GAAG,IAAI,GAAG,EAA6B,CAAC;IACxD,MAAM,YAAY,GAAG,IAAI,GAAG,EAA+B,CAAC;IAC5D,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;gBAChB,KAAK,EAAE,CAAC,MAAM,CAAC,WAAW;oBACxB,MAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAChC,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;oBAClD,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;oBAC9B,MAAM;gBACR,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS;oBACtB,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;oBAC5B,MAAM;YACV,CAAC;QACH,CAAC;IACH,CAAC;IAED,gGAAgG;IAChG,mDAAmD;IACnD,IAAI,UAAU,GAAyB,IAAI,CAAC;IAC5C,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7B,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;gBAChB,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ;oBACrB,UAAU,GAAG,EAAE,CAAC;oBAChB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,EAAE,CAAC,CAAC;oBAClC,gDAAgD;oBAChD,MAAM,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,OAAQ,CAAE,CAAC;oBAClD,IAAI,UAAU,CAAC,WAAW,KAAK,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;wBACtD,SAAS;oBACX,CAAC;oBACD,qFAAqF;oBACrF,0BAA0B;oBAC1B,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,SAAU,CAAE,CAAC;oBACzD,IAAI,SAAS,CAAC,OAAO,KAAK,UAAU,CAAC,IAAI,EAAE,CAAC;wBAC1C,SAAS;oBACX,CAAC;oBACD,qEAAqE;oBACrE,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC;oBACtD,MAAM,WAAW,GAAG,qBAAqB,CAAC,GAAG,CAAC,aAAa,CAAC,OAAQ,CAAC,CAAC;oBACtE,IAAI,WAAW,KAAK,SAAS,EAAE,CAAC;wBAC9B,MAAM,KAAK,CAAC,kEAAkE,CAAC,CAAC;oBAClF,CAAC;oBACD,MAAM,UAAU,GAAG,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;oBAC/D,UAAU,CAAC,kBAAkB,GAAG,EAAE,CAAC,kBAAkB,CAAC;oBACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC9C,MAAM;gBACR,KAAK,EAAE,CAAC,MAAM,CAAC,MAAM;oBACnB,UAAU,GAAG,IAAI,CAAC;oBAClB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,EAAE,CAAC,CAAC;oBAClC,MAAM;gBACR,KAAK,EAAE,CAAC,MAAM,CAAC,cAAc;oBAC3B,4EAA4E;oBAC5E,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;wBACtD,MAAM,KAAK,CAAC,oEAAoE,CAAC,CAAC;oBACpF,CAAC;oBACD,MAAM,GAAG,GAAG,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAE,CAAC;oBAC3D,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC3E,EAAE,CAAC,MAAM,CAAC,MAAM,CAAc,EAAE,CAAC,CAAC;oBAClC,MAAM;YACV,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAS,iBAAiB,CACxB,GAAmB,EACnB,OAAyB,EACzB,kBAA2B;IAE3B,IAAI,eAAe,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnD,MAAM,6BAA6B,GAAG,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IACjF,IAAI,mBAAmB,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACjF,OAAO,EAAE,CAAC,mBAAmB,CAC3B,GAAG,CAAC,cAAc,EAAE,EACpB,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,SAAS,EACjB,OAAO,CAAC,OAAO,EACf,kBAAkB,IAAI,IAAI,EAC1B,eAAe,EACf,6BAA6B,EAC7B,mBAAmB,CACpB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,oBAAoB,CAAC,EAAuB;IACnD,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC/D,MAAM,KAAK,CACT,gDAAgD,EAAE,CAAC,OAAO,CAAC,MAAM,gBAAgB,EAAE,CAAC,sBAAsB,CAAC,MAAM,cAAc,CAChI,CAAC;IACJ,CAAC;IACD,MAAM,MAAM,GAAG,EAAE,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC1D,OAAO,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzE,CAAC;AAED;;GAEG;AACH,SAAS,YAAY,CAAC,MAAwC;IAC5D,MAAM,eAAe,GAAG,IAAI,GAAG,EAAwB,CAAC;IACxD,KAAK,MAAM,CAAC,WAAW,EAAE,iBAAiB,CAAC,IAAI,MAAM,EAAE,CAAC;QACtD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAC9D,IAAI,gBAAgB,KAAK,IAAI,EAAE,CAAC;YAC9B,eAAe,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,SAAS,iBAAiB,CAAC,MAA2B;IACpD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACnE,OAAO,gBAAgB,CAAC,MAAM,KAAK,CAAC;QAClC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,GAAG,iBAAiB,GAAG,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,eAAe,EAAE,CAAC;AACvF,CAAC;AAED;;GAEG;AACH,SAAS,WAAW,CAAC,KAAwB;IAC3C,gGAAgG;IAChG,mBAAmB;IACnB,IACE,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,UAAU;QAC/C,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAChD,CAAC;QACD,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;YACpC,MAAM,KAAK,CAAC,gFAAgF,CAAC,CAAC;QAChG,CAAC;QACD,MAAM,YAAY,GAAG,WAAW,CAAC;YAC/B,GAAG,KAAK;YACR,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO;YAC1B,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,mBAAmB,CAAC,WAAW;SACzD,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,WAAW,CAAC;YAChC,GAAG,KAAK;YACR,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ;YAC3B,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,mBAAmB,CAAC,UAAU;SACxD,CAAC,CAAC;QACH,2FAA2F;QAC3F,6FAA6F;QAC7F,oDAAoD;QACpD,IACE,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO;YAC5C,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,QAAQ,EAC7C,CAAC;YACD,OAAO,GAAG,aAAa,GAAG,YAAY,GAAG,aAAa,EAAE,CAAC;QAC3D,CAAC;QACD,yFAAyF;QACzF,uDAAuD;QACvD,0FAA0F;QAC1F,uFAAuF;QACvF,OAAO,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,QAAQ;YAClD,CAAC,CAAC,GAAG,YAAY,GAAG,aAAa,EAAE;YACnC,CAAC,CAAC,GAAG,aAAa,GAAG,YAAY,EAAE,CAAC;IACxC,CAAC;IAED,yFAAyF;IACzF,IACE,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO;QAC5C,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,QAAQ,EAC7C,CAAC;QACD,OAAO,GAAG,WAAW,CAAC;YACpB,GAAG,KAAK;YACR,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,mBAAmB,CAAC,QAAQ;SACtD,CAAC,GAAG,WAAW,CAAC,EAAC,GAAG,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAC,CAAC,EAAE,CAAC;IACvF,CAAC;IAED,4DAA4D;IAC5D,IAAI,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;QAChD,OAAO,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED,mDAAmD;IACnD,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,UAAU,EAAE,CAAC;QACpD,SAAS,GAAG,cAAc,CAAC;IAC7B,CAAC;SAAM,IAAI,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAC5D,SAAS,GAAG,eAAe,CAAC;IAC9B,CAAC;IACD,IAAI,SAAS,KAAK,EAAE,EAAE,CAAC;QACrB,WAAW,GAAG,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC;IACtF,CAAC;IACD,MAAM,OAAO,GACX,KAAK,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,cAAc,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;IACtF,OAAO,GAAG,MAAM,GAAG,WAAW,GAAG,SAAS,GAAG,KAAK,CAAC,KAAK,GAAG,OAAO,GAAG,MAAM,EAAE,CAAC;AAChF,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as o from '../../../../output/output_ast';\nimport * as ir from '../../ir';\nimport {CompilationJob} from '../compilation';\n\n/**\n * The escape sequence used indicate message param values.\n */\nconst ESCAPE = '\\uFFFD';\n\n/**\n * Marker used to indicate an element tag.\n */\nconst ELEMENT_MARKER = '#';\n\n/**\n * Marker used to indicate a template tag.\n */\nconst TEMPLATE_MARKER = '*';\n\n/**\n * Marker used to indicate closing of an element or template tag.\n */\nconst TAG_CLOSE_MARKER = '/';\n\n/**\n * Marker used to indicate the sub-template context.\n */\nconst CONTEXT_MARKER = ':';\n\n/**\n * Marker used to indicate the start of a list of values.\n */\nconst LIST_START_MARKER = '[';\n\n/**\n * Marker used to indicate the end of a list of values.\n */\nconst LIST_END_MARKER = ']';\n\n/**\n * Delimiter used to separate multiple values in a list.\n */\nconst LIST_DELIMITER = '|';\n\n/**\n * Formats the param maps on extracted message ops into a maps of `Expression` objects that can be\n * used in the final output.\n */\nexport function extractI18nMessages(job: CompilationJob): void {\n  // Create an i18n message for each context.\n  // TODO: Merge the context op with the message op since they're 1:1 anyways.\n  const i18nMessagesByContext = new Map<ir.XrefId, ir.I18nMessageOp>();\n  const i18nBlocks = new Map<ir.XrefId, ir.I18nStartOp>();\n  const i18nContexts = new Map<ir.XrefId, ir.I18nContextOp>();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case ir.OpKind.I18nContext:\n          const i18nMessageOp = createI18nMessage(job, op);\n          unit.create.push(i18nMessageOp);\n          i18nMessagesByContext.set(op.xref, i18nMessageOp);\n          i18nContexts.set(op.xref, op);\n          break;\n        case ir.OpKind.I18nStart:\n          i18nBlocks.set(op.xref, op);\n          break;\n      }\n    }\n  }\n\n  // Associate sub-messages for ICUs with their root message. At this point we can also remove the\n  // ICU start/end ops, as they are no longer needed.\n  let currentIcu: ir.IcuStartOp | null = null;\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case ir.OpKind.IcuStart:\n          currentIcu = op;\n          ir.OpList.remove<ir.CreateOp>(op);\n          // Skip any contexts not associated with an ICU.\n          const icuContext = i18nContexts.get(op.context!)!;\n          if (icuContext.contextKind !== ir.I18nContextKind.Icu) {\n            continue;\n          }\n          // Skip ICUs that share a context with their i18n message. These represent root-level\n          // ICUs, not sub-messages.\n          const i18nBlock = i18nBlocks.get(icuContext.i18nBlock!)!;\n          if (i18nBlock.context === icuContext.xref) {\n            continue;\n          }\n          // Find the root message and push this ICUs message as a sub-message.\n          const rootI18nBlock = i18nBlocks.get(i18nBlock.root)!;\n          const rootMessage = i18nMessagesByContext.get(rootI18nBlock.context!);\n          if (rootMessage === undefined) {\n            throw Error('AssertionError: ICU sub-message should belong to a root message.');\n          }\n          const subMessage = i18nMessagesByContext.get(icuContext.xref)!;\n          subMessage.messagePlaceholder = op.messagePlaceholder;\n          rootMessage.subMessages.push(subMessage.xref);\n          break;\n        case ir.OpKind.IcuEnd:\n          currentIcu = null;\n          ir.OpList.remove<ir.CreateOp>(op);\n          break;\n        case ir.OpKind.IcuPlaceholder:\n          // Add ICU placeholders to the message, then remove the ICU placeholder ops.\n          if (currentIcu === null || currentIcu.context == null) {\n            throw Error('AssertionError: Unexpected ICU placeholder outside of i18n context');\n          }\n          const msg = i18nMessagesByContext.get(currentIcu.context)!;\n          msg.postprocessingParams.set(op.name, o.literal(formatIcuPlaceholder(op)));\n          ir.OpList.remove<ir.CreateOp>(op);\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Create an i18n message op from an i18n context op.\n */\nfunction createI18nMessage(\n  job: CompilationJob,\n  context: ir.I18nContextOp,\n  messagePlaceholder?: string,\n): ir.I18nMessageOp {\n  let formattedParams = formatParams(context.params);\n  const formattedPostprocessingParams = formatParams(context.postprocessingParams);\n  let needsPostprocessing = [...context.params.values()].some((v) => v.length > 1);\n  return ir.createI18nMessageOp(\n    job.allocateXrefId(),\n    context.xref,\n    context.i18nBlock,\n    context.message,\n    messagePlaceholder ?? null,\n    formattedParams,\n    formattedPostprocessingParams,\n    needsPostprocessing,\n  );\n}\n\n/**\n * Formats an ICU placeholder into a single string with expression placeholders.\n */\nfunction formatIcuPlaceholder(op: ir.IcuPlaceholderOp) {\n  if (op.strings.length !== op.expressionPlaceholders.length + 1) {\n    throw Error(\n      `AssertionError: Invalid ICU placeholder with ${op.strings.length} strings and ${op.expressionPlaceholders.length} expressions`,\n    );\n  }\n  const values = op.expressionPlaceholders.map(formatValue);\n  return op.strings.flatMap((str, i) => [str, values[i] || '']).join('');\n}\n\n/**\n * Formats a map of `I18nParamValue[]` values into a map of `Expression` values.\n */\nfunction formatParams(params: Map<string, ir.I18nParamValue[]>) {\n  const formattedParams = new Map<string, o.Expression>();\n  for (const [placeholder, placeholderValues] of params) {\n    const serializedValues = formatParamValues(placeholderValues);\n    if (serializedValues !== null) {\n      formattedParams.set(placeholder, o.literal(serializedValues));\n    }\n  }\n  return formattedParams;\n}\n\n/**\n * Formats an `I18nParamValue[]` into a string (or null for empty array).\n */\nfunction formatParamValues(values: ir.I18nParamValue[]): string | null {\n  if (values.length === 0) {\n    return null;\n  }\n  const serializedValues = values.map((value) => formatValue(value));\n  return serializedValues.length === 1\n    ? serializedValues[0]\n    : `${LIST_START_MARKER}${serializedValues.join(LIST_DELIMITER)}${LIST_END_MARKER}`;\n}\n\n/**\n * Formats a single `I18nParamValue` into a string\n */\nfunction formatValue(value: ir.I18nParamValue): string {\n  // Element tags with a structural directive use a special form that concatenates the element and\n  // template values.\n  if (\n    value.flags & ir.I18nParamValueFlags.ElementTag &&\n    value.flags & ir.I18nParamValueFlags.TemplateTag\n  ) {\n    if (typeof value.value !== 'object') {\n      throw Error('AssertionError: Expected i18n param value to have an element and template slot');\n    }\n    const elementValue = formatValue({\n      ...value,\n      value: value.value.element,\n      flags: value.flags & ~ir.I18nParamValueFlags.TemplateTag,\n    });\n    const templateValue = formatValue({\n      ...value,\n      value: value.value.template,\n      flags: value.flags & ~ir.I18nParamValueFlags.ElementTag,\n    });\n    // TODO(mmalerba): This is likely a bug in TemplateDefinitionBuilder, we should not need to\n    // record the template value twice. For now I'm re-implementing the behavior here to keep the\n    // output consistent with TemplateDefinitionBuilder.\n    if (\n      value.flags & ir.I18nParamValueFlags.OpenTag &&\n      value.flags & ir.I18nParamValueFlags.CloseTag\n    ) {\n      return `${templateValue}${elementValue}${templateValue}`;\n    }\n    // To match the TemplateDefinitionBuilder output, flip the order depending on whether the\n    // values represent a closing or opening tag (or both).\n    // TODO(mmalerba): Figure out if this makes a difference in terms of either functionality,\n    // or the resulting message ID. If not, we can remove the special-casing in the future.\n    return value.flags & ir.I18nParamValueFlags.CloseTag\n      ? `${elementValue}${templateValue}`\n      : `${templateValue}${elementValue}`;\n  }\n\n  // Self-closing tags use a special form that concatenates the start and close tag values.\n  if (\n    value.flags & ir.I18nParamValueFlags.OpenTag &&\n    value.flags & ir.I18nParamValueFlags.CloseTag\n  ) {\n    return `${formatValue({\n      ...value,\n      flags: value.flags & ~ir.I18nParamValueFlags.CloseTag,\n    })}${formatValue({...value, flags: value.flags & ~ir.I18nParamValueFlags.OpenTag})}`;\n  }\n\n  // If there are no special flags, just return the raw value.\n  if (value.flags === ir.I18nParamValueFlags.None) {\n    return `${value.value}`;\n  }\n\n  // Encode the remaining flags as part of the value.\n  let tagMarker = '';\n  let closeMarker = '';\n  if (value.flags & ir.I18nParamValueFlags.ElementTag) {\n    tagMarker = ELEMENT_MARKER;\n  } else if (value.flags & ir.I18nParamValueFlags.TemplateTag) {\n    tagMarker = TEMPLATE_MARKER;\n  }\n  if (tagMarker !== '') {\n    closeMarker = value.flags & ir.I18nParamValueFlags.CloseTag ? TAG_CLOSE_MARKER : '';\n  }\n  const context =\n    value.subTemplateIndex === null ? '' : `${CONTEXT_MARKER}${value.subTemplateIndex}`;\n  return `${ESCAPE}${closeMarker}${tagMarker}${value.value}${context}${ESCAPE}`;\n}\n"]}