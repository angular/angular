{"version":3,"file":"lexer.js","sourceRoot":"","sources":["lexer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as chars from '../chars';\n\nexport enum TokenType {\n  Character,\n  Identifier,\n  PrivateIdentifier,\n  Keyword,\n  String,\n  Operator,\n  Number,\n  RegExpBody,\n  RegExpFlags,\n  Error,\n}\n\nexport enum StringTokenKind {\n  Plain,\n  TemplateLiteralPart,\n  TemplateLiteralEnd,\n}\n\nconst KEYWORDS = [\n  'var',\n  'let',\n  'as',\n  'null',\n  'undefined',\n  'true',\n  'false',\n  'if',\n  'else',\n  'this',\n  'typeof',\n  'void',\n  'in',\n];\n\nexport class Lexer {\n  tokenize(text: string): Token[] {\n    return new _Scanner(text).scan();\n  }\n}\n\nexport class Token {\n  constructor(\n    public index: number,\n    public end: number,\n    public type: TokenType,\n    public numValue: number,\n    public strValue: string,\n  ) {}\n\n  isCharacter(code: number): boolean {\n    return this.type === TokenType.Character && this.numValue === code;\n  }\n\n  isNumber(): boolean {\n    return this.type === TokenType.Number;\n  }\n\n  isString(): this is StringToken {\n    return this.type === TokenType.String;\n  }\n\n  isOperator(operator: string): boolean {\n    return this.type === TokenType.Operator && this.strValue === operator;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === TokenType.Identifier;\n  }\n\n  isPrivateIdentifier(): boolean {\n    return this.type === TokenType.PrivateIdentifier;\n  }\n\n  isKeyword(): boolean {\n    return this.type === TokenType.Keyword;\n  }\n\n  isKeywordLet(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'let';\n  }\n\n  isKeywordAs(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'as';\n  }\n\n  isKeywordNull(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'null';\n  }\n\n  isKeywordUndefined(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'undefined';\n  }\n\n  isKeywordTrue(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'true';\n  }\n\n  isKeywordFalse(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'false';\n  }\n\n  isKeywordThis(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'this';\n  }\n\n  isKeywordTypeof(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'typeof';\n  }\n\n  isKeywordVoid(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'void';\n  }\n\n  isKeywordIn(): boolean {\n    return this.type === TokenType.Keyword && this.strValue === 'in';\n  }\n\n  isError(): boolean {\n    return this.type === TokenType.Error;\n  }\n\n  isRegExpBody(): boolean {\n    return this.type === TokenType.RegExpBody;\n  }\n\n  isRegExpFlags(): boolean {\n    return this.type === TokenType.RegExpFlags;\n  }\n\n  toNumber(): number {\n    return this.type === TokenType.Number ? this.numValue : -1;\n  }\n\n  isTemplateLiteralPart(): this is StringToken {\n    // Note: Explicit type is needed for Closure.\n    return this.isString() && (this as StringToken).kind === StringTokenKind.TemplateLiteralPart;\n  }\n\n  isTemplateLiteralEnd(): this is StringToken {\n    // Note: Explicit type is needed for Closure.\n    return this.isString() && (this as StringToken).kind === StringTokenKind.TemplateLiteralEnd;\n  }\n\n  isTemplateLiteralInterpolationStart(): boolean {\n    return this.isOperator('${');\n  }\n\n  isTemplateLiteralInterpolationEnd(): boolean {\n    return this.isOperator('}');\n  }\n\n  toString(): string | null {\n    switch (this.type) {\n      case TokenType.Character:\n      case TokenType.Identifier:\n      case TokenType.Keyword:\n      case TokenType.Operator:\n      case TokenType.PrivateIdentifier:\n      case TokenType.String:\n      case TokenType.Error:\n      case TokenType.RegExpBody:\n      case TokenType.RegExpFlags:\n        return this.strValue;\n      case TokenType.Number:\n        return this.numValue.toString();\n      default:\n        return null;\n    }\n  }\n}\n\nexport class StringToken extends Token {\n  constructor(\n    index: number,\n    end: number,\n    strValue: string,\n    readonly kind: StringTokenKind,\n  ) {\n    super(index, end, TokenType.String, 0, strValue);\n  }\n}\n\nfunction newCharacterToken(index: number, end: number, code: number): Token {\n  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));\n}\n\nfunction newIdentifierToken(index: number, end: number, text: string): Token {\n  return new Token(index, end, TokenType.Identifier, 0, text);\n}\n\nfunction newPrivateIdentifierToken(index: number, end: number, text: string): Token {\n  return new Token(index, end, TokenType.PrivateIdentifier, 0, text);\n}\n\nfunction newKeywordToken(index: number, end: number, text: string): Token {\n  return new Token(index, end, TokenType.Keyword, 0, text);\n}\n\nfunction newOperatorToken(index: number, end: number, text: string): Token {\n  return new Token(index, end, TokenType.Operator, 0, text);\n}\n\nfunction newNumberToken(index: number, end: number, n: number): Token {\n  return new Token(index, end, TokenType.Number, n, '');\n}\n\nfunction newErrorToken(index: number, end: number, message: string): Token {\n  return new Token(index, end, TokenType.Error, 0, message);\n}\n\nfunction newRegExpBodyToken(index: number, end: number, text: string): Token {\n  return new Token(index, end, TokenType.RegExpBody, 0, text);\n}\n\nfunction newRegExpFlagsToken(index: number, end: number, text: string): Token {\n  return new Token(index, end, TokenType.RegExpFlags, 0, text);\n}\n\nexport const EOF: Token = new Token(-1, -1, TokenType.Character, 0, '');\n\nclass _Scanner {\n  private readonly tokens: Token[] = [];\n  private readonly length: number;\n  private peek = 0;\n  private index = -1;\n  private braceStack: ('interpolation' | 'expression')[] = [];\n\n  constructor(private readonly input: string) {\n    this.length = input.length;\n    this.advance();\n  }\n\n  scan(): Token[] {\n    let token = this.scanToken();\n\n    while (token !== null) {\n      this.tokens.push(token);\n      token = this.scanToken();\n    }\n\n    return this.tokens;\n  }\n\n  private advance() {\n    this.peek = ++this.index >= this.length ? chars.$EOF : this.input.charCodeAt(this.index);\n  }\n\n  private scanToken(): Token | null {\n    const input = this.input;\n    const length = this.length;\n    let peek = this.peek;\n    let index = this.index;\n\n    // Skip whitespace.\n    while (peek <= chars.$SPACE) {\n      if (++index >= length) {\n        peek = chars.$EOF;\n        break;\n      } else {\n        peek = input.charCodeAt(index);\n      }\n    }\n\n    this.peek = peek;\n    this.index = index;\n\n    if (index >= length) {\n      return null;\n    }\n\n    // Handle identifiers and numbers.\n    if (isIdentifierStart(peek)) {\n      return this.scanIdentifier();\n    }\n\n    if (chars.isDigit(peek)) {\n      return this.scanNumber(index);\n    }\n\n    const start: number = index;\n    switch (peek) {\n      case chars.$PERIOD:\n        this.advance();\n        return chars.isDigit(this.peek)\n          ? this.scanNumber(start)\n          : newCharacterToken(start, this.index, chars.$PERIOD);\n      case chars.$LPAREN:\n      case chars.$RPAREN:\n      case chars.$LBRACKET:\n      case chars.$RBRACKET:\n      case chars.$COMMA:\n      case chars.$COLON:\n      case chars.$SEMICOLON:\n        return this.scanCharacter(start, peek);\n      case chars.$LBRACE:\n        return this.scanOpenBrace(start, peek);\n      case chars.$RBRACE:\n        return this.scanCloseBrace(start, peek);\n      case chars.$SQ:\n      case chars.$DQ:\n        return this.scanString();\n      case chars.$BT:\n        this.advance();\n        return this.scanTemplateLiteralPart(start);\n      case chars.$HASH:\n        return this.scanPrivateIdentifier();\n      case chars.$PLUS:\n        return this.scanComplexOperator(start, '+', chars.$EQ, '=');\n      case chars.$MINUS:\n        return this.scanComplexOperator(start, '-', chars.$EQ, '=');\n      case chars.$SLASH:\n        return this.isStartOfRegex()\n          ? this.scanRegex(index)\n          : this.scanComplexOperator(start, '/', chars.$EQ, '=');\n      case chars.$PERCENT:\n        return this.scanComplexOperator(start, '%', chars.$EQ, '=');\n      case chars.$CARET:\n        return this.scanOperator(start, '^');\n      case chars.$STAR:\n        return this.scanStar(start);\n      case chars.$QUESTION:\n        return this.scanQuestion(start);\n      case chars.$LT:\n      case chars.$GT:\n        return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=');\n      case chars.$BANG:\n      case chars.$EQ:\n        return this.scanComplexOperator(\n          start,\n          String.fromCharCode(peek),\n          chars.$EQ,\n          '=',\n          chars.$EQ,\n          '=',\n        );\n      case chars.$AMPERSAND:\n        return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&', chars.$EQ, '=');\n      case chars.$BAR:\n        return this.scanComplexOperator(start, '|', chars.$BAR, '|', chars.$EQ, '=');\n      case chars.$NBSP:\n        while (chars.isWhitespace(this.peek)) this.advance();\n        return this.scanToken();\n    }\n\n    this.advance();\n    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n  }\n\n  private scanCharacter(start: number, code: number): Token {\n    this.advance();\n    return newCharacterToken(start, this.index, code);\n  }\n\n  private scanOperator(start: number, str: string): Token {\n    this.advance();\n    return newOperatorToken(start, this.index, str);\n  }\n\n  private scanOpenBrace(start: number, code: number): Token {\n    this.braceStack.push('expression');\n    this.advance();\n    return newCharacterToken(start, this.index, code);\n  }\n\n  private scanCloseBrace(start: number, code: number): Token {\n    this.advance();\n\n    const currentBrace = this.braceStack.pop();\n    if (currentBrace === 'interpolation') {\n      this.tokens.push(newOperatorToken(start, this.index, '}'));\n      return this.scanTemplateLiteralPart(this.index);\n    }\n\n    return newCharacterToken(start, this.index, code);\n  }\n\n  /**\n   * Tokenize a 2/3 char long operator\n   *\n   * @param start start index in the expression\n   * @param one first symbol (always part of the operator)\n   * @param twoCode code point for the second symbol\n   * @param two second symbol (part of the operator when the second code point matches)\n   * @param threeCode code point for the third symbol\n   * @param three third symbol (part of the operator when provided and matches source expression)\n   */\n  private scanComplexOperator(\n    start: number,\n    one: string,\n    twoCode: number,\n    two: string,\n    threeCode?: number,\n    three?: string,\n  ): Token {\n    this.advance();\n    let str: string = one;\n    if (this.peek == twoCode) {\n      this.advance();\n      str += two;\n    }\n    if (threeCode != null && this.peek == threeCode) {\n      this.advance();\n      str += three;\n    }\n    return newOperatorToken(start, this.index, str);\n  }\n\n  private scanIdentifier(): Token {\n    const start: number = this.index;\n    this.advance();\n    while (isIdentifierPart(this.peek)) this.advance();\n    const str: string = this.input.substring(start, this.index);\n    return KEYWORDS.indexOf(str) > -1\n      ? newKeywordToken(start, this.index, str)\n      : newIdentifierToken(start, this.index, str);\n  }\n\n  /** Scans an ECMAScript private identifier. */\n  private scanPrivateIdentifier(): Token {\n    const start: number = this.index;\n    this.advance();\n    if (!isIdentifierStart(this.peek)) {\n      return this.error('Invalid character [#]', -1);\n    }\n    while (isIdentifierPart(this.peek)) this.advance();\n    const identifierName: string = this.input.substring(start, this.index);\n    return newPrivateIdentifierToken(start, this.index, identifierName);\n  }\n\n  private scanNumber(start: number): Token {\n    let simple = this.index === start;\n    let hasSeparators = false;\n    this.advance(); // Skip initial digit.\n    while (true) {\n      if (chars.isDigit(this.peek)) {\n        // Do nothing.\n      } else if (this.peek === chars.$_) {\n        // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is\n        // valid while `_101` and `101_` are not. The separator can't be next to the decimal\n        // point or another separator either. Note that it's unlikely that we'll hit a case where\n        // the underscore is at the start, because that's a valid identifier and it will be picked\n        // up earlier in the parsing. We validate for it anyway just in case.\n        if (\n          !chars.isDigit(this.input.charCodeAt(this.index - 1)) ||\n          !chars.isDigit(this.input.charCodeAt(this.index + 1))\n        ) {\n          return this.error('Invalid numeric separator', 0);\n        }\n        hasSeparators = true;\n      } else if (this.peek === chars.$PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek)) this.advance();\n        if (!chars.isDigit(this.peek)) return this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n      this.advance();\n    }\n\n    let str = this.input.substring(start, this.index);\n    if (hasSeparators) {\n      str = str.replace(/_/g, '');\n    }\n    const value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n    return newNumberToken(start, this.index, value);\n  }\n\n  private scanString(): Token {\n    const start = this.index;\n    const quote = this.peek;\n    this.advance(); // Skip initial quote.\n\n    let buffer = '';\n    let marker = this.index;\n    const input = this.input;\n\n    while (this.peek != quote) {\n      if (this.peek == chars.$BACKSLASH) {\n        const result = this.scanStringBackslash(buffer, marker);\n        if (typeof result !== 'string') {\n          return result; // Error\n        }\n        buffer = result;\n        marker = this.index;\n      } else if (this.peek == chars.$EOF) {\n        return this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n\n    const last: string = input.substring(marker, this.index);\n    this.advance(); // Skip terminating quote.\n\n    return new StringToken(start, this.index, buffer + last, StringTokenKind.Plain);\n  }\n\n  private scanQuestion(start: number): Token {\n    this.advance();\n    let operator = '?';\n    // `a ?? b` or `a ??= b`.\n    if (this.peek === chars.$QUESTION) {\n      operator += '?';\n      this.advance();\n\n      // @ts-expect-error\n      if (this.peek === chars.$EQ) {\n        operator += '=';\n        this.advance();\n      }\n    } else if (this.peek === chars.$PERIOD) {\n      // `a?.b`\n      operator += '.';\n      this.advance();\n    }\n    return newOperatorToken(start, this.index, operator);\n  }\n\n  private scanTemplateLiteralPart(start: number): Token {\n    let buffer = '';\n    let marker = this.index;\n\n    while (this.peek !== chars.$BT) {\n      if (this.peek === chars.$BACKSLASH) {\n        const result = this.scanStringBackslash(buffer, marker);\n        if (typeof result !== 'string') {\n          return result; // Error\n        }\n        buffer = result;\n        marker = this.index;\n      } else if (this.peek === chars.$$) {\n        const dollar = this.index;\n        this.advance();\n\n        // @ts-expect-error\n        if (this.peek === chars.$LBRACE) {\n          this.braceStack.push('interpolation');\n          this.tokens.push(\n            new StringToken(\n              start,\n              dollar,\n              buffer + this.input.substring(marker, dollar),\n              StringTokenKind.TemplateLiteralPart,\n            ),\n          );\n          this.advance();\n          return newOperatorToken(dollar, this.index, this.input.substring(dollar, this.index));\n        }\n      } else if (this.peek === chars.$EOF) {\n        return this.error('Unterminated template literal', 0);\n      } else {\n        this.advance();\n      }\n    }\n\n    const last = this.input.substring(marker, this.index);\n    this.advance();\n    return new StringToken(start, this.index, buffer + last, StringTokenKind.TemplateLiteralEnd);\n  }\n\n  private error(message: string, offset: number): Token & {type: TokenType.Error} {\n    const position: number = this.index + offset;\n    return newErrorToken(\n      position,\n      this.index,\n      `Lexer Error: ${message} at column ${position} in expression [${this.input}]`,\n    ) as Token & {type: TokenType.Error};\n  }\n\n  private scanStringBackslash(\n    buffer: string,\n    marker: number,\n  ): string | (Token & {type: TokenType.Error}) {\n    buffer += this.input.substring(marker, this.index);\n    let unescapedCode: number;\n    this.advance();\n    if (this.peek === chars.$u) {\n      // 4 character hex code for unicode character.\n      const hex: string = this.input.substring(this.index + 1, this.index + 5);\n      if (/^[0-9a-f]+$/i.test(hex)) {\n        unescapedCode = parseInt(hex, 16);\n      } else {\n        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n      }\n      for (let i = 0; i < 5; i++) {\n        this.advance();\n      }\n    } else {\n      unescapedCode = unescape(this.peek);\n      this.advance();\n    }\n    buffer += String.fromCharCode(unescapedCode);\n    return buffer;\n  }\n\n  private scanStar(start: number): Token {\n    this.advance();\n    // `*`, `**`, `**=` or `*=`\n    let operator = '*';\n\n    if (this.peek === chars.$STAR) {\n      operator += '*';\n      this.advance();\n\n      // @ts-expect-error\n      if (this.peek === chars.$EQ) {\n        operator += '=';\n        this.advance();\n      }\n    } else if (this.peek === chars.$EQ) {\n      operator += '=';\n      this.advance();\n    }\n\n    return newOperatorToken(start, this.index, operator);\n  }\n\n  private isStartOfRegex(): boolean {\n    if (this.tokens.length === 0) {\n      return true;\n    }\n\n    const prevToken = this.tokens[this.tokens.length - 1];\n\n    // If a slash is preceded by a `!` operator, we need to distinguish whether it's a\n    // negation or a non-null assertion. Regexes can only be precded by negations.\n    if (prevToken.isOperator('!')) {\n      const beforePrevToken = this.tokens.length > 1 ? this.tokens[this.tokens.length - 2] : null;\n      const isNegation =\n        beforePrevToken === null ||\n        (beforePrevToken.type !== TokenType.Identifier &&\n          !beforePrevToken.isCharacter(chars.$RPAREN) &&\n          !beforePrevToken.isCharacter(chars.$RBRACKET));\n\n      return isNegation;\n    }\n\n    // Only consider the slash a regex if it's preceded either by:\n    // - Any operator, aside from `!` which is special-cased above.\n    // - Opening paren (e.g. `(/a/)`).\n    // - Opening bracket (e.g. `[/a/]`).\n    // - A comma (e.g. `[1, /a/]`).\n    // - A colon (e.g. `{foo: /a/}`).\n    return (\n      prevToken.type === TokenType.Operator ||\n      prevToken.isCharacter(chars.$LPAREN) ||\n      prevToken.isCharacter(chars.$LBRACKET) ||\n      prevToken.isCharacter(chars.$COMMA) ||\n      prevToken.isCharacter(chars.$COLON)\n    );\n  }\n\n  private scanRegex(tokenStart: number): Token {\n    this.advance();\n    const textStart = this.index;\n    let inEscape = false;\n    let inCharacterClass = false;\n\n    while (true) {\n      const peek = this.peek;\n\n      if (peek === chars.$EOF) {\n        return this.error('Unterminated regular expression', 0);\n      }\n\n      if (inEscape) {\n        inEscape = false;\n      } else if (peek === chars.$BACKSLASH) {\n        inEscape = true;\n      } else if (peek === chars.$LBRACKET) {\n        inCharacterClass = true;\n      } else if (peek === chars.$RBRACKET) {\n        inCharacterClass = false;\n      } else if (peek === chars.$SLASH && !inCharacterClass) {\n        break;\n      }\n      this.advance();\n    }\n\n    // Note that we want the text without the slashes,\n    // but we still want the slashes to be part of the span.\n    const value = this.input.substring(textStart, this.index);\n    this.advance();\n    const bodyToken = newRegExpBodyToken(tokenStart, this.index, value);\n    const flagsToken = this.scanRegexFlags(this.index);\n\n    if (flagsToken !== null) {\n      this.tokens.push(bodyToken);\n      return flagsToken;\n    }\n\n    return bodyToken;\n  }\n\n  private scanRegexFlags(start: number): Token | null {\n    if (!chars.isAsciiLetter(this.peek)) {\n      return null;\n    }\n\n    while (chars.isAsciiLetter(this.peek)) {\n      this.advance();\n    }\n\n    return newRegExpFlagsToken(start, this.index, this.input.substring(start, this.index));\n  }\n}\n\nfunction isIdentifierStart(code: number): boolean {\n  return (\n    (chars.$a <= code && code <= chars.$z) ||\n    (chars.$A <= code && code <= chars.$Z) ||\n    code == chars.$_ ||\n    code == chars.$$\n  );\n}\n\nfunction isIdentifierPart(code: number): boolean {\n  return chars.isAsciiLetter(code) || chars.isDigit(code) || code == chars.$_ || code == chars.$$;\n}\n\nfunction isExponentStart(code: number): boolean {\n  return code == chars.$e || code == chars.$E;\n}\n\nfunction isExponentSign(code: number): boolean {\n  return code == chars.$MINUS || code == chars.$PLUS;\n}\n\nfunction unescape(code: number): number {\n  switch (code) {\n    case chars.$n:\n      return chars.$LF;\n    case chars.$f:\n      return chars.$FF;\n    case chars.$r:\n      return chars.$CR;\n    case chars.$t:\n      return chars.$TAB;\n    case chars.$v:\n      return chars.$VTAB;\n    default:\n      return code;\n  }\n}\n\nfunction parseIntAutoRadix(text: string): number {\n  const result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n"]}