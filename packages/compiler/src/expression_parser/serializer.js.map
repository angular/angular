{"version":3,"file":"serializer.js","sourceRoot":"","sources":["serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as expr from './ast';\n\n/** Serializes the given AST into a normalized string format. */\nexport function serialize(expression: expr.ASTWithSource): string {\n  return expression.visit(new SerializeExpressionVisitor());\n}\n\nclass SerializeExpressionVisitor implements expr.AstVisitor {\n  visitUnary(ast: expr.Unary, context: any): string {\n    return `${ast.operator}${ast.expr.visit(this, context)}`;\n  }\n\n  visitBinary(ast: expr.Binary, context: any): string {\n    return `${ast.left.visit(this, context)} ${ast.operation} ${ast.right.visit(this, context)}`;\n  }\n\n  visitChain(ast: expr.Chain, context: any): string {\n    return ast.expressions.map((e) => e.visit(this, context)).join('; ');\n  }\n\n  visitConditional(ast: expr.Conditional, context: any): string {\n    return `${ast.condition.visit(this, context)} ? ${ast.trueExp.visit(\n      this,\n      context,\n    )} : ${ast.falseExp.visit(this, context)}`;\n  }\n\n  visitThisReceiver(): string {\n    return 'this';\n  }\n\n  visitImplicitReceiver(): string {\n    return '';\n  }\n\n  visitInterpolation(ast: expr.Interpolation, context: any): string {\n    return interleave(\n      ast.strings,\n      ast.expressions.map((e) => e.visit(this, context)),\n    ).join('');\n  }\n\n  visitKeyedRead(ast: expr.KeyedRead, context: any): string {\n    return `${ast.receiver.visit(this, context)}[${ast.key.visit(this, context)}]`;\n  }\n\n  visitLiteralArray(ast: expr.LiteralArray, context: any): string {\n    return `[${ast.expressions.map((e) => e.visit(this, context)).join(', ')}]`;\n  }\n\n  visitLiteralMap(ast: expr.LiteralMap, context: any): string {\n    return `{${zip(\n      ast.keys.map((literal) => (literal.quoted ? `'${literal.key}'` : literal.key)),\n      ast.values.map((value) => value.visit(this, context)),\n    )\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(', ')}}`;\n  }\n\n  visitLiteralPrimitive(ast: expr.LiteralPrimitive): string {\n    if (ast.value === null) return 'null';\n\n    switch (typeof ast.value) {\n      case 'number':\n      case 'boolean':\n        return ast.value.toString();\n      case 'undefined':\n        return 'undefined';\n      case 'string':\n        return `'${ast.value.replace(/'/g, `\\\\'`)}'`;\n      default:\n        throw new Error(`Unsupported primitive type: ${ast.value}`);\n    }\n  }\n\n  visitPipe(ast: expr.BindingPipe, context: any): string {\n    return `${ast.exp.visit(this, context)} | ${ast.name}`;\n  }\n\n  visitPrefixNot(ast: expr.PrefixNot, context: any): string {\n    return `!${ast.expression.visit(this, context)}`;\n  }\n\n  visitNonNullAssert(ast: expr.NonNullAssert, context: any): string {\n    return `${ast.expression.visit(this, context)}!`;\n  }\n\n  visitPropertyRead(ast: expr.PropertyRead, context: any): string {\n    if (ast.receiver instanceof expr.ImplicitReceiver) {\n      return ast.name;\n    } else {\n      return `${ast.receiver.visit(this, context)}.${ast.name}`;\n    }\n  }\n\n  visitSafePropertyRead(ast: expr.SafePropertyRead, context: any): string {\n    return `${ast.receiver.visit(this, context)}?.${ast.name}`;\n  }\n\n  visitSafeKeyedRead(ast: expr.SafeKeyedRead, context: any): string {\n    return `${ast.receiver.visit(this, context)}?.[${ast.key.visit(this, context)}]`;\n  }\n\n  visitCall(ast: expr.Call, context: any): string {\n    return `${ast.receiver.visit(this, context)}(${ast.args\n      .map((e) => e.visit(this, context))\n      .join(', ')})`;\n  }\n\n  visitSafeCall(ast: expr.SafeCall, context: any): string {\n    return `${ast.receiver.visit(this, context)}?.(${ast.args\n      .map((e) => e.visit(this, context))\n      .join(', ')})`;\n  }\n\n  visitTypeofExpression(ast: expr.TypeofExpression, context: any) {\n    return `typeof ${ast.expression.visit(this, context)}`;\n  }\n\n  visitVoidExpression(ast: expr.VoidExpression, context: any) {\n    return `void ${ast.expression.visit(this, context)}`;\n  }\n\n  visitRegularExpressionLiteral(ast: expr.RegularExpressionLiteral, context: any) {\n    return `/${ast.body}/${ast.flags || ''}`;\n  }\n\n  visitASTWithSource(ast: expr.ASTWithSource, context: any): string {\n    return ast.ast.visit(this, context);\n  }\n\n  visitTemplateLiteral(ast: expr.TemplateLiteral, context: any) {\n    let result = '';\n    for (let i = 0; i < ast.elements.length; i++) {\n      result += ast.elements[i].visit(this, context);\n      const expression = i < ast.expressions.length ? ast.expressions[i] : null;\n      if (expression !== null) {\n        result += '${' + expression.visit(this, context) + '}';\n      }\n    }\n    return '`' + result + '`';\n  }\n\n  visitTemplateLiteralElement(ast: expr.TemplateLiteralElement, context: any) {\n    return ast.text;\n  }\n\n  visitTaggedTemplateLiteral(ast: expr.TaggedTemplateLiteral, context: any) {\n    return ast.tag.visit(this, context) + ast.template.visit(this, context);\n  }\n\n  visitParenthesizedExpression(ast: expr.ParenthesizedExpression, context: any) {\n    return '(' + ast.expression.visit(this, context) + ')';\n  }\n}\n\n/** Zips the two input arrays into a single array of pairs of elements at the same index. */\nfunction zip<Left, Right>(left: Left[], right: Right[]): Array<[Left, Right]> {\n  if (left.length !== right.length) throw new Error('Array lengths must match');\n\n  return left.map((l, i) => [l, right[i]]);\n}\n\n/**\n * Interleaves the two arrays, starting with the first item on the left, then the first item\n * on the right, second item from the left, and so on. When the first array's items are exhausted,\n * the remaining items from the other array are included with no interleaving.\n */\nfunction interleave<Left, Right>(left: Left[], right: Right[]): Array<Left | Right> {\n  const result: Array<Left | Right> = [];\n\n  for (let index = 0; index < Math.max(left.length, right.length); index++) {\n    if (index < left.length) result.push(left[index]);\n    if (index < right.length) result.push(right[index]);\n  }\n\n  return result;\n}\n"]}