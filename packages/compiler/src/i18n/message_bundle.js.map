{"version":3,"file":"message_bundle.js","sourceRoot":"","sources":["message_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InterpolationConfig} from '../ml_parser/defaults';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {WhitespaceVisitor, visitAllWithSiblings} from '../ml_parser/html_whitespaces';\nimport {ParseError} from '../parse_util';\n\nimport {extractMessages} from './extractor_merger';\nimport * as i18n from './i18n_ast';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\n\n/**\n * A container for message extracted from the templates.\n */\nexport class MessageBundle {\n  private _messages: i18n.Message[] = [];\n\n  constructor(\n    private _htmlParser: HtmlParser,\n    private _implicitTags: string[],\n    private _implicitAttrs: {[k: string]: string[]},\n    private _locale: string | null = null,\n    private readonly _preserveWhitespace = true,\n  ) {}\n\n  updateFromTemplate(\n    source: string,\n    url: string,\n    interpolationConfig: InterpolationConfig,\n  ): ParseError[] {\n    const htmlParserResult = this._htmlParser.parse(source, url, {\n      tokenizeExpansionForms: true,\n      interpolationConfig,\n    });\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    // Trim unnecessary whitespace from extracted messages if requested. This\n    // makes the messages more durable to trivial whitespace changes without\n    // affected message IDs.\n    const rootNodes = this._preserveWhitespace\n      ? htmlParserResult.rootNodes\n      : visitAllWithSiblings(\n          new WhitespaceVisitor(/* preserveSignificantWhitespace */ false),\n          htmlParserResult.rootNodes,\n        );\n\n    const i18nParserResult = extractMessages(\n      rootNodes,\n      interpolationConfig,\n      this._implicitTags,\n      this._implicitAttrs,\n      /* preserveSignificantWhitespace */ this._preserveWhitespace,\n    );\n\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n\n    this._messages.push(...i18nParserResult.messages);\n    return [];\n  }\n\n  // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n  getMessages(): i18n.Message[] {\n    return this._messages;\n  }\n\n  write(serializer: Serializer, filterSources?: (path: string) => string): string {\n    const messages: {[id: string]: i18n.Message} = {};\n    const mapperVisitor = new MapPlaceholderNames();\n\n    // Deduplicate messages based on their ID\n    this._messages.forEach((message) => {\n      const id = serializer.digest(message);\n      if (!messages.hasOwnProperty(id)) {\n        messages[id] = message;\n      } else {\n        messages[id].sources.push(...message.sources);\n      }\n    });\n\n    // Transform placeholder names using the serializer mapping\n    const msgList = Object.keys(messages).map((id) => {\n      const mapper = serializer.createNameMapper(messages[id]);\n      const src = messages[id];\n      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n      let transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n      if (filterSources) {\n        transformedMessage.sources.forEach(\n          (source: i18n.MessageSpan) => (source.filePath = filterSources(source.filePath)),\n        );\n      }\n      return transformedMessage;\n    });\n\n    return serializer.write(msgList, this._locale);\n  }\n}\n\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends i18n.CloneVisitor {\n  convert(nodes: i18n.Node[], mapper: PlaceholderMapper): i18n.Node[] {\n    return mapper ? nodes.map((n) => n.visit(this, mapper)) : nodes;\n  }\n\n  override visitTagPlaceholder(\n    ph: i18n.TagPlaceholder,\n    mapper: PlaceholderMapper,\n  ): i18n.TagPlaceholder {\n    const startName = mapper.toPublicName(ph.startName)!;\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName)! : ph.closeName;\n    const children = ph.children.map((n) => n.visit(this, mapper));\n    return new i18n.TagPlaceholder(\n      ph.tag,\n      ph.attrs,\n      startName,\n      closeName,\n      children,\n      ph.isVoid,\n      ph.sourceSpan,\n      ph.startSourceSpan,\n      ph.endSourceSpan,\n    );\n  }\n\n  override visitBlockPlaceholder(\n    ph: i18n.BlockPlaceholder,\n    mapper: PlaceholderMapper,\n  ): i18n.BlockPlaceholder {\n    const startName = mapper.toPublicName(ph.startName)!;\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName)! : ph.closeName;\n    const children = ph.children.map((n) => n.visit(this, mapper));\n    return new i18n.BlockPlaceholder(\n      ph.name,\n      ph.parameters,\n      startName,\n      closeName,\n      children,\n      ph.sourceSpan,\n      ph.startSourceSpan,\n      ph.endSourceSpan,\n    );\n  }\n\n  override visitPlaceholder(ph: i18n.Placeholder, mapper: PlaceholderMapper): i18n.Placeholder {\n    return new i18n.Placeholder(ph.value, mapper.toPublicName(ph.name)!, ph.sourceSpan);\n  }\n\n  override visitIcuPlaceholder(\n    ph: i18n.IcuPlaceholder,\n    mapper: PlaceholderMapper,\n  ): i18n.IcuPlaceholder {\n    return new i18n.IcuPlaceholder(ph.value, mapper.toPublicName(ph.name)!, ph.sourceSpan);\n  }\n}\n"]}