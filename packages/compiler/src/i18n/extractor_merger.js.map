{"version":3,"file":"extractor_merger.js","sourceRoot":"","sources":["extractor_merger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {DEFAULT_CONTAINER_BLOCKS, InterpolationConfig} from '../ml_parser/defaults';\nimport {ParseTreeResult} from '../ml_parser/parser';\nimport {TokenType} from '../ml_parser/tokens';\nimport {ParseError} from '../parse_util';\n\nimport * as i18n from './i18n_ast';\nimport {createI18nMessageFactory, I18nMessageFactory} from './i18n_parser';\nimport {TranslationBundle} from './translation_bundle';\n\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n\n/**\n * Extract translatable messages from an html AST\n */\nexport function extractMessages(\n  nodes: html.Node[],\n  interpolationConfig: InterpolationConfig,\n  implicitTags: string[],\n  implicitAttrs: {[k: string]: string[]},\n  preserveSignificantWhitespace: boolean,\n): ExtractionResult {\n  const visitor = new _Visitor(implicitTags, implicitAttrs, preserveSignificantWhitespace);\n  return visitor.extract(nodes, interpolationConfig);\n}\n\nexport function mergeTranslations(\n  nodes: html.Node[],\n  translations: TranslationBundle,\n  interpolationConfig: InterpolationConfig,\n  implicitTags: string[],\n  implicitAttrs: {[k: string]: string[]},\n): ParseTreeResult {\n  const visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.merge(nodes, translations, interpolationConfig);\n}\n\nexport class ExtractionResult {\n  constructor(\n    public messages: i18n.Message[],\n    public errors: ParseError[],\n  ) {}\n}\n\nenum _VisitorMode {\n  Extract,\n  Merge,\n}\n\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass _Visitor implements html.Visitor {\n  // Using non-null assertions because all variables are (re)set in init()\n\n  private _depth!: number;\n\n  // <el i18n>...</el>\n  private _inI18nNode!: boolean;\n  private _inImplicitNode!: boolean;\n\n  // <!--i18n-->...<!--/i18n-->\n  private _inI18nBlock!: boolean;\n  private _blockMeaningAndDesc!: string;\n  private _blockChildren!: html.Node[];\n  private _blockStartDepth!: number;\n\n  // {<icu message>}\n  private _inIcu!: boolean;\n\n  // set to void 0 when not in a section\n  private _msgCountAtSectionStart: number | undefined;\n  private _errors!: ParseError[];\n  private _mode!: _VisitorMode;\n\n  // _VisitorMode.Extract only\n  private _messages!: i18n.Message[];\n\n  // _VisitorMode.Merge only\n  private _translations!: TranslationBundle;\n  private _createI18nMessage!: I18nMessageFactory;\n\n  constructor(\n    private _implicitTags: string[],\n    private _implicitAttrs: {[k: string]: string[]},\n    private readonly _preserveSignificantWhitespace: boolean = true,\n  ) {}\n\n  /**\n   * Extracts the messages from the tree\n   */\n  extract(nodes: html.Node[], interpolationConfig: InterpolationConfig): ExtractionResult {\n    this._init(_VisitorMode.Extract, interpolationConfig);\n\n    nodes.forEach((node) => node.visit(this, null));\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ExtractionResult(this._messages, this._errors);\n  }\n\n  /**\n   * Returns a tree where all translatable nodes are translated\n   */\n  merge(\n    nodes: html.Node[],\n    translations: TranslationBundle,\n    interpolationConfig: InterpolationConfig,\n  ): ParseTreeResult {\n    this._init(_VisitorMode.Merge, interpolationConfig);\n    this._translations = translations;\n\n    // Construct a single fake root element\n    const wrapper = new html.Element(\n      'wrapper',\n      [],\n      [],\n      nodes,\n      false,\n      undefined!,\n      undefined!,\n      undefined,\n      false,\n    );\n\n    const translatedNode = wrapper.visit(this, null);\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ParseTreeResult(translatedNode.children, this._errors);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    // Parse cases for translatable html attributes\n    const expression = html.visitAll(this, icuCase.expression, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      return new html.ExpansionCase(\n        icuCase.value,\n        expression,\n        icuCase.sourceSpan,\n        icuCase.valueSourceSpan,\n        icuCase.expSourceSpan,\n      );\n    }\n  }\n\n  visitExpansion(icu: html.Expansion, context: any): html.Expansion {\n    this._mayBeAddBlockChildren(icu);\n\n    const wasInIcu = this._inIcu;\n\n    if (!this._inIcu) {\n      // nested ICU messages should not be extracted but top-level translated as a whole\n      if (this._isInTranslatableSection) {\n        this._addMessage([icu]);\n      }\n      this._inIcu = true;\n    }\n\n    const cases = html.visitAll(this, icu.cases, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      icu = new html.Expansion(\n        icu.switchValue,\n        icu.type,\n        cases,\n        icu.sourceSpan,\n        icu.switchValueSourceSpan,\n      );\n    }\n\n    this._inIcu = wasInIcu;\n\n    return icu;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    const isOpening = _isOpeningComment(comment);\n\n    if (isOpening && this._isInTranslatableSection) {\n      this._reportError(comment, 'Could not start a block inside a translatable section');\n      return;\n    }\n\n    const isClosing = _isClosingComment(comment);\n\n    if (isClosing && !this._inI18nBlock) {\n      this._reportError(comment, 'Trying to close an unopened block');\n      return;\n    }\n\n    if (!this._inI18nNode && !this._inIcu) {\n      if (!this._inI18nBlock) {\n        if (isOpening) {\n          // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n          if (!i18nCommentsWarned && <any>console && <any>console.warn) {\n            i18nCommentsWarned = true;\n            const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\n            // TODO(ocombe): use a log service once there is a public one available\n            console.warn(\n              `I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`,\n            );\n          }\n          this._inI18nBlock = true;\n          this._blockStartDepth = this._depth;\n          this._blockChildren = [];\n          this._blockMeaningAndDesc = comment\n            .value!.replace(_I18N_COMMENT_PREFIX_REGEXP, '')\n            .trim();\n          this._openTranslatableSection(comment);\n        }\n      } else {\n        if (isClosing) {\n          if (this._depth == this._blockStartDepth) {\n            this._closeTranslatableSection(comment, this._blockChildren);\n            this._inI18nBlock = false;\n            const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc)!;\n            // merge attributes in sections\n            const nodes = this._translateMessage(comment, message);\n            return html.visitAll(this, nodes);\n          } else {\n            this._reportError(comment, 'I18N blocks should not cross element boundaries');\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  visitText(text: html.Text, context: any): html.Text {\n    if (this._isInTranslatableSection) {\n      this._mayBeAddBlockChildren(text);\n    }\n    return text;\n  }\n\n  visitElement(el: html.Element, context: any): html.Element | null {\n    return this._visitElementLike(el, context);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    throw new Error('unreachable code');\n  }\n\n  visitBlock(block: html.Block, context: any) {\n    html.visitAll(this, block.children, context);\n  }\n\n  visitBlockParameter(parameter: html.BlockParameter, context: any) {}\n\n  visitLetDeclaration(decl: html.LetDeclaration, context: any) {}\n\n  visitComponent(component: html.Component, context: any): html.Component | null {\n    return this._visitElementLike(component, context);\n  }\n\n  visitDirective(directive: html.Directive, context: any) {\n    throw new Error('unreachable code');\n  }\n\n  private _init(mode: _VisitorMode, interpolationConfig: InterpolationConfig): void {\n    this._mode = mode;\n    this._inI18nBlock = false;\n    this._inI18nNode = false;\n    this._depth = 0;\n    this._inIcu = false;\n    this._msgCountAtSectionStart = undefined;\n    this._errors = [];\n    this._messages = [];\n    this._inImplicitNode = false;\n    this._createI18nMessage = createI18nMessageFactory(\n      interpolationConfig,\n      DEFAULT_CONTAINER_BLOCKS,\n      // When dropping significant whitespace we need to retain whitespace tokens or\n      // else we won't be able to reuse source spans because empty tokens would be\n      // removed and cause a mismatch.\n      /* retainEmptyTokens */ !this._preserveSignificantWhitespace,\n      /* preserveExpressionWhitespace */ this._preserveSignificantWhitespace,\n    );\n  }\n\n  private _visitElementLike<T extends html.Element | html.Component>(\n    node: T,\n    context: any,\n  ): T | null {\n    this._mayBeAddBlockChildren(node);\n    this._depth++;\n    const wasInI18nNode = this._inI18nNode;\n    const wasInImplicitNode = this._inImplicitNode;\n    let childNodes: html.Node[] = [];\n    let translatedChildNodes: html.Node[] = undefined!;\n\n    // Extract:\n    // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n    // - ICU messages\n    const nodeName = node instanceof html.Component ? node.tagName : node.name;\n    const i18nAttr = _getI18nAttr(node);\n    const i18nMeta = i18nAttr ? i18nAttr.value : '';\n    const isImplicit =\n      this._implicitTags.some((tag) => nodeName === tag) &&\n      !this._inIcu &&\n      !this._isInTranslatableSection;\n    const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n    this._inImplicitNode = wasInImplicitNode || isImplicit;\n\n    if (!this._isInTranslatableSection && !this._inIcu) {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._inI18nNode = true;\n        const message = this._addMessage(node.children, i18nMeta)!;\n        translatedChildNodes = this._translateMessage(node, message);\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        const isTranslatable = i18nAttr || isTopLevelImplicit;\n        if (isTranslatable) this._openTranslatableSection(node);\n        html.visitAll(this, node.children);\n        if (isTranslatable) this._closeTranslatableSection(node, node.children);\n      }\n    } else {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._reportError(\n          node,\n          'Could not mark an element as translatable inside a translatable section',\n        );\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        // Descend into child nodes for extraction\n        html.visitAll(this, node.children);\n      }\n    }\n\n    if (this._mode === _VisitorMode.Merge) {\n      const visitNodes = translatedChildNodes || node.children;\n      visitNodes.forEach((child) => {\n        const visited = child.visit(this, context);\n        if (visited && !this._isInTranslatableSection) {\n          // Do not add the children from translatable sections (= i18n blocks here)\n          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n          childNodes = childNodes.concat(visited);\n        }\n      });\n    }\n\n    this._visitAttributesOf(node);\n\n    this._depth--;\n    this._inI18nNode = wasInI18nNode;\n    this._inImplicitNode = wasInImplicitNode;\n\n    if (this._mode === _VisitorMode.Merge) {\n      if (node instanceof html.Element) {\n        return new html.Element(\n          node.name,\n          this._translateAttributes(node),\n          this._translateDirectives(node),\n          childNodes,\n          node.isSelfClosing,\n          node.sourceSpan,\n          node.startSourceSpan,\n          node.endSourceSpan,\n          node.isVoid,\n        ) as T;\n      } else {\n        return new html.Component(\n          node.componentName,\n          node.tagName,\n          node.fullName,\n          this._translateAttributes(node),\n          this._translateDirectives(node),\n          childNodes,\n          node.isSelfClosing,\n          node.sourceSpan,\n          node.startSourceSpan,\n          node.endSourceSpan,\n        ) as T;\n      }\n    }\n    return null;\n  }\n\n  // looks for translatable attributes\n  private _visitAttributesOf(el: html.Element | html.Component): void {\n    const explicitAttrNameToValue: {[k: string]: string} = {};\n    const implicitAttrNames: string[] =\n      this._implicitAttrs[el instanceof html.Component ? el.tagName || '' : el.name] || [];\n\n    el.attrs\n      .filter((attr) => attr instanceof html.Attribute && attr.name.startsWith(_I18N_ATTR_PREFIX))\n      .forEach((attr) => {\n        explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = (\n          attr as html.Attribute\n        ).value;\n      });\n\n    el.attrs.forEach((attr) => {\n      if (attr.name in explicitAttrNameToValue) {\n        this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n      } else if (implicitAttrNames.some((name) => attr.name === name)) {\n        this._addMessage([attr]);\n      }\n    });\n  }\n\n  // add a translatable message\n  private _addMessage(ast: html.Node[], msgMeta?: string): i18n.Message | null {\n    if (\n      ast.length == 0 ||\n      this._isEmptyAttributeValue(ast) ||\n      this._isPlaceholderOnlyAttributeValue(ast) ||\n      this._isPlaceholderOnlyMessage(ast)\n    ) {\n      // Do not create empty messages\n      return null;\n    }\n\n    const {meaning, description, id} = _parseMessageMeta(msgMeta);\n    const message = this._createI18nMessage(ast, meaning, description, id);\n    this._messages.push(message);\n    return message;\n  }\n\n  // Check for cases like `<div i18n-title title=\"\">`.\n  private _isEmptyAttributeValue(ast: html.Node[]): boolean {\n    if (!isAttrNode(ast)) return false;\n    const node = ast[0];\n\n    return node.value.trim() === '';\n  }\n\n  // Check for cases like `<div i18n-title title=\"{{ name }}\">`.\n  private _isPlaceholderOnlyAttributeValue(ast: html.Node[]): boolean {\n    if (!isAttrNode(ast)) return false;\n    const tokens = ast[0].valueTokens ?? [];\n\n    const interpolations = tokens.filter(\n      (token) => token.type === TokenType.ATTR_VALUE_INTERPOLATION,\n    );\n    const plainText = tokens\n      .filter((token) => token.type === TokenType.ATTR_VALUE_TEXT)\n      // `AttributeValueTextToken` always has exactly one part per its type.\n      .map((token) => token.parts[0].trim())\n      .join('');\n\n    // Check if there is a single interpolation and all text around it is empty.\n    return interpolations.length === 1 && plainText === '';\n  }\n\n  // Check for cases like `<div i18n>{{ name }}</div>`.\n  private _isPlaceholderOnlyMessage(ast: html.Node[]): boolean {\n    if (!isTextNode(ast)) return false;\n    const tokens = ast[0].tokens;\n\n    const interpolations = tokens.filter((token) => token.type === TokenType.INTERPOLATION);\n    const plainText = tokens\n      .filter((token) => token.type === TokenType.TEXT)\n      // `TextToken` always has exactly one part per its type.\n      .map((token) => token.parts[0].trim())\n      .join('');\n\n    // Check if there is a single interpolation and all text around it is empty.\n    return interpolations.length === 1 && plainText === '';\n  }\n\n  // Translates the given message given the `TranslationBundle`\n  // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n  // no-op when called in extraction mode (returns [])\n  private _translateMessage(el: html.Node, message: i18n.Message): html.Node[] {\n    if (message && this._mode === _VisitorMode.Merge) {\n      const nodes = this._translations.get(message);\n\n      if (nodes) {\n        return nodes;\n      }\n\n      this._reportError(\n        el,\n        `Translation unavailable for message id=\"${this._translations.digest(message)}\"`,\n      );\n    }\n\n    return [];\n  }\n\n  // translate the attributes of an element and remove i18n specific attributes\n  private _translateAttributes(\n    node: html.Element | html.Component | html.Directive,\n  ): html.Attribute[] {\n    const i18nParsedMessageMeta: {\n      [name: string]: {meaning: string; description: string; id: string};\n    } = {};\n    const translatedAttributes: html.Attribute[] = [];\n\n    node.attrs.forEach((attr) => {\n      if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(\n          attr.value,\n        );\n      }\n    });\n\n    node.attrs.forEach((attr) => {\n      if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        // strip i18n specific attributes\n        return;\n      }\n\n      if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n        const {meaning, description, id} = i18nParsedMessageMeta[attr.name];\n        const message: i18n.Message = this._createI18nMessage([attr], meaning, description, id);\n        const nodes = this._translations.get(message);\n        if (nodes) {\n          if (nodes.length == 0) {\n            translatedAttributes.push(\n              new html.Attribute(\n                attr.name,\n                '',\n                attr.sourceSpan,\n                undefined /* keySpan */,\n                undefined /* valueSpan */,\n                undefined /* valueTokens */,\n                undefined /* i18n */,\n              ),\n            );\n          } else if (nodes[0] instanceof html.Text) {\n            const value = (nodes[0] as html.Text).value;\n            translatedAttributes.push(\n              new html.Attribute(\n                attr.name,\n                value,\n                attr.sourceSpan,\n                undefined /* keySpan */,\n                undefined /* valueSpan */,\n                undefined /* valueTokens */,\n                undefined /* i18n */,\n              ),\n            );\n          } else {\n            this._reportError(\n              node,\n              `Unexpected translation for attribute \"${attr.name}\" (id=\"${\n                id || this._translations.digest(message)\n              }\")`,\n            );\n          }\n        } else {\n          this._reportError(\n            node,\n            `Translation unavailable for attribute \"${attr.name}\" (id=\"${\n              id || this._translations.digest(message)\n            }\")`,\n          );\n        }\n      } else {\n        translatedAttributes.push(attr);\n      }\n    });\n\n    return translatedAttributes;\n  }\n\n  private _translateDirectives(node: html.Element | html.Component): html.Directive[] {\n    return node.directives.map(\n      (dir) =>\n        new html.Directive(\n          dir.name,\n          this._translateAttributes(dir),\n          dir.sourceSpan,\n          dir.startSourceSpan,\n          dir.endSourceSpan,\n        ),\n    );\n  }\n\n  /**\n   * Add the node as a child of the block when:\n   * - we are in a block,\n   * - we are not inside a ICU message (those are handled separately),\n   * - the node is a \"direct child\" of the block\n   */\n  private _mayBeAddBlockChildren(node: html.Node): void {\n    if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n      this._blockChildren.push(node);\n    }\n  }\n\n  /**\n   * Marks the start of a section, see `_closeTranslatableSection`\n   */\n  private _openTranslatableSection(node: html.Node): void {\n    if (this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section start');\n    } else {\n      this._msgCountAtSectionStart = this._messages.length;\n    }\n  }\n\n  /**\n   * A translatable section could be:\n   * - the content of translatable element,\n   * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n   */\n  private get _isInTranslatableSection(): boolean {\n    return this._msgCountAtSectionStart !== void 0;\n  }\n\n  /**\n   * Terminates a section.\n   *\n   * If a section has only one significant children (comments not significant) then we should not\n   * keep the message from this children:\n   *\n   * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n   * - one for the <p> content with meaning and description,\n   * - another one for the ICU message.\n   *\n   * In this case the last message is discarded as it contains less information (the AST is\n   * otherwise identical).\n   *\n   * Note that we should still keep messages extracted from attributes inside the section (ie in the\n   * ICU message here)\n   */\n  private _closeTranslatableSection(node: html.Node, directChildren: html.Node[]): void {\n    if (!this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section end');\n      return;\n    }\n\n    const startIndex = this._msgCountAtSectionStart;\n    const significantChildren: number = directChildren.reduce(\n      (count: number, node: html.Node): number => count + (node instanceof html.Comment ? 0 : 1),\n      0,\n    );\n\n    if (significantChildren == 1) {\n      for (let i = this._messages.length - 1; i >= startIndex!; i--) {\n        const ast = this._messages[i].nodes;\n        if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {\n          this._messages.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    this._msgCountAtSectionStart = undefined;\n  }\n\n  private _reportError(node: html.Node, msg: string): void {\n    this._errors.push(new ParseError(node.sourceSpan, msg));\n  }\n}\n\nfunction _isOpeningComment(n: html.Node): boolean {\n  return !!(n instanceof html.Comment && n.value && n.value.startsWith('i18n'));\n}\n\nfunction _isClosingComment(n: html.Node): boolean {\n  return !!(n instanceof html.Comment && n.value && n.value === '/i18n');\n}\n\nfunction _getI18nAttr(p: html.Element | html.Component): html.Attribute | null {\n  return (\n    (p.attrs.find((attr) => attr instanceof html.Attribute && attr.name === _I18N_ATTR) as\n      | html.Attribute\n      | undefined) || null\n  );\n}\n\nfunction _parseMessageMeta(i18n?: string): {meaning: string; description: string; id: string} {\n  if (!i18n) return {meaning: '', description: '', id: ''};\n\n  const idIndex = i18n.indexOf(ID_SEPARATOR);\n  const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n  const [meaningAndDesc, id] =\n    idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n  const [meaning, description] =\n    descIndex > -1\n      ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)]\n      : ['', meaningAndDesc];\n\n  return {meaning, description, id: id.trim()};\n}\n\nfunction isTextNode(ast: html.Node[]): ast is [html.Text] {\n  return ast.length === 1 && ast[0] instanceof html.Text;\n}\n\nfunction isAttrNode(ast: html.Node[]): ast is [html.Attribute] {\n  return ast.length === 1 && ast[0] instanceof html.Attribute;\n}\n"]}