{"version":3,"file":"i18n_html_parser.js","sourceRoot":"","sources":["i18n_html_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,0BAA0B,EAAC,MAAM,SAAS,CAAC;AACnD,OAAO,EAAC,4BAA4B,EAAC,MAAM,uBAAuB,CAAC;AAGnE,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;AAGpD,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAC;AAChC,OAAO,EAAC,iBAAiB,EAAC,MAAM,oBAAoB,CAAC;AAErD,OAAO,EAAC,KAAK,EAAC,MAAM,qBAAqB,CAAC;AAC1C,OAAO,EAAC,MAAM,EAAC,MAAM,sBAAsB,CAAC;AAC5C,OAAO,EAAC,GAAG,EAAC,MAAM,mBAAmB,CAAC;AACtC,OAAO,EAAC,GAAG,EAAC,MAAM,mBAAmB,CAAC;AACtC,OAAO,EAAC,iBAAiB,EAAC,MAAM,sBAAsB,CAAC;AAEvD,MAAM,OAAO,cAAc;IAMzB,YACU,WAAuB,EAC/B,YAAqB,EACrB,kBAA2B,EAC3B,qBAAiD,0BAA0B,CAAC,OAAO,EACnF,OAAiB;QAJT,gBAAW,GAAX,WAAW,CAAY;QAM/B,IAAI,YAAY,EAAE,CAAC;YACjB,MAAM,UAAU,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;YACxD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,IAAI,CAC9C,YAAY,EACZ,MAAM,EACN,UAAU,EACV,kBAAkB,EAClB,OAAO,CACR,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,kBAAkB,GAAG,IAAI,iBAAiB,CAC7C,EAAE,EACF,IAAI,EACJ,MAAM,EACN,SAAS,EACT,kBAAkB,EAClB,OAAO,CACR,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAc,EAAE,GAAW,EAAE,UAA2B,EAAE;QAC9D,MAAM,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,IAAI,4BAA4B,CAAC;QACxF,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAC,mBAAmB,EAAE,GAAG,OAAO,EAAC,CAAC,CAAC;QAE3F,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC9B,OAAO,IAAI,eAAe,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QACxE,CAAC;QAED,OAAO,iBAAiB,CACtB,WAAW,CAAC,SAAS,EACrB,IAAI,CAAC,kBAAkB,EACvB,mBAAmB,EACnB,EAAE,EACF,EAAE,CACH,CAAC;IACJ,CAAC;CACF;AAED,SAAS,gBAAgB,CAAC,MAAe;IACvC,MAAM,GAAG,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;IAEzC,QAAQ,MAAM,EAAE,CAAC;QACf,KAAK,KAAK;YACR,OAAO,IAAI,GAAG,EAAE,CAAC;QACnB,KAAK,KAAK;YACR,OAAO,IAAI,GAAG,EAAE,CAAC;QACnB,KAAK,QAAQ,CAAC;QACd,KAAK,MAAM;YACT,OAAO,IAAI,MAAM,EAAE,CAAC;QACtB,KAAK,OAAO,CAAC;QACb,KAAK,KAAK,CAAC;QACX;YACE,OAAO,IAAI,KAAK,EAAE,CAAC;IACvB,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MissingTranslationStrategy} from '../core';\nimport {DEFAULT_INTERPOLATION_CONFIG} from '../ml_parser/defaults';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {TokenizeOptions} from '../ml_parser/lexer';\nimport {ParseTreeResult} from '../ml_parser/parser';\nimport {Console} from '../util';\n\nimport {digest} from './digest';\nimport {mergeTranslations} from './extractor_merger';\nimport {Serializer} from './serializers/serializer';\nimport {Xliff} from './serializers/xliff';\nimport {Xliff2} from './serializers/xliff2';\nimport {Xmb} from './serializers/xmb';\nimport {Xtb} from './serializers/xtb';\nimport {TranslationBundle} from './translation_bundle';\n\nexport class I18NHtmlParser implements HtmlParser {\n  // @override\n  getTagDefinition: any;\n\n  private _translationBundle: TranslationBundle;\n\n  constructor(\n    private _htmlParser: HtmlParser,\n    translations?: string,\n    translationsFormat?: string,\n    missingTranslation: MissingTranslationStrategy = MissingTranslationStrategy.Warning,\n    console?: Console,\n  ) {\n    if (translations) {\n      const serializer = createSerializer(translationsFormat);\n      this._translationBundle = TranslationBundle.load(\n        translations,\n        'i18n',\n        serializer,\n        missingTranslation,\n        console,\n      );\n    } else {\n      this._translationBundle = new TranslationBundle(\n        {},\n        null,\n        digest,\n        undefined,\n        missingTranslation,\n        console,\n      );\n    }\n  }\n\n  parse(source: string, url: string, options: TokenizeOptions = {}): ParseTreeResult {\n    const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n    const parseResult = this._htmlParser.parse(source, url, {interpolationConfig, ...options});\n\n    if (parseResult.errors.length) {\n      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n    }\n\n    return mergeTranslations(\n      parseResult.rootNodes,\n      this._translationBundle,\n      interpolationConfig,\n      [],\n      {},\n    );\n  }\n}\n\nfunction createSerializer(format?: string): Serializer {\n  format = (format || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return new Xmb();\n    case 'xtb':\n      return new Xtb();\n    case 'xliff2':\n    case 'xlf2':\n      return new Xliff2();\n    case 'xliff':\n    case 'xlf':\n    default:\n      return new Xliff();\n  }\n}\n"]}