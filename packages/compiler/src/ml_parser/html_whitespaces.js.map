{"version":3,"file":"html_whitespaces.js","sourceRoot":"","sources":["html_whitespaces.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as html from './ast';\nimport {NGSP_UNICODE} from './entities';\nimport {ParseTreeResult} from './parser';\nimport {InterpolatedTextToken, TextToken, TokenType} from './tokens';\n\nexport const PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\n\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\n\nfunction hasPreserveWhitespacesAttr(attrs: html.Attribute[]): boolean {\n  return attrs.some((attr: html.Attribute) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n\n/**\n * &ngsp; is a placeholder for non-removable space\n * &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space.\n */\nexport function replaceNgsp(value: string): string {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n *\n * If `originalNodeMap` is provided, the transformed nodes will be mapped back to their original\n * inputs. Any output nodes not in the map were not transformed. This supports correlating and\n * porting information between the trimmed nodes and original nodes (such as `i18n` properties)\n * such that trimming whitespace does not does not drop required information from the node.\n */\nexport class WhitespaceVisitor implements html.Visitor {\n  // How many ICU expansions which are currently being visited. ICUs can be nested, so this\n  // tracks the current depth of nesting. If this depth is greater than 0, then this visitor is\n  // currently processing content inside an ICU expansion.\n  private icuExpansionDepth = 0;\n\n  constructor(\n    private readonly preserveSignificantWhitespace: boolean,\n    private readonly originalNodeMap?: Map<html.Node, html.Node>,\n    private readonly requireContext = true,\n  ) {}\n\n  visitElement(element: html.Element, context: any): any {\n    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      const newElement = new html.Element(\n        element.name,\n        visitAllWithSiblings(this, element.attrs),\n        visitAllWithSiblings(this, element.directives),\n        element.children,\n        element.isSelfClosing,\n        element.sourceSpan,\n        element.startSourceSpan,\n        element.endSourceSpan,\n        element.isVoid,\n        element.i18n,\n      );\n      this.originalNodeMap?.set(newElement, element);\n      return newElement;\n    }\n\n    const newElement = new html.Element(\n      element.name,\n      element.attrs,\n      element.directives,\n      visitAllWithSiblings(this, element.children),\n      element.isSelfClosing,\n      element.sourceSpan,\n      element.startSourceSpan,\n      element.endSourceSpan,\n      element.isVoid,\n      element.i18n,\n    );\n    this.originalNodeMap?.set(newElement, element);\n    return newElement;\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n  }\n\n  visitText(text: html.Text, context: SiblingVisitorContext | null): any {\n    const isNotBlank = text.value.match(NO_WS_REGEXP);\n    const hasExpansionSibling =\n      context && (context.prev instanceof html.Expansion || context.next instanceof html.Expansion);\n\n    // Do not trim whitespace within ICU expansions when preserving significant whitespace.\n    // Historically, ICU whitespace was never trimmed and this is really a bug. However fixing it\n    // would change message IDs which we can't easily do. Instead we only trim ICU whitespace within\n    // ICU expansions when not preserving significant whitespace, which is the new behavior where it\n    // most matters.\n    const inIcuExpansion = this.icuExpansionDepth > 0;\n    if (inIcuExpansion && this.preserveSignificantWhitespace) return text;\n\n    if (isNotBlank || hasExpansionSibling) {\n      // Process the whitespace in the tokens of this Text node\n      const tokens = text.tokens.map((token) =>\n        token.type === TokenType.TEXT ? createWhitespaceProcessedTextToken(token) : token,\n      );\n\n      // Fully trim message when significant whitespace is not preserved.\n      if (!this.preserveSignificantWhitespace && tokens.length > 0) {\n        // The first token should only call `.trimStart()` and the last token\n        // should only call `.trimEnd()`, but there might be only one token which\n        // needs to call both.\n        const firstToken = tokens[0]!;\n        tokens.splice(0, 1, trimLeadingWhitespace(firstToken, context));\n\n        const lastToken = tokens[tokens.length - 1]; // Could be the same as the first token.\n        tokens.splice(tokens.length - 1, 1, trimTrailingWhitespace(lastToken, context));\n      }\n\n      // Process the whitespace of the value of this Text node. Also trim the leading/trailing\n      // whitespace when we don't need to preserve significant whitespace.\n      const processed = processWhitespace(text.value);\n      const value = this.preserveSignificantWhitespace\n        ? processed\n        : trimLeadingAndTrailingWhitespace(processed, context);\n      const result = new html.Text(value, text.sourceSpan, tokens, text.i18n);\n      this.originalNodeMap?.set(result, text);\n      return result;\n    }\n\n    return null;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    return comment;\n  }\n\n  visitExpansion(expansion: html.Expansion, context: any): any {\n    this.icuExpansionDepth++;\n    let newExpansion: html.Expansion;\n    try {\n      newExpansion = new html.Expansion(\n        expansion.switchValue,\n        expansion.type,\n        visitAllWithSiblings(this, expansion.cases),\n        expansion.sourceSpan,\n        expansion.switchValueSourceSpan,\n        expansion.i18n,\n      );\n    } finally {\n      this.icuExpansionDepth--;\n    }\n\n    this.originalNodeMap?.set(newExpansion, expansion);\n\n    return newExpansion;\n  }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any {\n    const newExpansionCase = new html.ExpansionCase(\n      expansionCase.value,\n      visitAllWithSiblings(this, expansionCase.expression),\n      expansionCase.sourceSpan,\n      expansionCase.valueSourceSpan,\n      expansionCase.expSourceSpan,\n    );\n    this.originalNodeMap?.set(newExpansionCase, expansionCase);\n    return newExpansionCase;\n  }\n\n  visitBlock(block: html.Block, context: any): any {\n    const newBlock = new html.Block(\n      block.name,\n      block.parameters,\n      visitAllWithSiblings(this, block.children),\n      block.sourceSpan,\n      block.nameSpan,\n      block.startSourceSpan,\n      block.endSourceSpan,\n    );\n    this.originalNodeMap?.set(newBlock, block);\n    return newBlock;\n  }\n\n  visitBlockParameter(parameter: html.BlockParameter, context: any) {\n    return parameter;\n  }\n\n  visitLetDeclaration(decl: html.LetDeclaration, context: any) {\n    return decl;\n  }\n\n  visitComponent(node: html.Component, context: any): any {\n    if (\n      (node.tagName && SKIP_WS_TRIM_TAGS.has(node.tagName)) ||\n      hasPreserveWhitespacesAttr(node.attrs)\n    ) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      const newElement = new html.Component(\n        node.componentName,\n        node.tagName,\n        node.fullName,\n        visitAllWithSiblings(this, node.attrs),\n        visitAllWithSiblings(this, node.directives),\n        node.children,\n        node.isSelfClosing,\n        node.sourceSpan,\n        node.startSourceSpan,\n        node.endSourceSpan,\n        node.i18n,\n      );\n      this.originalNodeMap?.set(newElement, node);\n      return newElement;\n    }\n\n    const newElement = new html.Component(\n      node.componentName,\n      node.tagName,\n      node.fullName,\n      node.attrs,\n      node.directives,\n      visitAllWithSiblings(this, node.children),\n      node.isSelfClosing,\n      node.sourceSpan,\n      node.startSourceSpan,\n      node.endSourceSpan,\n      node.i18n,\n    );\n    this.originalNodeMap?.set(newElement, node);\n    return newElement;\n  }\n\n  visitDirective(directive: html.Directive, context: any) {\n    return directive;\n  }\n\n  visit(_node: html.Node, context: any) {\n    // `visitAllWithSiblings` provides context necessary for ICU messages to be handled correctly.\n    // Prefer that over calling `html.visitAll` directly on this visitor.\n    if (this.requireContext && !context) {\n      throw new Error(\n        `WhitespaceVisitor requires context. Visit via \\`visitAllWithSiblings\\` to get this context.`,\n      );\n    }\n\n    return false;\n  }\n}\n\nfunction trimLeadingWhitespace(\n  token: InterpolatedTextToken,\n  context: SiblingVisitorContext | null,\n): InterpolatedTextToken {\n  if (token.type !== TokenType.TEXT) return token;\n\n  const isFirstTokenInTag = !context?.prev;\n  if (!isFirstTokenInTag) return token;\n\n  return transformTextToken(token, (text) => text.trimStart());\n}\n\nfunction trimTrailingWhitespace(\n  token: InterpolatedTextToken,\n  context: SiblingVisitorContext | null,\n): InterpolatedTextToken {\n  if (token.type !== TokenType.TEXT) return token;\n\n  const isLastTokenInTag = !context?.next;\n  if (!isLastTokenInTag) return token;\n\n  return transformTextToken(token, (text) => text.trimEnd());\n}\n\nfunction trimLeadingAndTrailingWhitespace(\n  text: string,\n  context: SiblingVisitorContext | null,\n): string {\n  const isFirstTokenInTag = !context?.prev;\n  const isLastTokenInTag = !context?.next;\n\n  const maybeTrimmedStart = isFirstTokenInTag ? text.trimStart() : text;\n  const maybeTrimmed = isLastTokenInTag ? maybeTrimmedStart.trimEnd() : maybeTrimmedStart;\n  return maybeTrimmed;\n}\n\nfunction createWhitespaceProcessedTextToken({type, parts, sourceSpan}: TextToken): TextToken {\n  return {type, parts: [processWhitespace(parts[0])], sourceSpan};\n}\n\nfunction transformTextToken(\n  {type, parts, sourceSpan}: TextToken,\n  transform: (parts: string) => string,\n): TextToken {\n  // `TextToken` only ever has one part as defined in its type, so we just transform the first element.\n  return {type, parts: [transform(parts[0])], sourceSpan};\n}\n\nfunction processWhitespace(text: string): string {\n  return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');\n}\n\nexport function removeWhitespaces(\n  htmlAstWithErrors: ParseTreeResult,\n  preserveSignificantWhitespace: boolean,\n): ParseTreeResult {\n  return new ParseTreeResult(\n    visitAllWithSiblings(\n      new WhitespaceVisitor(preserveSignificantWhitespace),\n      htmlAstWithErrors.rootNodes,\n    ),\n    htmlAstWithErrors.errors,\n  );\n}\n\ninterface SiblingVisitorContext {\n  prev: html.Node | undefined;\n  next: html.Node | undefined;\n}\n\nexport function visitAllWithSiblings(visitor: WhitespaceVisitor, nodes: html.Node[]): any[] {\n  const result: any[] = [];\n\n  nodes.forEach((ast, i) => {\n    const context: SiblingVisitorContext = {prev: nodes[i - 1], next: nodes[i + 1]};\n    const astResult = ast.visit(visitor, context);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n"]}