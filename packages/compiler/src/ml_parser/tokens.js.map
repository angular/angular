{"version":3,"file":"tokens.js","sourceRoot":"","sources":["tokens.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ParseSourceSpan} from '../parse_util';\n\nexport const enum TokenType {\n  TAG_OPEN_START,\n  TAG_OPEN_END,\n  TAG_OPEN_END_VOID,\n  TAG_CLOSE,\n  INCOMPLETE_TAG_OPEN,\n  TEXT,\n  ESCAPABLE_RAW_TEXT,\n  RAW_TEXT,\n  INTERPOLATION,\n  ENCODED_ENTITY,\n  COMMENT_START,\n  COMMENT_END,\n  CDATA_START,\n  CDATA_END,\n  ATTR_NAME,\n  ATTR_QUOTE,\n  ATTR_VALUE_TEXT,\n  ATTR_VALUE_INTERPOLATION,\n  DOC_TYPE,\n  EXPANSION_FORM_START,\n  EXPANSION_CASE_VALUE,\n  EXPANSION_CASE_EXP_START,\n  EXPANSION_CASE_EXP_END,\n  EXPANSION_FORM_END,\n  BLOCK_OPEN_START,\n  BLOCK_OPEN_END,\n  BLOCK_CLOSE,\n  BLOCK_PARAMETER,\n  INCOMPLETE_BLOCK_OPEN,\n  LET_START,\n  LET_VALUE,\n  LET_END,\n  INCOMPLETE_LET,\n  COMPONENT_OPEN_START,\n  COMPONENT_OPEN_END,\n  COMPONENT_OPEN_END_VOID,\n  COMPONENT_CLOSE,\n  INCOMPLETE_COMPONENT_OPEN,\n  DIRECTIVE_NAME,\n  DIRECTIVE_OPEN,\n  DIRECTIVE_CLOSE,\n  EOF,\n}\n\nexport type Token =\n  | TagOpenStartToken\n  | TagOpenEndToken\n  | TagOpenEndVoidToken\n  | TagCloseToken\n  | IncompleteTagOpenToken\n  | TextToken\n  | InterpolationToken\n  | EncodedEntityToken\n  | CommentStartToken\n  | CommentEndToken\n  | CdataStartToken\n  | CdataEndToken\n  | AttributeNameToken\n  | AttributeQuoteToken\n  | AttributeValueTextToken\n  | AttributeValueInterpolationToken\n  | DocTypeToken\n  | ExpansionFormStartToken\n  | ExpansionCaseValueToken\n  | ExpansionCaseExpressionStartToken\n  | ExpansionCaseExpressionEndToken\n  | ExpansionFormEndToken\n  | EndOfFileToken\n  | BlockParameterToken\n  | BlockOpenStartToken\n  | BlockOpenEndToken\n  | BlockCloseToken\n  | IncompleteBlockOpenToken\n  | LetStartToken\n  | LetValueToken\n  | LetEndToken\n  | IncompleteLetToken\n  | ComponentOpenStartToken\n  | ComponentOpenEndToken\n  | ComponentOpenEndVoidToken\n  | ComponentCloseToken\n  | IncompleteComponentOpenToken\n  | DirectiveNameToken\n  | DirectiveOpenToken\n  | DirectiveCloseToken;\n\nexport type InterpolatedTextToken = TextToken | InterpolationToken | EncodedEntityToken;\n\nexport type InterpolatedAttributeToken =\n  | AttributeValueTextToken\n  | AttributeValueInterpolationToken\n  | EncodedEntityToken;\n\nexport interface TokenBase {\n  type: TokenType;\n  parts: string[];\n  sourceSpan: ParseSourceSpan;\n}\n\nexport interface TagOpenStartToken extends TokenBase {\n  type: TokenType.TAG_OPEN_START;\n  parts: [prefix: string, name: string];\n}\n\nexport interface TagOpenEndToken extends TokenBase {\n  type: TokenType.TAG_OPEN_END;\n  parts: [];\n}\n\nexport interface TagOpenEndVoidToken extends TokenBase {\n  type: TokenType.TAG_OPEN_END_VOID;\n  parts: [];\n}\n\nexport interface TagCloseToken extends TokenBase {\n  type: TokenType.TAG_CLOSE;\n  parts: [prefix: string, name: string];\n}\n\nexport interface IncompleteTagOpenToken extends TokenBase {\n  type: TokenType.INCOMPLETE_TAG_OPEN;\n  parts: [prefix: string, name: string];\n}\n\nexport interface TextToken extends TokenBase {\n  type: TokenType.TEXT | TokenType.ESCAPABLE_RAW_TEXT | TokenType.RAW_TEXT;\n  parts: [text: string];\n}\n\nexport interface InterpolationToken extends TokenBase {\n  type: TokenType.INTERPOLATION;\n  parts:\n    | [startMarker: string, expression: string, endMarker: string]\n    | [startMarker: string, expression: string];\n}\n\nexport interface EncodedEntityToken extends TokenBase {\n  type: TokenType.ENCODED_ENTITY;\n  parts: [decoded: string, encoded: string];\n}\n\nexport interface CommentStartToken extends TokenBase {\n  type: TokenType.COMMENT_START;\n  parts: [];\n}\n\nexport interface CommentEndToken extends TokenBase {\n  type: TokenType.COMMENT_END;\n  parts: [];\n}\n\nexport interface CdataStartToken extends TokenBase {\n  type: TokenType.CDATA_START;\n  parts: [];\n}\n\nexport interface CdataEndToken extends TokenBase {\n  type: TokenType.CDATA_END;\n  parts: [];\n}\n\nexport interface AttributeNameToken extends TokenBase {\n  type: TokenType.ATTR_NAME;\n  parts: [prefix: string, name: string];\n}\n\nexport interface AttributeQuoteToken extends TokenBase {\n  type: TokenType.ATTR_QUOTE;\n  parts: [quote: \"'\" | '\"'];\n}\n\nexport interface AttributeValueTextToken extends TokenBase {\n  type: TokenType.ATTR_VALUE_TEXT;\n  parts: [value: string];\n}\n\nexport interface AttributeValueInterpolationToken extends TokenBase {\n  type: TokenType.ATTR_VALUE_INTERPOLATION;\n  parts:\n    | [startMarker: string, expression: string, endMarker: string]\n    | [startMarker: string, expression: string];\n}\n\nexport interface DocTypeToken extends TokenBase {\n  type: TokenType.DOC_TYPE;\n  parts: [content: string];\n}\n\nexport interface ExpansionFormStartToken extends TokenBase {\n  type: TokenType.EXPANSION_FORM_START;\n  parts: [];\n}\n\nexport interface ExpansionCaseValueToken extends TokenBase {\n  type: TokenType.EXPANSION_CASE_VALUE;\n  parts: [value: string];\n}\n\nexport interface ExpansionCaseExpressionStartToken extends TokenBase {\n  type: TokenType.EXPANSION_CASE_EXP_START;\n  parts: [];\n}\n\nexport interface ExpansionCaseExpressionEndToken extends TokenBase {\n  type: TokenType.EXPANSION_CASE_EXP_END;\n  parts: [];\n}\n\nexport interface ExpansionFormEndToken extends TokenBase {\n  type: TokenType.EXPANSION_FORM_END;\n  parts: [];\n}\n\nexport interface EndOfFileToken extends TokenBase {\n  type: TokenType.EOF;\n  parts: [];\n}\n\nexport interface BlockParameterToken extends TokenBase {\n  type: TokenType.BLOCK_PARAMETER;\n  parts: [expression: string];\n}\n\nexport interface BlockOpenStartToken extends TokenBase {\n  type: TokenType.BLOCK_OPEN_START;\n  parts: [name: string];\n}\n\nexport interface BlockOpenEndToken extends TokenBase {\n  type: TokenType.BLOCK_OPEN_END;\n  parts: [];\n}\n\nexport interface BlockCloseToken extends TokenBase {\n  type: TokenType.BLOCK_CLOSE;\n  parts: [];\n}\n\nexport interface IncompleteBlockOpenToken extends TokenBase {\n  type: TokenType.INCOMPLETE_BLOCK_OPEN;\n  parts: [name: string];\n}\n\nexport interface LetStartToken extends TokenBase {\n  type: TokenType.LET_START;\n  parts: [name: string];\n}\n\nexport interface LetValueToken extends TokenBase {\n  type: TokenType.LET_VALUE;\n  parts: [value: string];\n}\n\nexport interface LetEndToken extends TokenBase {\n  type: TokenType.LET_END;\n  parts: [];\n}\n\nexport interface IncompleteLetToken extends TokenBase {\n  type: TokenType.INCOMPLETE_LET;\n  parts: [name: string];\n}\n\nexport interface ComponentOpenStartToken extends TokenBase {\n  type: TokenType.COMPONENT_OPEN_START;\n  parts: [componentName: string, prefix: string, tagName: string];\n}\n\nexport interface ComponentOpenEndToken extends TokenBase {\n  type: TokenType.COMPONENT_OPEN_END;\n  parts: [];\n}\n\nexport interface ComponentOpenEndVoidToken extends TokenBase {\n  type: TokenType.COMPONENT_OPEN_END_VOID;\n  parts: [];\n}\n\nexport interface ComponentCloseToken extends TokenBase {\n  type: TokenType.COMPONENT_CLOSE;\n  parts: [componentName: string, prefix: string, tagName: string];\n}\n\nexport interface IncompleteComponentOpenToken extends TokenBase {\n  type: TokenType.INCOMPLETE_COMPONENT_OPEN;\n  parts: [componentName: string, prefix: string, tagName: string];\n}\n\nexport interface DirectiveNameToken extends TokenBase {\n  type: TokenType.DIRECTIVE_NAME;\n  parts: [name: string];\n}\n\nexport interface DirectiveOpenToken extends TokenBase {\n  type: TokenType.DIRECTIVE_OPEN;\n  parts: [];\n}\n\nexport interface DirectiveCloseToken extends TokenBase {\n  type: TokenType.DIRECTIVE_CLOSE;\n  parts: [];\n}\n"]}