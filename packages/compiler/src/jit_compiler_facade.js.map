{"version":3,"file":"jit_compiler_facade.js","sourceRoot":"","sources":["jit_compiler_facade.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CompilerFacade,\n  CoreEnvironment,\n  ExportedCompilerFacade,\n  FactoryTarget,\n  LegacyInputPartialMapping,\n  OpaqueValue,\n  R3ComponentMetadataFacade,\n  R3DeclareComponentFacade,\n  R3DeclareDependencyMetadataFacade,\n  R3DeclareDirectiveDependencyFacade,\n  R3DeclareDirectiveFacade,\n  R3DeclareFactoryFacade,\n  R3DeclareInjectableFacade,\n  R3DeclareInjectorFacade,\n  R3DeclareNgModuleFacade,\n  R3DeclarePipeDependencyFacade,\n  R3DeclarePipeFacade,\n  R3DeclareQueryMetadataFacade,\n  R3DependencyMetadataFacade,\n  R3DirectiveMetadataFacade,\n  R3FactoryDefMetadataFacade,\n  R3InjectableMetadataFacade,\n  R3InjectorMetadataFacade,\n  R3NgModuleMetadataFacade,\n  R3PipeMetadataFacade,\n  R3QueryMetadataFacade,\n  R3TemplateDependencyFacade,\n} from './compiler_facade_interface';\nimport {ConstantPool} from './constant_pool';\nimport {\n  ChangeDetectionStrategy,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n  ViewEncapsulation,\n} from './core';\nimport {compileInjectable} from './injectable_compiler_2';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './ml_parser/defaults';\nimport {\n  DeclareVarStmt,\n  Expression,\n  literal,\n  LiteralExpr,\n  Statement,\n  StmtModifier,\n  WrappedNodeExpr,\n} from './output/output_ast';\nimport {JitEvaluator} from './output/output_jit';\nimport {ParseError, ParseSourceSpan, r3JitTypeSourceSpan} from './parse_util';\nimport {DeferredBlock} from './render3/r3_ast';\nimport {compileFactoryFunction, R3DependencyMetadata} from './render3/r3_factory';\nimport {compileInjector, R3InjectorMetadata} from './render3/r3_injector_compiler';\nimport {R3JitReflector} from './render3/r3_jit';\nimport {\n  compileNgModule,\n  compileNgModuleDeclarationExpression,\n  R3NgModuleMetadata,\n  R3NgModuleMetadataKind,\n  R3SelectorScopeMode,\n} from './render3/r3_module_compiler';\nimport {compilePipeFromMetadata, R3PipeMetadata} from './render3/r3_pipe_compiler';\nimport {\n  createMayBeForwardRefExpression,\n  ForwardRefHandling,\n  getSafePropertyAccessString,\n  MaybeForwardRefExpression,\n  wrapReference,\n} from './render3/util';\nimport {\n  DeclarationListEmitMode,\n  DeferBlockDepsEmitMode,\n  R3ComponentDeferMetadata,\n  R3ComponentMetadata,\n  R3DirectiveDependencyMetadata,\n  R3DirectiveMetadata,\n  R3HostMetadata,\n  R3InputMetadata,\n  R3PipeDependencyMetadata,\n  R3QueryMetadata,\n  R3TemplateDependency,\n  R3TemplateDependencyKind,\n  R3TemplateDependencyMetadata,\n} from './render3/view/api';\nimport {\n  compileComponentFromMetadata,\n  compileDirectiveFromMetadata,\n  ParsedHostBindings,\n  parseHostBindings,\n  verifyHostBindings,\n} from './render3/view/compiler';\n\nimport type {BoundTarget} from './render3/view/t2_api';\nimport {R3TargetBinder} from './render3/view/t2_binder';\nimport {makeBindingParser, parseTemplate} from './render3/view/template';\nimport {ResourceLoader} from './resource_loader';\nimport {DomElementSchemaRegistry} from './schema/dom_element_schema_registry';\nimport {getJitStandaloneDefaultForVersion} from './util';\n\nexport class CompilerFacadeImpl implements CompilerFacade {\n  FactoryTarget = FactoryTarget;\n  ResourceLoader = ResourceLoader;\n  private elementSchemaRegistry = new DomElementSchemaRegistry();\n\n  constructor(private jitEvaluator = new JitEvaluator()) {}\n\n  compilePipe(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3PipeMetadataFacade,\n  ): any {\n    const metadata: R3PipeMetadata = {\n      name: facade.name,\n      type: wrapReference(facade.type),\n      typeArgumentCount: 0,\n      deps: null,\n      pipeName: facade.pipeName,\n      pure: facade.pure,\n      isStandalone: facade.isStandalone,\n    };\n    const res = compilePipeFromMetadata(metadata);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compilePipeDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    declaration: R3DeclarePipeFacade,\n  ): any {\n    const meta = convertDeclarePipeFacadeToMetadata(declaration);\n    const res = compilePipeFromMetadata(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileInjectable(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3InjectableMetadataFacade,\n  ): any {\n    const {expression, statements} = compileInjectable(\n      {\n        name: facade.name,\n        type: wrapReference(facade.type),\n        typeArgumentCount: facade.typeArgumentCount,\n        providedIn: computeProvidedIn(facade.providedIn),\n        useClass: convertToProviderExpression(facade, 'useClass'),\n        useFactory: wrapExpression(facade, 'useFactory'),\n        useValue: convertToProviderExpression(facade, 'useValue'),\n        useExisting: convertToProviderExpression(facade, 'useExisting'),\n        deps: facade.deps?.map(convertR3DependencyMetadata),\n      },\n      /* resolveForwardRefs */ true,\n    );\n\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n\n  compileInjectableDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3DeclareInjectableFacade,\n  ): any {\n    const {expression, statements} = compileInjectable(\n      {\n        name: facade.type.name,\n        type: wrapReference(facade.type),\n        typeArgumentCount: 0,\n        providedIn: computeProvidedIn(facade.providedIn),\n        useClass: convertToProviderExpression(facade, 'useClass'),\n        useFactory: wrapExpression(facade, 'useFactory'),\n        useValue: convertToProviderExpression(facade, 'useValue'),\n        useExisting: convertToProviderExpression(facade, 'useExisting'),\n        deps: facade.deps?.map(convertR3DeclareDependencyMetadata),\n      },\n      /* resolveForwardRefs */ true,\n    );\n\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n\n  compileInjector(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3InjectorMetadataFacade,\n  ): any {\n    const meta: R3InjectorMetadata = {\n      name: facade.name,\n      type: wrapReference(facade.type),\n      providers:\n        facade.providers && facade.providers.length > 0\n          ? new WrappedNodeExpr(facade.providers)\n          : null,\n      imports: facade.imports.map((i) => new WrappedNodeExpr(i)),\n    };\n    const res = compileInjector(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileInjectorDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    declaration: R3DeclareInjectorFacade,\n  ): any {\n    const meta = convertDeclareInjectorFacadeToMetadata(declaration);\n    const res = compileInjector(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileNgModule(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3NgModuleMetadataFacade,\n  ): any {\n    const meta: R3NgModuleMetadata = {\n      kind: R3NgModuleMetadataKind.Global,\n      type: wrapReference(facade.type),\n      bootstrap: facade.bootstrap.map(wrapReference),\n      declarations: facade.declarations.map(wrapReference),\n      publicDeclarationTypes: null, // only needed for types in AOT\n      imports: facade.imports.map(wrapReference),\n      includeImportTypes: true,\n      exports: facade.exports.map(wrapReference),\n      selectorScopeMode: R3SelectorScopeMode.Inline,\n      containsForwardDecls: false,\n      schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n      id: facade.id ? new WrappedNodeExpr(facade.id) : null,\n    };\n    const res = compileNgModule(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileNgModuleDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    declaration: R3DeclareNgModuleFacade,\n  ): any {\n    const expression = compileNgModuleDeclarationExpression(declaration);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileDirective(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3DirectiveMetadataFacade,\n  ): any {\n    const meta: R3DirectiveMetadata = convertDirectiveFacadeToMetadata(facade);\n    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n\n  compileDirectiveDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    declaration: R3DeclareDirectiveFacade,\n  ): any {\n    const typeSourceSpan = this.createParseSourceSpan(\n      'Directive',\n      declaration.type.name,\n      sourceMapUrl,\n    );\n    const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);\n    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n\n  private compileDirectiveFromMeta(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    meta: R3DirectiveMetadata,\n  ): any {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser();\n    const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n    return this.jitExpression(\n      res.expression,\n      angularCoreEnv,\n      sourceMapUrl,\n      constantPool.statements,\n    );\n  }\n\n  compileComponent(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    facade: R3ComponentMetadataFacade,\n  ): any {\n    // Parse the template and check for errors.\n    const {template, interpolation, defer} = parseJitTemplate(\n      facade.template,\n      facade.name,\n      sourceMapUrl,\n      facade.preserveWhitespaces,\n      facade.interpolation,\n      undefined,\n    );\n\n    // Compile the component metadata, including template, into an expression.\n    const meta: R3ComponentMetadata<R3TemplateDependency> = {\n      ...facade,\n      ...convertDirectiveFacadeToMetadata(facade),\n      selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),\n      template,\n      declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),\n      declarationListEmitMode: DeclarationListEmitMode.Direct,\n      defer,\n\n      styles: [...facade.styles, ...template.styles],\n      encapsulation: facade.encapsulation,\n      interpolation,\n      changeDetection: facade.changeDetection ?? null,\n      animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,\n      viewProviders:\n        facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,\n      relativeContextFilePath: '',\n      i18nUseExternalIds: true,\n      relativeTemplatePath: null,\n    };\n    const jitExpressionSourceMap = `ng:///${facade.name}.js`;\n    return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);\n  }\n\n  compileComponentDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    declaration: R3DeclareComponentFacade,\n  ): any {\n    const typeSourceSpan = this.createParseSourceSpan(\n      'Component',\n      declaration.type.name,\n      sourceMapUrl,\n    );\n    const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);\n    return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n\n  private compileComponentFromMeta(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    meta: R3ComponentMetadata<R3TemplateDependency>,\n  ): any {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser(meta.interpolation);\n    const res = compileComponentFromMetadata(meta, constantPool, bindingParser);\n    return this.jitExpression(\n      res.expression,\n      angularCoreEnv,\n      sourceMapUrl,\n      constantPool.statements,\n    );\n  }\n\n  compileFactory(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    meta: R3FactoryDefMetadataFacade,\n  ) {\n    const factoryRes = compileFactoryFunction({\n      name: meta.name,\n      type: wrapReference(meta.type),\n      typeArgumentCount: meta.typeArgumentCount,\n      deps: convertR3DependencyMetadataArray(meta.deps),\n      target: meta.target,\n    });\n    return this.jitExpression(\n      factoryRes.expression,\n      angularCoreEnv,\n      sourceMapUrl,\n      factoryRes.statements,\n    );\n  }\n\n  compileFactoryDeclaration(\n    angularCoreEnv: CoreEnvironment,\n    sourceMapUrl: string,\n    meta: R3DeclareFactoryFacade,\n  ) {\n    const factoryRes = compileFactoryFunction({\n      name: meta.type.name,\n      type: wrapReference(meta.type),\n      typeArgumentCount: 0,\n      deps: Array.isArray(meta.deps)\n        ? meta.deps.map(convertR3DeclareDependencyMetadata)\n        : meta.deps,\n      target: meta.target,\n    });\n    return this.jitExpression(\n      factoryRes.expression,\n      angularCoreEnv,\n      sourceMapUrl,\n      factoryRes.statements,\n    );\n  }\n\n  createParseSourceSpan(kind: string, typeName: string, sourceUrl: string): ParseSourceSpan {\n    return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n  }\n\n  /**\n   * JIT compiles an expression and returns the result of executing that expression.\n   *\n   * @param def the definition which will be compiled and executed to get the value to patch\n   * @param context an object map of @angular/core symbol names to symbols which will be available\n   * in the context of the compiled expression\n   * @param sourceUrl a URL to use for the source map of the compiled expression\n   * @param preStatements a collection of statements that should be evaluated before the expression.\n   */\n  private jitExpression(\n    def: Expression,\n    context: {[key: string]: any},\n    sourceUrl: string,\n    preStatements: Statement[],\n  ): any {\n    // The ConstantPool may contain Statements which declare variables used in the final expression.\n    // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n    // declaration of $def which is set to the expression being compiled.\n    const statements: Statement[] = [\n      ...preStatements,\n      new DeclareVarStmt('$def', def, undefined, StmtModifier.Exported),\n    ];\n\n    const res = this.jitEvaluator.evaluateStatements(\n      sourceUrl,\n      statements,\n      new R3JitReflector(context),\n      /* enableSourceMaps */ true,\n    );\n    return res['$def'];\n  }\n}\n\nfunction convertToR3QueryMetadata(facade: R3QueryMetadataFacade): R3QueryMetadata {\n  return {\n    ...facade,\n    isSignal: facade.isSignal,\n    predicate: convertQueryPredicate(facade.predicate),\n    read: facade.read ? new WrappedNodeExpr(facade.read) : null,\n    static: facade.static,\n    emitDistinctChangesOnly: facade.emitDistinctChangesOnly,\n  };\n}\n\nfunction convertQueryDeclarationToMetadata(\n  declaration: R3DeclareQueryMetadataFacade,\n): R3QueryMetadata {\n  return {\n    propertyName: declaration.propertyName,\n    first: declaration.first ?? false,\n    predicate: convertQueryPredicate(declaration.predicate),\n    descendants: declaration.descendants ?? false,\n    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,\n    static: declaration.static ?? false,\n    emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true,\n    isSignal: !!declaration.isSignal,\n  };\n}\n\nfunction convertQueryPredicate(\n  predicate: OpaqueValue | string[],\n): MaybeForwardRefExpression | string[] {\n  return Array.isArray(predicate)\n    ? // The predicate is an array of strings so pass it through.\n      predicate\n    : // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.\n      createMayBeForwardRefExpression(new WrappedNodeExpr(predicate), ForwardRefHandling.Wrapped);\n}\n\nfunction convertDirectiveFacadeToMetadata(facade: R3DirectiveMetadataFacade): R3DirectiveMetadata {\n  const inputsFromMetadata = parseInputsArray(facade.inputs || []);\n  const outputsFromMetadata = parseMappingStringArray(facade.outputs || []);\n  const propMetadata = facade.propMetadata;\n  const inputsFromType: Record<string, R3InputMetadata> = {};\n  const outputsFromType: Record<string, string> = {};\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach((ann) => {\n        if (isInput(ann)) {\n          inputsFromType[field] = {\n            bindingPropertyName: ann.alias || field,\n            classPropertyName: field,\n            required: ann.required || false,\n            // For JIT, decorators are used to declare signal inputs. That is because of\n            // a technical limitation where it's not possible to statically reflect class\n            // members of a directive/component at runtime before instantiating the class.\n            isSignal: !!ann.isSignal,\n            transformFunction: ann.transform != null ? new WrappedNodeExpr(ann.transform) : null,\n          };\n        } else if (isOutput(ann)) {\n          outputsFromType[field] = ann.alias || field;\n        }\n      });\n    }\n  }\n\n  const hostDirectives = facade.hostDirectives?.length\n    ? facade.hostDirectives.map((hostDirective) => {\n        return typeof hostDirective === 'function'\n          ? {\n              directive: wrapReference(hostDirective),\n              inputs: null,\n              outputs: null,\n              isForwardReference: false,\n            }\n          : {\n              directive: wrapReference(hostDirective.directive),\n              isForwardReference: false,\n              inputs: hostDirective.inputs ? parseMappingStringArray(hostDirective.inputs) : null,\n              outputs: hostDirective.outputs\n                ? parseMappingStringArray(hostDirective.outputs)\n                : null,\n            };\n      })\n    : null;\n\n  return {\n    ...facade,\n    typeArgumentCount: 0,\n    typeSourceSpan: facade.typeSourceSpan,\n    type: wrapReference(facade.type),\n    deps: null,\n    host: {\n      ...extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),\n    },\n    inputs: {...inputsFromMetadata, ...inputsFromType},\n    outputs: {...outputsFromMetadata, ...outputsFromType},\n    queries: facade.queries.map(convertToR3QueryMetadata),\n    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,\n    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),\n    fullInheritance: false,\n    hostDirectives,\n  };\n}\n\nfunction convertDeclareDirectiveFacadeToMetadata(\n  declaration: R3DeclareDirectiveFacade,\n  typeSourceSpan: ParseSourceSpan,\n): R3DirectiveMetadata {\n  const hostDirectives = declaration.hostDirectives?.length\n    ? declaration.hostDirectives.map((dir) => ({\n        directive: wrapReference(dir.directive),\n        isForwardReference: false,\n        inputs: dir.inputs ? getHostDirectiveBindingMapping(dir.inputs) : null,\n        outputs: dir.outputs ? getHostDirectiveBindingMapping(dir.outputs) : null,\n      }))\n    : null;\n\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    typeSourceSpan,\n    selector: declaration.selector ?? null,\n    inputs: declaration.inputs ? inputsPartialMetadataToInputMetadata(declaration.inputs) : {},\n    outputs: declaration.outputs ?? {},\n    host: convertHostDeclarationToMetadata(declaration.host),\n    queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),\n    viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),\n    providers:\n      declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,\n    exportAs: declaration.exportAs ?? null,\n    usesInheritance: declaration.usesInheritance ?? false,\n    lifecycle: {usesOnChanges: declaration.usesOnChanges ?? false},\n    deps: null,\n    typeArgumentCount: 0,\n    fullInheritance: false,\n    isStandalone:\n      declaration.isStandalone ?? getJitStandaloneDefaultForVersion(declaration.version),\n    isSignal: declaration.isSignal ?? false,\n    hostDirectives,\n  };\n}\n\nfunction convertHostDeclarationToMetadata(\n  host: R3DeclareDirectiveFacade['host'] = {},\n): R3HostMetadata {\n  return {\n    attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),\n    listeners: host.listeners ?? {},\n    properties: host.properties ?? {},\n    specialAttributes: {\n      classAttr: host.classAttribute,\n      styleAttr: host.styleAttribute,\n    },\n  };\n}\n\n/**\n * Parses a host directive mapping where each odd array key is the name of an input/output\n * and each even key is its public name, e.g. `['one', 'oneAlias', 'two', 'two']`.\n */\nfunction getHostDirectiveBindingMapping(array: string[]) {\n  let result: {[publicName: string]: string} | null = null;\n\n  for (let i = 1; i < array.length; i += 2) {\n    result = result || {};\n    result[array[i - 1]] = array[i];\n  }\n\n  return result;\n}\n\nfunction convertOpaqueValuesToExpressions(obj: {[key: string]: OpaqueValue}): {\n  [key: string]: WrappedNodeExpr<unknown>;\n} {\n  const result: {[key: string]: WrappedNodeExpr<unknown>} = {};\n  for (const key of Object.keys(obj)) {\n    result[key] = new WrappedNodeExpr(obj[key]);\n  }\n  return result;\n}\n\nfunction convertDeclareComponentFacadeToMetadata(\n  decl: R3DeclareComponentFacade,\n  typeSourceSpan: ParseSourceSpan,\n  sourceMapUrl: string,\n): R3ComponentMetadata<R3TemplateDependencyMetadata> {\n  const {template, interpolation, defer} = parseJitTemplate(\n    decl.template,\n    decl.type.name,\n    sourceMapUrl,\n    decl.preserveWhitespaces ?? false,\n    decl.interpolation,\n    decl.deferBlockDependencies,\n  );\n\n  const declarations: R3TemplateDependencyMetadata[] = [];\n  if (decl.dependencies) {\n    for (const innerDep of decl.dependencies) {\n      switch (innerDep.kind) {\n        case 'directive':\n        case 'component':\n          declarations.push(convertDirectiveDeclarationToMetadata(innerDep));\n          break;\n        case 'pipe':\n          declarations.push(convertPipeDeclarationToMetadata(innerDep));\n          break;\n      }\n    }\n  } else if (decl.components || decl.directives || decl.pipes) {\n    // Existing declarations on NPM may not be using the new `dependencies` merged field, and may\n    // have separate fields for dependencies instead. Unify them for JIT compilation.\n    decl.components &&\n      declarations.push(\n        ...decl.components.map((dir) =>\n          convertDirectiveDeclarationToMetadata(dir, /* isComponent */ true),\n        ),\n      );\n    decl.directives &&\n      declarations.push(\n        ...decl.directives.map((dir) => convertDirectiveDeclarationToMetadata(dir)),\n      );\n    decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));\n  }\n\n  const hasDirectiveDependencies = declarations.some(\n    ({kind}) =>\n      kind === R3TemplateDependencyKind.Directive || kind === R3TemplateDependencyKind.NgModule,\n  );\n\n  return {\n    ...convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan),\n    template,\n    styles: decl.styles ?? [],\n    declarations,\n    viewProviders:\n      decl.viewProviders !== undefined ? new WrappedNodeExpr(decl.viewProviders) : null,\n    animations: decl.animations !== undefined ? new WrappedNodeExpr(decl.animations) : null,\n    defer,\n    changeDetection: decl.changeDetection ?? ChangeDetectionStrategy.Default,\n    encapsulation: decl.encapsulation ?? ViewEncapsulation.Emulated,\n    interpolation,\n    declarationListEmitMode: DeclarationListEmitMode.ClosureResolved,\n    relativeContextFilePath: '',\n    i18nUseExternalIds: true,\n    relativeTemplatePath: null,\n    hasDirectiveDependencies,\n  };\n}\n\nfunction convertDeclarationFacadeToMetadata(\n  declaration: R3TemplateDependencyFacade,\n): R3TemplateDependency {\n  return {\n    ...declaration,\n    type: new WrappedNodeExpr(declaration.type),\n  };\n}\n\nfunction convertDirectiveDeclarationToMetadata(\n  declaration: R3DeclareDirectiveDependencyFacade,\n  isComponent: true | null = null,\n): R3DirectiveDependencyMetadata {\n  return {\n    kind: R3TemplateDependencyKind.Directive,\n    isComponent: isComponent || declaration.kind === 'component',\n    selector: declaration.selector,\n    type: new WrappedNodeExpr(declaration.type),\n    inputs: declaration.inputs ?? [],\n    outputs: declaration.outputs ?? [],\n    exportAs: declaration.exportAs ?? null,\n  };\n}\n\nfunction convertPipeMapToMetadata(\n  pipes: R3DeclareComponentFacade['pipes'],\n): R3PipeDependencyMetadata[] {\n  if (!pipes) {\n    return [];\n  }\n\n  return Object.keys(pipes).map((name) => {\n    return {\n      kind: R3TemplateDependencyKind.Pipe,\n      name,\n      type: new WrappedNodeExpr(pipes[name]),\n    };\n  });\n}\n\nfunction convertPipeDeclarationToMetadata(\n  pipe: R3DeclarePipeDependencyFacade,\n): R3PipeDependencyMetadata {\n  return {\n    kind: R3TemplateDependencyKind.Pipe,\n    name: pipe.name,\n    type: new WrappedNodeExpr(pipe.type),\n  };\n}\n\nfunction parseJitTemplate(\n  template: string,\n  typeName: string,\n  sourceMapUrl: string,\n  preserveWhitespaces: boolean,\n  interpolation: [string, string] | undefined,\n  deferBlockDependencies: (() => Promise<unknown> | null)[] | undefined,\n) {\n  const interpolationConfig = interpolation\n    ? InterpolationConfig.fromArray(interpolation)\n    : DEFAULT_INTERPOLATION_CONFIG;\n  // Parse the template and check for errors.\n  const parsed = parseTemplate(template, sourceMapUrl, {\n    preserveWhitespaces,\n    interpolationConfig,\n  });\n  if (parsed.errors !== null) {\n    const errors = parsed.errors.map((err) => err.toString()).join(', ');\n    throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);\n  }\n  const binder = new R3TargetBinder(null);\n  const boundTarget = binder.bind({template: parsed.nodes});\n\n  return {\n    template: parsed,\n    interpolation: interpolationConfig,\n    defer: createR3ComponentDeferMetadata(boundTarget, deferBlockDependencies),\n  };\n}\n\n/**\n * Convert the expression, if present to an `R3ProviderExpression`.\n *\n * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,\n * if it is referencing a type that has not yet been defined, it will have already been wrapped in\n * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can\n * use `ForwardRefHandling.None`.\n */\nfunction convertToProviderExpression(\n  obj: any,\n  property: string,\n): MaybeForwardRefExpression | undefined {\n  if (obj.hasOwnProperty(property)) {\n    return createMayBeForwardRefExpression(\n      new WrappedNodeExpr(obj[property]),\n      ForwardRefHandling.None,\n    );\n  } else {\n    return undefined;\n  }\n}\n\nfunction wrapExpression(obj: any, property: string): WrappedNodeExpr<any> | undefined {\n  if (obj.hasOwnProperty(property)) {\n    return new WrappedNodeExpr(obj[property]);\n  } else {\n    return undefined;\n  }\n}\n\nfunction computeProvidedIn(\n  providedIn: Function | string | null | undefined,\n): MaybeForwardRefExpression {\n  const expression =\n    typeof providedIn === 'function'\n      ? new WrappedNodeExpr(providedIn)\n      : new LiteralExpr(providedIn ?? null);\n  // See `convertToProviderExpression()` for why this uses `ForwardRefHandling.None`.\n  return createMayBeForwardRefExpression(expression, ForwardRefHandling.None);\n}\n\nfunction convertR3DependencyMetadataArray(\n  facades: R3DependencyMetadataFacade[] | null | undefined,\n): R3DependencyMetadata[] | null {\n  return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\n\nfunction convertR3DependencyMetadata(facade: R3DependencyMetadataFacade): R3DependencyMetadata {\n  const isAttributeDep = facade.attribute != null; // both `null` and `undefined`\n  const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n  // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in\n  // `attribute` rather than the `token`.\n  const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;\n  return createR3DependencyMetadata(\n    token,\n    isAttributeDep,\n    facade.host,\n    facade.optional,\n    facade.self,\n    facade.skipSelf,\n  );\n}\n\nfunction convertR3DeclareDependencyMetadata(\n  facade: R3DeclareDependencyMetadataFacade,\n): R3DependencyMetadata {\n  const isAttributeDep = facade.attribute ?? false;\n  const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n  return createR3DependencyMetadata(\n    token,\n    isAttributeDep,\n    facade.host ?? false,\n    facade.optional ?? false,\n    facade.self ?? false,\n    facade.skipSelf ?? false,\n  );\n}\n\nfunction createR3DependencyMetadata(\n  token: WrappedNodeExpr<unknown> | null,\n  isAttributeDep: boolean,\n  host: boolean,\n  optional: boolean,\n  self: boolean,\n  skipSelf: boolean,\n): R3DependencyMetadata {\n  // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.\n  // But types are not available at runtime so we just use a literal `\"<unknown>\"` string as a dummy\n  // marker.\n  const attributeNameType = isAttributeDep ? literal('unknown') : null;\n  return {token, attributeNameType, host, optional, self, skipSelf};\n}\n\nfunction createR3ComponentDeferMetadata(\n  boundTarget: BoundTarget<any>,\n  deferBlockDependencies: (() => Promise<unknown> | null)[] | undefined,\n): R3ComponentDeferMetadata {\n  const deferredBlocks = boundTarget.getDeferBlocks();\n  const blocks = new Map<DeferredBlock, Expression | null>();\n\n  for (let i = 0; i < deferredBlocks.length; i++) {\n    const dependencyFn = deferBlockDependencies?.[i];\n    blocks.set(deferredBlocks[i], dependencyFn ? new WrappedNodeExpr(dependencyFn) : null);\n  }\n\n  return {mode: DeferBlockDepsEmitMode.PerBlock, blocks};\n}\n\nfunction extractHostBindings(\n  propMetadata: {[key: string]: any[]},\n  sourceSpan: ParseSourceSpan,\n  host?: {[key: string]: string},\n): ParsedHostBindings {\n  // First parse the declarations from the metadata.\n  const bindings = parseHostBindings(host || {});\n\n  // After that check host bindings for errors\n  const errors = verifyHostBindings(bindings, sourceSpan);\n  if (errors.length) {\n    throw new Error(errors.map((error: ParseError) => error.msg).join('\\n'));\n  }\n\n  // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach((ann) => {\n        if (isHostBinding(ann)) {\n          // Since this is a decorator, we know that the value is a class member. Always access it\n          // through `this` so that further down the line it can't be confused for a literal value\n          // (e.g. if there's a property called `true`).\n          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString(\n            'this',\n            field,\n          );\n        } else if (isHostListener(ann)) {\n          bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n        }\n      });\n    }\n  }\n\n  return bindings;\n}\n\nfunction isHostBinding(value: any): value is HostBinding {\n  return value.ngMetadataName === 'HostBinding';\n}\n\nfunction isHostListener(value: any): value is HostListener {\n  return value.ngMetadataName === 'HostListener';\n}\n\nfunction isInput(value: any): value is Input {\n  return value.ngMetadataName === 'Input';\n}\n\nfunction isOutput(value: any): value is Output {\n  return value.ngMetadataName === 'Output';\n}\n\nfunction inputsPartialMetadataToInputMetadata(\n  inputs: NonNullable<R3DeclareDirectiveFacade['inputs']>,\n) {\n  return Object.keys(inputs).reduce<Record<string, R3InputMetadata>>(\n    (result, minifiedClassName) => {\n      const value = inputs[minifiedClassName];\n\n      // Handle legacy partial input output.\n      if (typeof value === 'string' || Array.isArray(value)) {\n        result[minifiedClassName] = parseLegacyInputPartialOutput(value);\n      } else {\n        result[minifiedClassName] = {\n          bindingPropertyName: value.publicName,\n          classPropertyName: minifiedClassName,\n          transformFunction:\n            value.transformFunction !== null ? new WrappedNodeExpr(value.transformFunction) : null,\n          required: value.isRequired,\n          isSignal: value.isSignal,\n        };\n      }\n\n      return result;\n    },\n    {},\n  );\n}\n\n/**\n * Parses the legacy input partial output. For more details see `partial/directive.ts`.\n * TODO(legacy-partial-output-inputs): Remove in v18.\n */\nfunction parseLegacyInputPartialOutput(value: LegacyInputPartialMapping): R3InputMetadata {\n  if (typeof value === 'string') {\n    return {\n      bindingPropertyName: value,\n      classPropertyName: value,\n      transformFunction: null,\n      required: false,\n      // legacy partial output does not capture signal inputs.\n      isSignal: false,\n    };\n  }\n\n  return {\n    bindingPropertyName: value[0],\n    classPropertyName: value[1],\n    transformFunction: value[2] ? new WrappedNodeExpr(value[2]) : null,\n    required: false,\n    // legacy partial output does not capture signal inputs.\n    isSignal: false,\n  };\n}\n\nfunction parseInputsArray(\n  values: (string | {name: string; alias?: string; required?: boolean; transform?: Function})[],\n) {\n  return values.reduce<Record<string, R3InputMetadata>>((results, value) => {\n    if (typeof value === 'string') {\n      const [bindingPropertyName, classPropertyName] = parseMappingString(value);\n      results[classPropertyName] = {\n        bindingPropertyName,\n        classPropertyName,\n        required: false,\n        // Signal inputs not supported for the inputs array.\n        isSignal: false,\n        transformFunction: null,\n      };\n    } else {\n      results[value.name] = {\n        bindingPropertyName: value.alias || value.name,\n        classPropertyName: value.name,\n        required: value.required || false,\n        // Signal inputs not supported for the inputs array.\n        isSignal: false,\n        transformFunction: value.transform != null ? new WrappedNodeExpr(value.transform) : null,\n      };\n    }\n    return results;\n  }, {});\n}\n\nfunction parseMappingStringArray(values: string[]): Record<string, string> {\n  return values.reduce<Record<string, string>>((results, value) => {\n    const [alias, fieldName] = parseMappingString(value);\n    results[fieldName] = alias;\n    return results;\n  }, {});\n}\n\nfunction parseMappingString(value: string): [alias: string, fieldName: string] {\n  // Either the value is 'field' or 'field: property'. In the first case, `property` will\n  // be undefined, in which case the field name should also be used as the property name.\n  const [fieldName, bindingPropertyName] = value.split(':', 2).map((str) => str.trim());\n  return [bindingPropertyName ?? fieldName, fieldName];\n}\n\nfunction convertDeclarePipeFacadeToMetadata(declaration: R3DeclarePipeFacade): R3PipeMetadata {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    typeArgumentCount: 0,\n    pipeName: declaration.name,\n    deps: null,\n    pure: declaration.pure ?? true,\n    isStandalone:\n      declaration.isStandalone ?? getJitStandaloneDefaultForVersion(declaration.version),\n  };\n}\n\nfunction convertDeclareInjectorFacadeToMetadata(\n  declaration: R3DeclareInjectorFacade,\n): R3InjectorMetadata {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    providers:\n      declaration.providers !== undefined && declaration.providers.length > 0\n        ? new WrappedNodeExpr(declaration.providers)\n        : null,\n    imports:\n      declaration.imports !== undefined\n        ? declaration.imports.map((i) => new WrappedNodeExpr(i))\n        : [],\n  };\n}\n\nexport function publishFacade(global: any) {\n  const ng: ExportedCompilerFacade = global.ng || (global.ng = {});\n  ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n"]}