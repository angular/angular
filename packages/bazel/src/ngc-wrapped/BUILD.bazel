load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@npm2//:defs.bzl", "npm_link_all_packages")

# BEGIN-DEV-ONLY
load("//tools:defaults.bzl", "nodejs_binary")
load("//tools:defaults2.bzl", "ts_project")

npm_link_all_packages()

ts_project(
    name = "ngc_lib",
    srcs = [
        "extract_i18n.ts",
        "index.ts",
        "ngc-wrapped-main.ts",
        "utils.ts",
    ],
    extends = "//packages:tsconfig_build",
    module_name = "@angular/bazel",
    tsconfig = "tsconfig.json",
    visibility = [
        "//packages/bazel:__pkg__",
        "//packages/bazel/test/ngc-wrapped:__subpackages__",
    ],
    deps = [
        ":node_modules/@angular/compiler-cli",
        "//:node_modules/@bazel/concatjs",
        "//:node_modules/@types/node",
        "//:node_modules/typescript",
    ],
)

js_binary(
    name = "ngc-wrapped",
    data = [
        ":ngc_lib_rjs",
        "//packages/bazel/third_party/github.com/bazelbuild/bazel/src/main/protobuf:worker_protocol",
        # Ensure compiler-cli `ts_project` `.js` files are picked up as ESM.
        # Notably this is temporary and compiler raw sources are not valid ESM anyway.
        # That is because there is no explicit import extensions.
        "//packages:package_json",
    ],
    entry_point = ":ngc-wrapped-main.js",
    visibility = ["//visibility:public"],
)

nodejs_binary(
    name = "xi18n",
    data = [
        ":ngc_lib",
    ],
    entry_point = ":extract_i18n.js",
    # Follows the same reasoning as for the actual `ngc-wrapped` target.
    templated_args = ["--nobazel_run_linker"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "package_assets",
    srcs = ["BUILD.bazel"],
    visibility = ["//packages/bazel:__subpackages__"],
)
# END-DEV-ONLY
