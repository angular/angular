{"version":3,"file":"dom_events.js","sourceRoot":"","sources":["dom_events.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAC,MAAM,EAAE,UAAU,EAAuB,MAAM,eAAe,CAAC;AAEvE,OAAO,EAAC,kBAAkB,EAAC,MAAM,iBAAiB,CAAC;AAG5C,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,kBAAkB;IACrD,YAA8B,GAAQ;QACpC,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;IAED,8EAA8E;IAC9E,UAAU;IACD,QAAQ,CAAC,SAAiB;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IAEQ,gBAAgB,CACvB,OAAoB,EACpB,SAAiB,EACjB,OAAiB,EACjB,OAAyB;QAEzB,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAwB,EAAE,OAAO,CAAC,CAAC;QACvE,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAwB,EAAE,OAAO,CAAC,CAAC;IAC/F,CAAC;IAED,mBAAmB,CACjB,MAAW,EACX,SAAiB,EACjB,QAAkB,EAClB,OAAyB;QAEzB,OAAO,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAyB,EAAE,OAAO,CAAC,CAAC;IACnF,CAAC;CACF,CAAA;AA7BY,eAAe;IAD3B,UAAU,EAAE;IAEE,WAAA,MAAM,CAAC,QAAQ,CAAC,CAAA;GADlB,eAAe,CA6B3B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    element.addEventListener(eventName, handler as EventListener, options);\n    return () => this.removeEventListener(element, eventName, handler as EventListener, options);\n  }\n\n  removeEventListener(\n    target: any,\n    eventName: string,\n    callback: Function,\n    options?: ListenerOptions,\n  ): void {\n    return target.removeEventListener(eventName, callback as EventListener, options);\n  }\n}\n"]}