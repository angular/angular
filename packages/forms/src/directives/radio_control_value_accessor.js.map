{"version":3,"file":"radio_control_value_accessor.js","sourceRoot":"","sources":["radio_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  inject,\n  Injectable,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Provider,\n  Renderer2,\n  ÉµRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {\n  BuiltInControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {CALL_SET_DISABLED_STATE, setDisabledStateDefault} from './shared';\n\nconst RADIO_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true,\n};\n\nfunction throwNameError() {\n  throw new RuntimeError(\n    RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH,\n    `\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `,\n  );\n}\n\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\n@Injectable({providedIn: 'root'})\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  /**\n   * @description\n   * Adds a control to the internal registry. For internal use only.\n   */\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  /**\n   * @description\n   * Removes a control from the internal registry. For internal use only.\n   */\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Selects a radio button. For internal use only.\n   */\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n    controlPair: [NgControl, RadioControlValueAccessor],\n    accessor: RadioControlValueAccessor,\n  ): boolean {\n    if (!controlPair[0].control) return false;\n    return (\n      controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name\n    );\n  }\n}\n\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class RadioControlValueAccessor\n  extends BuiltInControlValueAccessor\n  implements ControlValueAccessor, OnDestroy, OnInit\n{\n  /** @internal */\n  _state!: boolean;\n  /** @internal */\n  _control!: NgControl;\n  /** @internal */\n  _fn!: Function;\n\n  private setDisabledStateFired = false;\n\n  /**\n   * The registered callback function called when a change event occurs on the input element.\n   * Note: we declare `onChange` here (also used as host listener) as a function with no arguments\n   * to override the `onChange` function (which expects 1 argument) in the parent\n   * `BaseControlValueAccessor` class.\n   * @docs-private\n   */\n  override onChange = () => {};\n\n  /**\n   * @description\n   * Tracks the name of the radio input element.\n   */\n  @Input() name!: string;\n\n  /**\n   * @description\n   * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   */\n  @Input() formControlName!: string;\n\n  /**\n   * @description\n   * Tracks the value of the radio input element\n   */\n  @Input() value: any;\n\n  private callSetDisabledState =\n    inject(CALL_SET_DISABLED_STATE, {optional: true}) ?? setDisabledStateDefault;\n\n  constructor(\n    renderer: Renderer2,\n    elementRef: ElementRef,\n    private _registry: RadioControlRegistry,\n    private _injector: Injector,\n  ) {\n    super(renderer, elementRef);\n  }\n\n  /** @docs-private */\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    this._registry.remove(this);\n  }\n\n  /**\n   * Sets the \"checked\" property value on the radio input element.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this.setProperty('checked', this._state);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @docs-private\n   */\n  override registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  /** @docs-private */\n  override setDisabledState(isDisabled: boolean): void {\n    /**\n     * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,\n     * including upon control creation. However, a longstanding bug caused the method to not fire\n     * when an *enabled* control was attached. This bug was fixed in v15 in #47576.\n     *\n     * This had a side effect: previously, it was possible to instantiate a reactive form control\n     * with `[attr.disabled]=true`, even though the corresponding control was enabled in the\n     * model. This resulted in a mismatch between the model and the DOM. Now, because\n     * `setDisabledState` is always called, the value in the DOM will be immediately overwritten\n     * with the \"correct\" enabled value.\n     *\n     * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms\n     * models the entire group of radio buttons as a single `FormControl`, there is no way to\n     * control the disabled state for individual radios, so they can no longer be configured as\n     * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`\n     * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`\n     * is `false`, and we are not in legacy mode.\n     */\n    if (\n      this.setDisabledStateFired ||\n      isDisabled ||\n      this.callSetDisabledState === 'whenDisabledForLegacyCode'\n    ) {\n      this.setProperty('disabled', isDisabled);\n    }\n    this.setDisabledStateFired = true;\n  }\n\n  /**\n   * Sets the \"value\" on the radio input element and unchecks it.\n   *\n   * @param value\n   */\n  fireUncheck(value: any): void {\n    this.writeValue(value);\n  }\n\n  private _checkName(): void {\n    if (\n      this.name &&\n      this.formControlName &&\n      this.name !== this.formControlName &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n}\n"]}