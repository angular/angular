{"version":3,"file":"checkbox_value_accessor.js","sourceRoot":"","sources":["checkbox_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,UAAU,EAAW,MAAM,eAAe,CAAC;AAE9D,OAAO,EACL,2BAA2B,EAE3B,iBAAiB,GAClB,MAAM,0BAA0B,CAAC;AAElC,MAAM,uBAAuB,GAAa;IACxC,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,4BAA4B,CAAC;IAC3D,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAQI,IAAM,4BAA4B,GAAlC,MAAM,4BACX,SAAQ,2BAA2B;IAGnC;;;OAGG;IACH,UAAU,CAAC,KAAU;QACnB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;CACF,CAAA;AAXY,4BAA4B;IAPxC,SAAS,CAAC;QACT,QAAQ,EACN,uGAAuG;QACzG,IAAI,EAAE,EAAC,UAAU,EAAE,uCAAuC,EAAE,QAAQ,EAAE,aAAa,EAAC;QACpF,SAAS,EAAE,CAAC,uBAAuB,CAAC;QACpC,UAAU,EAAE,KAAK;KAClB,CAAC;GACW,4BAA4B,CAWxC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, forwardRef, Provider} from '@angular/core';\n\nimport {\n  BuiltInControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\n\nconst CHECKBOX_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($any($event.target).checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class CheckboxControlValueAccessor\n  extends BuiltInControlValueAccessor\n  implements ControlValueAccessor\n{\n  /**\n   * Sets the \"checked\" property on the input element.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    this.setProperty('checked', value);\n  }\n}\n"]}