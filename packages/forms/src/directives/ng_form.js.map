{"version":3,"file":"ng_form.js","sourceRoot":"","sources":["ng_form.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterViewInit,\n  computed,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Provider,\n  Self,\n  signal,\n  untracked,\n  ÉµWritable as Writable,\n} from '@angular/core';\n\nimport {\n  AbstractControl,\n  FormHooks,\n  FormResetEvent,\n  FormSubmittedEvent,\n} from '../model/abstract_model';\nimport {FormControl} from '../model/form_control';\nimport {FormGroup} from '../model/form_group';\nimport {\n  composeAsyncValidators,\n  composeValidators,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport type {NgModel} from './ng_model';\nimport type {NgModelGroup} from './ng_model_group';\nimport {\n  CALL_SET_DISABLED_STATE,\n  SetDisabledStateOption,\n  setUpControl,\n  setUpFormContainer,\n  syncPendingControls,\n} from './shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nconst formDirectiveProvider: Provider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm),\n};\n\nconst resolvedPromise = (() => Promise.resolve())();\n\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([formGroup]):not([formArray]),ng-form,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm',\n  standalone: false,\n})\nexport class NgForm extends ControlContainer implements Form, AfterViewInit {\n  /**\n   * @description\n   * Returns whether the form submission has been triggered.\n   */\n  get submitted(): boolean {\n    return untracked(this.submittedReactive);\n  }\n  /** @internal */\n  readonly _submitted = computed(() => this.submittedReactive());\n  private readonly submittedReactive = signal(false);\n\n  private _directives = new Set<NgModel>();\n\n  /**\n   * @description\n   * The `FormGroup` instance created for this form.\n   */\n  form: FormGroup;\n\n  /**\n   * @description\n   * Event emitter for the \"ngSubmit\" event\n   */\n  ngSubmit = new EventEmitter();\n\n  /**\n   * @description\n   * Tracks options for the `NgForm` instance.\n   *\n   * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\n   * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\n   * Possible values: `'change'` | `'blur'` | `'submit'`.\n   *\n   */\n  @Input('ngFormOptions') options!: {updateOn?: FormHooks};\n\n  constructor(\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this.form = new FormGroup(\n      {},\n      composeValidators(validators),\n      composeAsyncValidators(asyncValidators),\n    );\n  }\n\n  /** @docs-private */\n  ngAfterViewInit() {\n    this._setUpdateStrategy();\n  }\n\n  /**\n   * @description\n   * The directive instance.\n   */\n  override get formDirective(): Form {\n    return this;\n  }\n\n  /**\n   * @description\n   * The internal `FormGroup` instance.\n   */\n  override get control(): FormGroup {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it is always an empty array.\n   */\n  override get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * Returns a map of the controls in this group.\n   */\n  get controls(): {[key: string]: AbstractControl} {\n    return this.form.controls;\n  }\n\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      (dir as Writable<NgModel>).control = <FormControl>(\n        container.registerControl(dir.name, dir.control)\n      );\n      setUpControl(dir.control, dir, this.callSetDisabledState);\n      dir.control.updateValueAndValidity({emitEvent: false});\n      this._directives.add(dir);\n    });\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  getControl(dir: NgModel): FormControl {\n    return <FormControl>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Removes the `NgModel` instance from the internal list of directives\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n      this._directives.delete(dir);\n    });\n  }\n\n  /**\n   * @description\n   * Adds a new `NgModelGroup` directive instance to the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  /**\n   * @description\n   * Removes the `NgModelGroup` directive instance from the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  getFormGroup(dir: NgModelGroup): FormGroup {\n    return <FormGroup>this.form.get(dir.path);\n  }\n\n  /**\n   * Sets the new value for the provided `NgControl` directive.\n   *\n   * @param dir The `NgControl` directive instance.\n   * @param value The new value for the directive's control.\n   */\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path!);\n      ctrl.setValue(value);\n    });\n  }\n\n  /**\n   * @description\n   * Sets the value for this `FormGroup`.\n   *\n   * @param value The new value\n   */\n  setValue(value: {[key: string]: any}): void {\n    this.control.setValue(value);\n  }\n\n  /**\n   * @description\n   * Method called when the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n  onSubmit($event: Event): boolean {\n    this.submittedReactive.set(true);\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    this.form._events.next(new FormSubmittedEvent(this.control));\n    // Forms with `method=\"dialog\"` have some special behavior\n    // that won't reload the page and that shouldn't be prevented.\n    return ($event?.target as HTMLFormElement | null)?.method === 'dialog';\n  }\n\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n  onReset(): void {\n    this.resetForm();\n  }\n\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this.submittedReactive.set(false);\n  }\n\n  private _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n\n  private _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\n}\n"]}