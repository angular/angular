{"version":3,"file":"ng_model_group.js","sourceRoot":"","sources":["ng_model_group.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;AAEH,OAAO,EACL,SAAS,EACT,UAAU,EACV,IAAI,EACJ,MAAM,EACN,KAAK,EAGL,QAAQ,EACR,IAAI,EACJ,QAAQ,GACT,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAC,mBAAmB,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAEjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAC;AACjC,OAAO,EAAC,yBAAyB,EAAC,MAAM,0BAA0B,CAAC;AAGnE,MAAM,CAAC,MAAM,kBAAkB,GAAQ;IACrC,OAAO,EAAE,gBAAgB;IACzB,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;CAC5C,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AAOI,IAAM,YAAY,oBAAlB,MAAM,YAAa,SAAQ,0BAA0B;IAQ1D,YACsB,MAAwB,EACD,UAAuC,EAIlF,eAAsD;QAEtD,KAAK,EAAE,CAAC;QAfV;;;;WAIG;QAC6B,SAAI,GAAW,EAAE,CAAC;QAWhD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAChC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;IAED,gBAAgB;IACP,gBAAgB;QACvB,IACE,CAAC,CAAC,IAAI,CAAC,OAAO,YAAY,cAAY,CAAC;YACvC,CAAC,CAAC,IAAI,CAAC,OAAO,YAAY,MAAM,CAAC;YACjC,CAAC,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAC/C,CAAC;YACD,MAAM,yBAAyB,EAAE,CAAC;QACpC,CAAC;IACH,CAAC;CACF,CAAA;AA1BiC;IAA/B,KAAK,CAAC,cAAc,CAAC;0CAA4B;AANvC,YAAY;IANxB,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,SAAS,EAAE,CAAC,kBAAkB,CAAC;QAC/B,QAAQ,EAAE,cAAc;QACxB,UAAU,EAAE,KAAK;KAClB,CAAC;IAUG,WAAA,IAAI,EAAE,CAAA;IAAE,WAAA,QAAQ,EAAE,CAAA;IAClB,WAAA,QAAQ,EAAE,CAAA;IAAE,WAAA,IAAI,EAAE,CAAA;IAAE,WAAA,MAAM,CAAC,aAAa,CAAC,CAAA;IACzC,WAAA,QAAQ,EAAE,CAAA;IACV,WAAA,IAAI,EAAE,CAAA;IACN,WAAA,MAAM,CAAC,mBAAmB,CAAC,CAAA;GAbnB,YAAY,CAgCxB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  SkipSelf,\n} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {modelGroupParentException} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup),\n};\n\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngModelGroup]',\n  providers: [modelGroupProvider],\n  exportAs: 'ngModelGroup',\n  standalone: false,\n})\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  /**\n   * @description\n   * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n   * to a key in the parent `NgForm`.\n   */\n  @Input('ngModelGroup') override name: string = '';\n\n  constructor(\n    @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @internal */\n  override _checkParentType(): void {\n    if (\n      !(this._parent instanceof NgModelGroup) &&\n      !(this._parent instanceof NgForm) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw modelGroupParentException();\n    }\n  }\n}\n"]}