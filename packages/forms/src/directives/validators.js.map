{"version":3,"file":"validators.js","sourceRoot":"","sources":["validators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  booleanAttribute,\n  Directive,\n  forwardRef,\n  Input,\n  OnChanges,\n  Provider,\n  SimpleChanges,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport type {AbstractControl} from '../model/abstract_model';\nimport {\n  emailValidator,\n  maxLengthValidator,\n  maxValidator,\n  minLengthValidator,\n  minValidator,\n  NG_VALIDATORS,\n  nullValidator,\n  patternValidator,\n  requiredTrueValidator,\n  requiredValidator,\n} from '../validators';\n\n/**\n * Method that updates string to integer if not already a number\n *\n * @param value The value to convert to integer.\n * @returns value of parameter converted to number or integer.\n */\nfunction toInteger(value: string | number): number {\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\n\n/**\n * Method that ensures that provided value is a float (and converts it to float if needed).\n *\n * @param value The value to convert to float.\n * @returns value of parameter converted to number or float.\n */\nfunction toFloat(value: string | number): number {\n  return typeof value === 'number' ? value : parseFloat(value);\n}\n\n/**\n * @description\n * Defines the map of errors returned from failed validation checks.\n *\n * @publicApi\n */\nexport type ValidationErrors = {\n  [key: string]: any;\n};\n\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```ts\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: forwardRef(() => CustomValidatorDirective), multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface Validator {\n  /**\n   * @description\n   * Method that performs synchronous validation against the provided control.\n   *\n   * @param control The control to validate against.\n   *\n   * @returns A map of validation errors if validation fails,\n   * otherwise null.\n   */\n  validate(control: AbstractControl): ValidationErrors | null;\n\n  /**\n   * @description\n   * Registers a callback function to call when the validator inputs change.\n   *\n   * @param fn The callback function\n   */\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/**\n * A base class for Validator-based Directives. The class contains common logic shared across such\n * Directives.\n *\n * For internal use only, this class is not intended for use outside of the Forms package.\n */\n@Directive()\nabstract class AbstractValidatorDirective implements Validator, OnChanges {\n  private _validator: ValidatorFn = nullValidator;\n  private _onChange!: () => void;\n\n  /**\n   * A flag that tracks whether this validator is enabled.\n   *\n   * Marking it `internal` (vs `protected`), so that this flag can be used in host bindings of\n   * directive classes that extend this base class.\n   * @internal\n   */\n  _enabled?: boolean;\n\n  /**\n   * Name of an input that matches directive selector attribute (e.g. `minlength` for\n   * `MinLengthDirective`). An input with a given name might contain configuration information (like\n   * `minlength='10'`) or a flag that indicates whether validator should be enabled (like\n   * `[required]='false'`).\n   *\n   * @internal\n   */\n  abstract inputName: string;\n\n  /**\n   * Creates an instance of a validator (specific to a directive that extends this base class).\n   *\n   * @internal\n   */\n  abstract createValidator(input: unknown): ValidatorFn;\n\n  /**\n   * Performs the necessary input normalization based on a specific logic of a Directive.\n   * For example, the function might be used to convert string-based representation of the\n   * `minlength` input to an integer value that can later be used in the `Validators.minLength`\n   * validator.\n   *\n   * @internal\n   */\n  abstract normalizeInput(input: unknown): unknown;\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.inputName in changes) {\n      const input = this.normalizeInput(changes[this.inputName].currentValue);\n      this._enabled = this.enabled(input);\n      this._validator = this._enabled ? this.createValidator(input) : nullValidator;\n      if (this._onChange) {\n        this._onChange();\n      }\n    }\n  }\n\n  /** @docs-private */\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this._validator(control);\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * @description\n   * Determines whether this validator should be active or not based on an input.\n   * Base class implementation checks whether an input is defined (if the value is different from\n   * `null` and `undefined`). Validator classes that extend this base class can override this\n   * function with the logic specific to a particular validator directive.\n   */\n  enabled(input: unknown): boolean {\n    return input != null /* both `null` and `undefined` */;\n  }\n}\n\n/**\n * @description\n * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MAX_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxValidator),\n  multi: true,\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `max` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a max validator\n *\n * The following example shows how to add a max validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel max=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',\n  providers: [MAX_VALIDATOR],\n  host: {'[attr.max]': '_enabled ? max : null'},\n  standalone: false,\n})\nexport class MaxValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the max bound to this directive.\n   */\n  @Input() max!: string | number | null;\n  /** @internal */\n  override inputName = 'max';\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toFloat(input);\n  /** @internal */\n  override createValidator = (max: number): ValidatorFn => maxValidator(max);\n}\n\n/**\n * @description\n * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MIN_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinValidator),\n  multi: true,\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a min validator\n *\n * The following example shows how to add a min validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel min=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',\n  providers: [MIN_VALIDATOR],\n  host: {'[attr.min]': '_enabled ? min : null'},\n  standalone: false,\n})\nexport class MinValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the min bound to this directive.\n   */\n  @Input() min!: string | number | null;\n  /** @internal */\n  override inputName = 'min';\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toFloat(input);\n  /** @internal */\n  override createValidator = (min: number): ValidatorFn => minValidator(min);\n}\n\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return of({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface AsyncValidator extends Validator {\n  /**\n   * @description\n   * Method that performs async validation against the provided control.\n   *\n   * @param control The control to validate against.\n   *\n   * @returns A promise or observable that resolves a map of validation errors\n   * if validation fails, otherwise null.\n   */\n  validate(\n    control: AbstractControl,\n  ): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;\n}\n\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true,\n};\n\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true,\n};\n\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```html\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': '_enabled ? \"\" : null'},\n  standalone: false,\n})\nexport class RequiredValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the required attribute bound to this directive.\n   */\n  @Input() required!: boolean | string;\n\n  /** @internal */\n  override inputName = 'required';\n\n  /** @internal */\n  override normalizeInput = booleanAttribute;\n\n  /** @internal */\n  override createValidator = (input: boolean): ValidatorFn => requiredValidator;\n\n  /** @docs-private */\n  override enabled(input: boolean): boolean {\n    return input;\n  }\n}\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n    'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': '_enabled ? \"\" : null'},\n  standalone: false,\n})\nexport class CheckboxRequiredValidator extends RequiredValidator {\n  /** @internal */\n  override createValidator = (input: unknown): ValidatorFn => requiredTrueValidator;\n}\n\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true,\n};\n\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * The email validation is based on the WHATWG HTML specification with some enhancements to\n * incorporate more RFC rules. More information can be found on the [Validators.email\n * page](api/forms/Validators#email).\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```html\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR],\n  standalone: false,\n})\nexport class EmailValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the email attribute bound to this directive.\n   */\n  @Input() email!: boolean | string;\n\n  /** @internal */\n  override inputName = 'email';\n\n  /** @internal */\n  override normalizeInput = booleanAttribute;\n\n  /** @internal */\n  override createValidator = (input: number): ValidatorFn => emailValidator;\n\n  /** @docs-private */\n  override enabled(input: boolean): boolean {\n    return input;\n  }\n}\n\n/**\n * @description\n * A function that receives a control and synchronously returns a map of\n * validation errors if present, otherwise null.\n *\n * @publicApi\n */\nexport interface ValidatorFn {\n  (control: AbstractControl): ValidationErrors | null;\n}\n\n/**\n * @description\n * A function that receives a control and returns a Promise or observable\n * that emits validation errors if present, otherwise null.\n *\n * @publicApi\n */\nexport interface AsyncValidatorFn {\n  (\n    control: AbstractControl,\n  ): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;\n}\n\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true,\n};\n\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': '_enabled ? minlength : null'},\n  standalone: false,\n})\nexport class MinLengthValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the minimum length bound to this directive.\n   */\n  @Input() minlength!: string | number | null;\n\n  /** @internal */\n  override inputName = 'minlength';\n\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toInteger(input);\n\n  /** @internal */\n  override createValidator = (minlength: number): ValidatorFn => minLengthValidator(minlength);\n}\n\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true,\n};\n\n/**\n * A directive that adds maximum length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': '_enabled ? maxlength : null'},\n  standalone: false,\n})\nexport class MaxLengthValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the maximum length bound to this directive.\n   */\n  @Input() maxlength!: string | number | null;\n\n  /** @internal */\n  override inputName = 'maxlength';\n\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toInteger(input);\n\n  /** @internal */\n  override createValidator = (maxlength: number): ValidatorFn => maxLengthValidator(maxlength);\n}\n\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true,\n};\n\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': '_enabled ? pattern : null'},\n  standalone: false,\n})\nexport class PatternValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the pattern bound to this directive.\n   */\n  @Input()\n  pattern!: string | RegExp; // This input is always defined, since the name matches selector.\n\n  /** @internal */\n  override inputName = 'pattern';\n\n  /** @internal */\n  override normalizeInput = (input: string | RegExp): string | RegExp => input;\n\n  /** @internal */\n  override createValidator = (input: string | RegExp): ValidatorFn => patternValidator(input);\n}\n"]}