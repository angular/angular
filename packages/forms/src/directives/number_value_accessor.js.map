{"version":3,"file":"number_value_accessor.js","sourceRoot":"","sources":["number_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,UAAU,EAAW,MAAM,eAAe,CAAC;AAE9D,OAAO,EACL,2BAA2B,EAE3B,iBAAiB,GAClB,MAAM,0BAA0B,CAAC;AAElC,MAAM,qBAAqB,GAAa;IACtC,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC;IAClD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAQI,IAAM,mBAAmB,GAAzB,MAAM,mBACX,SAAQ,2BAA2B;IAGnC;;;OAGG;IACH,UAAU,CAAC,KAAa;QACtB,oFAAoF;QACpF,MAAM,eAAe,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QACnD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACM,gBAAgB,CAAC,EAA8B;QACtD,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,EAAE,EAAE;YACxB,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC;IACJ,CAAC;CACF,CAAA;AAvBY,mBAAmB;IAP/B,SAAS,CAAC;QACT,QAAQ,EACN,iGAAiG;QACnG,IAAI,EAAE,EAAC,SAAS,EAAE,qCAAqC,EAAE,QAAQ,EAAE,aAAa,EAAC;QACjF,SAAS,EAAE,CAAC,qBAAqB,CAAC;QAClC,UAAU,EAAE,KAAK;KAClB,CAAC;GACW,mBAAmB,CAuB/B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, forwardRef, Provider} from '@angular/core';\n\nimport {\n  BuiltInControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\n\nconst NUMBER_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true,\n};\n\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {'(input)': 'onChange($any($event.target).value)', '(blur)': 'onTouched()'},\n  providers: [NUMBER_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class NumberValueAccessor\n  extends BuiltInControlValueAccessor\n  implements ControlValueAccessor\n{\n  /**\n   * Sets the \"value\" property on the input element.\n   * @docs-private\n   */\n  writeValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const normalizedValue = value == null ? '' : value;\n    this.setProperty('value', normalizedValue);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @docs-private\n   */\n  override registerOnChange(fn: (_: number | null) => void): void {\n    this.onChange = (value) => {\n      fn(value == '' ? null : parseFloat(value));\n    };\n  }\n}\n"]}