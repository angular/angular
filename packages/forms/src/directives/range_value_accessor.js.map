{"version":3,"file":"range_value_accessor.js","sourceRoot":"","sources":["range_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,UAAU,EAAW,MAAM,eAAe,CAAC;AAE9D,OAAO,EACL,2BAA2B,EAE3B,iBAAiB,GAClB,MAAM,0BAA0B,CAAC;AAElC,MAAM,oBAAoB,GAAa;IACrC,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC;IACjD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAYI,IAAM,kBAAkB,GAAxB,MAAM,kBACX,SAAQ,2BAA2B;IAGnC;;;OAGG;IACH,UAAU,CAAC,KAAU;QACnB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACM,gBAAgB,CAAC,EAA8B;QACtD,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,EAAE,EAAE;YACxB,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC;IACJ,CAAC;CACF,CAAA;AArBY,kBAAkB;IAX9B,SAAS,CAAC;QACT,QAAQ,EACN,8FAA8F;QAChG,IAAI,EAAE;YACJ,UAAU,EAAE,qCAAqC;YACjD,SAAS,EAAE,qCAAqC;YAChD,QAAQ,EAAE,aAAa;SACxB;QACD,SAAS,EAAE,CAAC,oBAAoB,CAAC;QACjC,UAAU,EAAE,KAAK;KAClB,CAAC;GACW,kBAAkB,CAqB9B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, forwardRef, Provider} from '@angular/core';\n\nimport {\n  BuiltInControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\n\nconst RANGE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true,\n};\n\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($any($event.target).value)',\n    '(input)': 'onChange($any($event.target).value)',\n    '(blur)': 'onTouched()',\n  },\n  providers: [RANGE_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class RangeValueAccessor\n  extends BuiltInControlValueAccessor\n  implements ControlValueAccessor\n{\n  /**\n   * Sets the \"value\" property on the input element.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    this.setProperty('value', parseFloat(value));\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @docs-private\n   */\n  override registerOnChange(fn: (_: number | null) => void): void {\n    this.onChange = (value) => {\n      fn(value == '' ? null : parseFloat(value));\n    };\n  }\n}\n"]}