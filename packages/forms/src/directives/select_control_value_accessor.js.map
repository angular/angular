{"version":3,"file":"select_control_value_accessor.js","sourceRoot":"","sources":["select_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterNextRender,\n  ApplicationRef,\n  ChangeDetectorRef,\n  DestroyRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Provider,\n  Renderer2,\n  ÉµRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {\n  BuiltInControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\n\nconst SELECT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true,\n};\n\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```html\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *    @for(country of countries; track $index) {\n *        <option[ngValue]=\"country\">{{country.name}}</option>\n *    }\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in IE, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($any($event.target).value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class SelectControlValueAccessor\n  extends BuiltInControlValueAccessor\n  implements ControlValueAccessor\n{\n  /** @docs-private */\n  value: any;\n\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n\n  /** @internal */\n  _idCounter: number = 0;\n\n  /**\n   * @description\n   * Tracks the option comparison algorithm for tracking identities when\n   * checking for changes.\n   */\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.COMPAREWITH_NOT_A_FN,\n        `compareWith must be a function, but received ${JSON.stringify(fn)}`,\n      );\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = Object.is;\n  // We need this because we might be in the process of destroying the root\n  // injector, which is marked as destroyed before running destroy hooks.\n  // Attempting to use afterNextRender with the node injector would evntually\n  // run into that already destroyed injector.\n  private readonly appRefInjector = inject(ApplicationRef).injector;\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private _queuedWrite = false;\n\n  /**\n   * This is needed to efficiently set the select value when adding/removing options. If\n   * writeValue is instead called for every added/removed option, this results in exponentially\n   * more _compareValue calls than the number of option elements (issue #41330).\n   *\n   * Secondly, calling writeValue when rendering individual option elements instead of after they\n   * are all rendered caused an issue in Safari and IE 11 where the first option element failed\n   * to be deselected when no option matched the select ngModel. This was because Angular would\n   * set the select element's value property before appending the option's child text node to the\n   * DOM (issue #14505).\n   *\n   * Finally, this approach is necessary to avoid an issue with delayed element removal when\n   * using the animations module (in all browsers). Otherwise when a selected option is removed\n   * (so no option matches the ngModel anymore), Angular would change the select element value\n   * before actually removing the option from the DOM. Then when the option is finally removed\n   * from the DOM, the browser would change the select value to that of the first option, even\n   * though it doesn't match the ngModel (issue #18430).\n   *\n   * @internal\n   */\n  _writeValueAfterRender(): void {\n    if (this._queuedWrite || this.appRefInjector.destroyed) {\n      return;\n    }\n\n    this._queuedWrite = true;\n\n    afterNextRender(\n      {\n        write: () => {\n          if (this.destroyRef.destroyed) {\n            return;\n          }\n          this._queuedWrite = false;\n          this.writeValue(this.value);\n        },\n      },\n      {injector: this.appRefInjector},\n    );\n  }\n\n  /**\n   * Sets the \"value\" property on the select element.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // TODO(atscott): This could likely be optimized more by only marking for check if the value is changed\n    // note that this needs to include both the internal value and the value in the DOM.\n    this.cdr.markForCheck();\n    this.value = value;\n    const id: string | null = this._getOptionId(value);\n    const valueString = _buildValueString(id, value);\n    this.setProperty('value', valueString);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @docs-private\n   */\n  override registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n\n  /** @internal */\n  _registerOption(): string {\n    return (this._idCounter++).toString();\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string | null {\n    for (const id of this._optionMap.keys()) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\n}\n\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: 'option',\n  standalone: false,\n})\nexport class NgSelectOption implements OnDestroy {\n  /**\n   * @description\n   * ID of the option element\n   */\n  id!: string;\n\n  constructor(\n    private _element: ElementRef,\n    private _renderer: Renderer2,\n    @Optional() @Host() private _select: SelectControlValueAccessor,\n  ) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n\n  /**\n   * @description\n   * Tracks the value bound to the option element. Unlike the value binding,\n   * ngValue supports binding to objects.\n   */\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select._writeValueAfterRender();\n  }\n\n  /**\n   * @description\n   * Tracks simple string values bound to the option element.\n   * For objects, use the `ngValue` input binding.\n   */\n  @Input('value')\n  set value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select._writeValueAfterRender();\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select._writeValueAfterRender();\n    }\n  }\n}\n"]}