{"version":3,"file":"abstract_form.directive.js","sourceRoot":"","sources":["abstract_form.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n  SimpleChanges,\n  computed,\n  signal,\n  untracked,\n} from '@angular/core';\n\nimport {FormGroup} from '../../model/form_group';\nimport {FormArray} from '../../model/form_array';\nimport {AbstractControl, FormResetEvent, FormSubmittedEvent} from '../../model/abstract_model';\nimport {FormControl, isFormControl} from '../../model/form_control';\nimport {ControlContainer} from '../control_container';\nimport type {Form} from '../form_interface';\nimport {missingFormException} from '../reactive_errors';\nimport {\n  CALL_SET_DISABLED_STATE,\n  cleanUpControl,\n  cleanUpFormContainer,\n  cleanUpValidators,\n  removeListItem,\n  SetDisabledStateOption,\n  setUpControl,\n  setUpFormContainer,\n  setUpValidators,\n  syncPendingControls,\n} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport type {FormControlName} from './form_control_name';\nimport type {FormArrayName, FormGroupName} from './form_group_name';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\n\n/**\n * @description\n *\n * Abstract class for top-level form directives (FormArrayDirective, FormGroupDirective) who bind an\n * existing `Form` to a DOM element.\n *\n * @publicApi\n */\n@Directive()\nexport abstract class AbstractFormDirective\n  extends ControlContainer\n  implements Form, OnChanges, OnDestroy\n{\n  /**\n   * @description\n   * Reports whether the form submission has been triggered.\n   */\n  get submitted() {\n    return untracked(this._submittedReactive);\n  }\n  // TODO(atscott): Remove once invalid API usage is cleaned up internally\n  private set submitted(value: boolean) {\n    this._submittedReactive.set(value);\n  }\n  /** @internal */\n  readonly _submitted = computed(() => this._submittedReactive());\n  private readonly _submittedReactive = signal(false);\n\n  /**\n   * Reference to an old form group input value, which is needed to cleanup\n   * old instance in case it was replaced with a new one.\n   */\n  private _oldForm: AbstractControl | undefined;\n\n  /**\n   * Callback that should be invoked when controls in FormGroup or FormArray collection change\n   * (added or removed). This callback triggers corresponding DOM updates.\n   */\n  private readonly _onCollectionChange = () => this._updateDomValue();\n\n  /**\n   * @description\n   * Tracks the list of added `FormControlName` instances\n   */\n  directives: FormControlName[] = [];\n\n  /**\n   * @description\n   * Tracks the form bound to this directive.\n   */\n  public abstract form: AbstractControl;\n\n  /**\n   * @description\n   * Emits an event when the form submission has been triggered.\n   */\n  abstract ngSubmit: EventEmitter<any>;\n\n  constructor(\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.onChanges(changes);\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    this.onDestroy();\n  }\n\n  /** @nodoc */\n  protected onChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n      this._oldForm = this.form;\n    }\n  }\n\n  /** @nodoc */\n  protected onDestroy() {\n    if (this.form) {\n      cleanUpValidators(this.form, this);\n\n      // Currently the `onCollectionChange` callback is rewritten each time the\n      // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n      // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n      // Otherwise it might cause overriding a callback of some other directive instances. We should\n      // consider updating this logic later to make it similar to how `onChange` callbacks are\n      // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n      if (this.form._onCollectionChange === this._onCollectionChange) {\n        this.form._registerOnCollectionChange(() => {});\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Returns this directive's instance.\n   */\n  override get formDirective(): Form {\n    return this;\n  }\n\n  /**\n   * @description\n   * Returns the Form bound to this directive.\n   */\n  abstract override get control(): AbstractControl;\n\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it always an empty array.\n   */\n  override get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  addControl(dir: FormControlName): FormControl {\n    const ctrl = this.form.get(dir.path) as FormControl;\n    setUpControl(ctrl, dir, this.callSetDisabledState);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  getControl(dir: FormControlName): FormControl {\n    return <FormControl>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Removes the `FormControlName` instance from the internal list of directives\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  removeControl(dir: FormControlName): void {\n    cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */ false);\n    removeListItem(this.directives, dir);\n  }\n\n  /**\n   * Adds a new `FormGroupName` directive instance to the form.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  addFormGroup(dir: FormGroupName): void {\n    this._setUpFormContainer(dir);\n  }\n\n  /**\n   * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n   * view.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  removeFormGroup(dir: FormGroupName): void {\n    this._cleanUpFormContainer(dir);\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  getFormGroup(dir: FormGroupName): FormGroup {\n    return <FormGroup>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  getFormArray(dir: FormArrayName): FormArray {\n    return <FormArray>this.form.get(dir.path);\n  }\n\n  /**\n   * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  addFormArray(dir: FormArrayName): void {\n    this._setUpFormContainer(dir);\n  }\n\n  /**\n   * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n   * view.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  removeFormArray(dir: FormArrayName): void {\n    this._cleanUpFormContainer(dir);\n  }\n\n  /**\n   * Sets the new value for the provided `FormControlName` directive.\n   *\n   * @param dir The `FormControlName` directive instance.\n   * @param value The new value for the directive's control.\n   */\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrl = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n  onReset(): void {\n    this.resetForm();\n  }\n\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n  resetForm(value: any = undefined, options: {onlySelf?: boolean; emitEvent?: boolean} = {}): void {\n    this.form.reset(value, options);\n    this._submittedReactive.set(false);\n  }\n\n  /**\n   * @description\n   * Method called with the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n  onSubmit($event: Event): boolean {\n    (this as {submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    this.form._events.next(new FormSubmittedEvent(this.control));\n\n    // Forms with `method=\"dialog\"` have some special behavior that won't reload the page and that\n    // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because\n    // some internal apps call this method directly with the wrong arguments.\n    return ($event?.target as HTMLFormElement | null)?.method === 'dialog';\n  }\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach((dir) => {\n      const oldCtrl = dir.control;\n      const newCtrl = this.form.get(dir.path);\n      if (oldCtrl !== newCtrl) {\n        // Note: the value of the `dir.control` may not be defined, for example when it's a first\n        // `FormControl` that is added to a `FormGroup`/`FormArray` instance (via `addControl` call).\n        cleanUpControl(oldCtrl || null, dir);\n\n        // Check whether new control at the same location inside the corresponding `FormGroup`/`FormArray` is an\n        // instance of `FormControl` and perform control setup only if that's the case.\n        // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n        // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n        // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n        if (isFormControl(newCtrl)) {\n          setUpControl(newCtrl, dir, this.callSetDisabledState);\n          (dir as {control: FormControl}).control = newCtrl;\n        }\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _setUpFormContainer(dir: FormArrayName | FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    // NOTE: this operation looks unnecessary in case no new validators were added in\n    // `setUpFormContainer` call. Consider updating this code to match the logic in\n    // `_cleanUpFormContainer` function.\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  private _cleanUpFormContainer(dir: FormArrayName | FormGroupName): void {\n    if (this.form) {\n      const ctrl: any = this.form.get(dir.path);\n      if (ctrl) {\n        const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n        if (isControlUpdated) {\n          // Run validity check only in case a control was updated (i.e. view validators were\n          // removed) as removing view validators might cause validity to change.\n          ctrl.updateValueAndValidity({emitEvent: false});\n        }\n      }\n    }\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(this._onCollectionChange);\n    if (this._oldForm) {\n      this._oldForm._registerOnCollectionChange(() => {});\n    }\n  }\n\n  private _updateValidators() {\n    setUpValidators(this.form, this);\n    if (this._oldForm) {\n      cleanUpValidators(this._oldForm, this);\n    }\n  }\n\n  private _checkFormPresent() {\n    if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw missingFormException();\n    }\n  }\n}\n"]}