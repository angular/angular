{"version":3,"file":"form_array_directive.js","sourceRoot":"","sources":["form_array_directive.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAW,MAAM,eAAe,CAAC;AAG3F,OAAO,EAAC,gBAAgB,EAAC,MAAM,sBAAsB,CAAC;AAEtD,OAAO,EAAC,qBAAqB,EAAC,MAAM,2BAA2B,CAAC;AAEhE,MAAM,qBAAqB,GAAa;IACtC,OAAO,EAAE,gBAAgB;IACzB,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC;CAClD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;GAqBG;AAQI,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,qBAAqB;IAAtD;;QACL;;;WAGG;QAC0B,SAAI,GAAc,IAAK,CAAC;QAErD;;;WAGG;QACgB,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;IASnD,CAAC;IAPC;;;OAGG;IACH,IAAa,OAAO;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF,CAAA;AAf8B;IAA5B,KAAK,CAAC,WAAW,CAAC;gDAAkC;AAMlC;IAAlB,MAAM,EAAE;oDAAwC;AAXtC,kBAAkB;IAP9B,SAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,SAAS,EAAE,CAAC,qBAAqB,CAAC;QAClC,IAAI,EAAE,EAAC,UAAU,EAAE,kBAAkB,EAAE,SAAS,EAAE,WAAW,EAAC;QAC9D,QAAQ,EAAE,QAAQ;QAClB,UAAU,EAAE,KAAK;KAClB,CAAC;GACW,kBAAkB,CAoB9B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, forwardRef, Input, Output, Provider} from '@angular/core';\n\nimport {FormArray} from '../../model/form_array';\nimport {ControlContainer} from '../control_container';\n\nimport {AbstractFormDirective} from './abstract_form.directive';\n\nconst formDirectiveProvider: Provider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayDirective),\n};\n\n/**\n * @description\n *\n * Binds an existing `FormArray` to a DOM element.\n *\n * This directive accepts an existing `FormArray` instance. It will then use this\n * `FormArray` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n * ### Register Form Array\n *\n * The following example registers a `FormArray` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formArray]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm',\n  standalone: false,\n})\nexport class FormArrayDirective extends AbstractFormDirective {\n  /**\n   * @description\n   * Tracks the `FormArray` bound to this directive.\n   */\n  @Input('formArray') override form: FormArray = null!;\n\n  /**\n   * @description\n   * Emits an event when the form submission has been triggered.\n   */\n  @Output() override ngSubmit = new EventEmitter();\n\n  /**\n   * @description\n   * Returns the `FormArray` bound to this directive.\n   */\n  override get control(): FormArray {\n    return this.form;\n  }\n}\n"]}