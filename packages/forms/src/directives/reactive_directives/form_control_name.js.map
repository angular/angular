{"version":3,"file":"form_control_name.js","sourceRoot":"","sources":["form_control_name.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Provider,\n  Self,\n  SimpleChanges,\n  SkipSelf,\n  ÉµWritable as Writable,\n} from '@angular/core';\n\nimport {FormControl} from '../../model/form_control';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {\n  controlParentException,\n  disabledAttrWarning,\n  ngModelGroupException,\n} from '../reactive_errors';\nimport {_ngModelWarning, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {NG_MODEL_WITH_FORM_CONTROL_WARNING} from './form_control_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\nimport {AbstractFormDirective} from './abstract_form.directive';\n\nconst controlNameBinding: Provider = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName),\n};\n\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formControlName]',\n  providers: [controlNameBinding],\n  standalone: false,\n})\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /**\n   * Internal reference to the view model value.\n   * @internal\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the `FormControl` instance bound to the directive.\n   */\n  override readonly control!: FormControl;\n\n  /**\n   * @description\n   * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form controls to be bound\n   * to indices when iterating over controls in a `FormArray`.\n   */\n  @Input('formControlName') override name: string | number | null = null;\n\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.warn(disabledAttrWarning);\n    }\n  }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * @description\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * @description\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlName instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n    @Optional()\n    @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING)\n    private _ngModelWarningConfig: string | null,\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      }\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n  override viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent!);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): any {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  private _setUpControl() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      checkParentType(this._parent, this.name);\n    }\n    (this as Writable<this>).control = this.formDirective.addControl(this);\n    this._added = true;\n  }\n}\n\nfunction checkParentType(parent: ControlContainer | null, name: string | number | null) {\n  if (!(parent instanceof FormGroupName) && parent instanceof AbstractFormGroupDirective) {\n    throw ngModelGroupException();\n  } else if (\n    !(parent instanceof FormGroupName) &&\n    !(parent instanceof AbstractFormDirective) &&\n    !(parent instanceof FormArrayName)\n  ) {\n    throw controlParentException(name);\n  }\n}\n"]}