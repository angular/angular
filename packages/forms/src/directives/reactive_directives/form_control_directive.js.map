{"version":3,"file":"form_control_directive.js","sourceRoot":"","sources":["form_control_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Provider,\n  Self,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {FormControl} from '../../model/form_control';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {disabledAttrWarning} from '../reactive_errors';\nimport {\n  _ngModelWarning,\n  CALL_SET_DISABLED_STATE,\n  cleanUpControl,\n  isPropertyUpdated,\n  selectValueAccessor,\n  SetDisabledStateOption,\n  setUpControl,\n} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken(\n  typeof ngDevMode !== undefined && ngDevMode ? 'NgModelWithFormControlWarning' : '',\n);\n\nconst formControlBinding: Provider = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective),\n};\n\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formControl]',\n  providers: [formControlBinding],\n  exportAs: 'ngForm',\n  standalone: false,\n})\nexport class FormControlDirective extends NgControl implements OnChanges, OnDestroy {\n  /**\n   * Internal reference to the view model value.\n   * @docs-private\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the `FormControl` instance bound to the directive.\n   */\n  @Input('formControl') form!: FormControl;\n\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.warn(disabledAttrWarning);\n    }\n  }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * @description\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlDirective. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * @description\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n    @Optional()\n    @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING)\n    private _ngModelWarningConfig: string | null,\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._isControlChanged(changes)) {\n      const previousForm = changes['form'].previousValue;\n      if (previousForm) {\n        cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */ false);\n      }\n      setUpControl(this.form, this, this.callSetDisabledState);\n      this.form.updateValueAndValidity({emitEvent: false});\n    }\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n      }\n      this.form.setValue(this.model);\n      this.viewModel = this.model;\n    }\n  }\n\n  /** @docs-private */\n  ngOnDestroy() {\n    if (this.form) {\n      cleanUpControl(this.form, this, /* validateControlPresenceOnChange */ false);\n    }\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * The `FormControl` bound to this directive.\n   */\n  override get control(): FormControl {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n  override viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  private _isControlChanged(changes: {[key: string]: any}): boolean {\n    return changes.hasOwnProperty('form');\n  }\n}\n"]}