{"version":3,"file":"form_group_name.js","sourceRoot":"","sources":["form_group_name.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Provider,\n  Self,\n  SkipSelf,\n} from '@angular/core';\n\nimport {FormArray} from '../../model/form_array';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {arrayParentException, groupParentException} from '../reactive_errors';\nimport {controlPath} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {AbstractFormDirective} from './abstract_form.directive';\n\nconst formGroupNameProvider: Provider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName),\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and\n * looks for a `FormGroup` or `FormRecord` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the `AbstractControl.get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the `AbstractControl.get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formGroupName]',\n  providers: [formGroupNameProvider],\n  standalone: false,\n})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  /**\n   * @description\n   * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form groups to be bound\n   * to indices when iterating over groups in a `FormArray`.\n   */\n  @Input('formGroupName') override name: string | number | null = null;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @internal */\n  override _checkParentType(): void {\n    if (hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName),\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective`/`FormGroupArray` (selector:\n * `[formGroup]`/`[formArray]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup`/`FormArray` instance you passed into `FormGroupDirective`/`FormGroupArray`.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formArrayName]',\n  providers: [formArrayNameProvider],\n  standalone: false,\n})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /**\n   * @description\n   * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form arrays to be bound\n   * to indices when iterating over arrays in a `FormArray`.\n   */\n  @Input('formArrayName') override name: string | number | null = null;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /**\n   * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n   * @throws If the directive does not have a valid parent.\n   * @docs-private\n   */\n  ngOnInit(): void {\n    if (hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw arrayParentException();\n    }\n    this.formDirective!.addFormArray(this);\n  }\n\n  /**\n   * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n   * @docs-private\n   */\n  ngOnDestroy(): void {\n    this.formDirective?.removeFormArray(this);\n  }\n\n  /**\n   * @description\n   * The `FormArray` bound to this directive.\n   */\n  override get control(): FormArray {\n    return this.formDirective!.getFormArray(this);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  override get formDirective(): AbstractFormDirective | null {\n    return this._parent ? <AbstractFormDirective>this._parent.formDirective : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n}\n\nfunction hasInvalidParent(parent: ControlContainer): boolean {\n  return (\n    !(parent instanceof FormGroupName) &&\n    !(parent instanceof AbstractFormDirective) &&\n    !(parent instanceof FormArrayName)\n  );\n}\n"]}