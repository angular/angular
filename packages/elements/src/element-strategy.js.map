{"version":3,"file":"element-strategy.js","sourceRoot":"","sources":["element-strategy.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {Injector} from '@angular/core';\nimport {Observable} from 'rxjs';\n\n/**\n * Interface for the events emitted through the NgElementStrategy.\n *\n * @publicApi\n */\nexport interface NgElementStrategyEvent {\n  name: string;\n  value: any;\n}\n\n/**\n * Underlying strategy used by the NgElement to create/destroy the component and react to input\n * changes.\n *\n * @publicApi\n */\nexport interface NgElementStrategy {\n  events: Observable<NgElementStrategyEvent>;\n\n  connect(element: HTMLElement): void;\n  disconnect(): void;\n  getInputValue(propName: string): any;\n  setInputValue(propName: string, value: string, transform?: (value: any) => any): void;\n}\n\n/**\n * Factory used to create new strategies for each NgElement instance.\n *\n * @publicApi\n */\nexport interface NgElementStrategyFactory {\n  /** Creates a new instance to be used for an NgElement. */\n  create(injector: Injector): NgElementStrategy;\n}\n"]}