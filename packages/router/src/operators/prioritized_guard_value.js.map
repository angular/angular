{"version":3,"file":"prioritized_guard_value.js","sourceRoot":"","sources":["prioritized_guard_value.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,aAAa,EAA+B,MAAM,MAAM,CAAC;AACjE,OAAO,EAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAC,MAAM,gBAAgB,CAAC;AAEvE,OAAO,EAAc,eAAe,EAAC,MAAM,WAAW,CAAC;AACvD,OAAO,EAAC,SAAS,EAAU,MAAM,aAAa,CAAC;AAE/C,MAAM,aAAa,GAAG,eAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;AAG9D,MAAM,UAAU,qBAAqB;IACnC,OAAO,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;QACvB,OAAO,aAAa,CAClB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,aAA+B,CAAC,CAAC,CAAC,CAC5E,CAAC,IAAI,CACJ,GAAG,CAAC,CAAC,OAAyB,EAAE,EAAE;YAChC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC7B,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;oBACpB,wCAAwC;oBACxC,SAAS;gBACX,CAAC;qBAAM,IAAI,MAAM,KAAK,aAAa,EAAE,CAAC;oBACpC,yDAAyD;oBACzD,OAAO,aAAa,CAAC;gBACvB,CAAC;qBAAM,IAAI,MAAM,KAAK,KAAK,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;oBAClD,uDAAuD;oBACvD,iGAAiG;oBACjG,WAAW;oBACX,OAAO,MAAM,CAAC;gBAChB,CAAC;YACH,CAAC;YACD,4CAA4C;YAC5C,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,MAAM,CAAC,CAAC,IAAI,EAAuB,EAAE,CAAC,IAAI,KAAK,aAAa,CAAC,EAC7D,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,UAAU,CAAC,GAAmB;IACrC,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,YAAY,eAAe,CAAC;AAC1D,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {combineLatest, Observable, OperatorFunction} from 'rxjs';\nimport {filter, map, startWith, switchMap, take} from 'rxjs/operators';\n\nimport {GuardResult, RedirectCommand} from '../models';\nimport {isUrlTree, UrlTree} from '../url_tree';\n\nconst INITIAL_VALUE = /* @__PURE__ */ Symbol('INITIAL_VALUE');\ndeclare type INTERIM_VALUES = typeof INITIAL_VALUE | GuardResult;\n\nexport function prioritizedGuardValue(): OperatorFunction<Observable<GuardResult>[], GuardResult> {\n  return switchMap((obs) => {\n    return combineLatest(\n      obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE as INTERIM_VALUES))),\n    ).pipe(\n      map((results: INTERIM_VALUES[]) => {\n        for (const result of results) {\n          if (result === true) {\n            // If result is true, check the next one\n            continue;\n          } else if (result === INITIAL_VALUE) {\n            // If guard has not finished, we need to stop processing.\n            return INITIAL_VALUE;\n          } else if (result === false || isRedirect(result)) {\n            // Result finished and was not true. Return the result.\n            // Note that we only allow false/UrlTree/RedirectCommand. Other values are considered invalid and\n            // ignored.\n            return result;\n          }\n        }\n        // Everything resolved to true. Return true.\n        return true;\n      }),\n      filter((item): item is GuardResult => item !== INITIAL_VALUE),\n      take(1),\n    );\n  });\n}\n\nfunction isRedirect(val: INTERIM_VALUES): val is UrlTree | RedirectCommand {\n  return isUrlTree(val) || val instanceof RedirectCommand;\n}\n"]}