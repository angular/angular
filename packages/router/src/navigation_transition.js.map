{"version":3,"file":"navigation_transition.js","sourceRoot":"","sources":["navigation_transition.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location} from '@angular/common';\nimport {\n  DestroyRef,\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectionToken,\n  runInInjectionContext,\n  signal,\n  Type,\n  untracked,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, EMPTY, from, Observable, of, Subject} from 'rxjs';\nimport {\n  catchError,\n  defaultIfEmpty,\n  filter,\n  finalize,\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\n\nimport {createRouterState} from './create_router_state';\nimport {INPUT_BINDER} from './directives/router_outlet';\nimport {\n  BeforeActivateRoutes,\n  Event,\n  GuardsCheckEnd,\n  GuardsCheckStart,\n  IMPERATIVE_NAVIGATION,\n  NavigationCancel,\n  NavigationCancellationCode,\n  NavigationEnd,\n  NavigationError,\n  NavigationSkipped,\n  NavigationSkippedCode,\n  NavigationStart,\n  NavigationTrigger,\n  RedirectRequest,\n  ResolveEnd,\n  ResolveStart,\n  RouteConfigLoadEnd,\n  RouteConfigLoadStart,\n  RoutesRecognized,\n} from './events';\nimport {\n  GuardResult,\n  NavigationBehaviorOptions,\n  QueryParamsHandling,\n  RedirectCommand,\n  Route,\n  Routes,\n} from './models';\nimport {\n  isNavigationCancelingError,\n  isRedirectingNavigationCancelingError,\n  redirectingNavigationError,\n} from './navigation_canceling_error';\nimport {activateRoutes} from './operators/activate_routes';\nimport {checkGuards} from './operators/check_guards';\nimport {recognize} from './operators/recognize';\nimport {resolveData} from './operators/resolve_data';\nimport {switchTap} from './operators/switch_tap';\nimport {TitleStrategy} from './page_title_strategy';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ROUTER_CONFIGURATION} from './router_config';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n  createEmptyState,\n  RouterState,\n  RouterStateSnapshot,\n} from './router_state';\nimport type {Params} from './shared';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree} from './url_tree';\nimport {Checks, getAllRouteGuards} from './utils/preactivation';\nimport {CREATE_VIEW_TRANSITION} from './utils/view_transition';\nimport {getClosestRouteInjector} from './utils/config';\nimport {abortSignalToObservable} from './utils/abort_signal_to_observable';\n\n/**\n * @description\n *\n * Options that modify the `Router` URL.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed.\n *\n * @see {@link Router#navigate}\n * @see {@link Router#createUrlTree}\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n *\n * @publicApi\n */\nexport interface UrlCreationOptions {\n  /**\n   * Specifies a root URI to use for relative navigation.\n   *\n   * For example, consider the following route configuration where the parent route\n   * has two children.\n   *\n   * ```\n   * [{\n   *   path: 'parent',\n   *   component: ParentComponent,\n   *   children: [{\n   *     path: 'list',\n   *     component: ListComponent\n   *   },{\n   *     path: 'child',\n   *     component: ChildComponent\n   *   }]\n   * }]\n   * ```\n   *\n   * The following `go()` function navigates to the `list` route by\n   * interpreting the destination URI as relative to the activated `child`  route\n   *\n   * ```ts\n   *  @Component({...})\n   *  class ChildComponent {\n   *    constructor(private router: Router, private route: ActivatedRoute) {}\n   *\n   *    go() {\n   *      router.navigate(['../list'], { relativeTo: this.route });\n   *    }\n   *  }\n   * ```\n   *\n   * A value of `null` or `undefined` indicates that the navigation commands should be applied\n   * relative to the root.\n   */\n  relativeTo?: ActivatedRoute | null;\n\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   */\n  queryParams?: Params | null;\n\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   */\n  fragment?: string;\n\n  /**\n   * How to handle query parameters in the router link for the next navigation.\n   * One of:\n   * * `preserve` : Preserve current parameters.\n   * * `merge` : Merge new with current parameters.\n   *\n   * The \"preserve\" option discards any new query params:\n   * ```\n   * // from /view1?page=1 to/view2?page=1\n   * router.navigate(['/view2'], { queryParams: { page: 2 },  queryParamsHandling: \"preserve\"\n   * });\n   * ```\n   * The \"merge\" option appends new query params to the params from the current URL:\n   * ```\n   * // from /view1?page=1 to/view2?page=1&otherKey=2\n   * router.navigate(['/view2'], { queryParams: { otherKey: 2 },  queryParamsHandling: \"merge\"\n   * });\n   * ```\n   * In case of a key collision between current parameters and those in the `queryParams` object,\n   * the new value is used.\n   *\n   */\n  queryParamsHandling?: QueryParamsHandling | null;\n\n  /**\n   * When true, preserves the URL fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   */\n  preserveFragment?: boolean;\n}\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed or interpreted.\n *\n * @see {@link Router#navigate}\n * @see {@link Router#navigateByUrl}\n * @see {@link Router#createurltree}\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n * @see {@link UrlCreationOptions}\n * @see {@link NavigationBehaviorOptions}\n *\n * @publicApi\n */\nexport interface NavigationExtras extends UrlCreationOptions, NavigationBehaviorOptions {}\n\nexport type RestoredState = {\n  [k: string]: any;\n  // TODO(#27607): Remove `navigationId` and `ɵrouterPageId` and move to `ng` or `ɵ` namespace.\n  navigationId: number;\n  // The `ɵ` prefix is there to reduce the chance of colliding with any existing user properties on\n  // the history state.\n  ɵrouterPageId?: number;\n};\n\n/**\n * Information about a navigation operation.\n * Retrieve the most recent navigation object with the\n * [Router.getCurrentNavigation() method](api/router/Router#getcurrentnavigation) .\n *\n * * *id* : The unique identifier of the current navigation.\n * * *initialUrl* : The target URL passed into the `Router#navigateByUrl()` call before navigation.\n * This is the value before the router has parsed or applied redirects to it.\n * * *extractedUrl* : The initial target URL after being parsed with `UrlSerializer.extract()`.\n * * *finalUrl* : The extracted URL after redirects have been applied.\n * This URL may not be available immediately, therefore this property can be `undefined`.\n * It is guaranteed to be set after the `RoutesRecognized` event fires.\n * * *trigger* : Identifies how this navigation was triggered.\n * -- 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n * -- 'popstate'--Triggered by a popstate event.\n * -- 'hashchange'--Triggered by a hashchange event.\n * * *extras* : A `NavigationExtras` options object that controlled the strategy used for this\n * navigation.\n * * *previousNavigation* : The previously successful `Navigation` object. Only one previous\n * navigation is available, therefore this previous `Navigation` object has a `null` value for its\n * own `previousNavigation`.\n *\n * @publicApi\n */\nexport interface Navigation {\n  /**\n   * The unique identifier of the current navigation.\n   */\n  id: number;\n  /**\n   * The target URL passed into the `Router#navigateByUrl()` call before navigation. This is\n   * the value before the router has parsed or applied redirects to it.\n   */\n  initialUrl: UrlTree;\n  /**\n   * The initial target URL after being parsed with `UrlHandlingStrategy.extract()`.\n   */\n  extractedUrl: UrlTree;\n  /**\n   * The extracted URL after redirects have been applied.\n   * This URL may not be available immediately, therefore this property can be `undefined`.\n   * It is guaranteed to be set after the `RoutesRecognized` event fires.\n   */\n  finalUrl?: UrlTree;\n  /**\n   * `UrlTree` to use when updating the browser URL for the navigation when `extras.browserUrl` is\n   * defined.\n   * @internal\n   */\n  readonly targetBrowserUrl?: UrlTree | string;\n  /**\n   * TODO(atscott): If we want to make StateManager public, they will need access to this. Note that\n   * it's already eventually exposed through router.routerState.\n   * @internal\n   */\n  targetRouterState?: RouterState;\n  /**\n   * Identifies how this navigation was triggered.\n   */\n  trigger: NavigationTrigger;\n  /**\n   * Options that controlled the strategy used for this navigation.\n   * See `NavigationExtras`.\n   */\n  extras: NavigationExtras;\n  /**\n   * The previously successful `Navigation` object. Only one previous navigation\n   * is available, therefore this previous `Navigation` object has a `null` value\n   * for its own `previousNavigation`.\n   */\n  previousNavigation: Navigation | null;\n\n  /**\n   * Aborts the navigation if it has not yet been completed or reached the point where routes are being activated.\n   * This function is a no-op if the navigation is beyond the point where it can be aborted.\n   */\n  readonly abort: () => void;\n}\n\nexport interface NavigationTransition {\n  id: number;\n  currentUrlTree: UrlTree;\n  extractedUrl: UrlTree;\n  currentRawUrl: UrlTree;\n  urlAfterRedirects?: UrlTree;\n  rawUrl: UrlTree;\n  extras: NavigationExtras;\n  resolve: (value: boolean | PromiseLike<boolean>) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<boolean>;\n  source: NavigationTrigger;\n  restoredState: RestoredState | null;\n  currentSnapshot: RouterStateSnapshot;\n  targetSnapshot: RouterStateSnapshot | null;\n  currentRouterState: RouterState;\n  targetRouterState: RouterState | null;\n  guards: Checks;\n  guardsResult: GuardResult | null;\n  abortController: AbortController;\n}\n\n/**\n * The interface from the Router needed by the transitions. Used to avoid a circular dependency on\n * Router. This interface should be whittled down with future refactors. For example, we do not need\n * to get `UrlSerializer` from the Router. We can instead inject it in `NavigationTransitions`\n * directly.\n */\ninterface InternalRouterInterface {\n  config: Routes;\n  navigated: boolean;\n  routeReuseStrategy: RouteReuseStrategy;\n  onSameUrlNavigation: 'reload' | 'ignore';\n}\n\nexport const NAVIGATION_ERROR_HANDLER = new InjectionToken<\n  (error: NavigationError) => unknown | RedirectCommand\n>(typeof ngDevMode === 'undefined' || ngDevMode ? 'navigation error handler' : '');\n\n@Injectable({providedIn: 'root'})\nexport class NavigationTransitions {\n  // Some G3 targets expect the navigation object to be mutated (and not getting a new reference on changes).\n  currentNavigation = signal<Navigation | null>(null, {equal: () => false});\n\n  currentTransition: NavigationTransition | null = null;\n  lastSuccessfulNavigation = signal<Navigation | null>(null);\n  /**\n   * These events are used to communicate back to the Router about the state of the transition. The\n   * Router wants to respond to these events in various ways. Because the `NavigationTransition`\n   * class is not public, this event subject is not publicly exposed.\n   */\n  readonly events = new Subject<Event | BeforeActivateRoutes | RedirectRequest>();\n  /**\n   * Used to abort the current transition with an error.\n   */\n  readonly transitionAbortWithErrorSubject = new Subject<Error>();\n  private readonly configLoader = inject(RouterConfigLoader);\n  private readonly environmentInjector = inject(EnvironmentInjector);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly urlSerializer = inject(UrlSerializer);\n  private readonly rootContexts = inject(ChildrenOutletContexts);\n  private readonly location = inject(Location);\n  private readonly inputBindingEnabled = inject(INPUT_BINDER, {optional: true}) !== null;\n  private readonly titleStrategy?: TitleStrategy = inject(TitleStrategy);\n  private readonly options = inject(ROUTER_CONFIGURATION, {optional: true}) || {};\n  private readonly paramsInheritanceStrategy =\n    this.options.paramsInheritanceStrategy || 'emptyOnly';\n  private readonly urlHandlingStrategy = inject(UrlHandlingStrategy);\n  private readonly createViewTransition = inject(CREATE_VIEW_TRANSITION, {optional: true});\n  private readonly navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, {optional: true});\n\n  navigationId = 0;\n  get hasRequestedNavigation() {\n    return this.navigationId !== 0;\n  }\n  private transitions?: BehaviorSubject<NavigationTransition | null>;\n  /**\n   * Hook that enables you to pause navigation after the preactivation phase.\n   * Used by `RouterModule`.\n   *\n   * @internal\n   */\n  afterPreactivation: () => Observable<void> = () => of(void 0);\n  /** @internal */\n  rootComponentType: Type<any> | null = null;\n\n  private destroyed = false;\n\n  constructor() {\n    const onLoadStart = (r: Route) => this.events.next(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.events.next(new RouteConfigLoadEnd(r));\n    this.configLoader.onLoadEndListener = onLoadEnd;\n    this.configLoader.onLoadStartListener = onLoadStart;\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n    });\n  }\n\n  complete() {\n    this.transitions?.complete();\n  }\n\n  handleNavigationRequest(\n    request: Pick<\n      NavigationTransition,\n      | 'source'\n      | 'restoredState'\n      | 'currentUrlTree'\n      | 'currentRawUrl'\n      | 'rawUrl'\n      | 'extras'\n      | 'resolve'\n      | 'reject'\n      | 'promise'\n      | 'currentSnapshot'\n      | 'currentRouterState'\n    >,\n  ) {\n    const id = ++this.navigationId;\n\n    // Navigation can happen as a side effect of template execution, as such we need to untrack signal updates\n    // (Writing to signals is not allowed while Angular renders the template)\n    // TODO: We might want to reconsider allowing navigation as side effect of template execution.\n    untracked(() => {\n      this.transitions?.next({\n        ...request,\n        extractedUrl: this.urlHandlingStrategy.extract(request.rawUrl),\n        targetSnapshot: null,\n        targetRouterState: null,\n        guards: {canActivateChecks: [], canDeactivateChecks: []},\n        guardsResult: null,\n        abortController: new AbortController(),\n        id,\n      });\n    });\n  }\n\n  setupNavigations(router: InternalRouterInterface): Observable<NavigationTransition> {\n    this.transitions = new BehaviorSubject<NavigationTransition | null>(null);\n    return this.transitions.pipe(\n      filter((t): t is NavigationTransition => t !== null),\n\n      // Using switchMap so we cancel executing navigations when a new one comes in\n      switchMap((overallTransitionState) => {\n        let completedOrAborted = false;\n        return of(overallTransitionState).pipe(\n          switchMap((t) => {\n            // It is possible that `switchMap` fails to cancel previous navigations if a new one happens synchronously while the operator\n            // is processing the `next` notification of that previous navigation. This can happen when a new navigation (say 2) cancels a\n            // previous one (1) and yet another navigation (3) happens synchronously in response to the `NavigationCancel` event for (1).\n            // https://github.com/ReactiveX/rxjs/issues/7455\n            if (this.navigationId > overallTransitionState.id) {\n              const cancellationReason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}`\n                  : '';\n              this.cancelNavigationTransition(\n                overallTransitionState,\n                cancellationReason,\n                NavigationCancellationCode.SupersededByNewNavigation,\n              );\n              return EMPTY;\n            }\n            this.currentTransition = overallTransitionState;\n            const lastSuccessfulNavigation = this.lastSuccessfulNavigation();\n            // Store the Navigation object\n            this.currentNavigation.set({\n              id: t.id,\n              initialUrl: t.rawUrl,\n              extractedUrl: t.extractedUrl,\n              targetBrowserUrl:\n                typeof t.extras.browserUrl === 'string'\n                  ? this.urlSerializer.parse(t.extras.browserUrl)\n                  : t.extras.browserUrl,\n              trigger: t.source,\n              extras: t.extras,\n              previousNavigation: !lastSuccessfulNavigation\n                ? null\n                : {\n                    ...lastSuccessfulNavigation,\n                    previousNavigation: null,\n                  },\n              abort: () => t.abortController.abort(),\n            });\n            const urlTransition =\n              !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();\n\n            const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;\n            if (!urlTransition && onSameUrlNavigation !== 'reload') {\n              const reason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.`\n                  : '';\n              this.events.next(\n                new NavigationSkipped(\n                  t.id,\n                  this.urlSerializer.serialize(t.rawUrl),\n                  reason,\n                  NavigationSkippedCode.IgnoredSameUrlNavigation,\n                ),\n              );\n              t.resolve(false);\n              return EMPTY;\n            }\n\n            if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {\n              return of(t).pipe(\n                // Fire NavigationStart event\n                switchMap((t) => {\n                  this.events.next(\n                    new NavigationStart(\n                      t.id,\n                      this.urlSerializer.serialize(t.extractedUrl),\n                      t.source,\n                      t.restoredState,\n                    ),\n                  );\n                  if (t.id !== this.navigationId) {\n                    return EMPTY;\n                  }\n\n                  // This delay is required to match old behavior that forced\n                  // navigation to always be async\n                  return Promise.resolve(t);\n                }),\n\n                // Recognize\n                recognize(\n                  this.environmentInjector,\n                  this.configLoader,\n                  this.rootComponentType,\n                  router.config,\n                  this.urlSerializer,\n                  this.paramsInheritanceStrategy,\n                  overallTransitionState.abortController.signal,\n                ),\n\n                // Update URL if in `eager` update mode\n                tap((t) => {\n                  overallTransitionState.targetSnapshot = t.targetSnapshot;\n                  overallTransitionState.urlAfterRedirects = t.urlAfterRedirects;\n                  this.currentNavigation.update((nav) => {\n                    nav!.finalUrl = t.urlAfterRedirects;\n                    return nav;\n                  });\n\n                  // Fire RoutesRecognized\n                  const routesRecognized = new RoutesRecognized(\n                    t.id,\n                    this.urlSerializer.serialize(t.extractedUrl),\n                    this.urlSerializer.serialize(t.urlAfterRedirects!),\n                    t.targetSnapshot!,\n                  );\n                  this.events.next(routesRecognized);\n                }),\n              );\n            } else if (\n              urlTransition &&\n              this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)\n            ) {\n              /* When the current URL shouldn't be processed, but the previous one\n               * was, we handle this \"error condition\" by navigating to the\n               * previously successful URL, but leaving the URL intact.*/\n              const {id, extractedUrl, source, restoredState, extras} = t;\n              const navStart = new NavigationStart(\n                id,\n                this.urlSerializer.serialize(extractedUrl),\n                source,\n                restoredState,\n              );\n              this.events.next(navStart);\n              const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;\n\n              this.currentTransition = overallTransitionState = {\n                ...t,\n                targetSnapshot,\n                urlAfterRedirects: extractedUrl,\n                extras: {...extras, skipLocationChange: false, replaceUrl: false},\n              };\n              this.currentNavigation.update((nav) => {\n                nav!.finalUrl = extractedUrl;\n                return nav;\n              });\n              return of(overallTransitionState);\n            } else {\n              /* When neither the current or previous URL can be processed, do\n               * nothing other than update router's internal reference to the\n               * current \"settled\" URL. This way the next navigation will be coming\n               * from the current URL in the browser.\n               */\n              const reason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation was ignored because the UrlHandlingStrategy` +\n                    ` indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.`\n                  : '';\n              this.events.next(\n                new NavigationSkipped(\n                  t.id,\n                  this.urlSerializer.serialize(t.extractedUrl),\n                  reason,\n                  NavigationSkippedCode.IgnoredByUrlHandlingStrategy,\n                ),\n              );\n              t.resolve(false);\n              return EMPTY;\n            }\n          }),\n\n          // --- GUARDS ---\n          tap((t) => {\n            const guardsStart = new GuardsCheckStart(\n              t.id,\n              this.urlSerializer.serialize(t.extractedUrl),\n              this.urlSerializer.serialize(t.urlAfterRedirects!),\n              t.targetSnapshot!,\n            );\n            this.events.next(guardsStart);\n          }),\n\n          map((t) => {\n            this.currentTransition = overallTransitionState = {\n              ...t,\n              guards: getAllRouteGuards(t.targetSnapshot!, t.currentSnapshot, this.rootContexts),\n            };\n            return overallTransitionState;\n          }),\n\n          checkGuards(this.environmentInjector, (evt: Event) => this.events.next(evt)),\n          tap((t) => {\n            overallTransitionState.guardsResult = t.guardsResult;\n            if (t.guardsResult && typeof t.guardsResult !== 'boolean') {\n              throw redirectingNavigationError(this.urlSerializer, t.guardsResult);\n            }\n\n            const guardsEnd = new GuardsCheckEnd(\n              t.id,\n              this.urlSerializer.serialize(t.extractedUrl),\n              this.urlSerializer.serialize(t.urlAfterRedirects!),\n              t.targetSnapshot!,\n              !!t.guardsResult,\n            );\n            this.events.next(guardsEnd);\n          }),\n\n          filter((t) => {\n            if (!t.guardsResult) {\n              this.cancelNavigationTransition(t, '', NavigationCancellationCode.GuardRejected);\n              return false;\n            }\n            return true;\n          }),\n\n          // --- RESOLVE ---\n          switchTap((t) => {\n            if (t.guards.canActivateChecks.length === 0) {\n              return undefined;\n            }\n\n            return of(t).pipe(\n              tap((t) => {\n                const resolveStart = new ResolveStart(\n                  t.id,\n                  this.urlSerializer.serialize(t.extractedUrl),\n                  this.urlSerializer.serialize(t.urlAfterRedirects!),\n                  t.targetSnapshot!,\n                );\n                this.events.next(resolveStart);\n              }),\n              switchMap((t) => {\n                let dataResolved = false;\n                return of(t).pipe(\n                  resolveData(this.paramsInheritanceStrategy, this.environmentInjector),\n                  tap({\n                    next: () => (dataResolved = true),\n                    complete: () => {\n                      if (!dataResolved) {\n                        this.cancelNavigationTransition(\n                          t,\n                          typeof ngDevMode === 'undefined' || ngDevMode\n                            ? `At least one route resolver didn't emit any value.`\n                            : '',\n                          NavigationCancellationCode.NoDataFromResolver,\n                        );\n                      }\n                    },\n                  }),\n                );\n              }),\n              tap((t) => {\n                const resolveEnd = new ResolveEnd(\n                  t.id,\n                  this.urlSerializer.serialize(t.extractedUrl),\n                  this.urlSerializer.serialize(t.urlAfterRedirects!),\n                  t.targetSnapshot!,\n                );\n                this.events.next(resolveEnd);\n              }),\n            );\n          }),\n\n          // --- LOAD COMPONENTS ---\n          switchTap((t: NavigationTransition) => {\n            const loadComponents = (route: ActivatedRouteSnapshot): Array<Observable<void>> => {\n              const loaders: Array<Observable<void>> = [];\n              if (route.routeConfig?.loadComponent) {\n                const injector = getClosestRouteInjector(route) ?? this.environmentInjector;\n                loaders.push(\n                  this.configLoader.loadComponent(injector, route.routeConfig).pipe(\n                    tap((loadedComponent) => {\n                      route.component = loadedComponent;\n                    }),\n                    map(() => void 0),\n                  ),\n                );\n              }\n              for (const child of route.children) {\n                loaders.push(...loadComponents(child));\n              }\n              return loaders;\n            };\n            return combineLatest(loadComponents(t.targetSnapshot!.root)).pipe(\n              defaultIfEmpty(null),\n              take(1),\n            );\n          }),\n\n          switchTap(() => this.afterPreactivation()),\n\n          switchMap(() => {\n            const {currentSnapshot, targetSnapshot} = overallTransitionState;\n            const viewTransitionStarted = this.createViewTransition?.(\n              this.environmentInjector,\n              currentSnapshot.root,\n              targetSnapshot!.root,\n            );\n\n            // If view transitions are enabled, block the navigation until the view\n            // transition callback starts. Otherwise, continue immediately.\n            return viewTransitionStarted\n              ? from(viewTransitionStarted).pipe(map(() => overallTransitionState))\n              : of(overallTransitionState);\n          }),\n\n          map((t: NavigationTransition) => {\n            const targetRouterState = createRouterState(\n              router.routeReuseStrategy,\n              t.targetSnapshot!,\n              t.currentRouterState,\n            );\n            this.currentTransition = overallTransitionState = {...t, targetRouterState};\n            this.currentNavigation.update((nav) => {\n              nav!.targetRouterState = targetRouterState;\n              return nav;\n            });\n            return overallTransitionState;\n          }),\n\n          tap(() => {\n            this.events.next(new BeforeActivateRoutes());\n          }),\n\n          activateRoutes(\n            this.rootContexts,\n            router.routeReuseStrategy,\n            (evt: Event) => this.events.next(evt),\n            this.inputBindingEnabled,\n          ),\n\n          // Ensure that if some observable used to drive the transition doesn't\n          // complete, the navigation still finalizes This should never happen, but\n          // this is done as a safety measure to avoid surfacing this error (#49567).\n          take(1),\n\n          takeUntil(\n            abortSignalToObservable(overallTransitionState.abortController.signal).pipe(\n              // Ignore aborts if we are already completed, canceled, or are in the activation stage (we have targetRouterState)\n              filter(() => !completedOrAborted && !overallTransitionState.targetRouterState),\n              tap(() => {\n                this.cancelNavigationTransition(\n                  overallTransitionState,\n                  overallTransitionState.abortController.signal.reason + '',\n                  NavigationCancellationCode.Aborted,\n                );\n              }),\n            ),\n          ),\n\n          tap({\n            next: (t: NavigationTransition) => {\n              completedOrAborted = true;\n              this.lastSuccessfulNavigation.set(untracked(this.currentNavigation));\n              this.events.next(\n                new NavigationEnd(\n                  t.id,\n                  this.urlSerializer.serialize(t.extractedUrl),\n                  this.urlSerializer.serialize(t.urlAfterRedirects!),\n                ),\n              );\n              this.titleStrategy?.updateTitle(t.targetRouterState!.snapshot);\n              t.resolve(true);\n            },\n            complete: () => {\n              completedOrAborted = true;\n            },\n          }),\n\n          // There used to be a lot more logic happening directly within the\n          // transition Observable. Some of this logic has been refactored out to\n          // other places but there may still be errors that happen there. This gives\n          // us a way to cancel the transition from the outside. This may also be\n          // required in the future to support something like the abort signal of the\n          // Navigation API where the navigation gets aborted from outside the\n          // transition.\n          takeUntil(\n            this.transitionAbortWithErrorSubject.pipe(\n              tap((err) => {\n                throw err;\n              }),\n            ),\n          ),\n\n          finalize(() => {\n            overallTransitionState.abortController.abort();\n            /* When the navigation stream finishes either through error or success,\n             * we set the `completed` or `errored` flag. However, there are some\n             * situations where we could get here without either of those being set.\n             * For instance, a redirect during NavigationStart. Therefore, this is a\n             * catch-all to make sure the NavigationCancel event is fired when a\n             * navigation gets cancelled but not caught by other means. */\n            if (!completedOrAborted) {\n              const cancelationReason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}`\n                  : '';\n              this.cancelNavigationTransition(\n                overallTransitionState,\n                cancelationReason,\n                NavigationCancellationCode.SupersededByNewNavigation,\n              );\n            }\n            // Only clear current navigation if it is still set to the one that\n            // finalized.\n            if (this.currentTransition?.id === overallTransitionState.id) {\n              this.currentNavigation.set(null);\n              this.currentTransition = null;\n            }\n          }),\n          catchError((e) => {\n            // If the application is already destroyed, the catch block should not\n            // execute anything in practice because other resources have already\n            // been released and destroyed.\n            if (this.destroyed) {\n              overallTransitionState.resolve(false);\n              return EMPTY;\n            }\n\n            completedOrAborted = true;\n            /* This error type is issued during Redirect, and is handled as a\n             * cancellation rather than an error. */\n            if (isNavigationCancelingError(e)) {\n              this.events.next(\n                new NavigationCancel(\n                  overallTransitionState.id,\n                  this.urlSerializer.serialize(overallTransitionState.extractedUrl),\n                  e.message,\n                  e.cancellationCode,\n                ),\n              );\n\n              // When redirecting, we need to delay resolving the navigation\n              // promise and push it to the redirect navigation\n              if (!isRedirectingNavigationCancelingError(e)) {\n                overallTransitionState.resolve(false);\n              } else {\n                this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));\n              }\n\n              /* All other errors should reset to the router's internal URL reference\n               * to the pre-error state. */\n            } else {\n              const navigationError = new NavigationError(\n                overallTransitionState.id,\n                this.urlSerializer.serialize(overallTransitionState.extractedUrl),\n                e,\n                overallTransitionState.targetSnapshot ?? undefined,\n              );\n\n              try {\n                const navigationErrorHandlerResult = runInInjectionContext(\n                  this.environmentInjector,\n                  () => this.navigationErrorHandler?.(navigationError),\n                );\n\n                if (navigationErrorHandlerResult instanceof RedirectCommand) {\n                  const {message, cancellationCode} = redirectingNavigationError(\n                    this.urlSerializer,\n                    navigationErrorHandlerResult,\n                  );\n                  this.events.next(\n                    new NavigationCancel(\n                      overallTransitionState.id,\n                      this.urlSerializer.serialize(overallTransitionState.extractedUrl),\n                      message,\n                      cancellationCode,\n                    ),\n                  );\n                  this.events.next(\n                    new RedirectRequest(\n                      navigationErrorHandlerResult.redirectTo,\n                      navigationErrorHandlerResult.navigationBehaviorOptions,\n                    ),\n                  );\n                } else {\n                  this.events.next(navigationError);\n                  throw e;\n                }\n              } catch (ee) {\n                // TODO(atscott): consider flipping the default behavior of\n                // resolveNavigationPromiseOnError to be `resolve(false)` when\n                // undefined. This is the most sane thing to do given that\n                // applications very rarely handle the promise rejection and, as a\n                // result, would get \"unhandled promise rejection\" console logs.\n                // The vast majority of applications would not be affected by this\n                // change so omitting a migration seems reasonable. Instead,\n                // applications that rely on rejection can specifically opt-in to the\n                // old behavior.\n                if (this.options.resolveNavigationPromiseOnError) {\n                  overallTransitionState.resolve(false);\n                } else {\n                  overallTransitionState.reject(ee);\n                }\n              }\n            }\n\n            return EMPTY;\n          }),\n        );\n        // casting because `pipe` returns observable({}) when called with 8+ arguments\n      }),\n    ) as Observable<NavigationTransition>;\n  }\n\n  private cancelNavigationTransition(\n    t: NavigationTransition,\n    reason: string,\n    code: NavigationCancellationCode,\n  ) {\n    const navCancel = new NavigationCancel(\n      t.id,\n      this.urlSerializer.serialize(t.extractedUrl),\n      reason,\n      code,\n    );\n    this.events.next(navCancel);\n    t.resolve(false);\n  }\n\n  /**\n   * @returns Whether we're navigating to somewhere that is not what the Router is\n   * currently set to.\n   */\n  private isUpdatingInternalState() {\n    // TODO(atscott): The serializer should likely be used instead of\n    // `UrlTree.toString()`. Custom serializers are often written to handle\n    // things better than the default one (objects, for example will be\n    // [Object object] with the custom serializer and be \"the same\" when they\n    // aren't).\n    // (Same for isUpdatedBrowserUrl)\n    return (\n      this.currentTransition?.extractedUrl.toString() !==\n      this.currentTransition?.currentUrlTree.toString()\n    );\n  }\n\n  /**\n   * @returns Whether we're updating the browser URL to something new (navigation is going\n   * to somewhere not displayed in the URL bar and we will update the URL\n   * bar if navigation succeeds).\n   */\n  private isUpdatedBrowserUrl() {\n    // The extracted URL is the part of the URL that this application cares about. `extract` may\n    // return only part of the browser URL and that part may have not changed even if some other\n    // portion of the URL did.\n    const currentBrowserUrl = this.urlHandlingStrategy.extract(\n      this.urlSerializer.parse(this.location.path(true)),\n    );\n\n    const currentNavigation = untracked(this.currentNavigation);\n    const targetBrowserUrl = currentNavigation?.targetBrowserUrl ?? currentNavigation?.extractedUrl;\n    return (\n      currentBrowserUrl.toString() !== targetBrowserUrl?.toString() &&\n      !currentNavigation?.extras.skipLocationChange\n    );\n  }\n}\n\nexport function isBrowserTriggeredNavigation(source: NavigationTrigger) {\n  return source !== IMPERATIVE_NAVIGATION;\n}\n"]}