{"version":3,"file":"events.js","sourceRoot":"","sources":["events.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NavigationBehaviorOptions, Route} from './models';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {UrlTree} from './url_tree';\nimport type {Navigation} from './navigation_transition';\n\n/**\n * Identifies the call or event that triggered a navigation.\n *\n * * 'imperative': Triggered by `router.navigateByUrl()` or `router.navigate()`.\n * * 'popstate' : Triggered by a `popstate` event.\n * * 'hashchange'-: Triggered by a `hashchange` event.\n *\n * @publicApi\n */\nexport type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\nexport const IMPERATIVE_NAVIGATION = 'imperative';\n\n/**\n * Identifies the type of a router event.\n *\n * @publicApi\n */\nexport enum EventType {\n  NavigationStart,\n  NavigationEnd,\n  NavigationCancel,\n  NavigationError,\n  RoutesRecognized,\n  ResolveStart,\n  ResolveEnd,\n  GuardsCheckStart,\n  GuardsCheckEnd,\n  RouteConfigLoadStart,\n  RouteConfigLoadEnd,\n  ChildActivationStart,\n  ChildActivationEnd,\n  ActivationStart,\n  ActivationEnd,\n  Scroll,\n  NavigationSkipped,\n}\n\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event | RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see {@link Event}\n * @see [Router events summary](guide/routing/router-reference#router-events)\n * @publicApi\n */\nexport class RouterEvent {\n  constructor(\n    /** A unique ID that the router assigns to every router navigation. */\n    public id: number,\n    /** The URL that is the destination for this navigation. */\n    public url: string,\n  ) {}\n}\n\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nexport class NavigationStart extends RouterEvent {\n  readonly type = EventType.NavigationStart;\n\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   * @see {@link NavigationEnd}\n   * @see {@link NavigationCancel}\n   * @see {@link NavigationError}\n   */\n  navigationTrigger?: NavigationTrigger;\n\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   */\n  restoredState?: {[k: string]: any; navigationId: number} | null;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    navigationTrigger: NavigationTrigger = 'imperative',\n    /** @docsNotRequired */\n    restoredState: {[k: string]: any; navigationId: number} | null = null,\n  ) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationCancel}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nexport class NavigationEnd extends RouterEvent {\n  readonly type = EventType.NavigationEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * A code for the `NavigationCancel` event of the `Router` to indicate the\n * reason a navigation failed.\n *\n * @publicApi\n */\nexport enum NavigationCancellationCode {\n  /**\n   * A navigation failed because a guard returned a `UrlTree` to redirect.\n   */\n  Redirect,\n  /**\n   * A navigation failed because a more recent navigation started.\n   */\n  SupersededByNewNavigation,\n  /**\n   * A navigation failed because one of the resolvers completed without emitting a value.\n   */\n  NoDataFromResolver,\n  /**\n   * A navigation failed because a guard returned `false`.\n   */\n  GuardRejected,\n  /**\n   * A navigation was aborted by the `Navigation.abort` function.\n   *\n   * @see {@link Navigation}\n   */\n  Aborted,\n}\n\n/**\n * A code for the `NavigationSkipped` event of the `Router` to indicate the\n * reason a navigation was skipped.\n *\n * @publicApi\n */\nexport enum NavigationSkippedCode {\n  /**\n   * A navigation was skipped because the navigation URL was the same as the current Router URL.\n   */\n  IgnoredSameUrlNavigation,\n  /**\n   * A navigation was skipped because the configured `UrlHandlingStrategy` return `false` for both\n   * the current Router URL and the target of the navigation.\n   *\n   * @see {@link UrlHandlingStrategy}\n   */\n  IgnoredByUrlHandlingStrategy,\n}\n\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nexport class NavigationCancel extends RouterEvent {\n  readonly type = EventType.NavigationCancel;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /**\n     * A description of why the navigation was cancelled. For debug purposes only. Use `code`\n     * instead for a stable cancellation reason that can be used in production.\n     */\n    public reason: string,\n    /**\n     * A code to indicate why the navigation was canceled. This cancellation code is stable for\n     * the reason and can be relied on whereas the `reason` string could change and should not be\n     * used in production.\n     */\n    readonly code?: NavigationCancellationCode,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation is skipped.\n * This can happen for a couple reasons including onSameUrlHandling\n * is set to `ignore` and the navigation URL is not different than the\n * current state.\n *\n * @publicApi\n */\nexport class NavigationSkipped extends RouterEvent {\n  readonly type = EventType.NavigationSkipped;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /**\n     * A description of why the navigation was skipped. For debug purposes only. Use `code`\n     * instead for a stable skipped reason that can be used in production.\n     */\n    public reason: string,\n    /**\n     * A code to indicate why the navigation was skipped. This code is stable for\n     * the reason and can be relied on whereas the `reason` string could change and should not be\n     * used in production.\n     */\n    readonly code?: NavigationSkippedCode,\n  ) {\n    super(id, url);\n  }\n}\n\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationCancel}\n *\n * @publicApi\n */\nexport class NavigationError extends RouterEvent {\n  readonly type = EventType.NavigationError;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public error: any,\n    /**\n     * The target of the navigation when the error occurred.\n     *\n     * Note that this can be `undefined` because an error could have occurred before the\n     * `RouterStateSnapshot` was created for the navigation.\n     */\n    readonly target?: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nexport class RoutesRecognized extends RouterEvent {\n  readonly type = EventType.RoutesRecognized;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see {@link GuardsCheckEnd}\n *\n * @publicApi\n */\nexport class GuardsCheckStart extends RouterEvent {\n  readonly type = EventType.GuardsCheckStart;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see {@link GuardsCheckStart}\n *\n * @publicApi\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  readonly type = EventType.GuardsCheckEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n    /** @docsNotRequired */\n    public shouldActivate: boolean,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see {@link ResolveEnd}\n *\n * @publicApi\n */\nexport class ResolveStart extends RouterEvent {\n  readonly type = EventType.ResolveStart;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ResolveEnd extends RouterEvent {\n  readonly type = EventType.ResolveEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see {@link RouteConfigLoadEnd}\n *\n * @publicApi\n */\nexport class RouteConfigLoadStart {\n  readonly type = EventType.RouteConfigLoadStart;\n\n  constructor(\n    /** @docsNotRequired */\n    public route: Route,\n  ) {}\n  toString(): string {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see {@link RouteConfigLoadStart}\n *\n * @publicApi\n */\nexport class RouteConfigLoadEnd {\n  readonly type = EventType.RouteConfigLoadEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    public route: Route,\n  ) {}\n  toString(): string {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see {@link ChildActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ChildActivationStart {\n  readonly type = EventType.ChildActivationStart;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see {@link ChildActivationStart}\n * @see {@link ResolveStart}\n * @publicApi\n */\nexport class ChildActivationEnd {\n  readonly type = EventType.ChildActivationEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ActivationStart {\n  readonly type = EventType.ActivationStart;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationStart}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ActivationEnd {\n  readonly type = EventType.ActivationEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nexport class Scroll {\n  readonly type = EventType.Scroll;\n\n  constructor(\n    /** @docsNotRequired */\n    readonly routerEvent: NavigationEnd | NavigationSkipped,\n\n    /** @docsNotRequired */\n    readonly position: [number, number] | null,\n\n    /** @docsNotRequired */\n    readonly anchor: string | null,\n  ) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\nexport class BeforeActivateRoutes {}\nexport class RedirectRequest {\n  constructor(\n    readonly url: UrlTree,\n    readonly navigationBehaviorOptions: NavigationBehaviorOptions | undefined,\n  ) {}\n}\nexport type PrivateRouterEvents = BeforeActivateRoutes | RedirectRequest;\nexport function isPublicRouterEvent(e: Event | PrivateRouterEvents): e is Event {\n  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);\n}\n\n/**\n * Router events that allow you to track the lifecycle of the router.\n *\n * The events occur in the following sequence:\n *\n * * [NavigationStart](api/router/NavigationStart): Navigation starts.\n * * [RouteConfigLoadStart](api/router/RouteConfigLoadStart): Before\n * the router [lazy loads](guide/routing/common-router-tasks#lazy-loading) a route configuration.\n * * [RouteConfigLoadEnd](api/router/RouteConfigLoadEnd): After a route has been lazy loaded.\n * * [RoutesRecognized](api/router/RoutesRecognized): When the router parses the URL\n * and the routes are recognized.\n * * [GuardsCheckStart](api/router/GuardsCheckStart): When the router begins the *guards*\n * phase of routing.\n * * [ChildActivationStart](api/router/ChildActivationStart): When the router\n * begins activating a route's children.\n * * [ActivationStart](api/router/ActivationStart): When the router begins activating a route.\n * * [GuardsCheckEnd](api/router/GuardsCheckEnd): When the router finishes the *guards*\n * phase of routing successfully.\n * * [ResolveStart](api/router/ResolveStart): When the router begins the *resolve*\n * phase of routing.\n * * [ResolveEnd](api/router/ResolveEnd): When the router finishes the *resolve*\n * phase of routing successfully.\n * * [ChildActivationEnd](api/router/ChildActivationEnd): When the router finishes\n * activating a route's children.\n * * [ActivationEnd](api/router/ActivationEnd): When the router finishes activating a route.\n * * [NavigationEnd](api/router/NavigationEnd): When navigation ends successfully.\n * * [NavigationCancel](api/router/NavigationCancel): When navigation is canceled.\n * * [NavigationError](api/router/NavigationError): When navigation fails\n * due to an unexpected error.\n * * [Scroll](api/router/Scroll): When the user scrolls.\n *\n * @publicApi\n */\nexport type Event =\n  | NavigationStart\n  | NavigationEnd\n  | NavigationCancel\n  | NavigationError\n  | RoutesRecognized\n  | GuardsCheckStart\n  | GuardsCheckEnd\n  | RouteConfigLoadStart\n  | RouteConfigLoadEnd\n  | ChildActivationStart\n  | ChildActivationEnd\n  | ActivationStart\n  | ActivationEnd\n  | Scroll\n  | ResolveStart\n  | ResolveEnd\n  | NavigationSkipped;\n\nexport function stringifyEvent(routerEvent: Event): string {\n  switch (routerEvent.type) {\n    case EventType.ActivationEnd:\n      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ActivationStart:\n      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationEnd:\n      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationStart:\n      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.GuardsCheckEnd:\n      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;\n    case EventType.GuardsCheckStart:\n      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.NavigationCancel:\n      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationSkipped:\n      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationEnd:\n      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;\n    case EventType.NavigationError:\n      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;\n    case EventType.NavigationStart:\n      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.ResolveEnd:\n      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.ResolveStart:\n      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.RouteConfigLoadEnd:\n      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;\n    case EventType.RouteConfigLoadStart:\n      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;\n    case EventType.RoutesRecognized:\n      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.Scroll:\n      const pos = routerEvent.position\n        ? `${routerEvent.position[0]}, ${routerEvent.position[1]}`\n        : null;\n      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;\n  }\n}\n"]}