{"version":3,"file":"apply_redirects.js","sourceRoot":"","sources":["apply_redirects.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, runInInjectionContext, ÉµRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\nimport {NavigationCancellationCode} from './events';\nimport {RedirectFunction, Route} from './models';\nimport {navigationCancelingError} from './navigation_canceling_error';\nimport {ActivatedRouteSnapshot} from './router_state';\nimport {Params, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {wrapIntoObservable} from './utils/collection';\nimport {firstValueFrom} from './utils/first_value_from';\n\nexport class NoMatch extends Error {\n  public segmentGroup: UrlSegmentGroup | null;\n\n  constructor(segmentGroup?: UrlSegmentGroup) {\n    super();\n    this.segmentGroup = segmentGroup || null;\n\n    // Extending `Error` ends up breaking some internal tests. This appears to be a known issue\n    // when extending errors in TS and the workaround is to explicitly set the prototype.\n    // https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    Object.setPrototypeOf(this, NoMatch.prototype);\n  }\n}\n\nexport class AbsoluteRedirect extends Error {\n  constructor(public urlTree: UrlTree) {\n    super();\n\n    // Extending `Error` ends up breaking some internal tests. This appears to be a known issue\n    // when extending errors in TS and the workaround is to explicitly set the prototype.\n    // https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    Object.setPrototypeOf(this, AbsoluteRedirect.prototype);\n  }\n}\n\nexport function namedOutletsRedirect(redirectTo: string): never {\n  throw new RuntimeError(\n    RuntimeErrorCode.NAMED_OUTLET_REDIRECT,\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`,\n  );\n}\n\nexport function canLoadFails(route: Route): never {\n  throw navigationCancelingError(\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`,\n    NavigationCancellationCode.GuardRejected,\n  );\n}\n\nexport class ApplyRedirects {\n  constructor(\n    private urlSerializer: UrlSerializer,\n    private urlTree: UrlTree,\n  ) {}\n\n  async lineralizeSegments(route: Route, urlTree: UrlTree): Promise<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return res;\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        throw namedOutletsRedirect(`${route.redirectTo!}`);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n\n  async applyRedirectCommands(\n    segments: UrlSegment[],\n    redirectTo: string | RedirectFunction,\n    posParams: {[k: string]: UrlSegment},\n    currentSnapshot: ActivatedRouteSnapshot,\n    injector: Injector,\n  ): Promise<UrlTree> {\n    const redirect = await getRedirectResult(redirectTo, currentSnapshot, injector);\n    if (redirect instanceof UrlTree) {\n      throw new AbsoluteRedirect(redirect);\n    }\n\n    const newTree = this.applyRedirectCreateUrlTree(\n      redirect,\n      this.urlSerializer.parse(redirect),\n      segments,\n      posParams,\n    );\n\n    if (redirect[0] === '/') {\n      throw new AbsoluteRedirect(newTree);\n    }\n    return newTree;\n  }\n\n  applyRedirectCreateUrlTree(\n    redirectTo: string,\n    urlTree: UrlTree,\n    segments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment},\n  ): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n      newRoot,\n      this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n      urlTree.fragment,\n    );\n  }\n\n  createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    Object.entries(redirectToParams).forEach(([k, v]) => {\n      const copySourceValue = typeof v === 'string' && v[0] === ':';\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  createSegmentGroup(\n    redirectTo: string,\n    group: UrlSegmentGroup,\n    segments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment},\n  ): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    Object.entries(group.children).forEach(([name, child]) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  createSegments(\n    redirectTo: string,\n    redirectToSegments: UrlSegment[],\n    actualSegments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment},\n  ): UrlSegment[] {\n    return redirectToSegments.map((s) =>\n      s.path[0] === ':'\n        ? this.findPosParam(redirectTo, s, posParams)\n        : this.findOrReturn(s, actualSegments),\n    );\n  }\n\n  findPosParam(\n    redirectTo: string,\n    redirectToUrlSegment: UrlSegment,\n    posParams: {[k: string]: UrlSegment},\n  ): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_REDIRECT,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`,\n      );\n    return pos;\n  }\n\n  findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction getRedirectResult(\n  redirectTo: string | RedirectFunction,\n  currentSnapshot: ActivatedRouteSnapshot,\n  injector: Injector,\n): Promise<string | UrlTree> {\n  if (typeof redirectTo === 'string') {\n    return Promise.resolve(redirectTo);\n  }\n  const redirectToFn = redirectTo;\n  const {queryParams, fragment, routeConfig, url, outlet, params, data, title} = currentSnapshot;\n  return firstValueFrom(\n    wrapIntoObservable(\n      runInInjectionContext(injector, () =>\n        redirectToFn({params, data, queryParams, fragment, routeConfig, url, outlet, title}),\n      ),\n    ),\n  );\n}\n"]}