{"version":3,"file":"abort_signal_to_observable.js","sourceRoot":"","sources":["abort_signal_to_observable.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,UAAU,EAAE,EAAE,EAAC,MAAM,MAAM,CAAC;AACpC,OAAO,EAAC,IAAI,EAAE,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAE/C;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CAAC,MAAmB;IACzD,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gCAAgC;IACtE,CAAC;IACD,OAAO,IAAI,UAAU,CAAO,CAAC,UAAU,EAAE,EAAE;QACzC,MAAM,OAAO,GAAG,GAAG,EAAE;YACnB,UAAU,CAAC,IAAI,EAAE,CAAC;YAClB,UAAU,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC;QACF,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1C,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,cAAc,CAAI,MAAmB;IACnD,OAAO,SAAS,CAAI,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;AACvD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable, of} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\n/**\n * Converts an AbortSignal to an Observable<void>.\n * Emits and completes when the signal is aborted.\n * If the signal is already aborted, it emits and completes immediately.\n */\nexport function abortSignalToObservable(signal: AbortSignal): Observable<void> {\n  if (signal.aborted) {\n    return of(undefined).pipe(take(1)); // Emit and complete immediately\n  }\n  return new Observable<void>((subscriber) => {\n    const handler = () => {\n      subscriber.next();\n      subscriber.complete();\n    };\n    signal.addEventListener('abort', handler);\n    return () => signal.removeEventListener('abort', handler);\n  });\n}\n\nexport function takeUntilAbort<T>(signal: AbortSignal) {\n  return takeUntil<T>(abortSignalToObservable(signal));\n}\n"]}