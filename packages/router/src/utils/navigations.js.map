{"version":3,"file":"navigations.js","sourceRoot":"","sources":["navigations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAC,MAAM,gBAAgB,CAAC;AAEjD,OAAO,EAEL,gBAAgB,EAChB,0BAA0B,EAC1B,aAAa,EACb,eAAe,EACf,iBAAiB,GAClB,MAAM,WAAW,CAAC;AAQnB;;;;;;;;GAQG;AACH,MAAM,UAAU,mBAAmB,CAAC,MAAmC,EAAE,MAAkB;IACzF,MAAM,CAAC,MAAM;SACV,IAAI,CACH,MAAM,CACJ,CAAC,CAAC,EAA+E,EAAE,CACjF,CAAC,YAAY,aAAa;QAC1B,CAAC,YAAY,gBAAgB;QAC7B,CAAC,YAAY,eAAe;QAC5B,CAAC,YAAY,iBAAiB,CACjC,EACD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACR,IAAI,CAAC,YAAY,aAAa,IAAI,CAAC,YAAY,iBAAiB,EAAE,CAAC;YACjE,yCAAiC;QACnC,CAAC;QACD,MAAM,WAAW,GACf,CAAC,YAAY,gBAAgB;YAC3B,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,0BAA0B,CAAC,QAAQ;gBAC9C,CAAC,CAAC,IAAI,KAAK,0BAA0B,CAAC,yBAAyB;YACjE,CAAC,CAAC,KAAK,CAAC;QACZ,OAAO,WAAW,CAAC,CAAC,sCAA8B,CAAC,gCAAwB,CAAC;IAC9E,CAAC,CAAC,EACF,MAAM,CACJ,CAAC,MAAM,EAAiE,EAAE,CACxE,MAAM,yCAAiC,CAC1C,EACD,IAAI,CAAC,CAAC,CAAC,CACR;SACA,SAAS,CAAC,GAAG,EAAE;QACd,MAAM,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\nimport {filter, map, take} from 'rxjs/operators';\n\nimport {\n  Event,\n  NavigationCancel,\n  NavigationCancellationCode,\n  NavigationEnd,\n  NavigationError,\n  NavigationSkipped,\n} from '../events';\n\nconst enum NavigationResult {\n  COMPLETE,\n  FAILED,\n  REDIRECTING,\n}\n\n/**\n * Performs the given action once the router finishes its next/current navigation.\n *\n * The navigation is considered complete under the following conditions:\n * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or\n * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the\n * redirecting/superseding navigation must finish.\n * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits\n */\nexport function afterNextNavigation(router: {events: Observable<Event>}, action: () => void): void {\n  router.events\n    .pipe(\n      filter(\n        (e): e is NavigationEnd | NavigationCancel | NavigationError | NavigationSkipped =>\n          e instanceof NavigationEnd ||\n          e instanceof NavigationCancel ||\n          e instanceof NavigationError ||\n          e instanceof NavigationSkipped,\n      ),\n      map((e) => {\n        if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {\n          return NavigationResult.COMPLETE;\n        }\n        const redirecting =\n          e instanceof NavigationCancel\n            ? e.code === NavigationCancellationCode.Redirect ||\n              e.code === NavigationCancellationCode.SupersededByNewNavigation\n            : false;\n        return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;\n      }),\n      filter(\n        (result): result is NavigationResult.COMPLETE | NavigationResult.FAILED =>\n          result !== NavigationResult.REDIRECTING,\n      ),\n      take(1),\n    )\n    .subscribe(() => {\n      action();\n    });\n}\n"]}