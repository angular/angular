{"version":3,"file":"client.js","sourceRoot":"","sources":["client.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,UAAU,EAAE,aAAa,IAAI,YAAY,EAAC,MAAM,eAAe,CAAC;AACxE,OAAO,EAAa,EAAE,EAAC,MAAM,MAAM,CAAC;AACpC,OAAO,EAAC,SAAS,EAAE,MAAM,EAAE,GAAG,EAAC,MAAM,gBAAgB,CAAC;AAItD,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AACtC,OAAO,EAAC,UAAU,EAAoB,MAAM,UAAU,CAAC;AACvD,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AACtC,OAAO,EAAY,YAAY,EAAC,MAAM,YAAY,CAAC;AAGnD;;;;;;;;;GASG;AACH,SAAS,OAAO,CACd,OAoBC,EACD,IAAc;IAEd,OAAO;QACL,IAAI;QACJ,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,cAAc,EAAE,OAAO,CAAC,cAAc;QACtC,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,eAAe,EAAE,OAAO,CAAC,eAAe;QACxC,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,aAAa,EAAE,OAAO,CAAC,aAAa;QACpC,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AAEI,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,YAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAG,CAAC;IA4lB5C;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACH,OAAO,CACL,KAAgC,EAChC,GAAY,EACZ,UAqBI,EAAE;QAEN,IAAI,GAAqB,CAAC;QAC1B,6EAA6E;QAC7E,IAAI,KAAK,YAAY,WAAW,EAAE,CAAC;YACjC,+EAA+E;YAC/E,WAAW;YACX,GAAG,GAAG,KAAK,CAAC;QACd,CAAC;aAAM,CAAC;YACN,0EAA0E;YAC1E,6EAA6E;YAC7E,YAAY;YAEZ,0BAA0B;YAC1B,IAAI,OAAO,GAA4B,SAAS,CAAC;YACjD,IAAI,OAAO,CAAC,OAAO,YAAY,WAAW,EAAE,CAAC;gBAC3C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC5B,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YAED,uBAAuB;YACvB,IAAI,MAAM,GAA2B,SAAS,CAAC;YAC/C,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACrB,IAAI,OAAO,CAAC,MAAM,YAAY,UAAU,EAAE,CAAC;oBACzC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC1B,CAAC;qBAAM,CAAC;oBACN,MAAM,GAAG,IAAI,UAAU,CAAC,EAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAsB,CAAC,CAAC;gBAC7E,CAAC;YACH,CAAC;YACD,yBAAyB;YACzB,GAAG,GAAG,IAAI,WAAW,CAAC,KAAK,EAAE,GAAI,EAAE,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACnF,OAAO;gBACP,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,MAAM;gBACN,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,4DAA4D;gBAC5D,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,MAAM;gBAC5C,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,aAAa,EAAE,OAAO,CAAC,aAAa;gBACpC,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,OAAO,EAAE,OAAO,CAAC,OAAO;aACzB,CAAC,CAAC;QACL,CAAC;QACD,gFAAgF;QAChF,8EAA8E;QAC9E,8EAA8E;QAC9E,qFAAqF;QACrF,MAAM,OAAO,GAA+B,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CACtD,SAAS,CAAC,CAAC,GAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAC/D,CAAC;QAEF,sFAAsF;QACtF,oFAAoF;QACpF,8BAA8B;QAC9B,IAAI,KAAK,YAAY,WAAW,IAAI,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;YACjE,OAAO,OAAO,CAAC;QACjB,CAAC;QAED,gFAAgF;QAChF,4EAA4E;QAC5E,gBAAgB;QAChB,MAAM,IAAI,GAAiE,CACzE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAqB,EAAE,EAAE,CAAC,KAAK,YAAY,YAAY,CAAC,CAAC,CAC/E,CAAC;QAEF,iCAAiC;QACjC,QAAQ,OAAO,CAAC,OAAO,IAAI,MAAM,EAAE,CAAC;YAClC,KAAK,MAAM;gBACT,4EAA4E;gBAC5E,4EAA4E;gBAC5E,+EAA+E;gBAC/E,6EAA6E;gBAC7E,kBAAkB;gBAClB,QAAQ,GAAG,CAAC,YAAY,EAAE,CAAC;oBACzB,KAAK,aAAa;wBAChB,OAAO,IAAI,CAAC,IAAI,CACd,GAAG,CAAC,CAAC,GAAsB,EAAE,EAAE;4BAC7B,4CAA4C;4BAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,YAAY,WAAW,CAAC,EAAE,CAAC;gCAC5D,MAAM,IAAI,YAAY,8DAEpB,SAAS,IAAI,iCAAiC,CAC/C,CAAC;4BACJ,CAAC;4BACD,OAAO,GAAG,CAAC,IAAI,CAAC;wBAClB,CAAC,CAAC,CACH,CAAC;oBACJ,KAAK,MAAM;wBACT,OAAO,IAAI,CAAC,IAAI,CACd,GAAG,CAAC,CAAC,GAAsB,EAAE,EAAE;4BAC7B,oCAAoC;4BACpC,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE,CAAC;gCACrD,MAAM,IAAI,YAAY,qDAEpB,SAAS,IAAI,yBAAyB,CACvC,CAAC;4BACJ,CAAC;4BACD,OAAO,GAAG,CAAC,IAAI,CAAC;wBAClB,CAAC,CAAC,CACH,CAAC;oBACJ,KAAK,MAAM;wBACT,OAAO,IAAI,CAAC,IAAI,CACd,GAAG,CAAC,CAAC,GAAsB,EAAE,EAAE;4BAC7B,sCAAsC;4BACtC,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;gCACtD,MAAM,IAAI,YAAY,uDAEpB,SAAS,IAAI,2BAA2B,CACzC,CAAC;4BACJ,CAAC;4BACD,OAAO,GAAG,CAAC,IAAI,CAAC;wBAClB,CAAC,CAAC,CACH,CAAC;oBACJ,KAAK,MAAM,CAAC;oBACZ;wBACE,uEAAuE;wBACvE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAsB,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChE,CAAC;YACH,KAAK,UAAU;gBACb,4DAA4D;gBAC5D,OAAO,IAAI,CAAC;YACd;gBACE,sDAAsD;gBACtD,MAAM,IAAI,YAAY,qDAEpB,SAAS,IAAI,uCAAuC,OAAO,CAAC,OAAO,GAAG,CACvE,CAAC;QACN,CAAC;IACH,CAAC;IAqgBD;;;;;;;;OAQG;IACH,MAAM,CACJ,GAAW,EACX,UAoBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,QAAQ,EAAE,GAAG,EAAE,OAAc,CAAC,CAAC;IAC1D,CAAC;IAugBD;;;;OAIG;IACH,GAAG,CACD,GAAW,EACX,UAoBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,KAAK,EAAE,GAAG,EAAE,OAAc,CAAC,CAAC;IACvD,CAAC;IA6gBD;;;;;;OAMG;IACH,IAAI,CACF,GAAW,EACX,UAoBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,MAAM,EAAE,GAAG,EAAE,OAAc,CAAC,CAAC;IACxD,CAAC;IA0BD;;;;;;;;;;;;;;;;;OAiBG;IACH,KAAK,CAAI,GAAW,EAAE,aAAqB;QACzC,OAAO,IAAI,CAAC,OAAO,CAAM,OAAO,EAAE,GAAG,EAAE;YACrC,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC;YAChE,OAAO,EAAE,MAAM;YACf,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IACL,CAAC;IA4fD;;;;;;OAMG;IACH,OAAO,CACL,GAAW,EACX,UAmBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,SAAS,EAAE,GAAG,EAAE,OAAc,CAAC,CAAC;IAC3D,CAAC;IA4hBD;;;;OAIG;IACH,KAAK,CACH,GAAW,EACX,IAAgB,EAChB,UAmBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC;IAyiBD;;;;;OAKG;IACH,IAAI,CACF,GAAW,EACX,IAAgB,EAChB,UAoBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;IAyhBD;;;;;OAKG;IACH,GAAG,CACD,GAAW,EACX,IAAgB,EAChB,UAmBI,EAAE;QAEN,OAAO,IAAI,CAAC,OAAO,CAAM,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;CACF,CAAA;AAzpJY,UAAU;IADtB,UAAU,CAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAC;GACpB,UAAU,CAypJtB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, ÉµRuntimeError as RuntimeError} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n  options: {\n    headers?: HttpHeaders | Record<string, string | string[]>;\n    context?: HttpContext;\n    observe?: 'body' | 'events' | 'response';\n    params?:\n      | HttpParams\n      | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n    reportProgress?: boolean;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    credentials?: RequestCredentials;\n    keepalive?: boolean;\n    priority?: RequestPriority;\n    cache?: RequestCache;\n    mode?: RequestMode;\n    redirect?: RequestRedirect;\n    referrer?: string;\n    integrity?: string;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    timeout?: number;\n  },\n  body: T | null,\n): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    credentials: options.credentials,\n    transferCache: options.transferCache,\n    timeout: options.timeout,\n    keepalive: options.keepalive,\n    priority: options.priority,\n    cache: options.cache,\n    mode: options.mode,\n    redirect: options.redirect,\n    integrity: options.integrity,\n    referrer: options.referrer,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @usageNotes\n *\n * ### HTTP Request Example\n *\n * ```ts\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```ts\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```ts\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```ts\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      observe: 'events';\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'events';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'events';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(\n    first: string | HttpRequest<any>,\n    url?: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders | undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams | undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n      // Construct the request.\n      req = new HttpRequest(first, url!, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n        keepalive: options.keepalive,\n        priority: options.priority,\n        cache: options.cache,\n        mode: options.mode,\n        redirect: options.redirect,\n        credentials: options.credentials,\n        referrer: options.referrer,\n        integrity: options.integrity,\n        timeout: options.timeout,\n      });\n    }\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> = of(req).pipe(\n      concatMap((req: HttpRequest<any>) => this.handler.handle(req)),\n    );\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>(\n      events$.pipe(filter((event: HttpEvent<any>) => event instanceof HttpResponse))\n    );\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER,\n                    ngDevMode && 'Response is not an ArrayBuffer.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'blob':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB,\n                    ngDevMode && 'Response is not a Blob.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'text':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING,\n                    ngDevMode && 'Response is not a string.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new RuntimeError(\n          RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE,\n          ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`,\n        );\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      body?: any | null;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | (string | number | boolean)[]>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n      body?: any | null;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      timeout?: number;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n"]}