{"version":3,"file":"resource_api.js","sourceRoot":"","sources":["resource_api.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {Injector, ResourceRef, Signal, ValueEqualityFn, WritableResource} from '@angular/core';\nimport type {HttpHeaders} from './headers';\nimport type {HttpParams} from './params';\nimport type {HttpProgressEvent} from './response';\nimport {HttpContext} from './context';\n\n/**\n * The structure of an `httpResource` request which will be sent to the backend.\n *\n * @experimental 19.2\n */\nexport interface HttpResourceRequest {\n  /**\n   * URL of the request.\n   *\n   * This URL should not include query parameters. Instead, specify query parameters through the\n   * `params` field.\n   */\n  url: string;\n\n  /**\n   * HTTP method of the request, which defaults to GET if not specified.\n   */\n  method?: string;\n\n  /**\n   * Body to send with the request, if there is one.\n   *\n   * If no Content-Type header is specified by the user, Angular will attempt to set one based on\n   * the type of `body`.\n   */\n  body?: unknown;\n\n  /**\n   * Dictionary of query parameters which will be appeneded to the request URL.\n   */\n  params?:\n    | HttpParams\n    | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n\n  /**\n   * Dictionary of headers to include with the outgoing request.\n   */\n  headers?: HttpHeaders | Record<string, string | ReadonlyArray<string>>;\n\n  /**\n   * Context of the request stored in a dictionary of key-value pairs.\n   */\n  context?: HttpContext;\n\n  /**\n   * If `true`, progress events will be enabled for the request and delivered through the\n   * `HttpResource.progress` signal.\n   */\n  reportProgress?: boolean;\n\n  /**\n   * Specifies whether the `withCredentials` flag should be set on the outgoing request.\n   *\n   * This flag causes the browser to send cookies and other authentication information along with\n   * the request.\n   */\n  withCredentials?: boolean;\n\n  /**\n   * When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\n   */\n  keepalive?: boolean;\n\n  /**\n   * Controls how the request will interact with the browser's HTTP cache.\n   * This affects whether a response is retrieved from the cache, how it is stored, or if it bypasses the cache altogether.\n   */\n  cache?: RequestCache | (string & {});\n\n  /**\n   * The credentials mode of the request, which determines how cookies and other authentication information are handled.\n   * This can affect whether credentials are sent with cross-origin requests or not.\n   */\n  credentials?: RequestCredentials | (string & {});\n\n  /**\n   * Indicates the relative priority of the request. This may be used by the browser to decide the order in which requests are dispatched and resources fetched.\n   */\n  priority?: RequestPriority | (string & {});\n\n  /**\n   * The mode of the request, which determines how the request will interact with the browser's security model.\n   * This can affect things like CORS (Cross-Origin Resource Sharing) and same-origin policies.\n   */\n  mode?: RequestMode | (string & {});\n\n  /**\n   * The redirect mode of the request, which determines how redirects are handled.\n   * This can affect whether the request follows redirects automatically, or if it fails when a redirect occurs.\n   */\n  redirect?: RequestRedirect | (string & {});\n\n  /**\n   * The referrer of the request, which can be used to indicate the origin of the request.\n   * This is useful for security and analytics purposes.\n   * Value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.\n   */\n  referrer?: string;\n\n  /**\n   * The integrity metadata of the request, which can be used to ensure the request is made with the expected content.\n   * A cryptographic hash of the resource to be fetched by request\n   */\n  integrity?: string;\n\n  /**\n   * Configures the server-side rendering transfer cache for this request.\n   *\n   * See the documentation on the transfer cache for more information.\n   */\n  transferCache?: {includeHeaders?: string[]} | boolean;\n\n  /**\n   * The timeout for the backend HTTP request in ms.\n   */\n  timeout?: number;\n}\n\n/**\n * Options for creating an `httpResource`.\n *\n * @experimental 19.2\n */\nexport interface HttpResourceOptions<TResult, TRaw> {\n  /**\n   * Transform the result of the HTTP request before it's delivered to the resource.\n   *\n   * `parse` receives the value from the HTTP layer as its raw type (e.g. as `unknown` for JSON data).\n   * It can be used to validate or transform the type of the resource, and return a more specific\n   * type. This is also useful for validating backend responses using a runtime schema validation\n   * library such as Zod.\n   */\n  parse?: (value: TRaw) => TResult;\n\n  /**\n   * Value that the resource will take when in Idle or Loading states.\n   *\n   * If not set, the resource will use `undefined` as its default value.\n   */\n  defaultValue?: NoInfer<TResult>;\n\n  /**\n   * The `Injector` in which to create the `httpResource`.\n   *\n   * If this is not provided, the current [injection context](guide/di/dependency-injection-context)\n   * will be used instead (via `inject`).\n   */\n  injector?: Injector;\n\n  /**\n   * A comparison function which defines equality for the response value.\n   */\n  equal?: ValueEqualityFn<NoInfer<TResult>>;\n}\n\n/**\n * A `WritableResource` that represents the results of a reactive HTTP request.\n *\n * `HttpResource`s are backed by `HttpClient`, including support for interceptors, testing, and the\n * other features of the `HttpClient` API.\n *\n * @experimental 19.2\n */\nexport interface HttpResourceRef<T> extends WritableResource<T>, ResourceRef<T> {\n  /**\n   * Signal of the response headers, when available.\n   */\n  readonly headers: Signal<HttpHeaders | undefined>;\n\n  /**\n   * Signal of the response status code, when available.\n   */\n  readonly statusCode: Signal<number | undefined>;\n\n  /**\n   * Signal of the latest progress update, if the request was made with `reportProgress: true`.\n   */\n  readonly progress: Signal<HttpProgressEvent | undefined>;\n\n  hasValue(\n    this: T extends undefined ? this : never,\n  ): this is HttpResourceRef<Exclude<T, undefined>>;\n\n  hasValue(): boolean;\n\n  destroy(): void;\n}\n"]}