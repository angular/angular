{"version":3,"file":"backend.js","sourceRoot":"","sources":["backend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {FetchBackend} from './fetch';\nimport {HttpXhrBackend} from './xhr';\nimport {isPlatformServer} from '@angular/common';\nimport {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  PLATFORM_ID,\n  ɵConsole as Console,\n  ɵformatRuntimeError as formatRuntimeError,\n  PendingTasks,\n} from '@angular/core';\nimport {finalize} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from './errors';\nimport {\n  ChainedInterceptorFn,\n  HTTP_INTERCEPTOR_FNS,\n  HTTP_ROOT_INTERCEPTOR_FNS,\n  REQUESTS_CONTRIBUTE_TO_STABILITY,\n  chainedInterceptorFn,\n  interceptorChainEndFn,\n} from './interceptor';\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: HttpXhrBackend})\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\nlet fetchBackendWarningDisplayed = false;\n\n/** Internal function to reset the flag in tests */\nexport function resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\n\n@Injectable({providedIn: 'root'})\nexport class HttpInterceptorHandler implements HttpHandler {\n  private chain: ChainedInterceptorFn<unknown> | null = null;\n  private readonly pendingTasks = inject(PendingTasks);\n  private readonly contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n\n  constructor(\n    private backend: HttpBackend,\n    private injector: EnvironmentInjector,\n  ) {\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      // This flag is necessary because provideHttpClientTesting() overrides the backend\n      // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n      // no HTTP calls are actually performed during the test, so producing a warning would be\n      // misleading.\n      const isTestingBackend = (this.backend as any).isTestingBackend;\n\n      if (\n        typeof ngServerMode !== 'undefined' &&\n        ngServerMode &&\n        !(this.backend instanceof FetchBackend) &&\n        !isTestingBackend\n      ) {\n        fetchBackendWarningDisplayed = true;\n        injector\n          .get(Console)\n          .warn(\n            formatRuntimeError(\n              RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR,\n              'Angular detected that `HttpClient` is not configured ' +\n                \"to use `fetch` APIs. It's strongly recommended to \" +\n                'enable `fetch` for applications that use Server-Side Rendering ' +\n                'for better performance and compatibility. ' +\n                'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                'call at the root of the application.',\n            ),\n          );\n      }\n    }\n  }\n\n  handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(\n        new Set([\n          ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n          ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n        ]),\n      );\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n        (nextSequencedFn, interceptorFn) =>\n          chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n        interceptorChainEndFn as ChainedInterceptorFn<unknown>,\n      );\n    }\n\n    if (this.contributeToStability) {\n      const removeTask = this.pendingTasks.add();\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      ).pipe(finalize(removeTask));\n    } else {\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      );\n    }\n  }\n}\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: HttpInterceptorHandler})\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n"]}