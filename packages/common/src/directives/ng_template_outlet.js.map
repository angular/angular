{"version":3,"file":"ng_template_outlet.js","sourceRoot":"","sources":["ng_template_outlet.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EACL,SAAS,EAGT,KAAK,GAMN,MAAM,eAAe,CAAC;AAEvB;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAII,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAmB3B,YAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;QAlB/C,aAAQ,GAA8B,IAAI,CAAC;QAEnD;;;;;WAKG;QACa,4BAAuB,GAAyB,IAAI,CAAC;QAErE;;WAEG;QACa,qBAAgB,GAAsC,IAAI,CAAC;QAE3E,oDAAoD;QACpC,6BAAwB,GAAgC,IAAI,CAAC;IAEnB,CAAC;IAE3D,WAAW,CAAC,OAAsB;QAChC,IAAI,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,CAAC;YACtC,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;YAEhD,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnE,CAAC;YAED,uDAAuD;YACvD,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,OAAO;YACT,CAAC;YAED,wFAAwF;YACxF,8EAA8E;YAC9E,MAAM,WAAW,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;YACtD,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,EAAE,WAAW,EAAE;gBACtF,QAAQ,EAAE,IAAI,CAAC,wBAAwB,IAAI,SAAS;aACrD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,mBAAmB,CAAC,OAAsB;QAChD,OAAO,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;IAChF,CAAC;IAED;;;;OAIG;IACK,0BAA0B;QAChC,OAAU,IAAI,KAAK,CACjB,EAAE,EACF;YACE,GAAG,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;gBAC/B,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBAClC,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YACnE,CAAC;YACD,GAAG,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;gBAC/B,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBAClC,OAAO,SAAS,CAAC;gBACnB,CAAC;gBACD,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YACnE,CAAC;SACF,CACF,CAAC;IACJ,CAAC;CACF,CAAA;AApEiB;IAAf,KAAK,EAAE;iEAA6D;AAKrD;IAAf,KAAK,EAAE;0DAAmE;AAG3D;IAAf,KAAK,EAAE;kEAAqE;AAjBlE,gBAAgB;IAH5B,SAAS,CAAC;QACT,QAAQ,EAAE,oBAAoB;KAC/B,CAAC;GACW,gBAAgB,CA6E5B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EmbeddedViewRef,\n  Injector,\n  Input,\n  OnChanges,\n  SimpleChange,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```html\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngTemplateOutlet]',\n})\nexport class NgTemplateOutlet<C = unknown> implements OnChanges {\n  private _viewRef: EmbeddedViewRef<C> | null = null;\n\n  /**\n   * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n   * object, the object's keys will be available for binding by the local template `let`\n   * declarations.\n   * Using the key `$implicit` in the context object will set its value as default.\n   */\n  @Input() public ngTemplateOutletContext: C | null | undefined = null;\n\n  /**\n   * A string defining the template reference and optionally the context object for the template.\n   */\n  @Input() public ngTemplateOutlet: TemplateRef<C> | null | undefined = null;\n\n  /** Injector to be used within the embedded view. */\n  @Input() public ngTemplateOutletInjector: Injector | null | undefined = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._shouldRecreateView(changes)) {\n      const viewContainerRef = this._viewContainerRef;\n\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n\n      // If there is no outlet, clear the destroyed view ref.\n      if (!this.ngTemplateOutlet) {\n        this._viewRef = null;\n        return;\n      }\n\n      // Create a context forward `Proxy` that will always bind to the user-specified context,\n      // without having to destroy and re-create views whenever the context changes.\n      const viewContext = this._createContextForwardProxy();\n      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {\n        injector: this.ngTemplateOutletInjector ?? undefined,\n      });\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if either is true:\n   * - the outlet changed.\n   * - the injector changed.\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    return !!changes['ngTemplateOutlet'] || !!changes['ngTemplateOutletInjector'];\n  }\n\n  /**\n   * For a given outlet instance, we create a proxy object that delegates\n   * to the user-specified context. This allows changing, or swapping out\n   * the context object completely without having to destroy/re-create the view.\n   */\n  private _createContextForwardProxy(): C {\n    return <C>new Proxy(\n      {},\n      {\n        set: (_target, prop, newValue) => {\n          if (!this.ngTemplateOutletContext) {\n            return false;\n          }\n          return Reflect.set(this.ngTemplateOutletContext, prop, newValue);\n        },\n        get: (_target, prop, receiver) => {\n          if (!this.ngTemplateOutletContext) {\n            return undefined;\n          }\n          return Reflect.get(this.ngTemplateOutletContext, prop, receiver);\n        },\n      },\n    );\n  }\n}\n"]}