{"version":3,"file":"ng_component_outlet.js","sourceRoot":"","sources":["ng_component_outlet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentRef,\n  createNgModule,\n  Directive,\n  DoCheck,\n  EnvironmentInjector,\n  Injector,\n  Input,\n  NgModuleFactory,\n  NgModuleRef,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Instantiates a {@link /api/core/Component Component} type and inserts its Host View into the current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will be destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInputs`: Optional component inputs object, which will be bind to the\n * component.\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletEnvironmentInjector`: Optional custom {@link EnvironmentInjector} which will\n * provide the component's environment.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if it exists.\n *\n * * `ngComponentOutletNgModule`: Optional NgModule class reference to allow loading another\n * module dynamically, then loading a component from that module.\n *\n * * `ngComponentOutletNgModuleFactory`: Deprecated config option that allows providing optional\n * NgModule factory to allow loading another module dynamically, then loading a component from that\n * module. Use `ngComponentOutletNgModule` instead.\n *\n * ### Syntax\n *\n * Simple\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * With inputs\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   inputs: inputsExpression;\">\n * </ng-container>\n * ```\n *\n * Customized injector/content\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized NgModule reference\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModule: ngModuleClass;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * @publicApi\n * @ngModule CommonModule\n */\n@Directive({\n  selector: '[ngComponentOutlet]',\n  exportAs: 'ngComponentOutlet',\n})\nexport class NgComponentOutlet<T = any> implements OnChanges, DoCheck, OnDestroy {\n  // TODO(crisbeto): this should be `Type<T>`, but doing so broke a few\n  // targets in a TGP so we need to do it in a major version.\n  /** Component that should be rendered in the outlet. */\n  @Input() ngComponentOutlet: Type<any> | null = null;\n\n  @Input() ngComponentOutletInputs?: Record<string, unknown>;\n  @Input() ngComponentOutletInjector?: Injector;\n  @Input() ngComponentOutletEnvironmentInjector?: EnvironmentInjector;\n  @Input() ngComponentOutletContent?: Node[][];\n\n  @Input() ngComponentOutletNgModule?: Type<any>;\n\n  private _componentRef: ComponentRef<T> | undefined;\n  private _moduleRef: NgModuleRef<any> | undefined;\n\n  /**\n   * A helper data structure that allows us to track inputs that were part of the\n   * ngComponentOutletInputs expression. Tracking inputs is necessary for proper removal of ones\n   * that are no longer referenced.\n   */\n  private _inputsUsed = new Map<string, boolean>();\n\n  /**\n   * Gets the instance of the currently-rendered component.\n   * Will be null if no component has been rendered.\n   */\n  get componentInstance(): T | null {\n    return this._componentRef?.instance ?? null;\n  }\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  private _needToReCreateNgModuleInstance(changes: SimpleChanges): boolean {\n    // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n    // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n    // were changed).\n    return (\n      changes['ngComponentOutletNgModule'] !== undefined ||\n      changes['ngComponentOutletNgModuleFactory'] !== undefined\n    );\n  }\n\n  private _needToReCreateComponentInstance(changes: SimpleChanges): boolean {\n    // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n    // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n    // were changed).\n    return (\n      changes['ngComponentOutlet'] !== undefined ||\n      changes['ngComponentOutletContent'] !== undefined ||\n      changes['ngComponentOutletInjector'] !== undefined ||\n      changes['ngComponentOutletEnvironmentInjector'] !== undefined ||\n      this._needToReCreateNgModuleInstance(changes)\n    );\n  }\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._needToReCreateComponentInstance(changes)) {\n      this._viewContainerRef.clear();\n      this._inputsUsed.clear();\n      this._componentRef = undefined;\n\n      if (this.ngComponentOutlet) {\n        const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n        if (this._needToReCreateNgModuleInstance(changes)) {\n          this._moduleRef?.destroy();\n\n          if (this.ngComponentOutletNgModule) {\n            this._moduleRef = createNgModule(\n              this.ngComponentOutletNgModule,\n              getParentInjector(injector),\n            );\n          } else {\n            this._moduleRef = undefined;\n          }\n        }\n\n        this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {\n          injector,\n          ngModuleRef: this._moduleRef,\n          projectableNodes: this.ngComponentOutletContent,\n          environmentInjector: this.ngComponentOutletEnvironmentInjector,\n        });\n      }\n    }\n  }\n\n  /** @docs-private */\n  ngDoCheck() {\n    if (this._componentRef) {\n      if (this.ngComponentOutletInputs) {\n        for (const inputName of Object.keys(this.ngComponentOutletInputs)) {\n          this._inputsUsed.set(inputName, true);\n        }\n      }\n\n      this._applyInputStateDiff(this._componentRef);\n    }\n  }\n\n  /** @docs-private */\n  ngOnDestroy() {\n    this._moduleRef?.destroy();\n  }\n\n  private _applyInputStateDiff(componentRef: ComponentRef<unknown>) {\n    for (const [inputName, touched] of this._inputsUsed) {\n      if (!touched) {\n        // The input that was previously active no longer exists and needs to be set to undefined.\n        componentRef.setInput(inputName, undefined);\n        this._inputsUsed.delete(inputName);\n      } else {\n        // Since touched is true, it can be asserted that the inputs object is not empty.\n        componentRef.setInput(inputName, this.ngComponentOutletInputs![inputName]);\n        this._inputsUsed.set(inputName, false);\n      }\n    }\n  }\n}\n\n// Helper function that returns an Injector instance of a parent NgModule.\nfunction getParentInjector(injector: Injector): Injector {\n  const parentNgModule = injector.get(NgModuleRef);\n  return parentNgModule.injector;\n}\n"]}