{"version":3,"file":"platform_navigation.js","sourceRoot":"","sources":["platform_navigation.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EACL,UAAU,GAWX,MAAM,eAAe,CAAC;AAEvB;;;;;;;;GAQG;AAEI,IAAe,kBAAkB,GAAjC,MAAe,kBAAkB;CAqBvC,CAAA;AArBqB,kBAAkB;IADvC,UAAU,CAAC,EAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,CAAE,MAAc,CAAC,UAAU,EAAC,CAAC;GAC7D,kBAAkB,CAqBvC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Injectable,\n  ɵNavigateEvent as NavigateEvent,\n  ɵNavigation as Navigation,\n  ɵNavigationCurrentEntryChangeEvent as NavigationCurrentEntryChangeEvent,\n  ɵNavigationHistoryEntry as NavigationHistoryEntry,\n  ɵNavigationNavigateOptions as NavigationNavigateOptions,\n  ɵNavigationOptions as NavigationOptions,\n  ɵNavigationReloadOptions as NavigationReloadOptions,\n  ɵNavigationResult as NavigationResult,\n  ɵNavigationTransition as NavigationTransition,\n  ɵNavigationUpdateCurrentEntryOptions as NavigationUpdateCurrentEntryOptions,\n} from '@angular/core';\n\n/**\n * This class wraps the platform Navigation API which allows server-specific and test\n * implementations.\n *\n * Browser support is limited, so this API may not be available in all environments,\n * may contain bugs, and is experimental.\n *\n * @experimental 21.0.0\n */\n@Injectable({providedIn: 'platform', useFactory: () => (window as any).navigation})\nexport abstract class PlatformNavigation implements Navigation {\n  abstract entries(): NavigationHistoryEntry[];\n  abstract currentEntry: NavigationHistoryEntry | null;\n  abstract updateCurrentEntry(options: NavigationUpdateCurrentEntryOptions): void;\n  abstract transition: NavigationTransition | null;\n  abstract canGoBack: boolean;\n  abstract canGoForward: boolean;\n  abstract navigate(url: string, options?: NavigationNavigateOptions | undefined): NavigationResult;\n  abstract reload(options?: NavigationReloadOptions | undefined): NavigationResult;\n  abstract traverseTo(key: string, options?: NavigationOptions | undefined): NavigationResult;\n  abstract back(options?: NavigationOptions | undefined): NavigationResult;\n  abstract forward(options?: NavigationOptions | undefined): NavigationResult;\n  abstract onnavigate: ((this: Navigation, ev: NavigateEvent) => any) | null;\n  abstract onnavigatesuccess: ((this: Navigation, ev: Event) => any) | null;\n  abstract onnavigateerror: ((this: Navigation, ev: ErrorEvent) => any) | null;\n  abstract oncurrententrychange:\n    | ((this: Navigation, ev: NavigationCurrentEntryChangeEvent) => any)\n    | null;\n  abstract addEventListener(type: unknown, listener: unknown, options?: unknown): void;\n  abstract removeEventListener(type: unknown, listener: unknown, options?: unknown): void;\n  abstract dispatchEvent(event: Event): boolean;\n}\n"]}