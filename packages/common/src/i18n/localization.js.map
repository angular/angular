{"version":3,"file":"localization.js","sourceRoot":"","sources":["localization.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,aAAa,IAAI,YAAY,EAAC,MAAM,eAAe,CAAC;AAEnG,OAAO,EAAC,mBAAmB,EAAE,MAAM,EAAC,MAAM,mBAAmB,CAAC;AAG9D;;GAEG;AAKI,IAAe,cAAc,GAA7B,MAAe,cAAc;CAEnC,CAAA;AAFqB,cAAc;IAJnC,UAAU,CAAC;QACV,UAAU,EAAE,MAAM;QAClB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KAC9D,CAAC;GACoB,cAAc,CAEnC;;AAED;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAC/B,KAAa,EACb,KAAe,EACf,cAA8B,EAC9B,MAAe;IAEf,IAAI,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;IAEtB,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAC;IACb,CAAC;IAED,GAAG,GAAG,cAAc,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAEtD,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAC;IACb,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QAChC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,MAAM,IAAI,YAAY,sDAEpB,SAAS,IAAI,sCAAsC,KAAK,GAAG,CAC5D,CAAC;AACJ,CAAC;AAED;;;;GAIG;AAEI,IAAM,oBAAoB,GAA1B,MAAM,oBAAqB,SAAQ,cAAc;IACtD,YAAyC,MAAc;QACrD,KAAK,EAAE,CAAC;QAD+B,WAAM,GAAN,MAAM,CAAQ;IAEvD,CAAC;IAEQ,iBAAiB,CAAC,KAAU,EAAE,MAAe;QACpD,MAAM,MAAM,GAAG,mBAAmB,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;QAEjE,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,MAAM,CAAC,IAAI;gBACd,OAAO,MAAM,CAAC;YAChB,KAAK,MAAM,CAAC,GAAG;gBACb,OAAO,KAAK,CAAC;YACf,KAAK,MAAM,CAAC,GAAG;gBACb,OAAO,KAAK,CAAC;YACf,KAAK,MAAM,CAAC,GAAG;gBACb,OAAO,KAAK,CAAC;YACf,KAAK,MAAM,CAAC,IAAI;gBACd,OAAO,MAAM,CAAC;YAChB;gBACE,OAAO,OAAO,CAAC;QACnB,CAAC;IACH,CAAC;CACF,CAAA;AAvBY,oBAAoB;IADhC,UAAU,EAAE;IAEE,WAAA,MAAM,CAAC,SAAS,CAAC,CAAA;GADnB,oBAAoB,CAuBhC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Inject, Injectable, LOCALE_ID, ÉµRuntimeError as RuntimeError} from '@angular/core';\n\nimport {getLocalePluralCase, Plural} from './locale_data_api';\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: () => new NgLocaleLocalization(inject(LOCALE_ID)),\n})\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(\n  value: number,\n  cases: string[],\n  ngLocalization: NgLocalization,\n  locale?: string,\n): string {\n  let key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new RuntimeError(\n    RuntimeErrorCode.NO_PLURAL_MESSAGE_FOUND,\n    ngDevMode && `No plural message found for value \"${value}\"`,\n  );\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\n@Injectable()\nexport class NgLocaleLocalization extends NgLocalization {\n  constructor(@Inject(LOCALE_ID) protected locale: string) {\n    super();\n  }\n\n  override getPluralCategory(value: any, locale?: string): string {\n    const plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\n}\n"]}